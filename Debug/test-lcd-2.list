
test-lcd-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000205a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040dc  08020750  08020750  00030750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000188a  0802482c  0802482c  0003482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000a8878  080260b8  080260b8  000360b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000f0  080ce930  080ce930  000de930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080cea20  080cea20  000e00ec  2**0
                  CONTENTS
  7 .ARM          00000008  080cea20  080cea20  000dea20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080cea28  080cea28  000e00ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   0000000c  080cea28  080cea28  000dea28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080cea34  080cea34  000dea34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000ec  20000000  080cea3c  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a244  200000ec  080ceb28  000e00ec  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000a330  080ceb28  000ea330  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000e00ec  2**0
                  CONTENTS, READONLY
 15 .debug_info   000b3149  00000000  00000000  000e011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00019de6  00000000  00000000  00193265  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000066a8  00000000  00000000  001ad050  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005f38  00000000  00000000  001b36f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003a8fb  00000000  00000000  001b9630  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00055ac0  00000000  00000000  001f3f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0010f93f  00000000  00000000  002499eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0035932a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001bf78  00000000  00000000  00359424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08020738 	.word	0x08020738

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	08020738 	.word	0x08020738

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000108 	.word	0x20000108
 80005d0:	20000160 	.word	0x20000160

080005d4 <HAL_UART_RxCpltCallback>:
UART_DATA Uart_data;

//Interrupt callback routine

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART5)  //current UART
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1e      	ldr	r2, [pc, #120]	; (800065c <HAL_UART_RxCpltCallback+0x88>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d136      	bne.n	8000654 <HAL_UART_RxCpltCallback+0x80>
	{
		uint8_t i;
		if (Uart_data.Rx_indx == 0)  //clear Rx_Buffer before receiving new data
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d10d      	bne.n	800060a <HAL_UART_RxCpltCallback+0x36>
		{
			for (i=0 ; i<100 ; i++) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b63      	cmp	r3, #99	; 0x63
 80005f6:	d808      	bhi.n	800060a <HAL_UART_RxCpltCallback+0x36>
				Uart_data.Rx_Buffer[i]=0;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 80005fc:	4413      	add	r3, r2
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
			for (i=0 ; i<100 ; i++) {
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	3301      	adds	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e7f3      	b.n	80005f2 <HAL_UART_RxCpltCallback+0x1e>
			}
		}

		if ((Uart_data.Rx_data[0]!=10)&&(Uart_data.Rx_data[0]!=13)) //if received data different from ascii 13 (enter)
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 800060c:	785b      	ldrb	r3, [r3, #1]
 800060e:	2b0a      	cmp	r3, #10
 8000610:	d012      	beq.n	8000638 <HAL_UART_RxCpltCallback+0x64>
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	2b0d      	cmp	r3, #13
 8000618:	d00e      	beq.n	8000638 <HAL_UART_RxCpltCallback+0x64>
		{
			Uart_data.Rx_Buffer[Uart_data.Rx_indx]=Uart_data.Rx_data[0];    //add data to Rx_Buffer
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 8000622:	785a      	ldrb	r2, [r3, #1]
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 8000626:	440b      	add	r3, r1
 8000628:	70da      	strb	r2, [r3, #3]
			Uart_data.Rx_indx++;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e008      	b.n	800064a <HAL_UART_RxCpltCallback+0x76>
		}
		else            //if received data = 13
		{
			Uart_data.Rx_indx=0;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			Uart_data.Transfer_cplt=true;//transfer complete, data is ready to read
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_UART_RxCpltCallback+0x8c>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
			UART_Task();
 8000646:	f000 febb 	bl	80013c0 <UART_Task>
		}
		HAL_UART_Receive_IT(&huart5, Uart_data.Rx_data, 1);   //activate UART receive interrupt every time
 800064a:	2201      	movs	r2, #1
 800064c:	4905      	ldr	r1, [pc, #20]	; (8000664 <HAL_UART_RxCpltCallback+0x90>)
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <HAL_UART_RxCpltCallback+0x94>)
 8000650:	f007 ff5f 	bl	8008512 <HAL_UART_Receive_IT>
	}
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40005000 	.word	0x40005000
 8000660:	20000444 	.word	0x20000444
 8000664:	20000445 	.word	0x20000445
 8000668:	200003bc 	.word	0x200003bc

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f002 f811 	bl	8002698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f847 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f99d 	bl	80009b8 <_ZL12MX_GPIO_Initv>
  MX_CRC_Init();
 800067e:	f000 f8d7 	bl	8000830 <_ZL11MX_CRC_Initv>
  MX_I2C3_Init();
 8000682:	f000 f8ed 	bl	8000860 <_ZL12MX_I2C3_Initv>
  MX_USART1_UART_Init();
 8000686:	f000 f969 	bl	800095c <_ZL19MX_USART1_UART_Initv>
  MX_UART5_Init();
 800068a:	f000 f939 	bl	8000900 <_ZL13MX_UART5_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart5, Uart_data.Rx_data, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	4917      	ldr	r1, [pc, #92]	; (80006f0 <main+0x84>)
 8000692:	4818      	ldr	r0, [pc, #96]	; (80006f4 <main+0x88>)
 8000694:	f007 ff3d 	bl	8008512 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8000698:	f015 f95e 	bl	8015958 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 800069c:	f015 f9ce 	bl	8015a3c <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0x8c>)
 80006a2:	f107 041c 	add.w	r4, r7, #28
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00e fea9 	bl	800f412 <osThreadCreate>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <main+0x90>)
 80006c4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(secondTask, StartSecondTask, osPriorityNormal, 0, 512);
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <main+0x94>)
 80006c8:	463c      	mov	r4, r7
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(secondTask), NULL);
 80006d8:	463b      	mov	r3, r7
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f00e fe98 	bl	800f412 <osThreadCreate>
 80006e2:	4602      	mov	r2, r0
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <main+0x98>)
 80006e6:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e8:	f00e fe8c 	bl	800f404 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x80>
 80006ee:	bf00      	nop
 80006f0:	20000445 	.word	0x20000445
 80006f4:	200003bc 	.word	0x200003bc
 80006f8:	0802075c 	.word	0x0802075c
 80006fc:	2000043c 	.word	0x2000043c
 8000700:	08020784 	.word	0x08020784
 8000704:	20000440 	.word	0x20000440

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0a0      	sub	sp, #128	; 0x80
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f01f f891 	bl	801f83e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2230      	movs	r2, #48	; 0x30
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f01f f882 	bl	801f83e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <SystemClock_Config+0x120>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a39      	ldr	r2, [pc, #228]	; (8000828 <SystemClock_Config+0x120>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b37      	ldr	r3, [pc, #220]	; (8000828 <SystemClock_Config+0x120>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <SystemClock_Config+0x124>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000762:	4a32      	ldr	r2, [pc, #200]	; (800082c <SystemClock_Config+0x124>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <SystemClock_Config+0x124>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000776:	2301      	movs	r3, #1
 8000778:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000788:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078a:	2304      	movs	r3, #4
 800078c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800078e:	2348      	movs	r3, #72	; 0x48
 8000790:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000796:	2303      	movs	r3, #3
 8000798:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 f8e4 	bl	800696c <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	bf14      	ite	ne
 80007aa:	2301      	movne	r3, #1
 80007ac:	2300      	moveq	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007b4:	f000 fa56 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007d2:	2102      	movs	r1, #2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f006 fb0b 	bl	8006df0 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80007ea:	f000 fa3b 	bl	8000c64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007ee:	2308      	movs	r3, #8
 80007f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80007f2:	233c      	movs	r3, #60	; 0x3c
 80007f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007f6:	2305      	movs	r3, #5
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80007fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f006 fd13 	bl	8007230 <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800081a:	f000 fa23 	bl	8000c64 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3780      	adds	r7, #128	; 0x80
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_ZL11MX_CRC_Initv+0x28>)
 8000836:	4a09      	ldr	r2, [pc, #36]	; (800085c <_ZL11MX_CRC_Initv+0x2c>)
 8000838:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <_ZL11MX_CRC_Initv+0x28>)
 800083c:	f002 f8a2 	bl	8002984 <HAL_CRC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8000850:	f000 fa08 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000360 	.word	0x20000360
 800085c:	40023000 	.word	0x40023000

08000860 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <_ZL12MX_I2C3_Initv+0x98>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <_ZL12MX_I2C3_Initv+0x9c>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 800087e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800089c:	4815      	ldr	r0, [pc, #84]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 800089e:	f004 fbf9 	bl	8005094 <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf14      	ite	ne
 80008a8:	2301      	movne	r3, #1
 80008aa:	2300      	moveq	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80008b2:	f000 f9d7 	bl	8000c64 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 80008ba:	f005 fba8 	bl	800600e <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 80008ce:	f000 f9c9 	bl	8000c64 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <_ZL12MX_I2C3_Initv+0x94>)
 80008d6:	f005 fbd6 	bl	8006086 <HAL_I2CEx_ConfigDigitalFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 80008ea:	f000 f9bb 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000368 	.word	0x20000368
 80008f8:	40005c00 	.word	0x40005c00
 80008fc:	000186a0 	.word	0x000186a0

08000900 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <_ZL13MX_UART5_Initv+0x58>)
 8000908:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 800090c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000910:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <_ZL13MX_UART5_Initv+0x54>)
 8000938:	f007 fd05 	bl	8008346 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf14      	ite	ne
 8000942:	2301      	movne	r3, #1
 8000944:	2300      	moveq	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 800094c:	f000 f98a 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200003bc 	.word	0x200003bc
 8000958:	40005000 	.word	0x40005000

0800095c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000994:	f007 fcd7 	bl	8008346 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	bf14      	ite	ne
 800099e:	2301      	movne	r3, #1
 80009a0:	2300      	moveq	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80009a8:	f000 f95c 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200003fc 	.word	0x200003fc
 80009b4:	40011000 	.word	0x40011000

080009b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
 80009d2:	4b7d      	ldr	r3, [pc, #500]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a7c      	ldr	r2, [pc, #496]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b7a      	ldr	r3, [pc, #488]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	623b      	str	r3, [r7, #32]
 80009e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
 80009ee:	4b76      	ldr	r3, [pc, #472]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a75      	ldr	r2, [pc, #468]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b73      	ldr	r3, [pc, #460]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	4b6f      	ldr	r3, [pc, #444]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a6e      	ldr	r2, [pc, #440]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b6c      	ldr	r3, [pc, #432]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	4b68      	ldr	r3, [pc, #416]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a67      	ldr	r2, [pc, #412]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b65      	ldr	r3, [pc, #404]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b61      	ldr	r3, [pc, #388]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a60      	ldr	r2, [pc, #384]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b5e      	ldr	r3, [pc, #376]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a59      	ldr	r2, [pc, #356]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <_ZL12MX_GPIO_Initv+0x210>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2116      	movs	r1, #22
 8000ab2:	4846      	ldr	r0, [pc, #280]	; (8000bcc <_ZL12MX_GPIO_Initv+0x214>)
 8000ab4:	f002 fe52 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	4844      	ldr	r0, [pc, #272]	; (8000bd0 <_ZL12MX_GPIO_Initv+0x218>)
 8000abe:	f002 fe4d 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ac8:	4842      	ldr	r0, [pc, #264]	; (8000bd4 <_ZL12MX_GPIO_Initv+0x21c>)
 8000aca:	f002 fe47 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	4840      	ldr	r0, [pc, #256]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x220>)
 8000ad6:	f002 fe41 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae0:	483d      	ldr	r0, [pc, #244]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x220>)
 8000ae2:	f002 fe3b 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ae6:	2316      	movs	r3, #22
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4833      	ldr	r0, [pc, #204]	; (8000bcc <_ZL12MX_GPIO_Initv+0x214>)
 8000afe:	f002 fb79 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b02:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b08:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <_ZL12MX_GPIO_Initv+0x224>)
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	482e      	ldr	r0, [pc, #184]	; (8000bd0 <_ZL12MX_GPIO_Initv+0x218>)
 8000b18:	f002 fb6c 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4827      	ldr	r0, [pc, #156]	; (8000bd0 <_ZL12MX_GPIO_Initv+0x218>)
 8000b34:	f002 fb5e 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <_ZL12MX_GPIO_Initv+0x224>)
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4820      	ldr	r0, [pc, #128]	; (8000bcc <_ZL12MX_GPIO_Initv+0x214>)
 8000b4c:	f002 fb52 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	481f      	ldr	r0, [pc, #124]	; (8000be0 <_ZL12MX_GPIO_Initv+0x228>)
 8000b64:	f002 fb46 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <_ZL12MX_GPIO_Initv+0x21c>)
 8000b7e:	f002 fb39 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <_ZL12MX_GPIO_Initv+0x21c>)
 8000b9c:	f002 fb2a 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ba0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <_ZL12MX_GPIO_Initv+0x220>)
 8000bba:	f002 fb1b 	bl	80031f4 <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	; 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020c00 	.word	0x40020c00
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	10120000 	.word	0x10120000
 8000be0:	40020400 	.word	0x40020400

08000be4 <_Z15StartSecondTaskPKv>:
/* USER CODE BEGIN 4 */
extern xQueueHandle messageQ;
unsigned int val = 0;
uint8_t rx_buffer[50];
void StartSecondTask(void const * argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <_Z15StartSecondTaskPKv+0x38>)
 8000bf2:	f002 fdcc 	bl	800378e <HAL_GPIO_TogglePin>
	xQueueSend(messageQ,&val,0);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <_Z15StartSecondTaskPKv+0x3c>)
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4909      	ldr	r1, [pc, #36]	; (8000c24 <_Z15StartSecondTaskPKv+0x40>)
 8000c00:	f00e ff2e 	bl	800fa60 <xQueueGenericSend>
	val++;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_Z15StartSecondTaskPKv+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <_Z15StartSecondTaskPKv+0x40>)
 8000c0c:	6013      	str	r3, [r2, #0]
    osDelay(500);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c12:	f00e fc4a 	bl	800f4aa <osDelay>

    UART_Task();
 8000c16:	f000 fbd3 	bl	80013c0 <UART_Task>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000c1a:	e7e7      	b.n	8000bec <_Z15StartSecondTaskPKv+0x8>
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	20008780 	.word	0x20008780
 8000c24:	200004b0 	.word	0x200004b0

08000c28 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000c30:	f016 fdc0 	bl	80177b4 <MX_USB_HOST_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 8000c34:	f014 ff08 	bl	8015a48 <_Z17GRAPHICS_MainTaskv>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f00e fc36 	bl	800f4aa <osDelay>
 8000c3e:	e7fb      	b.n	8000c38 <_Z16StartDefaultTaskPKv+0x10>

08000c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c52:	f001 fd43 	bl	80026dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40001000 	.word	0x40001000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_MspInit+0x54>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_MspInit+0x54>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210f      	movs	r1, #15
 8000cb6:	f06f 0001 	mvn.w	r0, #1
 8000cba:	f001 fe2b 	bl	8002914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_CRC_MspInit+0x3c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10d      	bne.n	8000cfa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_CRC_MspInit+0x40>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_CRC_MspInit+0x40>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_CRC_MspInit+0x40>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023000 	.word	0x40023000
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <HAL_I2C_MspInit+0xc4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d14b      	bne.n	8000dca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <HAL_I2C_MspInit+0xcc>)
 8000d88:	f002 fa34 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d92:	2312      	movs	r3, #18
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <HAL_I2C_MspInit+0xd0>)
 8000daa:	f002 fa23 	bl	80031f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40005c00 	.word	0x40005c00
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_I2C_MspDeInit+0x3c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10f      	bne.n	8000e16 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_I2C_MspDeInit+0x40>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_I2C_MspDeInit+0x40>)
 8000dfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <HAL_I2C_MspDeInit+0x44>)
 8000e08:	f002 fb9e 	bl	8003548 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <HAL_I2C_MspDeInit+0x48>)
 8000e12:	f002 fb99 	bl	8003548 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40005c00 	.word	0x40005c00
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_SPI_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12c      	bne.n	8000eac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000e8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000ea8:	f002 f9a4 	bl	80031f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40015000 	.word	0x40015000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40021400 	.word	0x40021400

08000ec0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_SPI_MspDeInit+0x30>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10a      	bne.n	8000ee8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_SPI_MspDeInit+0x34>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_SPI_MspDeInit+0x34>)
 8000ed8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8000ede:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_SPI_MspDeInit+0x38>)
 8000ee4:	f002 fb30 	bl	8003548 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40015000 	.word	0x40015000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40021400 	.word	0x40021400

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_TIM_Base_MspInit+0x3c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10d      	bne.n	8000f2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_TIM_Base_MspInit+0x40>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <HAL_TIM_Base_MspInit+0x40>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_TIM_Base_MspInit+0x40>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a46      	ldr	r2, [pc, #280]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d153      	bne.n	800100a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a44      	ldr	r2, [pc, #272]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a3d      	ldr	r2, [pc, #244]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482b      	ldr	r0, [pc, #172]	; (8001080 <HAL_UART_MspInit+0x140>)
 8000fd4:	f002 f90e 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4824      	ldr	r0, [pc, #144]	; (8001084 <HAL_UART_MspInit+0x144>)
 8000ff4:	f002 f8fe 	bl	80031f4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	2035      	movs	r0, #53	; 0x35
 8000ffe:	f001 fc89 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001002:	2035      	movs	r0, #53	; 0x35
 8001004:	f001 fca2 	bl	800294c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001008:	e031      	b.n	800106e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <HAL_UART_MspInit+0x148>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d12c      	bne.n	800106e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_UART_MspInit+0x13c>)
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_UART_MspInit+0x13c>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	6453      	str	r3, [r2, #68]	; 0x44
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_UART_MspInit+0x13c>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800104c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800105e:	2307      	movs	r3, #7
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <HAL_UART_MspInit+0x14c>)
 800106a:	f002 f8c3 	bl	80031f4 <HAL_GPIO_Init>
}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40005000 	.word	0x40005000
 800107c:	40023800 	.word	0x40023800
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40011000 	.word	0x40011000
 800108c:	40020000 	.word	0x40020000

08001090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f001 fc35 	bl	8002914 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80010aa:	2036      	movs	r0, #54	; 0x36
 80010ac:	f001 fc4e 	bl	800294c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <HAL_InitTick+0xa4>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <HAL_InitTick+0xa4>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_InitTick+0xa4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010cc:	f107 0210 	add.w	r2, r7, #16
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f006 f878 	bl	80071cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010dc:	f006 f84e 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 80010e0:	4603      	mov	r3, r0
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <HAL_InitTick+0xa8>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	0c9b      	lsrs	r3, r3, #18
 80010f0:	3b01      	subs	r3, #1
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_InitTick+0xac>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_InitTick+0xb0>)
 80010f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_InitTick+0xac>)
 80010fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001100:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_InitTick+0xac>)
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_InitTick+0xac>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_InitTick+0xac>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <HAL_InitTick+0xac>)
 8001116:	f006 fd29 	bl	8007b6c <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d104      	bne.n	800112a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001120:	4806      	ldr	r0, [pc, #24]	; (800113c <HAL_InitTick+0xac>)
 8001122:	f006 fd72 	bl	8007c0a <HAL_TIM_Base_Start_IT>
 8001126:	4603      	mov	r3, r0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3730      	adds	r7, #48	; 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	431bde83 	.word	0x431bde83
 800113c:	20009bf8 	.word	0x20009bf8
 8001140:	40001000 	.word	0x40001000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <UART5_IRQHandler+0x10>)
 800117e:	f007 fa1d 	bl	80085bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200003bc 	.word	0x200003bc

0800118c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <TIM6_DAC_IRQHandler+0x10>)
 8001192:	f006 fd5e 	bl	8007c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20009bf8 	.word	0x20009bf8

080011a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <OTG_HS_IRQHandler+0x10>)
 80011a6:	f002 fd93 	bl	8003cd0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000a068 	.word	0x2000a068

080011b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <LTDC_IRQHandler+0x10>)
 80011ba:	f005 f88b 	bl	80062d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20009938 	.word	0x20009938

080011c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA2D_IRQHandler+0x10>)
 80011ce:	f001 fdd2 	bl	8002d76 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200099e0 	.word	0x200099e0

080011dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_kill>:

int _kill(int pid, int sig)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011f6:	f01e facb 	bl	801f790 <__errno>
 80011fa:	4602      	mov	r2, r0
 80011fc:	2316      	movs	r3, #22
 80011fe:	6013      	str	r3, [r2, #0]
	return -1;
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_exit>:

void _exit (int status)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ffe7 	bl	80011ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800121e:	e7fe      	b.n	800121e <_exit+0x12>

08001220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e00a      	b.n	8001248 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001232:	f3af 8000 	nop.w
 8001236:	4601      	mov	r1, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <_read+0x12>
	}

return len;
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e009      	b.n	8001280 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf1      	blt.n	800126c <_write+0x12>
	}
	return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_close>:

int _close(int file)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ba:	605a      	str	r2, [r3, #4]
	return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_isatty>:

int _isatty(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x50>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x16>
		heap_end = &end;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <_sbrk+0x50>)
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <_sbrk+0x54>)
 8001310:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <_sbrk+0x50>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <_sbrk+0x50>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	466a      	mov	r2, sp
 8001322:	4293      	cmp	r3, r2
 8001324:	d907      	bls.n	8001336 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001326:	f01e fa33 	bl	801f790 <__errno>
 800132a:	4602      	mov	r2, r0
 800132c:	230c      	movs	r3, #12
 800132e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	e006      	b.n	8001344 <_sbrk+0x48>
	}

	heap_end += incr;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <_sbrk+0x50>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a03      	ldr	r2, [pc, #12]	; (800134c <_sbrk+0x50>)
 8001340:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200004b4 	.word	0x200004b4
 8001350:	2000a330 	.word	0x2000a330

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <SystemInit+0x60>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <SystemInit+0x60>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <SystemInit+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <SystemInit+0x64>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <SystemInit+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <SystemInit+0x64>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <SystemInit+0x64>)
 8001380:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <SystemInit+0x64>)
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <SystemInit+0x68>)
 800138e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <SystemInit+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <SystemInit+0x64>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SystemInit+0x60>)
 80013a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a8:	609a      	str	r2, [r3, #8]
#endif
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	24003010 	.word	0x24003010

080013c0 <UART_Task>:
void UART_Init(){
	//HAL_UART_Receive_IT(&huart5, Rx_data, 1);
	UART_Reset_CMD();
}

void UART_Task(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	if (Uart_data.Transfer_cplt)
 80013c4:	4b73      	ldr	r3, [pc, #460]	; (8001594 <UART_Task+0x1d4>)
 80013c6:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80df 	beq.w	800158e <UART_Task+0x1ce>
	{
		//Check data reveive here
		//freq=xyz
		if 	((  Uart_data.Rx_Buffer[0]  == 'f')
 80013d0:	4b70      	ldr	r3, [pc, #448]	; (8001594 <UART_Task+0x1d4>)
 80013d2:	78db      	ldrb	r3, [r3, #3]
 80013d4:	2b66      	cmp	r3, #102	; 0x66
 80013d6:	d12e      	bne.n	8001436 <UART_Task+0x76>
			&& (Uart_data.Rx_Buffer[1]  == 'r')
 80013d8:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <UART_Task+0x1d4>)
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	2b72      	cmp	r3, #114	; 0x72
 80013de:	d12a      	bne.n	8001436 <UART_Task+0x76>
			&& (Uart_data.Rx_Buffer[2]  == 'e')
 80013e0:	4b6c      	ldr	r3, [pc, #432]	; (8001594 <UART_Task+0x1d4>)
 80013e2:	795b      	ldrb	r3, [r3, #5]
 80013e4:	2b65      	cmp	r3, #101	; 0x65
 80013e6:	d126      	bne.n	8001436 <UART_Task+0x76>
			&& (Uart_data.Rx_Buffer[3]  == 'q'))
 80013e8:	4b6a      	ldr	r3, [pc, #424]	; (8001594 <UART_Task+0x1d4>)
 80013ea:	799b      	ldrb	r3, [r3, #6]
 80013ec:	2b71      	cmp	r3, #113	; 0x71
 80013ee:	d122      	bne.n	8001436 <UART_Task+0x76>
		{
			Uart_data.Uart_cmd = UART_CMD_FREQ;
 80013f0:	4b68      	ldr	r3, [pc, #416]	; (8001594 <UART_Task+0x1d4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			Uart_data.Uart_cmd_value = (Uart_data.Rx_Buffer[5] - '0')*100 + (Uart_data.Rx_Buffer[6] - '0')*10 +  (Uart_data.Rx_Buffer[7] - '0');
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <UART_Task+0x1d4>)
 80013fa:	7a1b      	ldrb	r3, [r3, #8]
 80013fc:	461a      	mov	r2, r3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4413      	add	r3, r2
 8001402:	461a      	mov	r2, r3
 8001404:	0091      	lsls	r1, r2, #2
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b60      	ldr	r3, [pc, #384]	; (8001594 <UART_Task+0x1d4>)
 8001412:	7a5b      	ldrb	r3, [r3, #9]
 8001414:	4619      	mov	r1, r3
 8001416:	0089      	lsls	r1, r1, #2
 8001418:	440b      	add	r3, r1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4413      	add	r3, r2
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <UART_Task+0x1d4>)
 8001424:	7a9b      	ldrb	r3, [r3, #10]
 8001426:	4413      	add	r3, r2
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3330      	adds	r3, #48	; 0x30
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b59      	ldr	r3, [pc, #356]	; (8001594 <UART_Task+0x1d4>)
 8001430:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001434:	e0a0      	b.n	8001578 <UART_Task+0x1b8>
		}
		//duty=xyz
		else if		((  Uart_data.Rx_Buffer[0]  == 'd')
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <UART_Task+0x1d4>)
 8001438:	78db      	ldrb	r3, [r3, #3]
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d12e      	bne.n	800149c <UART_Task+0xdc>
					&& (Uart_data.Rx_Buffer[1]  == 'u')
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <UART_Task+0x1d4>)
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	2b75      	cmp	r3, #117	; 0x75
 8001444:	d12a      	bne.n	800149c <UART_Task+0xdc>
					&& (Uart_data.Rx_Buffer[2]  == 't')
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <UART_Task+0x1d4>)
 8001448:	795b      	ldrb	r3, [r3, #5]
 800144a:	2b74      	cmp	r3, #116	; 0x74
 800144c:	d126      	bne.n	800149c <UART_Task+0xdc>
					&& (Uart_data.Rx_Buffer[3]  == 'y'))
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <UART_Task+0x1d4>)
 8001450:	799b      	ldrb	r3, [r3, #6]
 8001452:	2b79      	cmp	r3, #121	; 0x79
 8001454:	d122      	bne.n	800149c <UART_Task+0xdc>
		{
			Uart_data.Uart_cmd = UART_CMD_DUTY;
 8001456:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <UART_Task+0x1d4>)
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			Uart_data.Uart_cmd_value = (Uart_data.Rx_Buffer[5] - '0')*100 + (Uart_data.Rx_Buffer[6] - '0')*10 +  (Uart_data.Rx_Buffer[7] - '0');
 800145e:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <UART_Task+0x1d4>)
 8001460:	7a1b      	ldrb	r3, [r3, #8]
 8001462:	461a      	mov	r2, r3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	4413      	add	r3, r2
 8001468:	461a      	mov	r2, r3
 800146a:	0091      	lsls	r1, r2, #2
 800146c:	461a      	mov	r2, r3
 800146e:	460b      	mov	r3, r1
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <UART_Task+0x1d4>)
 8001478:	7a5b      	ldrb	r3, [r3, #9]
 800147a:	4619      	mov	r1, r3
 800147c:	0089      	lsls	r1, r1, #2
 800147e:	440b      	add	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4413      	add	r3, r2
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <UART_Task+0x1d4>)
 800148a:	7a9b      	ldrb	r3, [r3, #10]
 800148c:	4413      	add	r3, r2
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3330      	adds	r3, #48	; 0x30
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <UART_Task+0x1d4>)
 8001496:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800149a:	e06d      	b.n	8001578 <UART_Task+0x1b8>
		}
		//power=xyz
		else if		((  Uart_data.Rx_Buffer[0]  == 'p')
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <UART_Task+0x1d4>)
 800149e:	78db      	ldrb	r3, [r3, #3]
 80014a0:	2b70      	cmp	r3, #112	; 0x70
 80014a2:	d132      	bne.n	800150a <UART_Task+0x14a>
					&& (Uart_data.Rx_Buffer[1]  == 'o')
 80014a4:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <UART_Task+0x1d4>)
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	2b6f      	cmp	r3, #111	; 0x6f
 80014aa:	d12e      	bne.n	800150a <UART_Task+0x14a>
					&& (Uart_data.Rx_Buffer[2]  == 'w')
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <UART_Task+0x1d4>)
 80014ae:	795b      	ldrb	r3, [r3, #5]
 80014b0:	2b77      	cmp	r3, #119	; 0x77
 80014b2:	d12a      	bne.n	800150a <UART_Task+0x14a>
					&& (Uart_data.Rx_Buffer[3]  == 'e')
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <UART_Task+0x1d4>)
 80014b6:	799b      	ldrb	r3, [r3, #6]
 80014b8:	2b65      	cmp	r3, #101	; 0x65
 80014ba:	d126      	bne.n	800150a <UART_Task+0x14a>
					&& (Uart_data.Rx_Buffer[4]  == 'r'))
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <UART_Task+0x1d4>)
 80014be:	79db      	ldrb	r3, [r3, #7]
 80014c0:	2b72      	cmp	r3, #114	; 0x72
 80014c2:	d122      	bne.n	800150a <UART_Task+0x14a>
		{
			Uart_data.Uart_cmd = UART_CMD_POWER;
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <UART_Task+0x1d4>)
 80014c6:	2203      	movs	r2, #3
 80014c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			Uart_data.Uart_cmd_value = (Uart_data.Rx_Buffer[6] - '0')*100 + (Uart_data.Rx_Buffer[7] - '0')*10 +  (Uart_data.Rx_Buffer[8] - '0');
 80014cc:	4b31      	ldr	r3, [pc, #196]	; (8001594 <UART_Task+0x1d4>)
 80014ce:	7a5b      	ldrb	r3, [r3, #9]
 80014d0:	461a      	mov	r2, r3
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	0091      	lsls	r1, r2, #2
 80014da:	461a      	mov	r2, r3
 80014dc:	460b      	mov	r3, r1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <UART_Task+0x1d4>)
 80014e6:	7a9b      	ldrb	r3, [r3, #10]
 80014e8:	4619      	mov	r1, r3
 80014ea:	0089      	lsls	r1, r1, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <UART_Task+0x1d4>)
 80014f8:	7adb      	ldrb	r3, [r3, #11]
 80014fa:	4413      	add	r3, r2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3330      	adds	r3, #48	; 0x30
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <UART_Task+0x1d4>)
 8001504:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001508:	e036      	b.n	8001578 <UART_Task+0x1b8>
		}
		//lum=xyz
		else if		((  Uart_data.Rx_Buffer[0]  == 'l')
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <UART_Task+0x1d4>)
 800150c:	78db      	ldrb	r3, [r3, #3]
 800150e:	2b6c      	cmp	r3, #108	; 0x6c
 8001510:	d12a      	bne.n	8001568 <UART_Task+0x1a8>
					&& (Uart_data.Rx_Buffer[1]  == 'u')
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <UART_Task+0x1d4>)
 8001514:	791b      	ldrb	r3, [r3, #4]
 8001516:	2b75      	cmp	r3, #117	; 0x75
 8001518:	d126      	bne.n	8001568 <UART_Task+0x1a8>
					&& (Uart_data.Rx_Buffer[2]  == 'm'))
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <UART_Task+0x1d4>)
 800151c:	795b      	ldrb	r3, [r3, #5]
 800151e:	2b6d      	cmp	r3, #109	; 0x6d
 8001520:	d122      	bne.n	8001568 <UART_Task+0x1a8>
		{
			Uart_data.Uart_cmd = UART_CMD_LUMINOSITY;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <UART_Task+0x1d4>)
 8001524:	2202      	movs	r2, #2
 8001526:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			Uart_data.Uart_cmd_value = (Uart_data.Rx_Buffer[4] - '0')*100 + (Uart_data.Rx_Buffer[5] - '0')*10 +  (Uart_data.Rx_Buffer[6] - '0');
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <UART_Task+0x1d4>)
 800152c:	79db      	ldrb	r3, [r3, #7]
 800152e:	461a      	mov	r2, r3
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	4413      	add	r3, r2
 8001534:	461a      	mov	r2, r3
 8001536:	0091      	lsls	r1, r2, #2
 8001538:	461a      	mov	r2, r3
 800153a:	460b      	mov	r3, r1
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <UART_Task+0x1d4>)
 8001544:	7a1b      	ldrb	r3, [r3, #8]
 8001546:	4619      	mov	r1, r3
 8001548:	0089      	lsls	r1, r1, #2
 800154a:	440b      	add	r3, r1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <UART_Task+0x1d4>)
 8001556:	7a5b      	ldrb	r3, [r3, #9]
 8001558:	4413      	add	r3, r2
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3330      	adds	r3, #48	; 0x30
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <UART_Task+0x1d4>)
 8001562:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001566:	e007      	b.n	8001578 <UART_Task+0x1b8>
		}
		else{
			Uart_data.Uart_cmd = UART_CMD_ERROR;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <UART_Task+0x1d4>)
 800156a:	2205      	movs	r2, #5
 800156c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			Uart_data.Uart_cmd_value = 0;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <UART_Task+0x1d4>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		}
		UART_Send_CMD();
 8001578:	f000 f810 	bl	800159c <UART_Send_CMD>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800157c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <UART_Task+0x1d8>)
 8001582:	f002 f904 	bl	800378e <HAL_GPIO_TogglePin>
		Uart_data.Transfer_cplt = false;
 8001586:	4b03      	ldr	r3, [pc, #12]	; (8001594 <UART_Task+0x1d4>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	}
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000444 	.word	0x20000444
 8001598:	40021800 	.word	0x40021800

0800159c <UART_Send_CMD>:
void UART_Reset_CMD(){
	Uart_data.Uart_cmd = UART_CMD_ERROR;
	Uart_data.Uart_cmd_value = 0;
}
void UART_Send_CMD(){
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b09a      	sub	sp, #104	; 0x68
 80015a0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t buffer[100];
	uint8_t len;
	switch (Uart_data.Uart_cmd)
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <UART_Send_CMD+0xbc>)
 80015aa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d01c      	beq.n	80015ec <UART_Send_CMD+0x50>
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d032      	beq.n	800161c <UART_Send_CMD+0x80>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d000      	beq.n	80015bc <UART_Send_CMD+0x20>
			sprintf(buffer,"UART_CMD_POWER\r\n");
			len=strlen(buffer);
			HAL_UART_Transmit(&huart5, buffer, len, 1000);
			break;
		default:
			break;
 80015ba:	e048      	b.n	800164e <UART_Send_CMD+0xb2>
			sprintf(buffer,"UART_CMD_FREQ\r\n");
 80015bc:	463b      	mov	r3, r7
 80015be:	4a27      	ldr	r2, [pc, #156]	; (800165c <UART_Send_CMD+0xc0>)
 80015c0:	461c      	mov	r4, r3
 80015c2:	4613      	mov	r3, r2
 80015c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			len=strlen(buffer);
 80015ca:	463b      	mov	r3, r7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe0f 	bl	80001f0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			HAL_UART_Transmit(&huart5, buffer, len, 1000);
 80015d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4639      	mov	r1, r7
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <UART_Send_CMD+0xc4>)
 80015e6:	f006 fefb 	bl	80083e0 <HAL_UART_Transmit>
			break;
 80015ea:	e030      	b.n	800164e <UART_Send_CMD+0xb2>
			sprintf(buffer,"UART_CMD_DUTY\r\n");
 80015ec:	463b      	mov	r3, r7
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <UART_Send_CMD+0xc8>)
 80015f0:	461c      	mov	r4, r3
 80015f2:	4613      	mov	r3, r2
 80015f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			len=strlen(buffer);
 80015fa:	463b      	mov	r3, r7
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdf7 	bl	80001f0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			HAL_UART_Transmit(&huart5, buffer, len, 1000);
 8001608:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800160c:	b29a      	uxth	r2, r3
 800160e:	4639      	mov	r1, r7
 8001610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <UART_Send_CMD+0xc4>)
 8001616:	f006 fee3 	bl	80083e0 <HAL_UART_Transmit>
			break;
 800161a:	e018      	b.n	800164e <UART_Send_CMD+0xb2>
			sprintf(buffer,"UART_CMD_POWER\r\n");
 800161c:	463b      	mov	r3, r7
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <UART_Send_CMD+0xcc>)
 8001620:	461c      	mov	r4, r3
 8001622:	4615      	mov	r5, r2
 8001624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	7023      	strb	r3, [r4, #0]
			len=strlen(buffer);
 800162c:	463b      	mov	r3, r7
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fdde 	bl	80001f0 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			HAL_UART_Transmit(&huart5, buffer, len, 1000);
 800163a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800163e:	b29a      	uxth	r2, r3
 8001640:	4639      	mov	r1, r7
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <UART_Send_CMD+0xc4>)
 8001648:	f006 feca 	bl	80083e0 <HAL_UART_Transmit>
			break;
 800164c:	bf00      	nop
	}
}
 800164e:	bf00      	nop
 8001650:	3768      	adds	r7, #104	; 0x68
 8001652:	46bd      	mov	sp, r7
 8001654:	bdb0      	pop	{r4, r5, r7, pc}
 8001656:	bf00      	nop
 8001658:	20000444 	.word	0x20000444
 800165c:	080207a0 	.word	0x080207a0
 8001660:	200003bc 	.word	0x200003bc
 8001664:	080207b0 	.word	0x080207b0
 8001668:	080207c0 	.word	0x080207c0

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001670:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001672:	e003      	b.n	800167c <LoopCopyDataInit>

08001674 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001676:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001678:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800167a:	3104      	adds	r1, #4

0800167c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001680:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001684:	d3f6      	bcc.n	8001674 <CopyDataInit>
  ldr  r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001688:	e002      	b.n	8001690 <LoopFillZerobss>

0800168a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800168a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800168c:	f842 3b04 	str.w	r3, [r2], #4

08001690 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001694:	d3f9      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001696:	f7ff fe5d 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f01e f891 	bl	801f7c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7fe ffe5 	bl	800066c <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80016a8:	080cea3c 	.word	0x080cea3c
  ldr  r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016b0:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 80016b4:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 80016b8:	2000a330 	.word	0x2000a330

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>

080016be <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016c2:	f000 fded 	bl	80022a0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80016c6:	20ca      	movs	r0, #202	; 0xca
 80016c8:	f000 f943 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016cc:	20c3      	movs	r0, #195	; 0xc3
 80016ce:	f000 f94d 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016d2:	2008      	movs	r0, #8
 80016d4:	f000 f94a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80016d8:	2050      	movs	r0, #80	; 0x50
 80016da:	f000 f947 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80016de:	20cf      	movs	r0, #207	; 0xcf
 80016e0:	f000 f937 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 f941 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80016ea:	20c1      	movs	r0, #193	; 0xc1
 80016ec:	f000 f93e 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80016f0:	2030      	movs	r0, #48	; 0x30
 80016f2:	f000 f93b 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80016f6:	20ed      	movs	r0, #237	; 0xed
 80016f8:	f000 f92b 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80016fc:	2064      	movs	r0, #100	; 0x64
 80016fe:	f000 f935 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001702:	2003      	movs	r0, #3
 8001704:	f000 f932 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001708:	2012      	movs	r0, #18
 800170a:	f000 f92f 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800170e:	2081      	movs	r0, #129	; 0x81
 8001710:	f000 f92c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001714:	20e8      	movs	r0, #232	; 0xe8
 8001716:	f000 f91c 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800171a:	2085      	movs	r0, #133	; 0x85
 800171c:	f000 f926 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001720:	2000      	movs	r0, #0
 8001722:	f000 f923 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001726:	2078      	movs	r0, #120	; 0x78
 8001728:	f000 f920 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800172c:	20cb      	movs	r0, #203	; 0xcb
 800172e:	f000 f910 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001732:	2039      	movs	r0, #57	; 0x39
 8001734:	f000 f91a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001738:	202c      	movs	r0, #44	; 0x2c
 800173a:	f000 f917 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800173e:	2000      	movs	r0, #0
 8001740:	f000 f914 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001744:	2034      	movs	r0, #52	; 0x34
 8001746:	f000 f911 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800174a:	2002      	movs	r0, #2
 800174c:	f000 f90e 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001750:	20f7      	movs	r0, #247	; 0xf7
 8001752:	f000 f8fe 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001756:	2020      	movs	r0, #32
 8001758:	f000 f908 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800175c:	20ea      	movs	r0, #234	; 0xea
 800175e:	f000 f8f8 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f902 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001768:	2000      	movs	r0, #0
 800176a:	f000 f8ff 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800176e:	20b1      	movs	r0, #177	; 0xb1
 8001770:	f000 f8ef 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001774:	2000      	movs	r0, #0
 8001776:	f000 f8f9 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800177a:	201b      	movs	r0, #27
 800177c:	f000 f8f6 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001780:	20b6      	movs	r0, #182	; 0xb6
 8001782:	f000 f8e6 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001786:	200a      	movs	r0, #10
 8001788:	f000 f8f0 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800178c:	20a2      	movs	r0, #162	; 0xa2
 800178e:	f000 f8ed 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001792:	20c0      	movs	r0, #192	; 0xc0
 8001794:	f000 f8dd 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001798:	2010      	movs	r0, #16
 800179a:	f000 f8e7 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800179e:	20c1      	movs	r0, #193	; 0xc1
 80017a0:	f000 f8d7 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80017a4:	2010      	movs	r0, #16
 80017a6:	f000 f8e1 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80017aa:	20c5      	movs	r0, #197	; 0xc5
 80017ac:	f000 f8d1 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80017b0:	2045      	movs	r0, #69	; 0x45
 80017b2:	f000 f8db 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80017b6:	2015      	movs	r0, #21
 80017b8:	f000 f8d8 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80017bc:	20c7      	movs	r0, #199	; 0xc7
 80017be:	f000 f8c8 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80017c2:	2090      	movs	r0, #144	; 0x90
 80017c4:	f000 f8d2 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017c8:	2036      	movs	r0, #54	; 0x36
 80017ca:	f000 f8c2 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017ce:	20c8      	movs	r0, #200	; 0xc8
 80017d0:	f000 f8cc 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017d4:	20f2      	movs	r0, #242	; 0xf2
 80017d6:	f000 f8bc 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 f8c6 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80017e0:	20b0      	movs	r0, #176	; 0xb0
 80017e2:	f000 f8b6 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80017e6:	20c2      	movs	r0, #194	; 0xc2
 80017e8:	f000 f8c0 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017ec:	20b6      	movs	r0, #182	; 0xb6
 80017ee:	f000 f8b0 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f000 f8ba 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80017f8:	20a7      	movs	r0, #167	; 0xa7
 80017fa:	f000 f8b7 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80017fe:	2027      	movs	r0, #39	; 0x27
 8001800:	f000 f8b4 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001804:	2004      	movs	r0, #4
 8001806:	f000 f8b1 	bl	800196c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800180a:	202a      	movs	r0, #42	; 0x2a
 800180c:	f000 f8a1 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001810:	2000      	movs	r0, #0
 8001812:	f000 f8ab 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f8a8 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800181c:	2000      	movs	r0, #0
 800181e:	f000 f8a5 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001822:	20ef      	movs	r0, #239	; 0xef
 8001824:	f000 f8a2 	bl	800196c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001828:	202b      	movs	r0, #43	; 0x2b
 800182a:	f000 f892 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f89c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f899 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800183a:	2001      	movs	r0, #1
 800183c:	f000 f896 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001840:	203f      	movs	r0, #63	; 0x3f
 8001842:	f000 f893 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001846:	20f6      	movs	r0, #246	; 0xf6
 8001848:	f000 f883 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800184c:	2001      	movs	r0, #1
 800184e:	f000 f88d 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f88a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001858:	2006      	movs	r0, #6
 800185a:	f000 f887 	bl	800196c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800185e:	202c      	movs	r0, #44	; 0x2c
 8001860:	f000 f877 	bl	8001952 <ili9341_WriteReg>
  LCD_Delay(200);
 8001864:	20c8      	movs	r0, #200	; 0xc8
 8001866:	f014 f85b 	bl	8015920 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800186a:	2026      	movs	r0, #38	; 0x26
 800186c:	f000 f871 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001870:	2001      	movs	r0, #1
 8001872:	f000 f87b 	bl	800196c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001876:	20e0      	movs	r0, #224	; 0xe0
 8001878:	f000 f86b 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800187c:	200f      	movs	r0, #15
 800187e:	f000 f875 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001882:	2029      	movs	r0, #41	; 0x29
 8001884:	f000 f872 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001888:	2024      	movs	r0, #36	; 0x24
 800188a:	f000 f86f 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800188e:	200c      	movs	r0, #12
 8001890:	f000 f86c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001894:	200e      	movs	r0, #14
 8001896:	f000 f869 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800189a:	2009      	movs	r0, #9
 800189c:	f000 f866 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80018a0:	204e      	movs	r0, #78	; 0x4e
 80018a2:	f000 f863 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80018a6:	2078      	movs	r0, #120	; 0x78
 80018a8:	f000 f860 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80018ac:	203c      	movs	r0, #60	; 0x3c
 80018ae:	f000 f85d 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018b2:	2009      	movs	r0, #9
 80018b4:	f000 f85a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80018b8:	2013      	movs	r0, #19
 80018ba:	f000 f857 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018be:	2005      	movs	r0, #5
 80018c0:	f000 f854 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80018c4:	2017      	movs	r0, #23
 80018c6:	f000 f851 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018ca:	2011      	movs	r0, #17
 80018cc:	f000 f84e 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 f84b 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80018d6:	20e1      	movs	r0, #225	; 0xe1
 80018d8:	f000 f83b 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 f845 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80018e2:	2016      	movs	r0, #22
 80018e4:	f000 f842 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018e8:	201b      	movs	r0, #27
 80018ea:	f000 f83f 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018ee:	2004      	movs	r0, #4
 80018f0:	f000 f83c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018f4:	2011      	movs	r0, #17
 80018f6:	f000 f839 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80018fa:	2007      	movs	r0, #7
 80018fc:	f000 f836 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001900:	2031      	movs	r0, #49	; 0x31
 8001902:	f000 f833 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001906:	2033      	movs	r0, #51	; 0x33
 8001908:	f000 f830 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800190c:	2042      	movs	r0, #66	; 0x42
 800190e:	f000 f82d 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001912:	2005      	movs	r0, #5
 8001914:	f000 f82a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001918:	200c      	movs	r0, #12
 800191a:	f000 f827 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800191e:	200a      	movs	r0, #10
 8001920:	f000 f824 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001924:	2028      	movs	r0, #40	; 0x28
 8001926:	f000 f821 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800192a:	202f      	movs	r0, #47	; 0x2f
 800192c:	f000 f81e 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001930:	200f      	movs	r0, #15
 8001932:	f000 f81b 	bl	800196c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001936:	2011      	movs	r0, #17
 8001938:	f000 f80b 	bl	8001952 <ili9341_WriteReg>
  LCD_Delay(200);
 800193c:	20c8      	movs	r0, #200	; 0xc8
 800193e:	f013 ffef 	bl	8015920 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001942:	2029      	movs	r0, #41	; 0x29
 8001944:	f000 f805 	bl	8001952 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001948:	202c      	movs	r0, #44	; 0x2c
 800194a:	f000 f802 	bl	8001952 <ili9341_WriteReg>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}

08001952 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fd38 	bl	80023d4 <LCD_IO_WriteReg>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fd09 	bl	8002390 <LCD_IO_WriteData>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fa59 	bl	8001e4c <stmpe811_GetInstance>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2bff      	cmp	r3, #255	; 0xff
 80019a2:	d112      	bne.n	80019ca <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 fa51 	bl	8001e4c <stmpe811_GetInstance>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d80a      	bhi.n	80019ca <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	b2d1      	uxtb	r1, r2
 80019ba:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <stmpe811_Init+0x4c>)
 80019bc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80019be:	f000 fd2b 	bl	8002418 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f807 	bl	80019d8 <stmpe811_Reset>
    }
  }
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200004b8 	.word	0x200004b8

080019d8 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2202      	movs	r2, #2
 80019e8:	2103      	movs	r1, #3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fd20 	bl	8002430 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80019f0:	200a      	movs	r0, #10
 80019f2:	f000 fd5a 	bl	80024aa <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2200      	movs	r2, #0
 80019fc:	2103      	movs	r1, #3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fd16 	bl	8002430 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001a04:	2002      	movs	r0, #2
 8001a06:	f000 fd50 	bl	80024aa <IOE_Delay>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001a12:	b590      	push	{r4, r7, lr}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001a1c:	f000 fcfc 	bl	8002418 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fd15 	bl	8002456 <IOE_Read>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2101      	movs	r1, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fd0c 	bl	8002456 <IOE_Read>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001a42:	4323      	orrs	r3, r4
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	b29b      	uxth	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}

08001a50 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2109      	movs	r1, #9
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fcf6 	bl	8002456 <IOE_Read>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	2109      	movs	r1, #9
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fcd6 	bl	8002430 <IOE_Write>
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2109      	movs	r1, #9
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fcd8 	bl	8002456 <IOE_Read>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	2109      	movs	r1, #9
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fcb8 	bl	8002430 <IOE_Write>
    
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	80fb      	strh	r3, [r7, #6]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fcb7 	bl	8002456 <IOE_Read>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	210a      	movs	r1, #10
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fc97 	bl	8002430 <IOE_Write>
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	460a      	mov	r2, r1
 8001b14:	80fb      	strh	r3, [r7, #6]
 8001b16:	4613      	mov	r3, r2
 8001b18:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	210a      	movs	r1, #10
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 fc96 	bl	8002456 <IOE_Read>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001b2e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	b25a      	sxtb	r2, r3
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	210a      	movs	r1, #10
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fc71 	bl	8002430 <IOE_Write>
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460a      	mov	r2, r1
 8001b60:	80fb      	strh	r3, [r7, #6]
 8001b62:	4613      	mov	r3, r2
 8001b64:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	210b      	movs	r1, #11
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fc72 	bl	8002456 <IOE_Read>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	797b      	ldrb	r3, [r7, #5]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	b2db      	uxtb	r3, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	4613      	mov	r3, r2
 8001b92:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	797a      	ldrb	r2, [r7, #5]
 8001b9a:	210b      	movs	r1, #11
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fc47 	bl	8002430 <IOE_Write>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	6039      	str	r1, [r7, #0]
 8001bb4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2117      	movs	r1, #23
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fc48 	bl	8002456 <IOE_Read>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	2117      	movs	r1, #23
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fc23 	bl	8002430 <IOE_Write>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2104      	movs	r1, #4
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fc27 	bl	8002456 <IOE_Read>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	f023 0304 	bic.w	r3, r3, #4
 8001c12:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fc07 	bl	8002430 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	21f0      	movs	r1, #240	; 0xf0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffbf 	bl	8001baa <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fbf7 	bl	8002430 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2249      	movs	r2, #73	; 0x49
 8001c48:	2120      	movs	r1, #32
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fbf0 	bl	8002430 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001c50:	2002      	movs	r0, #2
 8001c52:	f000 fc2a 	bl	80024aa <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2121      	movs	r1, #33	; 0x21
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fbe6 	bl	8002430 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	229a      	movs	r2, #154	; 0x9a
 8001c6a:	2141      	movs	r1, #65	; 0x41
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fbdf 	bl	8002430 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2201      	movs	r2, #1
 8001c78:	214a      	movs	r1, #74	; 0x4a
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fbd8 	bl	8002430 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2201      	movs	r2, #1
 8001c86:	214b      	movs	r1, #75	; 0x4b
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fbd1 	bl	8002430 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2200      	movs	r2, #0
 8001c94:	214b      	movs	r1, #75	; 0x4b
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fbca 	bl	8002430 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2156      	movs	r1, #86	; 0x56
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fbc3 	bl	8002430 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2158      	movs	r1, #88	; 0x58
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fbbc 	bl	8002430 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2140      	movs	r1, #64	; 0x40
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fbb5 	bl	8002430 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	210b      	movs	r1, #11
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fbae 	bl	8002430 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f000 fbe8 	bl	80024aa <IOE_Delay>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fbad 	bl	8002456 <IOE_Read>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b80      	cmp	r3, #128	; 0x80
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	214c      	movs	r1, #76	; 0x4c
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fb9b 	bl	8002456 <IOE_Read>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d010      	beq.n	8001d48 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e00d      	b.n	8001d48 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2201      	movs	r2, #1
 8001d32:	214b      	movs	r1, #75	; 0x4b
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fb7b 	bl	8002430 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2200      	movs	r2, #0
 8001d40:	214b      	movs	r1, #75	; 0x4b
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fb74 	bl	8002430 <IOE_Write>
  }
  
  return ret;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	b2d8      	uxtb	r0, r3
 8001d64:	f107 0210 	add.w	r2, r7, #16
 8001d68:	2304      	movs	r3, #4
 8001d6a:	21d7      	movs	r1, #215	; 0xd7
 8001d6c:	f000 fb86 	bl	800247c <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001d70:	7c3b      	ldrb	r3, [r7, #16]
 8001d72:	061a      	lsls	r2, r3, #24
 8001d74:	7c7b      	ldrb	r3, [r7, #17]
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	7cbb      	ldrb	r3, [r7, #18]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	7cfa      	ldrb	r2, [r7, #19]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	0d1b      	lsrs	r3, r3, #20
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2201      	movs	r2, #1
 8001da6:	214b      	movs	r1, #75	; 0x4b
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fb41 	bl	8002430 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2200      	movs	r2, #0
 8001db4:	214b      	movs	r1, #75	; 0x4b
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fb3a 	bl	8002430 <IOE_Write>
}
 8001dbc:	bf00      	nop
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8001dce:	f000 fb29 	bl	8002424 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	211f      	movs	r1, #31
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe76 	bl	8001ac8 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe36 	bl	8001a50 <stmpe811_EnableGlobalIT>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fe47 	bl	8001a8c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	211f      	movs	r1, #31
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe81 	bl	8001b0a <stmpe811_DisableITSource>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	211f      	movs	r1, #31
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe99 	bl	8001b56 <stmpe811_ReadGITStatus>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	211f      	movs	r1, #31
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fea1 	bl	8001b84 <stmpe811_ClearGlobalIT>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e00b      	b.n	8001e78 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <stmpe811_GetInstance+0x40>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	88fa      	ldrh	r2, [r7, #6]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d101      	bne.n	8001e72 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	e006      	b.n	8001e80 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	3301      	adds	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d9f0      	bls.n	8001e60 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001e7e:	23ff      	movs	r3, #255	; 0xff
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	200004b8 	.word	0x200004b8

08001e90 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a33      	ldr	r2, [pc, #204]	; (8001f6c <I2Cx_MspInit+0xdc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d15f      	bne.n	8001f62 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a2a      	ldr	r2, [pc, #168]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8001eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001ee0:	2312      	movs	r3, #18
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001eec:	2304      	movs	r3, #4
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481f      	ldr	r0, [pc, #124]	; (8001f74 <I2Cx_MspInit+0xe4>)
 8001ef8:	f001 f97c 	bl	80031f4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f00:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	481b      	ldr	r0, [pc, #108]	; (8001f78 <I2Cx_MspInit+0xe8>)
 8001f0a:	f001 f973 	bl	80031f4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f34:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <I2Cx_MspInit+0xe0>)
 8001f3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f40:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	210f      	movs	r1, #15
 8001f46:	2048      	movs	r0, #72	; 0x48
 8001f48:	f000 fce4 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f4c:	2048      	movs	r0, #72	; 0x48
 8001f4e:	f000 fcfd 	bl	800294c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	210f      	movs	r1, #15
 8001f56:	2049      	movs	r0, #73	; 0x49
 8001f58:	f000 fcdc 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8001f5c:	2049      	movs	r0, #73	; 0x49
 8001f5e:	f000 fcf5 	bl	800294c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40005c00 	.word	0x40005c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020800 	.word	0x40020800

08001f7c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001f80:	4814      	ldr	r0, [pc, #80]	; (8001fd4 <I2Cx_Init+0x58>)
 8001f82:	f003 fcff 	bl	8005984 <HAL_I2C_GetState>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d121      	bne.n	8001fd0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <I2Cx_Init+0x58>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <I2Cx_Init+0x5c>)
 8001f90:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <I2Cx_Init+0x58>)
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <I2Cx_Init+0x60>)
 8001f96:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <I2Cx_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001faa:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fc6:	f7ff ff63 	bl	8001e90 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001fca:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <I2Cx_Init+0x58>)
 8001fcc:	f003 f862 	bl	8005094 <HAL_I2C_Init>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20009c38 	.word	0x20009c38
 8001fd8:	40005c00 	.word	0x40005c00
 8001fdc:	000186a0 	.word	0x000186a0

08001fe0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <I2Cx_ITConfig+0x58>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <I2Cx_ITConfig+0x58>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <I2Cx_ITConfig+0x58>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002006:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <I2Cx_ITConfig+0x5c>)
 8002012:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	4619      	mov	r1, r3
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <I2Cx_ITConfig+0x60>)
 800201a:	f001 f8eb 	bl	80031f4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800201e:	2200      	movs	r2, #0
 8002020:	210f      	movs	r1, #15
 8002022:	2028      	movs	r0, #40	; 0x28
 8002024:	f000 fc76 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002028:	2028      	movs	r0, #40	; 0x28
 800202a:	f000 fc8f 	bl	800294c <HAL_NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	10210000 	.word	0x10210000
 8002040:	40020000 	.word	0x40020000

08002044 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af04      	add	r7, sp, #16
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	460b      	mov	r3, r1
 8002050:	71bb      	strb	r3, [r7, #6]
 8002052:	4613      	mov	r3, r2
 8002054:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	b299      	uxth	r1, r3
 800205e:	79bb      	ldrb	r3, [r7, #6]
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <I2Cx_WriteData+0x4c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	2301      	movs	r3, #1
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	1d7b      	adds	r3, r7, #5
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2301      	movs	r3, #1
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <I2Cx_WriteData+0x50>)
 8002074:	f003 f966 	bl	8005344 <HAL_I2C_Mem_Write>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002082:	f000 f863 	bl	800214c <I2Cx_Error>
  }        
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000002c 	.word	0x2000002c
 8002094:	20009c38 	.word	0x20009c38

08002098 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af04      	add	r7, sp, #16
 800209e:	4603      	mov	r3, r0
 80020a0:	460a      	mov	r2, r1
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	4613      	mov	r3, r2
 80020a6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	b299      	uxth	r1, r3
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <I2Cx_ReadData+0x50>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	2301      	movs	r3, #1
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	f107 030e 	add.w	r3, r7, #14
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2301      	movs	r3, #1
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <I2Cx_ReadData+0x54>)
 80020cc:	f003 fa34 	bl	8005538 <HAL_I2C_Mem_Read>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80020da:	f000 f837 	bl	800214c <I2Cx_Error>
  
  }
  return value;
 80020de:	7bbb      	ldrb	r3, [r7, #14]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000002c 	.word	0x2000002c
 80020ec:	20009c38 	.word	0x20009c38

080020f0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	603a      	str	r2, [r7, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	460b      	mov	r3, r1
 8002100:	71bb      	strb	r3, [r7, #6]
 8002102:	4613      	mov	r3, r2
 8002104:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	b299      	uxth	r1, r3
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <I2Cx_ReadBuffer+0x54>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	88bb      	ldrh	r3, [r7, #4]
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2301      	movs	r3, #1
 8002122:	4809      	ldr	r0, [pc, #36]	; (8002148 <I2Cx_ReadBuffer+0x58>)
 8002124:	f003 fa08 	bl	8005538 <HAL_I2C_Mem_Read>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002132:	2300      	movs	r3, #0
 8002134:	e002      	b.n	800213c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002136:	f000 f809 	bl	800214c <I2Cx_Error>

    return 1;
 800213a:	2301      	movs	r3, #1
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000002c 	.word	0x2000002c
 8002148:	20009c38 	.word	0x20009c38

0800214c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <I2Cx_Error+0x14>)
 8002152:	f003 f8c7 	bl	80052e4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002156:	f7ff ff11 	bl	8001f7c <I2Cx_Init>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20009c38 	.word	0x20009c38

08002164 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002168:	4819      	ldr	r0, [pc, #100]	; (80021d0 <SPIx_Init+0x6c>)
 800216a:	f005 fc44 	bl	80079f6 <HAL_SPI_GetState>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d12b      	bne.n	80021cc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <SPIx_Init+0x6c>)
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <SPIx_Init+0x70>)
 8002178:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <SPIx_Init+0x6c>)
 800217c:	2218      	movs	r2, #24
 800217e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <SPIx_Init+0x6c>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <SPIx_Init+0x6c>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <SPIx_Init+0x6c>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <SPIx_Init+0x6c>)
 8002194:	2200      	movs	r2, #0
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <SPIx_Init+0x6c>)
 800219a:	2207      	movs	r2, #7
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <SPIx_Init+0x6c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <SPIx_Init+0x6c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <SPIx_Init+0x6c>)
 80021ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <SPIx_Init+0x6c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SPIx_Init+0x6c>)
 80021ba:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021be:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <SPIx_Init+0x6c>)
 80021c2:	f000 f833 	bl	800222c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80021c6:	4802      	ldr	r0, [pc, #8]	; (80021d0 <SPIx_Init+0x6c>)
 80021c8:	f005 fa55 	bl	8007676 <HAL_SPI_Init>
  } 
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200004bc 	.word	0x200004bc
 80021d4:	40015000 	.word	0x40015000

080021d8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <SPIx_Write+0x34>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	1db9      	adds	r1, r7, #6
 80021ec:	2201      	movs	r2, #1
 80021ee:	4808      	ldr	r0, [pc, #32]	; (8002210 <SPIx_Write+0x38>)
 80021f0:	f005 facd 	bl	800778e <HAL_SPI_Transmit>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80021fe:	f000 f809 	bl	8002214 <SPIx_Error>
  }
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000030 	.word	0x20000030
 8002210:	200004bc 	.word	0x200004bc

08002214 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <SPIx_Error+0x14>)
 800221a:	f005 fa90 	bl	800773e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800221e:	f7ff ffa1 	bl	8002164 <SPIx_Init>
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200004bc 	.word	0x200004bc

0800222c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <SPIx_MspInit+0x6c>)
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	4a16      	ldr	r2, [pc, #88]	; (8002298 <SPIx_MspInit+0x6c>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002242:	6453      	str	r3, [r2, #68]	; 0x44
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <SPIx_MspInit+0x6c>)
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <SPIx_MspInit+0x6c>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <SPIx_MspInit+0x6c>)
 800225a:	f043 0320 	orr.w	r3, r3, #32
 800225e:	6313      	str	r3, [r2, #48]	; 0x30
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <SPIx_MspInit+0x6c>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800226c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002276:	2302      	movs	r3, #2
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800227a:	2301      	movs	r3, #1
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800227e:	2305      	movs	r3, #5
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <SPIx_MspInit+0x70>)
 800228a:	f000 ffb3 	bl	80031f4 <HAL_GPIO_Init>
}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40021400 	.word	0x40021400

080022a0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <LCD_IO_Init+0xe0>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d164      	bne.n	8002378 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <LCD_IO_Init+0xe0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <LCD_IO_Init+0xe4>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <LCD_IO_Init+0xe4>)
 80022be:	f043 0308 	orr.w	r3, r3, #8
 80022c2:	6313      	str	r3, [r2, #48]	; 0x30
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <LCD_IO_Init+0xe4>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80022d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4619      	mov	r1, r3
 80022e8:	4827      	ldr	r0, [pc, #156]	; (8002388 <LCD_IO_Init+0xe8>)
 80022ea:	f000 ff83 	bl	80031f4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <LCD_IO_Init+0xe4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a23      	ldr	r2, [pc, #140]	; (8002384 <LCD_IO_Init+0xe4>)
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <LCD_IO_Init+0xe4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800230a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	4619      	mov	r1, r3
 8002322:	4819      	ldr	r0, [pc, #100]	; (8002388 <LCD_IO_Init+0xe8>)
 8002324:	f000 ff66 	bl	80031f4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <LCD_IO_Init+0xe4>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <LCD_IO_Init+0xe4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <LCD_IO_Init+0xe4>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002344:	2304      	movs	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002350:	2302      	movs	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4619      	mov	r1, r3
 800235a:	480c      	ldr	r0, [pc, #48]	; (800238c <LCD_IO_Init+0xec>)
 800235c:	f000 ff4a 	bl	80031f4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002360:	2200      	movs	r2, #0
 8002362:	2104      	movs	r1, #4
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <LCD_IO_Init+0xec>)
 8002366:	f001 f9f9 	bl	800375c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800236a:	2201      	movs	r2, #1
 800236c:	2104      	movs	r1, #4
 800236e:	4807      	ldr	r0, [pc, #28]	; (800238c <LCD_IO_Init+0xec>)
 8002370:	f001 f9f4 	bl	800375c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002374:	f7ff fef6 	bl	8002164 <SPIx_Init>
  }
}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000514 	.word	0x20000514
 8002384:	40023800 	.word	0x40023800
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40020800 	.word	0x40020800

08002390 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a0:	480a      	ldr	r0, [pc, #40]	; (80023cc <LCD_IO_WriteData+0x3c>)
 80023a2:	f001 f9db 	bl	800375c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80023a6:	2200      	movs	r2, #0
 80023a8:	2104      	movs	r1, #4
 80023aa:	4809      	ldr	r0, [pc, #36]	; (80023d0 <LCD_IO_WriteData+0x40>)
 80023ac:	f001 f9d6 	bl	800375c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff10 	bl	80021d8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023b8:	2201      	movs	r2, #1
 80023ba:	2104      	movs	r1, #4
 80023bc:	4804      	ldr	r0, [pc, #16]	; (80023d0 <LCD_IO_WriteData+0x40>)
 80023be:	f001 f9cd 	bl	800375c <HAL_GPIO_WritePin>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40020800 	.word	0x40020800

080023d4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e4:	480a      	ldr	r0, [pc, #40]	; (8002410 <LCD_IO_WriteReg+0x3c>)
 80023e6:	f001 f9b9 	bl	800375c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80023ea:	2200      	movs	r2, #0
 80023ec:	2104      	movs	r1, #4
 80023ee:	4809      	ldr	r0, [pc, #36]	; (8002414 <LCD_IO_WriteReg+0x40>)
 80023f0:	f001 f9b4 	bl	800375c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff feed 	bl	80021d8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023fe:	2201      	movs	r2, #1
 8002400:	2104      	movs	r1, #4
 8002402:	4804      	ldr	r0, [pc, #16]	; (8002414 <LCD_IO_WriteReg+0x40>)
 8002404:	f001 f9aa 	bl	800375c <HAL_GPIO_WritePin>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40020800 	.word	0x40020800

08002418 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800241c:	f7ff fdae 	bl	8001f7c <I2Cx_Init>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002428:	f7ff fdda 	bl	8001fe0 <I2Cx_ITConfig>
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	460b      	mov	r3, r1
 800243c:	71bb      	strb	r3, [r7, #6]
 800243e:	4613      	mov	r3, r2
 8002440:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002442:	797a      	ldrb	r2, [r7, #5]
 8002444:	79b9      	ldrb	r1, [r7, #6]
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fdfb 	bl	8002044 <I2Cx_WriteData>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	460a      	mov	r2, r1
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	4613      	mov	r3, r2
 8002464:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002466:	79ba      	ldrb	r2, [r7, #6]
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe13 	bl	8002098 <I2Cx_ReadData>
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	603a      	str	r2, [r7, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	460b      	mov	r3, r1
 800248c:	71bb      	strb	r3, [r7, #6]
 800248e:	4613      	mov	r3, r2
 8002490:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002492:	88bb      	ldrh	r3, [r7, #4]
 8002494:	79b9      	ldrb	r1, [r7, #6]
 8002496:	79f8      	ldrb	r0, [r7, #7]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	f7ff fe29 	bl	80020f0 <I2Cx_ReadBuffer>
 800249e:	4603      	mov	r3, r0
 80024a0:	b29b      	uxth	r3, r3
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  //HAL_Delay(Delay);
  osDelay(Delay);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f00c fff9 	bl	800f4aa <osDelay>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	460a      	mov	r2, r1
 80024ca:	80fb      	strh	r3, [r7, #6]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80024d4:	4a13      	ldr	r2, [pc, #76]	; (8002524 <BSP_TS_Init+0x64>)
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <BSP_TS_Init+0x68>)
 80024dc:	88bb      	ldrh	r3, [r7, #4]
 80024de:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <BSP_TS_Init+0x6c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2082      	movs	r0, #130	; 0x82
 80024e6:	4798      	blx	r3
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	f640 0311 	movw	r3, #2065	; 0x811
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d104      	bne.n	80024fe <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <BSP_TS_Init+0x70>)
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <BSP_TS_Init+0x6c>)
 80024f8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <BSP_TS_Init+0x70>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2082      	movs	r0, #130	; 0x82
 800250c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <BSP_TS_Init+0x70>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2082      	movs	r0, #130	; 0x82
 8002516:	4798      	blx	r3
  }

  return ret;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000051c 	.word	0x2000051c
 8002528:	2000051e 	.word	0x2000051e
 800252c:	20000004 	.word	0x20000004
 8002530:	20000518 	.word	0x20000518

08002534 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800253c:	4b4f      	ldr	r3, [pc, #316]	; (800267c <BSP_TS_GetState+0x148>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2082      	movs	r0, #130	; 0x82
 8002544:	4798      	blx	r3
 8002546:	4603      	mov	r3, r0
 8002548:	b29a      	uxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 808d 	beq.w	8002672 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8002558:	4b48      	ldr	r3, [pc, #288]	; (800267c <BSP_TS_GetState+0x148>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f107 020c 	add.w	r2, r7, #12
 8002562:	f107 010e 	add.w	r1, r7, #14
 8002566:	2082      	movs	r0, #130	; 0x82
 8002568:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800256a:	89bb      	ldrh	r3, [r7, #12]
 800256c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002570:	b29b      	uxth	r3, r3
 8002572:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8002574:	89bb      	ldrh	r3, [r7, #12]
 8002576:	4a42      	ldr	r2, [pc, #264]	; (8002680 <BSP_TS_GetState+0x14c>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8002580:	8abb      	ldrh	r3, [r7, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	82bb      	strh	r3, [r7, #20]
 800258a:	e008      	b.n	800259e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <BSP_TS_GetState+0x150>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	8aba      	ldrh	r2, [r7, #20]
 8002592:	429a      	cmp	r2, r3
 8002594:	d903      	bls.n	800259e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <BSP_TS_GetState+0x150>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	3b01      	subs	r3, #1
 800259c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800259e:	8abb      	ldrh	r3, [r7, #20]
 80025a0:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80025a2:	89fb      	ldrh	r3, [r7, #14]
 80025a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d806      	bhi.n	80025ba <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80025ac:	89fb      	ldrh	r3, [r7, #14]
 80025ae:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80025b2:	330e      	adds	r3, #14
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	81fb      	strh	r3, [r7, #14]
 80025b8:	e005      	b.n	80025c6 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80025c0:	3308      	adds	r3, #8
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <BSP_TS_GetState+0x154>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80025d2:	8afb      	ldrh	r3, [r7, #22]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	82fb      	strh	r3, [r7, #22]
 80025dc:	e008      	b.n	80025f0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <BSP_TS_GetState+0x158>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	8afa      	ldrh	r2, [r7, #22]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d903      	bls.n	80025f0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <BSP_TS_GetState+0x158>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80025f0:	8afb      	ldrh	r3, [r7, #22]
 80025f2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b25      	ldr	r3, [pc, #148]	; (8002690 <BSP_TS_GetState+0x15c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d906      	bls.n	800260e <BSP_TS_GetState+0xda>
 8002600:	89fa      	ldrh	r2, [r7, #14]
 8002602:	4b23      	ldr	r3, [pc, #140]	; (8002690 <BSP_TS_GetState+0x15c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	b29b      	uxth	r3, r3
 800260c:	e005      	b.n	800261a <BSP_TS_GetState+0xe6>
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <BSP_TS_GetState+0x15c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29a      	uxth	r2, r3
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800261c:	89bb      	ldrh	r3, [r7, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <BSP_TS_GetState+0x160>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d906      	bls.n	8002636 <BSP_TS_GetState+0x102>
 8002628:	89ba      	ldrh	r2, [r7, #12]
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <BSP_TS_GetState+0x160>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	b29b      	uxth	r3, r3
 8002634:	e005      	b.n	8002642 <BSP_TS_GetState+0x10e>
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <BSP_TS_GetState+0x160>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29a      	uxth	r2, r3
 800263c:	89bb      	ldrh	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	b29b      	uxth	r3, r3
 8002642:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8002644:	8a7a      	ldrh	r2, [r7, #18]
 8002646:	8a3b      	ldrh	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	2b05      	cmp	r3, #5
 800264c:	dd07      	ble.n	800265e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800264e:	89fb      	ldrh	r3, [r7, #14]
 8002650:	461a      	mov	r2, r3
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <BSP_TS_GetState+0x15c>)
 8002654:	601a      	str	r2, [r3, #0]
      _y = y; 
 8002656:	89bb      	ldrh	r3, [r7, #12]
 8002658:	461a      	mov	r2, r3
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <BSP_TS_GetState+0x160>)
 800265c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <BSP_TS_GetState+0x15c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <BSP_TS_GetState+0x160>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	809a      	strh	r2, [r3, #4]
  }
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000518 	.word	0x20000518
 8002680:	ba2e8ba3 	.word	0xba2e8ba3
 8002684:	2000051e 	.word	0x2000051e
 8002688:	88888889 	.word	0x88888889
 800268c:	2000051c 	.word	0x2000051c
 8002690:	20000520 	.word	0x20000520
 8002694:	20000524 	.word	0x20000524

08002698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <HAL_Init+0x40>)
 80026a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_Init+0x40>)
 80026ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <HAL_Init+0x40>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f000 f91c 	bl	80028fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7fe fce2 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026cc:	f7fe fad2 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000034 	.word	0x20000034
 8002700:	20009c8c 	.word	0x20009c8c

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20009c8c 	.word	0x20009c8c

0800271c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ffee 	bl	8002704 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d005      	beq.n	8002742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_Delay+0x40>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002742:	bf00      	nop
 8002744:	f7ff ffde 	bl	8002704 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d8f7      	bhi.n	8002744 <HAL_Delay+0x28>
  {
  }
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000034 	.word	0x20000034

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db10      	blt.n	8002834 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4909      	ldr	r1, [pc, #36]	; (8002840 <__NVIC_DisableIRQ+0x40>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	3320      	adds	r3, #32
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800282c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002830:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff2a 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002926:	f7ff ff3f 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f7ff ffb1 	bl	8002898 <NVIC_EncodePriority>
 8002936:	4602      	mov	r2, r0
 8002938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff80 	bl	8002844 <__NVIC_SetPriority>
}
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff32 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff42 	bl	8002800 <__NVIC_DisableIRQ>
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e011      	b.n	80029ba <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	795b      	ldrb	r3, [r3, #5]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe f990 	bl	8000ccc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e00c      	b.n	80029fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2205      	movs	r2, #5
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e03b      	b.n	8002a90 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f013 fdff 	bl	8016630 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	f023 0107 	bic.w	r1, r3, #7
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68d1      	ldr	r1, [r2, #12]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e05f      	b.n	8002b6a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002aaa:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <HAL_DMA2D_DeInit+0xdc>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02e      	beq.n	8002b14 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f8c1 	bl	8002c4c <HAL_DMA2D_Abort>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d021      	beq.n	8002b14 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e04a      	b.n	8002b6a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d108      	bne.n	8002af4 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8f7 	bl	8002cd8 <HAL_DMA2D_CLUTLoading_Abort>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d011      	beq.n	8002b14 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e03a      	b.n	8002b6a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d108      	bne.n	8002b14 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002b02:	2101      	movs	r1, #1
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8e7 	bl	8002cd8 <HAL_DMA2D_CLUTLoading_Abort>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e02a      	b.n	8002b6a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	223f      	movs	r2, #63	; 0x3f
 8002b22:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f013 fd97 	bl	8016680 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800

08002b78 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_DMA2D_Start_IT+0x1c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e020      	b.n	8002bd6 <HAL_DMA2D_Start_IT+0x5e>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa84 	bl	80030bc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af02      	add	r7, sp, #8
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e024      	b.n	8002c44 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fa4d 	bl	80030bc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002c30:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0205 	bic.w	r2, r3, #5
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0204 	orr.w	r2, r2, #4
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7ff fd4c 	bl	8002704 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002c6e:	e017      	b.n	8002ca0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002c70:	f7ff fd48 	bl	8002704 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c7e:	d90f      	bls.n	8002ca0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e017      	b.n	8002cd0 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e0      	bne.n	8002c70 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3324      	adds	r3, #36	; 0x24
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0204 	orr.w	r2, r2, #4
 8002cf8:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d103      	bne.n	8002d08 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	331c      	adds	r3, #28
 8002d06:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002d08:	f7ff fcfc 	bl	8002704 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002d0e:	e017      	b.n	8002d40 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002d10:	f7ff fcf8 	bl	8002704 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d1e:	d90f      	bls.n	8002d40 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2203      	movs	r2, #3
 8002d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e016      	b.n	8002d6e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e1      	bne.n	8002d10 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d026      	beq.n	8002de6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d021      	beq.n	8002de6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d026      	beq.n	8002e3e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d021      	beq.n	8002e3e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e08:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2204      	movs	r2, #4
 8002e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d026      	beq.n	8002e96 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d021      	beq.n	8002e96 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e60:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2208      	movs	r2, #8
 8002e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	f043 0204 	orr.w	r2, r3, #4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f853 	bl	8002f6e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d024      	beq.n	8002f1c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01f      	beq.n	8002f1c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01f      	beq.n	8002f66 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01a      	beq.n	8002f66 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f80e 	bl	8002f82 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA2D_ConfigLayer+0x20>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e079      	b.n	80030ac <HAL_DMA2D_ConfigLayer+0x114>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	3318      	adds	r3, #24
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fe2:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002fe4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b0a      	cmp	r3, #10
 8002fec:	d003      	beq.n	8002ff6 <HAL_DMA2D_ConfigLayer+0x5e>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b09      	cmp	r3, #9
 8002ff4:	d107      	bne.n	8003006 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	e005      	b.n	8003012 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d120      	bne.n	800305a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	ea02 0103 	and.w	r1, r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	430a      	orrs	r2, r1
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b0a      	cmp	r3, #10
 8003040:	d003      	beq.n	800304a <HAL_DMA2D_ConfigLayer+0xb2>
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b09      	cmp	r3, #9
 8003048:	d127      	bne.n	800309a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
 8003058:	e01f      	b.n	800309a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	43db      	mvns	r3, r3
 8003064:	ea02 0103 	and.w	r1, r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	430a      	orrs	r2, r1
 8003070:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b0a      	cmp	r3, #10
 8003082:	d003      	beq.n	800308c <HAL_DMA2D_ConfigLayer+0xf4>
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b09      	cmp	r3, #9
 800308a:	d106      	bne.n	800309a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003098:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	ff03000f 	.word	0xff03000f

080030bc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80030bc:	b480      	push	{r7}
 80030be:	b08b      	sub	sp, #44	; 0x2c
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	041a      	lsls	r2, r3, #16
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f4:	d174      	bne.n	80031e0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030fc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003104:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800310c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	431a      	orrs	r2, r3
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	4313      	orrs	r3, r2
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
 800312c:	e053      	b.n	80031d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4313      	orrs	r3, r2
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	e048      	b.n	80031d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d111      	bne.n	8003170 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	0cdb      	lsrs	r3, r3, #19
 8003150:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	0a9b      	lsrs	r3, r3, #10
 8003156:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	08db      	lsrs	r3, r3, #3
 800315c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	02db      	lsls	r3, r3, #11
 8003166:	4313      	orrs	r3, r2
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	e032      	b.n	80031d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d117      	bne.n	80031a8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	0fdb      	lsrs	r3, r3, #31
 800317c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	0cdb      	lsrs	r3, r3, #19
 8003182:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	0adb      	lsrs	r3, r3, #11
 8003188:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	029b      	lsls	r3, r3, #10
 8003198:	431a      	orrs	r2, r3
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	03db      	lsls	r3, r3, #15
 800319e:	4313      	orrs	r3, r2
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	e016      	b.n	80031d6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	0f1b      	lsrs	r3, r3, #28
 80031ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	0d1b      	lsrs	r3, r3, #20
 80031b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	0b1b      	lsrs	r3, r3, #12
 80031b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	011a      	lsls	r2, r3, #4
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	431a      	orrs	r2, r3
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	031b      	lsls	r3, r3, #12
 80031ce:	4313      	orrs	r3, r2
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031de:	e003      	b.n	80031e8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	60da      	str	r2, [r3, #12]
}
 80031e8:	bf00      	nop
 80031ea:	372c      	adds	r7, #44	; 0x2c
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e177      	b.n	8003500 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003210:	2201      	movs	r2, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 8166 	bne.w	80034fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x4a>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b12      	cmp	r3, #18
 800323c:	d123      	bne.n	8003286 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	08da      	lsrs	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3208      	adds	r2, #8
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	2203      	movs	r2, #3
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d00b      	beq.n	80032da <HAL_GPIO_Init+0xe6>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ce:	2b11      	cmp	r3, #17
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b12      	cmp	r3, #18
 80032d8:	d130      	bne.n	800333c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	2203      	movs	r2, #3
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003310:	2201      	movs	r2, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 0201 	and.w	r2, r3, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80c0 	beq.w	80034fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_GPIO_Init+0x320>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	4a64      	ldr	r2, [pc, #400]	; (8003514 <HAL_GPIO_Init+0x320>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003388:	6453      	str	r3, [r2, #68]	; 0x44
 800338a:	4b62      	ldr	r3, [pc, #392]	; (8003514 <HAL_GPIO_Init+0x320>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003396:	4a60      	ldr	r2, [pc, #384]	; (8003518 <HAL_GPIO_Init+0x324>)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a57      	ldr	r2, [pc, #348]	; (800351c <HAL_GPIO_Init+0x328>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d037      	beq.n	8003432 <HAL_GPIO_Init+0x23e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a56      	ldr	r2, [pc, #344]	; (8003520 <HAL_GPIO_Init+0x32c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d031      	beq.n	800342e <HAL_GPIO_Init+0x23a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a55      	ldr	r2, [pc, #340]	; (8003524 <HAL_GPIO_Init+0x330>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02b      	beq.n	800342a <HAL_GPIO_Init+0x236>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a54      	ldr	r2, [pc, #336]	; (8003528 <HAL_GPIO_Init+0x334>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d025      	beq.n	8003426 <HAL_GPIO_Init+0x232>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a53      	ldr	r2, [pc, #332]	; (800352c <HAL_GPIO_Init+0x338>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01f      	beq.n	8003422 <HAL_GPIO_Init+0x22e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a52      	ldr	r2, [pc, #328]	; (8003530 <HAL_GPIO_Init+0x33c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d019      	beq.n	800341e <HAL_GPIO_Init+0x22a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a51      	ldr	r2, [pc, #324]	; (8003534 <HAL_GPIO_Init+0x340>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_GPIO_Init+0x226>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a50      	ldr	r2, [pc, #320]	; (8003538 <HAL_GPIO_Init+0x344>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00d      	beq.n	8003416 <HAL_GPIO_Init+0x222>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4f      	ldr	r2, [pc, #316]	; (800353c <HAL_GPIO_Init+0x348>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <HAL_GPIO_Init+0x21e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4e      	ldr	r2, [pc, #312]	; (8003540 <HAL_GPIO_Init+0x34c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_GPIO_Init+0x21a>
 800340a:	2309      	movs	r3, #9
 800340c:	e012      	b.n	8003434 <HAL_GPIO_Init+0x240>
 800340e:	230a      	movs	r3, #10
 8003410:	e010      	b.n	8003434 <HAL_GPIO_Init+0x240>
 8003412:	2308      	movs	r3, #8
 8003414:	e00e      	b.n	8003434 <HAL_GPIO_Init+0x240>
 8003416:	2307      	movs	r3, #7
 8003418:	e00c      	b.n	8003434 <HAL_GPIO_Init+0x240>
 800341a:	2306      	movs	r3, #6
 800341c:	e00a      	b.n	8003434 <HAL_GPIO_Init+0x240>
 800341e:	2305      	movs	r3, #5
 8003420:	e008      	b.n	8003434 <HAL_GPIO_Init+0x240>
 8003422:	2304      	movs	r3, #4
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x240>
 8003426:	2303      	movs	r3, #3
 8003428:	e004      	b.n	8003434 <HAL_GPIO_Init+0x240>
 800342a:	2302      	movs	r3, #2
 800342c:	e002      	b.n	8003434 <HAL_GPIO_Init+0x240>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_GPIO_Init+0x240>
 8003432:	2300      	movs	r3, #0
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	f002 0203 	and.w	r2, r2, #3
 800343a:	0092      	lsls	r2, r2, #2
 800343c:	4093      	lsls	r3, r2
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003444:	4934      	ldr	r1, [pc, #208]	; (8003518 <HAL_GPIO_Init+0x324>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003452:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <HAL_GPIO_Init+0x350>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003476:	4a33      	ldr	r2, [pc, #204]	; (8003544 <HAL_GPIO_Init+0x350>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_GPIO_Init+0x350>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a0:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_GPIO_Init+0x350>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_GPIO_Init+0x350>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ca:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <HAL_GPIO_Init+0x350>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_GPIO_Init+0x350>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_GPIO_Init+0x350>)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3301      	adds	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2b0f      	cmp	r3, #15
 8003504:	f67f ae84 	bls.w	8003210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003508:	bf00      	nop
 800350a:	3724      	adds	r7, #36	; 0x24
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40023800 	.word	0x40023800
 8003518:	40013800 	.word	0x40013800
 800351c:	40020000 	.word	0x40020000
 8003520:	40020400 	.word	0x40020400
 8003524:	40020800 	.word	0x40020800
 8003528:	40020c00 	.word	0x40020c00
 800352c:	40021000 	.word	0x40021000
 8003530:	40021400 	.word	0x40021400
 8003534:	40021800 	.word	0x40021800
 8003538:	40021c00 	.word	0x40021c00
 800353c:	40022000 	.word	0x40022000
 8003540:	40022400 	.word	0x40022400
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e0d9      	b.n	8003718 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003564:	2201      	movs	r2, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	429a      	cmp	r2, r3
 800357c:	f040 80c9 	bne.w	8003712 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003580:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_GPIO_DeInit+0x1e4>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a62      	ldr	r2, [pc, #392]	; (8003730 <HAL_GPIO_DeInit+0x1e8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d037      	beq.n	800361a <HAL_GPIO_DeInit+0xd2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a61      	ldr	r2, [pc, #388]	; (8003734 <HAL_GPIO_DeInit+0x1ec>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d031      	beq.n	8003616 <HAL_GPIO_DeInit+0xce>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a60      	ldr	r2, [pc, #384]	; (8003738 <HAL_GPIO_DeInit+0x1f0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02b      	beq.n	8003612 <HAL_GPIO_DeInit+0xca>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a5f      	ldr	r2, [pc, #380]	; (800373c <HAL_GPIO_DeInit+0x1f4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d025      	beq.n	800360e <HAL_GPIO_DeInit+0xc6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a5e      	ldr	r2, [pc, #376]	; (8003740 <HAL_GPIO_DeInit+0x1f8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <HAL_GPIO_DeInit+0xc2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <HAL_GPIO_DeInit+0x1fc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d019      	beq.n	8003606 <HAL_GPIO_DeInit+0xbe>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a5c      	ldr	r2, [pc, #368]	; (8003748 <HAL_GPIO_DeInit+0x200>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_GPIO_DeInit+0xba>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a5b      	ldr	r2, [pc, #364]	; (800374c <HAL_GPIO_DeInit+0x204>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00d      	beq.n	80035fe <HAL_GPIO_DeInit+0xb6>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a5a      	ldr	r2, [pc, #360]	; (8003750 <HAL_GPIO_DeInit+0x208>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_DeInit+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a59      	ldr	r2, [pc, #356]	; (8003754 <HAL_GPIO_DeInit+0x20c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_GPIO_DeInit+0xae>
 80035f2:	2309      	movs	r3, #9
 80035f4:	e012      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 80035f6:	230a      	movs	r3, #10
 80035f8:	e010      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 80035fa:	2308      	movs	r3, #8
 80035fc:	e00e      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 80035fe:	2307      	movs	r3, #7
 8003600:	e00c      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 8003602:	2306      	movs	r3, #6
 8003604:	e00a      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 8003606:	2305      	movs	r3, #5
 8003608:	e008      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 800360a:	2304      	movs	r3, #4
 800360c:	e006      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 800360e:	2303      	movs	r3, #3
 8003610:	e004      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 8003612:	2302      	movs	r3, #2
 8003614:	e002      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_GPIO_DeInit+0xd4>
 800361a:	2300      	movs	r3, #0
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	f002 0203 	and.w	r2, r2, #3
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	4093      	lsls	r3, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d132      	bne.n	8003692 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	220f      	movs	r2, #15
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800363c:	4a3b      	ldr	r2, [pc, #236]	; (800372c <HAL_GPIO_DeInit+0x1e4>)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	43da      	mvns	r2, r3
 800364c:	4837      	ldr	r0, [pc, #220]	; (800372c <HAL_GPIO_DeInit+0x1e4>)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	400a      	ands	r2, r1
 8003654:	3302      	adds	r3, #2
 8003656:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800365a:	4b3f      	ldr	r3, [pc, #252]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	43db      	mvns	r3, r3
 8003662:	493d      	ldr	r1, [pc, #244]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 8003664:	4013      	ands	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003668:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	4939      	ldr	r1, [pc, #228]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 8003672:	4013      	ands	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003676:	4b38      	ldr	r3, [pc, #224]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43db      	mvns	r3, r3
 800367e:	4936      	ldr	r1, [pc, #216]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 8003680:	4013      	ands	r3, r2
 8003682:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	43db      	mvns	r3, r3
 800368c:	4932      	ldr	r1, [pc, #200]	; (8003758 <HAL_GPIO_DeInit+0x210>)
 800368e:	4013      	ands	r3, r2
 8003690:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	2103      	movs	r1, #3
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	401a      	ands	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	08d2      	lsrs	r2, r2, #3
 80036c8:	4019      	ands	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3208      	adds	r2, #8
 80036ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2103      	movs	r1, #3
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	2101      	movs	r1, #1
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	401a      	ands	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2103      	movs	r1, #3
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	401a      	ands	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	f67f af22 	bls.w	8003564 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40013800 	.word	0x40013800
 8003730:	40020000 	.word	0x40020000
 8003734:	40020400 	.word	0x40020400
 8003738:	40020800 	.word	0x40020800
 800373c:	40020c00 	.word	0x40020c00
 8003740:	40021000 	.word	0x40021000
 8003744:	40021400 	.word	0x40021400
 8003748:	40021800 	.word	0x40021800
 800374c:	40021c00 	.word	0x40021c00
 8003750:	40022000 	.word	0x40022000
 8003754:	40022400 	.word	0x40022400
 8003758:	40013c00 	.word	0x40013c00

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003778:	e003      	b.n	8003782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	041a      	lsls	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	619a      	str	r2, [r3, #24]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	401a      	ands	r2, r3
 80037a2:	887b      	ldrh	r3, [r7, #2]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d104      	bne.n	80037b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	041a      	lsls	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80037b0:	e002      	b.n	80037b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	619a      	str	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	b08f      	sub	sp, #60	; 0x3c
 80037c8:	af0a      	add	r7, sp, #40	; 0x28
 80037ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e054      	b.n	8003880 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f014 f833 	bl	801785c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f005 fd0a 	bl	800922e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	687e      	ldr	r6, [r7, #4]
 8003822:	466d      	mov	r5, sp
 8003824:	f106 0410 	add.w	r4, r6, #16
 8003828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003830:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003834:	e885 0003 	stmia.w	r5, {r0, r1}
 8003838:	1d33      	adds	r3, r6, #4
 800383a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f005 fc84 	bl	800914a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f005 fd01 	bl	8009250 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	687e      	ldr	r6, [r7, #4]
 8003856:	466d      	mov	r5, sp
 8003858:	f106 0410 	add.w	r4, r6, #16
 800385c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003868:	e885 0003 	stmia.w	r5, {r0, r1}
 800386c:	1d33      	adds	r3, r6, #4
 800386e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003870:	6838      	ldr	r0, [r7, #0]
 8003872:	f005 fe13 	bl	800949c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003888 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af04      	add	r7, sp, #16
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	4608      	mov	r0, r1
 8003892:	4611      	mov	r1, r2
 8003894:	461a      	mov	r2, r3
 8003896:	4603      	mov	r3, r0
 8003898:	70fb      	strb	r3, [r7, #3]
 800389a:	460b      	mov	r3, r1
 800389c:	70bb      	strb	r3, [r7, #2]
 800389e:	4613      	mov	r3, r2
 80038a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_HCD_HC_Init+0x28>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e07f      	b.n	80039b0 <HAL_HCD_HC_Init+0x128>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	333d      	adds	r3, #61	; 0x3d
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	3338      	adds	r3, #56	; 0x38
 80038dc:	787a      	ldrb	r2, [r7, #1]
 80038de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	3340      	adds	r3, #64	; 0x40
 80038f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038f2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3339      	adds	r3, #57	; 0x39
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	333f      	adds	r3, #63	; 0x3f
 8003918:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800391c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	78bb      	ldrb	r3, [r7, #2]
 8003922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003926:	b2d8      	uxtb	r0, r3
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	440b      	add	r3, r1
 8003934:	333a      	adds	r3, #58	; 0x3a
 8003936:	4602      	mov	r2, r0
 8003938:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800393a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800393e:	2b00      	cmp	r3, #0
 8003940:	da0a      	bge.n	8003958 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	440b      	add	r3, r1
 8003950:	333b      	adds	r3, #59	; 0x3b
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e009      	b.n	800396c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	333b      	adds	r3, #59	; 0x3b
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	333c      	adds	r3, #60	; 0x3c
 800397c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003980:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	787c      	ldrb	r4, [r7, #1]
 8003988:	78ba      	ldrb	r2, [r7, #2]
 800398a:	78f9      	ldrb	r1, [r7, #3]
 800398c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800398e:	9302      	str	r3, [sp, #8]
 8003990:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	4623      	mov	r3, r4
 800399e:	f005 feff 	bl	80097a0 <USB_HC_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}

080039b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_HCD_HC_Halt+0x1e>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e00f      	b.n	80039f6 <HAL_HCD_HC_Halt+0x3e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f006 f939 	bl	8009c5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	70fb      	strb	r3, [r7, #3]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70bb      	strb	r3, [r7, #2]
 8003a16:	4613      	mov	r3, r2
 8003a18:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	333b      	adds	r3, #59	; 0x3b
 8003a2a:	78ba      	ldrb	r2, [r7, #2]
 8003a2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	333f      	adds	r3, #63	; 0x3f
 8003a3e:	787a      	ldrb	r2, [r7, #1]
 8003a40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a42:	7c3b      	ldrb	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	3342      	adds	r3, #66	; 0x42
 8003a58:	2203      	movs	r2, #3
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e009      	b.n	8003a72 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3342      	adds	r3, #66	; 0x42
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a72:	787b      	ldrb	r3, [r7, #1]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	f200 80d6 	bhi.w	8003c26 <HAL_HCD_HC_SubmitRequest+0x226>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_HCD_HC_SubmitRequest+0x80>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003c11 	.word	0x08003c11
 8003a88:	08003afd 	.word	0x08003afd
 8003a8c:	08003b87 	.word	0x08003b87
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003a90:	7c3b      	ldrb	r3, [r7, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f040 80c9 	bne.w	8003c2a <HAL_HCD_HC_SubmitRequest+0x22a>
 8003a98:	78bb      	ldrb	r3, [r7, #2]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 80c5 	bne.w	8003c2a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8003aa0:	8b3b      	ldrh	r3, [r7, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3351      	adds	r3, #81	; 0x51
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3351      	adds	r3, #81	; 0x51
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	3342      	adds	r3, #66	; 0x42
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ae4:	e0a1      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	440b      	add	r3, r1
 8003af4:	3342      	adds	r3, #66	; 0x42
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
      break;
 8003afa:	e096      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003afc:	78bb      	ldrb	r3, [r7, #2]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d120      	bne.n	8003b44 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	3351      	adds	r3, #81	; 0x51
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	3342      	adds	r3, #66	; 0x42
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b2c:	e07e      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3342      	adds	r3, #66	; 0x42
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]
      break;
 8003b42:	e073      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3350      	adds	r3, #80	; 0x50
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3342      	adds	r3, #66	; 0x42
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
      break;
 8003b6e:	e05d      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3342      	adds	r3, #66	; 0x42
 8003b80:	2202      	movs	r2, #2
 8003b82:	701a      	strb	r2, [r3, #0]
      break;
 8003b84:	e052      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b86:	78bb      	ldrb	r3, [r7, #2]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d120      	bne.n	8003bce <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	3351      	adds	r3, #81	; 0x51
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	440b      	add	r3, r1
 8003bb0:	3342      	adds	r3, #66	; 0x42
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bb6:	e039      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3342      	adds	r3, #66	; 0x42
 8003bc8:	2202      	movs	r2, #2
 8003bca:	701a      	strb	r2, [r3, #0]
      break;
 8003bcc:	e02e      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	3350      	adds	r3, #80	; 0x50
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3342      	adds	r3, #66	; 0x42
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
      break;
 8003bf8:	e018      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	3342      	adds	r3, #66	; 0x42
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	701a      	strb	r2, [r3, #0]
      break;
 8003c0e:	e00d      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3342      	adds	r3, #66	; 0x42
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
      break;
 8003c24:	e002      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003c2a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	3344      	adds	r3, #68	; 0x44
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	8b39      	ldrh	r1, [r7, #24]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4403      	add	r3, r0
 8003c50:	3348      	adds	r3, #72	; 0x48
 8003c52:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	440b      	add	r3, r1
 8003c62:	335c      	adds	r3, #92	; 0x5c
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	334c      	adds	r3, #76	; 0x4c
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	3339      	adds	r3, #57	; 0x39
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	335d      	adds	r3, #93	; 0x5d
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	18d1      	adds	r1, r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f005 fe78 	bl	80099b4 <USB_HC_StartXfer>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop

08003cd0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f005 fb95 	bl	8009416 <USB_GetMode>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	f040 80f1 	bne.w	8003ed6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f005 fb79 	bl	80093f0 <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80e7 	beq.w	8003ed4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f005 fb70 	bl	80093f0 <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1a:	d104      	bne.n	8003d26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f005 fb60 	bl	80093f0 <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d104      	bne.n	8003d46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f005 fb50 	bl	80093f0 <USB_ReadInterrupts>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d5a:	d104      	bne.n	8003d66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f005 fb40 	bl	80093f0 <USB_ReadInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d103      	bne.n	8003d82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f005 fb32 	bl	80093f0 <USB_ReadInterrupts>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d96:	d117      	bne.n	8003dc8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003da6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003daa:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f013 fdcf 	bl	8017950 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f005 fc2b 	bl	8009614 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f005 fb0f 	bl	80093f0 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ddc:	d102      	bne.n	8003de4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f001 f8c8 	bl	8004f74 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f005 fb01 	bl	80093f0 <USB_ReadInterrupts>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d106      	bne.n	8003e06 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f013 fd8d 	bl	8017918 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2208      	movs	r2, #8
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f005 faf0 	bl	80093f0 <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e1a:	d138      	bne.n	8003e8e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f005 ff0b 	bl	8009c3c <USB_HC_ReadInterrupt>
 8003e26:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e025      	b.n	8003e7a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d018      	beq.n	8003e74 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e58:	d106      	bne.n	8003e68 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8cf 	bl	8004004 <HCD_HC_IN_IRQHandler>
 8003e66:	e005      	b.n	8003e74 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fc5f 	bl	8004732 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3301      	adds	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3d4      	bcc.n	8003e2e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f005 faac 	bl	80093f0 <USB_ReadInterrupts>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d101      	bne.n	8003ea6 <HAL_HCD_IRQHandler+0x1d6>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_HCD_IRQHandler+0x1d8>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d014      	beq.n	8003ed6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0210 	bic.w	r2, r2, #16
 8003eba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 ffad 	bl	8004e1c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0210 	orr.w	r2, r2, #16
 8003ed0:	619a      	str	r2, [r3, #24]
 8003ed2:	e000      	b.n	8003ed6 <HAL_HCD_IRQHandler+0x206>
      return;
 8003ed4:	bf00      	nop
    }
  }
}
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_HCD_Start+0x16>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e013      	b.n	8003f1a <HAL_HCD_Start+0x3e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 f984 	bl	800920c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f005 fbe6 	bl	80096dc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_HCD_Stop+0x16>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e00d      	b.n	8003f54 <HAL_HCD_Stop+0x32>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f005 ffc5 	bl	8009ed4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f005 fb8d 	bl	8009688 <USB_ResetPort>
 8003f6e:	4603      	mov	r3, r0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	335c      	adds	r3, #92	; 0x5c
 8003f94:	781b      	ldrb	r3, [r3, #0]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	440b      	add	r3, r1
 8003fbc:	334c      	adds	r3, #76	; 0x4c
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f005 fbcf 	bl	800977c <USB_GetCurrentFrame>
 8003fde:	4603      	mov	r3, r0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f005 fbaa 	bl	800974e <USB_GetHostSpeed>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d119      	bne.n	8004068 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	2304      	movs	r3, #4
 8004044:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	440a      	add	r2, r1
 800405c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	60d3      	str	r3, [r2, #12]
 8004066:	e095      	b.n	8004194 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b20      	cmp	r3, #32
 800407c:	d109      	bne.n	8004092 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	461a      	mov	r2, r3
 800408c:	2320      	movs	r3, #32
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	e080      	b.n	8004194 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d134      	bne.n	8004112 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	440b      	add	r3, r1
 80040d6:	335d      	adds	r3, #93	; 0x5d
 80040d8:	2205      	movs	r2, #5
 80040da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	2310      	movs	r3, #16
 80040ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fa:	461a      	mov	r2, r3
 80040fc:	2308      	movs	r3, #8
 80040fe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f005 fda7 	bl	8009c5e <USB_HC_Halt>
 8004110:	e040      	b.n	8004194 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004128:	d134      	bne.n	8004194 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	440a      	add	r2, r1
 8004140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f005 fd82 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004166:	461a      	mov	r2, r3
 8004168:	2310      	movs	r3, #16
 800416a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	440b      	add	r3, r1
 800417a:	335d      	adds	r3, #93	; 0x5d
 800417c:	2208      	movs	r2, #8
 800417e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	461a      	mov	r2, r3
 800418e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004192:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041aa:	d122      	bne.n	80041f2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c6:	f043 0302 	orr.w	r3, r3, #2
 80041ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 fd41 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80041f0:	e29b      	b.n	800472a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 80c1 	bne.w	800438c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01b      	beq.n	800424a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	3348      	adds	r3, #72	; 0x48
 8004222:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	0159      	lsls	r1, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	440b      	add	r3, r1
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004236:	1ad1      	subs	r1, r2, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4403      	add	r3, r0
 8004246:	334c      	adds	r3, #76	; 0x4c
 8004248:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	440b      	add	r3, r1
 8004258:	335d      	adds	r3, #93	; 0x5d
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	3358      	adds	r3, #88	; 0x58
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	461a      	mov	r2, r3
 8004280:	2301      	movs	r3, #1
 8004282:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	333f      	adds	r3, #63	; 0x3f
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	440b      	add	r3, r1
 80042a8:	333f      	adds	r3, #63	; 0x3f
 80042aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d121      	bne.n	80042f4 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 fcbf 	bl	8009c5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	461a      	mov	r2, r3
 80042ee:	2310      	movs	r3, #16
 80042f0:	6093      	str	r3, [r2, #8]
 80042f2:	e034      	b.n	800435e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	440b      	add	r3, r1
 8004302:	333f      	adds	r3, #63	; 0x3f
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d129      	bne.n	800435e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	440a      	add	r2, r1
 8004320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004324:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004328:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	440b      	add	r3, r1
 8004338:	335c      	adds	r3, #92	; 0x5c
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	b2d8      	uxtb	r0, r3
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	440b      	add	r3, r1
 8004350:	335c      	adds	r3, #92	; 0x5c
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	4601      	mov	r1, r0
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f013 fb07 	bl	801796c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	440b      	add	r3, r1
 800436c:	3350      	adds	r3, #80	; 0x50
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f083 0301 	eor.w	r3, r3, #1
 8004374:	b2d8      	uxtb	r0, r3
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	440b      	add	r3, r1
 8004384:	3350      	adds	r3, #80	; 0x50
 8004386:	4602      	mov	r2, r0
 8004388:	701a      	strb	r2, [r3, #0]
}
 800438a:	e1ce      	b.n	800472a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	f040 80f1 	bne.w	8004586 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043be:	f023 0302 	bic.w	r3, r3, #2
 80043c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	440b      	add	r3, r1
 80043d2:	335d      	adds	r3, #93	; 0x5d
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10a      	bne.n	80043f0 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1
 80043e8:	335c      	adds	r3, #92	; 0x5c
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e0b0      	b.n	8004552 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	440b      	add	r3, r1
 80043fe:	335d      	adds	r3, #93	; 0x5d
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d10a      	bne.n	800441c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	440b      	add	r3, r1
 8004414:	335c      	adds	r3, #92	; 0x5c
 8004416:	2205      	movs	r2, #5
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	e09a      	b.n	8004552 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	440b      	add	r3, r1
 800442a:	335d      	adds	r3, #93	; 0x5d
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b06      	cmp	r3, #6
 8004430:	d00a      	beq.n	8004448 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	335d      	adds	r3, #93	; 0x5d
 8004442:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004444:	2b08      	cmp	r3, #8
 8004446:	d156      	bne.n	80044f6 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	440b      	add	r3, r1
 8004456:	3358      	adds	r3, #88	; 0x58
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4403      	add	r3, r0
 800446a:	3358      	adds	r3, #88	; 0x58
 800446c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	440b      	add	r3, r1
 800447c:	3358      	adds	r3, #88	; 0x58
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d914      	bls.n	80044ae <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	440b      	add	r3, r1
 8004492:	3358      	adds	r3, #88	; 0x58
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	335c      	adds	r3, #92	; 0x5c
 80044a8:	2204      	movs	r2, #4
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	e009      	b.n	80044c2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	440b      	add	r3, r1
 80044bc:	335c      	adds	r3, #92	; 0x5c
 80044be:	2202      	movs	r2, #2
 80044c0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044d8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044e0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	e02d      	b.n	8004552 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	440b      	add	r3, r1
 8004504:	335d      	adds	r3, #93	; 0x5d
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d122      	bne.n	8004552 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	440b      	add	r3, r1
 800451a:	335c      	adds	r3, #92	; 0x5c
 800451c:	2202      	movs	r2, #2
 800451e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004536:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800453e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454c:	461a      	mov	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	461a      	mov	r2, r3
 8004560:	2302      	movs	r3, #2
 8004562:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	b2d8      	uxtb	r0, r3
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	440b      	add	r3, r1
 8004576:	335c      	adds	r3, #92	; 0x5c
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	4601      	mov	r1, r0
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f013 f9f4 	bl	801796c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004584:	e0d1      	b.n	800472a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4413      	add	r3, r2
 800458e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d13e      	bne.n	800461a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b6:	f043 0302 	orr.w	r3, r3, #2
 80045ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	440b      	add	r3, r1
 80045ca:	3358      	adds	r3, #88	; 0x58
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4403      	add	r3, r0
 80045de:	3358      	adds	r3, #88	; 0x58
 80045e0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	335d      	adds	r3, #93	; 0x5d
 80045f2:	2206      	movs	r2, #6
 80045f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f005 fb2c 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004612:	461a      	mov	r2, r3
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	6093      	str	r3, [r2, #8]
}
 8004618:	e087      	b.n	800472a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d17c      	bne.n	800472a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	440b      	add	r3, r1
 800463e:	333f      	adds	r3, #63	; 0x3f
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d122      	bne.n	800468c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	3358      	adds	r3, #88	; 0x58
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	440a      	add	r2, r1
 8004670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f005 faea 	bl	8009c5e <USB_HC_Halt>
 800468a:	e045      	b.n	8004718 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	440b      	add	r3, r1
 800469a:	333f      	adds	r3, #63	; 0x3f
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	440b      	add	r3, r1
 80046b0:	333f      	adds	r3, #63	; 0x3f
 80046b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d12f      	bne.n	8004718 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	440b      	add	r3, r1
 80046c6:	3358      	adds	r3, #88	; 0x58
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d121      	bne.n	8004718 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	440b      	add	r3, r1
 80046e2:	335d      	adds	r3, #93	; 0x5d
 80046e4:	2203      	movs	r2, #3
 80046e6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f005 faa3 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004724:	461a      	mov	r2, r3
 8004726:	2310      	movs	r3, #16
 8004728:	6093      	str	r3, [r2, #8]
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b086      	sub	sp, #24
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d119      	bne.n	8004796 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	461a      	mov	r2, r3
 8004770:	2304      	movs	r3, #4
 8004772:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	440a      	add	r2, r1
 800478a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004794:	e33e      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d141      	bne.n	8004830 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	2320      	movs	r3, #32
 80047bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	440b      	add	r3, r1
 80047cc:	333d      	adds	r3, #61	; 0x3d
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	f040 831f 	bne.w	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	333d      	adds	r3, #61	; 0x3d
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	440b      	add	r3, r1
 80047f8:	335c      	adds	r3, #92	; 0x5c
 80047fa:	2202      	movs	r2, #2
 80047fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4413      	add	r3, r2
 8004806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	440a      	add	r2, r1
 8004814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f005 fa18 	bl	8009c5e <USB_HC_Halt>
}
 800482e:	e2f1      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d13f      	bne.n	80048c6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	440b      	add	r3, r1
 8004854:	335d      	adds	r3, #93	; 0x5d
 8004856:	2204      	movs	r2, #4
 8004858:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	440b      	add	r3, r1
 8004868:	333d      	adds	r3, #61	; 0x3d
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	440b      	add	r3, r1
 800487c:	3358      	adds	r3, #88	; 0x58
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	440a      	add	r2, r1
 8004898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f005 f9d6 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	461a      	mov	r2, r3
 80048c0:	2340      	movs	r3, #64	; 0x40
 80048c2:	6093      	str	r3, [r2, #8]
}
 80048c4:	e2a6      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048dc:	d122      	bne.n	8004924 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f005 f9a8 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491a:	461a      	mov	r2, r3
 800491c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004920:	6093      	str	r3, [r2, #8]
}
 8004922:	e277      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d135      	bne.n	80049a6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	440b      	add	r3, r1
 8004948:	3358      	adds	r3, #88	; 0x58
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4413      	add	r3, r2
 8004956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	440a      	add	r2, r1
 8004964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	4611      	mov	r1, r2
 8004978:	4618      	mov	r0, r3
 800497a:	f005 f970 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498a:	461a      	mov	r2, r3
 800498c:	2301      	movs	r3, #1
 800498e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	440b      	add	r3, r1
 800499e:	335d      	adds	r3, #93	; 0x5d
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
}
 80049a4:	e236      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d12b      	bne.n	8004a14 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	461a      	mov	r2, r3
 80049ca:	2308      	movs	r3, #8
 80049cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f005 f930 	bl	8009c5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	335d      	adds	r3, #93	; 0x5d
 8004a0e:	2205      	movs	r2, #5
 8004a10:	701a      	strb	r2, [r3, #0]
}
 8004a12:	e1ff      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d155      	bne.n	8004ad6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	440b      	add	r3, r1
 8004a38:	3358      	adds	r3, #88	; 0x58
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	440b      	add	r3, r1
 8004a4c:	335d      	adds	r3, #93	; 0x5d
 8004a4e:	2203      	movs	r2, #3
 8004a50:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	440b      	add	r3, r1
 8004a60:	333d      	adds	r3, #61	; 0x3d
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d114      	bne.n	8004a92 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	440b      	add	r3, r1
 8004a76:	333c      	adds	r3, #60	; 0x3c
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	440b      	add	r3, r1
 8004a8c:	333d      	adds	r3, #61	; 0x3d
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 f8ce 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	6093      	str	r3, [r2, #8]
}
 8004ad4:	e19e      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d12b      	bne.n	8004b44 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	0151      	lsls	r1, r2, #5
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	440a      	add	r2, r1
 8004b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b06:	f043 0302 	orr.w	r3, r3, #2
 8004b0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f005 f8a1 	bl	8009c5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	440b      	add	r3, r1
 8004b2a:	335d      	adds	r3, #93	; 0x5d
 8004b2c:	2206      	movs	r2, #6
 8004b2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	6093      	str	r3, [r2, #8]
}
 8004b42:	e167      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5a:	d135      	bne.n	8004bc8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b76:	f043 0302 	orr.w	r3, r3, #2
 8004b7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f005 f869 	bl	8009c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004baa:	461a      	mov	r2, r3
 8004bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	440b      	add	r3, r1
 8004bc0:	335d      	adds	r3, #93	; 0x5d
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	701a      	strb	r2, [r3, #0]
}
 8004bc6:	e125      	b.n	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	f040 811a 	bne.w	8004e14 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bfa:	f023 0302 	bic.w	r3, r3, #2
 8004bfe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	440b      	add	r3, r1
 8004c0e:	335d      	adds	r3, #93	; 0x5d
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d137      	bne.n	8004c86 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	440b      	add	r3, r1
 8004c24:	335c      	adds	r3, #92	; 0x5c
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	440b      	add	r3, r1
 8004c38:	333f      	adds	r3, #63	; 0x3f
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d00b      	beq.n	8004c58 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	440b      	add	r3, r1
 8004c4e:	333f      	adds	r3, #63	; 0x3f
 8004c50:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	f040 80c5 	bne.w	8004de2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	440b      	add	r3, r1
 8004c66:	3351      	adds	r3, #81	; 0x51
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f083 0301 	eor.w	r3, r3, #1
 8004c6e:	b2d8      	uxtb	r0, r3
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3351      	adds	r3, #81	; 0x51
 8004c80:	4602      	mov	r2, r0
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e0ad      	b.n	8004de2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	440b      	add	r3, r1
 8004c94:	335d      	adds	r3, #93	; 0x5d
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d10a      	bne.n	8004cb2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	440b      	add	r3, r1
 8004caa:	335c      	adds	r3, #92	; 0x5c
 8004cac:	2202      	movs	r2, #2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e097      	b.n	8004de2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	335d      	adds	r3, #93	; 0x5d
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d10a      	bne.n	8004cde <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	440b      	add	r3, r1
 8004cd6:	335c      	adds	r3, #92	; 0x5c
 8004cd8:	2202      	movs	r2, #2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e081      	b.n	8004de2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	440b      	add	r3, r1
 8004cec:	335d      	adds	r3, #93	; 0x5d
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	d10a      	bne.n	8004d0a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	440b      	add	r3, r1
 8004d02:	335c      	adds	r3, #92	; 0x5c
 8004d04:	2205      	movs	r2, #5
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e06b      	b.n	8004de2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	335d      	adds	r3, #93	; 0x5d
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b06      	cmp	r3, #6
 8004d1e:	d00a      	beq.n	8004d36 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	335d      	adds	r3, #93	; 0x5d
 8004d30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d155      	bne.n	8004de2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	3358      	adds	r3, #88	; 0x58
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	1c59      	adds	r1, r3, #1
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4403      	add	r3, r0
 8004d58:	3358      	adds	r3, #88	; 0x58
 8004d5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	3358      	adds	r3, #88	; 0x58
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d914      	bls.n	8004d9c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	440b      	add	r3, r1
 8004d80:	3358      	adds	r3, #88	; 0x58
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	440b      	add	r3, r1
 8004d94:	335c      	adds	r3, #92	; 0x5c
 8004d96:	2204      	movs	r2, #4
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e009      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	440b      	add	r3, r1
 8004daa:	335c      	adds	r3, #92	; 0x5c
 8004dac:	2202      	movs	r2, #2
 8004dae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dc6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	461a      	mov	r2, r3
 8004df0:	2302      	movs	r3, #2
 8004df2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	b2d8      	uxtb	r0, r3
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	440b      	add	r3, r1
 8004e06:	335c      	adds	r3, #92	; 0x5c
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4601      	mov	r1, r0
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f012 fdac 	bl	801796c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	0c5b      	lsrs	r3, r3, #17
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e50:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d003      	beq.n	8004e60 <HCD_RXQLVL_IRQHandler+0x44>
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	f000 8082 	beq.w	8004f62 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e5e:	e083      	b.n	8004f68 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d07f      	beq.n	8004f66 <HCD_RXQLVL_IRQHandler+0x14a>
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	440b      	add	r3, r1
 8004e74:	3344      	adds	r3, #68	; 0x44
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d074      	beq.n	8004f66 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	440b      	add	r3, r1
 8004e8e:	3344      	adds	r3, #68	; 0x44
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	b292      	uxth	r2, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	f004 fa81 	bl	800939e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3344      	adds	r3, #68	; 0x44
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	18d1      	adds	r1, r2, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4403      	add	r3, r0
 8004ec0:	3344      	adds	r3, #68	; 0x44
 8004ec2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	440b      	add	r3, r1
 8004ed2:	334c      	adds	r3, #76	; 0x4c
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	18d1      	adds	r1, r2, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4403      	add	r3, r0
 8004ee8:	334c      	adds	r3, #76	; 0x4c
 8004eea:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <HCD_RXQLVL_IRQHandler+0x154>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d031      	beq.n	8004f66 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f20:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	440b      	add	r3, r1
 8004f42:	3350      	adds	r3, #80	; 0x50
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f083 0301 	eor.w	r3, r3, #1
 8004f4a:	b2d8      	uxtb	r0, r3
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	440b      	add	r3, r1
 8004f5a:	3350      	adds	r3, #80	; 0x50
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	701a      	strb	r2, [r3, #0]
      break;
 8004f60:	e001      	b.n	8004f66 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004f66:	bf00      	nop
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3728      	adds	r7, #40	; 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	1ff80000 	.word	0x1ff80000

08004f74 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fa0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d113      	bne.n	8004fd4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d10a      	bne.n	8004fcc <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004fc4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f012 fcb4 	bl	8017934 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f043 0302 	orr.w	r3, r3, #2
 8004fd2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d147      	bne.n	800506e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f043 0308 	orr.w	r3, r3, #8
 8004fe4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d129      	bne.n	8005044 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d113      	bne.n	8005020 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005002:	d106      	bne.n	8005012 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2102      	movs	r1, #2
 800500a:	4618      	mov	r0, r3
 800500c:	f004 fb02 	bl	8009614 <USB_InitFSLSPClkSel>
 8005010:	e011      	b.n	8005036 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2101      	movs	r1, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f004 fafb 	bl	8009614 <USB_InitFSLSPClkSel>
 800501e:	e00a      	b.n	8005036 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d106      	bne.n	8005036 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502e:	461a      	mov	r2, r3
 8005030:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005034:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f012 fcaa 	bl	8017990 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f012 fc79 	bl	8017934 <HAL_HCD_Connect_Callback>
 8005042:	e014      	b.n	800506e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f012 fcb1 	bl	80179ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005058:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800505c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800506c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b20      	cmp	r3, #32
 8005076:	d103      	bne.n	8005080 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f043 0320 	orr.w	r3, r3, #32
 800507e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005086:	461a      	mov	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e10f      	b.n	80052c6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fb fe28 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	; 0x24
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050d8:	f002 f850 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 80050dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4a7b      	ldr	r2, [pc, #492]	; (80052d0 <HAL_I2C_Init+0x23c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d807      	bhi.n	80050f8 <HAL_I2C_Init+0x64>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a7a      	ldr	r2, [pc, #488]	; (80052d4 <HAL_I2C_Init+0x240>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	bf94      	ite	ls
 80050f0:	2301      	movls	r3, #1
 80050f2:	2300      	movhi	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e006      	b.n	8005106 <HAL_I2C_Init+0x72>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a77      	ldr	r2, [pc, #476]	; (80052d8 <HAL_I2C_Init+0x244>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bf94      	ite	ls
 8005100:	2301      	movls	r3, #1
 8005102:	2300      	movhi	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e0db      	b.n	80052c6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a72      	ldr	r2, [pc, #456]	; (80052dc <HAL_I2C_Init+0x248>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0c9b      	lsrs	r3, r3, #18
 8005118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a64      	ldr	r2, [pc, #400]	; (80052d0 <HAL_I2C_Init+0x23c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d802      	bhi.n	8005148 <HAL_I2C_Init+0xb4>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	3301      	adds	r3, #1
 8005146:	e009      	b.n	800515c <HAL_I2C_Init+0xc8>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	4a63      	ldr	r2, [pc, #396]	; (80052e0 <HAL_I2C_Init+0x24c>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	099b      	lsrs	r3, r3, #6
 800515a:	3301      	adds	r3, #1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	430b      	orrs	r3, r1
 8005162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800516e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4956      	ldr	r1, [pc, #344]	; (80052d0 <HAL_I2C_Init+0x23c>)
 8005178:	428b      	cmp	r3, r1
 800517a:	d80d      	bhi.n	8005198 <HAL_I2C_Init+0x104>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1e59      	subs	r1, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	fbb1 f3f3 	udiv	r3, r1, r3
 800518a:	3301      	adds	r3, #1
 800518c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005190:	2b04      	cmp	r3, #4
 8005192:	bf38      	it	cc
 8005194:	2304      	movcc	r3, #4
 8005196:	e04f      	b.n	8005238 <HAL_I2C_Init+0x1a4>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d111      	bne.n	80051c4 <HAL_I2C_Init+0x130>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1e58      	subs	r0, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6859      	ldr	r1, [r3, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	440b      	add	r3, r1
 80051ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b2:	3301      	adds	r3, #1
 80051b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e012      	b.n	80051ea <HAL_I2C_Init+0x156>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e58      	subs	r0, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	0099      	lsls	r1, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051da:	3301      	adds	r3, #1
 80051dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_I2C_Init+0x15e>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e022      	b.n	8005238 <HAL_I2C_Init+0x1a4>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10e      	bne.n	8005218 <HAL_I2C_Init+0x184>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1e58      	subs	r0, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6859      	ldr	r1, [r3, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	440b      	add	r3, r1
 8005208:	fbb0 f3f3 	udiv	r3, r0, r3
 800520c:	3301      	adds	r3, #1
 800520e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005216:	e00f      	b.n	8005238 <HAL_I2C_Init+0x1a4>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1e58      	subs	r0, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	0099      	lsls	r1, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	fbb0 f3f3 	udiv	r3, r0, r3
 800522e:	3301      	adds	r3, #1
 8005230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	6809      	ldr	r1, [r1, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6911      	ldr	r1, [r2, #16]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68d2      	ldr	r2, [r2, #12]
 8005272:	4311      	orrs	r1, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	430b      	orrs	r3, r1
 800527a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	000186a0 	.word	0x000186a0
 80052d4:	001e847f 	.word	0x001e847f
 80052d8:	003d08ff 	.word	0x003d08ff
 80052dc:	431bde83 	.word	0x431bde83
 80052e0:	10624dd3 	.word	0x10624dd3

080052e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e021      	b.n	800533a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2224      	movs	r2, #36	; 0x24
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fb fd68 	bl	8000de4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	461a      	mov	r2, r3
 8005352:	4603      	mov	r3, r0
 8005354:	817b      	strh	r3, [r7, #10]
 8005356:	460b      	mov	r3, r1
 8005358:	813b      	strh	r3, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800535e:	f7fd f9d1 	bl	8002704 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	f040 80d9 	bne.w	8005524 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	2319      	movs	r3, #25
 8005378:	2201      	movs	r2, #1
 800537a:	496d      	ldr	r1, [pc, #436]	; (8005530 <HAL_I2C_Mem_Write+0x1ec>)
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fc69 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005388:	2302      	movs	r3, #2
 800538a:	e0cc      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_I2C_Mem_Write+0x56>
 8005396:	2302      	movs	r3, #2
 8005398:	e0c5      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d007      	beq.n	80053c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2221      	movs	r2, #33	; 0x21
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2240      	movs	r2, #64	; 0x40
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a4d      	ldr	r2, [pc, #308]	; (8005534 <HAL_I2C_Mem_Write+0x1f0>)
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005402:	88f8      	ldrh	r0, [r7, #6]
 8005404:	893a      	ldrh	r2, [r7, #8]
 8005406:	8979      	ldrh	r1, [r7, #10]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	4603      	mov	r3, r0
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fac4 	bl	80059a0 <I2C_RequestMemoryWrite>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d052      	beq.n	80054c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e081      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fcea 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2b04      	cmp	r3, #4
 8005438:	d107      	bne.n	800544a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06b      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b04      	cmp	r3, #4
 800548a:	d11b      	bne.n	80054c4 <HAL_I2C_Mem_Write+0x180>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d017      	beq.n	80054c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1aa      	bne.n	8005422 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fcd6 	bl	8005e82 <I2C_WaitOnBTFFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d107      	bne.n	80054f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e016      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	00100002 	.word	0x00100002
 8005534:	ffff0000 	.word	0xffff0000

08005538 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	; 0x30
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	461a      	mov	r2, r3
 8005546:	4603      	mov	r3, r0
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	460b      	mov	r3, r1
 800554c:	813b      	strh	r3, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005552:	f7fd f8d7 	bl	8002704 <HAL_GetTick>
 8005556:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b20      	cmp	r3, #32
 8005562:	f040 8208 	bne.w	8005976 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	2319      	movs	r3, #25
 800556c:	2201      	movs	r2, #1
 800556e:	497b      	ldr	r1, [pc, #492]	; (800575c <HAL_I2C_Mem_Read+0x224>)
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fb6f 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	e1fb      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_I2C_Mem_Read+0x56>
 800558a:	2302      	movs	r3, #2
 800558c:	e1f4      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d007      	beq.n	80055b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2222      	movs	r2, #34	; 0x22
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2240      	movs	r2, #64	; 0x40
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a5b      	ldr	r2, [pc, #364]	; (8005760 <HAL_I2C_Mem_Read+0x228>)
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055f6:	88f8      	ldrh	r0, [r7, #6]
 80055f8:	893a      	ldrh	r2, [r7, #8]
 80055fa:	8979      	ldrh	r1, [r7, #10]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	4603      	mov	r3, r0
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fa54 	bl	8005ab4 <I2C_RequestMemoryRead>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e1b0      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d113      	bne.n	8005646 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	623b      	str	r3, [r7, #32]
 8005632:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e184      	b.n	8005950 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	2b01      	cmp	r3, #1
 800564c:	d11b      	bne.n	8005686 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e164      	b.n	8005950 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568a:	2b02      	cmp	r3, #2
 800568c:	d11b      	bne.n	80056c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	e144      	b.n	8005950 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056dc:	e138      	b.n	8005950 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	f200 80f1 	bhi.w	80058ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d123      	bne.n	8005738 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fc05 	bl	8005f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e139      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005736:	e10b      	b.n	8005950 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	2b02      	cmp	r3, #2
 800573e:	d14e      	bne.n	80057de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	2200      	movs	r2, #0
 8005748:	4906      	ldr	r1, [pc, #24]	; (8005764 <HAL_I2C_Mem_Read+0x22c>)
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fa82 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e10e      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
 800575a:	bf00      	nop
 800575c:	00100002 	.word	0x00100002
 8005760:	ffff0000 	.word	0xffff0000
 8005764:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057dc:	e0b8      	b.n	8005950 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	2200      	movs	r2, #0
 80057e6:	4966      	ldr	r1, [pc, #408]	; (8005980 <HAL_I2C_Mem_Read+0x448>)
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fa33 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0bf      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2200      	movs	r2, #0
 8005842:	494f      	ldr	r1, [pc, #316]	; (8005980 <HAL_I2C_Mem_Read+0x448>)
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fa05 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e091      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058c8:	e042      	b.n	8005950 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fb18 	bl	8005f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e04c      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d118      	bne.n	8005950 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005954:	2b00      	cmp	r3, #0
 8005956:	f47f aec2 	bne.w	80056de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e000      	b.n	8005978 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005976:	2302      	movs	r3, #2
  }
}
 8005978:	4618      	mov	r0, r3
 800597a:	3728      	adds	r7, #40	; 0x28
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	00010004 	.word	0x00010004

08005984 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005992:	b2db      	uxtb	r3, r3
}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	817b      	strh	r3, [r7, #10]
 80059b2:	460b      	mov	r3, r1
 80059b4:	813b      	strh	r3, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f93c 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e05f      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <I2C_RequestMemoryWrite+0x110>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f980 	bl	8005d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e04c      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	6a39      	ldr	r1, [r7, #32]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f9ea 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d107      	bne.n	8005a4a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e02b      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d105      	bne.n	8005a60 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	e021      	b.n	8005aa4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	6a39      	ldr	r1, [r7, #32]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f9c4 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d107      	bne.n	8005a96 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e005      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	00010002 	.word	0x00010002

08005ab4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	813b      	strh	r3, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005adc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f8aa 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e09e      	b.n	8005c48 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b0a:	897b      	ldrh	r3, [r7, #10]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	494c      	ldr	r1, [pc, #304]	; (8005c50 <I2C_RequestMemoryRead+0x19c>)
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f8ee 	bl	8005d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e08b      	b.n	8005c48 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b48:	6a39      	ldr	r1, [r7, #32]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f958 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d107      	bne.n	8005b6e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e06a      	b.n	8005c48 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d105      	bne.n	8005b84 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b78:	893b      	ldrh	r3, [r7, #8]
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	611a      	str	r2, [r3, #16]
 8005b82:	e021      	b.n	8005bc8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b94:	6a39      	ldr	r1, [r7, #32]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f932 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00d      	beq.n	8005bbe <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d107      	bne.n	8005bba <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e044      	b.n	8005c48 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bbe:	893b      	ldrh	r3, [r7, #8]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bca:	6a39      	ldr	r1, [r7, #32]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f917 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d107      	bne.n	8005bf0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e029      	b.n	8005c48 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f81f 	bl	8005c54 <I2C_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e013      	b.n	8005c48 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c20:	897b      	ldrh	r3, [r7, #10]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	4906      	ldr	r1, [pc, #24]	; (8005c50 <I2C_RequestMemoryRead+0x19c>)
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f863 	bl	8005d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	00010002 	.word	0x00010002

08005c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c64:	e025      	b.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d021      	beq.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6e:	f7fc fd49 	bl	8002704 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d116      	bne.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f043 0220 	orr.w	r2, r3, #32
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e023      	b.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d10d      	bne.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bf0c      	ite	eq
 8005cce:	2301      	moveq	r3, #1
 8005cd0:	2300      	movne	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	e00c      	b.n	8005cf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	43da      	mvns	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d0b6      	beq.n	8005c66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d10:	e051      	b.n	8005db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d20:	d123      	bne.n	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f043 0204 	orr.w	r2, r3, #4
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e046      	b.n	8005df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d021      	beq.n	8005db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d72:	f7fc fcc7 	bl	8002704 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d116      	bne.n	8005db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f043 0220 	orr.w	r2, r3, #32
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e020      	b.n	8005df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10c      	bne.n	8005dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bf14      	ite	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	2300      	moveq	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	e00b      	b.n	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	43da      	mvns	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d18d      	bne.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0c:	e02d      	b.n	8005e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f8ce 	bl	8005fb0 <I2C_IsAcknowledgeFailed>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e02d      	b.n	8005e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d021      	beq.n	8005e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fc fc6d 	bl	8002704 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d116      	bne.n	8005e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f043 0220 	orr.w	r2, r3, #32
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e007      	b.n	8005e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e74:	2b80      	cmp	r3, #128	; 0x80
 8005e76:	d1ca      	bne.n	8005e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e8e:	e02d      	b.n	8005eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f88d 	bl	8005fb0 <I2C_IsAcknowledgeFailed>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e02d      	b.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d021      	beq.n	8005eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea8:	f7fc fc2c 	bl	8002704 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d116      	bne.n	8005eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e007      	b.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d1ca      	bne.n	8005e90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f10:	e042      	b.n	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d119      	bne.n	8005f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0210 	mvn.w	r2, #16
 8005f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e029      	b.n	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f54:	f7fc fbd6 	bl	8002704 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f043 0220 	orr.w	r2, r3, #32
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e007      	b.n	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d1b5      	bne.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc6:	d11b      	bne.n	8006000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f043 0204 	orr.w	r2, r3, #4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b20      	cmp	r3, #32
 8006022:	d129      	bne.n	8006078 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	; 0x24
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0210 	bic.w	r2, r2, #16
 800604a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	e000      	b.n	800607a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
  }
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b20      	cmp	r3, #32
 800609e:	d12a      	bne.n	80060f6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2224      	movs	r2, #36	; 0x24
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	f023 030f 	bic.w	r3, r3, #15
 80060c6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	89fb      	ldrh	r3, [r7, #14]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	89fa      	ldrh	r2, [r7, #14]
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e000      	b.n	80060f8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80060f6:	2302      	movs	r3, #2
  }
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0bf      	b.n	8006296 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f010 f88a 	bl	8016244 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006146:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6999      	ldr	r1, [r3, #24]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800615c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b4a      	ldr	r3, [pc, #296]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 8006178:	400b      	ands	r3, r1
 800617a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6899      	ldr	r1, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68d9      	ldr	r1, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 80061a6:	400b      	ands	r3, r1
 80061a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68d9      	ldr	r1, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6919      	ldr	r1, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b33      	ldr	r3, [pc, #204]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 80061d4:	400b      	ands	r3, r1
 80061d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6919      	ldr	r1, [r3, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6959      	ldr	r1, [r3, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <HAL_LTDC_Init+0x19c>)
 8006202:	400b      	ands	r3, r1
 8006204:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6959      	ldr	r1, [r3, #20]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006246:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0206 	orr.w	r2, r2, #6
 8006272:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	f000f800 	.word	0xf000f800

080062a4 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f010 f8df 	bl	8016470 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d023      	beq.n	800633e <HAL_LTDC_IRQHandler+0x6a>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01e      	beq.n	800633e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0204 	bic.w	r2, r2, #4
 800630e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2204      	movs	r2, #4
 8006316:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800631e:	f043 0201 	orr.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2204      	movs	r2, #4
 800632c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f86f 	bl	800641c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d023      	beq.n	8006390 <HAL_LTDC_IRQHandler+0xbc>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01e      	beq.n	8006390 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0202 	bic.w	r2, r2, #2
 8006360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2202      	movs	r2, #2
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006370:	f043 0202 	orr.w	r2, r3, #2
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2204      	movs	r2, #4
 800637e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f846 	bl	800641c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01b      	beq.n	80063d2 <HAL_LTDC_IRQHandler+0xfe>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d016      	beq.n	80063d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2201      	movs	r2, #1
 80063ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f011 f873 	bl	80174b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01b      	beq.n	8006414 <HAL_LTDC_IRQHandler+0x140>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d016      	beq.n	8006414 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0208 	bic.w	r2, r2, #8
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2208      	movs	r2, #8
 80063fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f80e 	bl	8006430 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006444:	b5b0      	push	{r4, r5, r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_LTDC_ConfigLayer+0x1a>
 800645a:	2302      	movs	r3, #2
 800645c:	e02c      	b.n	80064b8 <HAL_LTDC_ConfigLayer+0x74>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2134      	movs	r1, #52	; 0x34
 8006474:	fb01 f303 	mul.w	r3, r1, r3
 8006478:	4413      	add	r3, r2
 800647a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800648e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f8cf 	bl	800663c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bdb0      	pop	{r4, r5, r7, pc}

080064c0 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	; 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_LTDC_SetPitch+0x1a>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e06f      	b.n	80065ba <HAL_LTDC_SetPitch+0xfa>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2134      	movs	r1, #52	; 0x34
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	3348      	adds	r3, #72	; 0x48
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8006502:	2304      	movs	r3, #4
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	e016      	b.n	8006536 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d102      	bne.n	8006514 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800650e:	2303      	movs	r3, #3
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e010      	b.n	8006536 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b04      	cmp	r3, #4
 8006518:	d008      	beq.n	800652c <HAL_LTDC_SetPitch+0x6c>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d005      	beq.n	800652c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b03      	cmp	r3, #3
 8006524:	d002      	beq.n	800652c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b07      	cmp	r3, #7
 800652a:	d102      	bne.n	8006532 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800652c:	2302      	movs	r3, #2
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	e001      	b.n	8006536 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8006532:	2301      	movs	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	01db      	lsls	r3, r3, #7
 800654c:	4413      	add	r3, r2
 800654e:	3384      	adds	r3, #132	; 0x84
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	4611      	mov	r1, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	01d2      	lsls	r2, r2, #7
 800655c:	440a      	add	r2, r1
 800655e:	3284      	adds	r2, #132	; 0x84
 8006560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006564:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006568:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800656a:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <HAL_LTDC_SetPitch+0x108>)
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <HAL_LTDC_SetPitch+0x108>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	01db      	lsls	r3, r3, #7
 8006580:	4413      	add	r3, r2
 8006582:	3384      	adds	r3, #132	; 0x84
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	01db      	lsls	r3, r3, #7
 8006590:	440b      	add	r3, r1
 8006592:	3384      	adds	r3, #132	; 0x84
 8006594:	4619      	mov	r1, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <HAL_LTDC_SetPitch+0x108>)
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <HAL_LTDC_SetPitch+0x108>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3724      	adds	r7, #36	; 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40016800 	.word	0x40016800

080065cc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_LTDC_ProgramLineEvent+0x18>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e023      	b.n	800662c <HAL_LTDC_ProgramLineEvent+0x60>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006604:	4a0c      	ldr	r2, [pc, #48]	; (8006638 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0201 	orr.w	r2, r2, #1
 8006618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40016800 	.word	0x40016800

0800663c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	; 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006658:	4413      	add	r3, r2
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	01db      	lsls	r3, r3, #7
 8006668:	4413      	add	r3, r2
 800666a:	3384      	adds	r3, #132	; 0x84
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	4611      	mov	r1, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	01d2      	lsls	r2, r2, #7
 8006678:	440a      	add	r2, r1
 800667a:	3284      	adds	r2, #132	; 0x84
 800667c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006680:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	0c1b      	lsrs	r3, r3, #16
 800668e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006692:	4413      	add	r3, r2
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	01db      	lsls	r3, r3, #7
 80066a0:	440b      	add	r3, r1
 80066a2:	3384      	adds	r3, #132	; 0x84
 80066a4:	4619      	mov	r1, r3
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ba:	4413      	add	r3, r2
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	01db      	lsls	r3, r3, #7
 80066ca:	4413      	add	r3, r2
 80066cc:	3384      	adds	r3, #132	; 0x84
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	4611      	mov	r1, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	01d2      	lsls	r2, r2, #7
 80066da:	440a      	add	r2, r1
 80066dc:	3284      	adds	r2, #132	; 0x84
 80066de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80066e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f2:	4413      	add	r3, r2
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	01db      	lsls	r3, r3, #7
 8006700:	440b      	add	r3, r1
 8006702:	3384      	adds	r3, #132	; 0x84
 8006704:	4619      	mov	r1, r3
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4313      	orrs	r3, r2
 800670a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	01db      	lsls	r3, r3, #7
 8006716:	4413      	add	r3, r2
 8006718:	3384      	adds	r3, #132	; 0x84
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	4611      	mov	r1, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	01d2      	lsls	r2, r2, #7
 8006726:	440a      	add	r2, r1
 8006728:	3284      	adds	r2, #132	; 0x84
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	01db      	lsls	r3, r3, #7
 800673a:	4413      	add	r3, r2
 800673c:	3384      	adds	r3, #132	; 0x84
 800673e:	461a      	mov	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	061b      	lsls	r3, r3, #24
 8006760:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	01db      	lsls	r3, r3, #7
 800676c:	4413      	add	r3, r2
 800676e:	3384      	adds	r3, #132	; 0x84
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	01db      	lsls	r3, r3, #7
 800677c:	4413      	add	r3, r2
 800677e:	3384      	adds	r3, #132	; 0x84
 8006780:	461a      	mov	r2, r3
 8006782:	2300      	movs	r3, #0
 8006784:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800678c:	461a      	mov	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	431a      	orrs	r2, r3
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	01db      	lsls	r3, r3, #7
 80067a0:	440b      	add	r3, r1
 80067a2:	3384      	adds	r3, #132	; 0x84
 80067a4:	4619      	mov	r1, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	01db      	lsls	r3, r3, #7
 80067b6:	4413      	add	r3, r2
 80067b8:	3384      	adds	r3, #132	; 0x84
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	4611      	mov	r1, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	01d2      	lsls	r2, r2, #7
 80067c6:	440a      	add	r2, r1
 80067c8:	3284      	adds	r2, #132	; 0x84
 80067ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	01db      	lsls	r3, r3, #7
 80067da:	4413      	add	r3, r2
 80067dc:	3384      	adds	r3, #132	; 0x84
 80067de:	461a      	mov	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	01db      	lsls	r3, r3, #7
 80067f0:	4413      	add	r3, r2
 80067f2:	3384      	adds	r3, #132	; 0x84
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	4611      	mov	r1, r2
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	01d2      	lsls	r2, r2, #7
 8006800:	440a      	add	r2, r1
 8006802:	3284      	adds	r2, #132	; 0x84
 8006804:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	69da      	ldr	r2, [r3, #28]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6809      	ldr	r1, [r1, #0]
 800681a:	4608      	mov	r0, r1
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	01c9      	lsls	r1, r1, #7
 8006820:	4401      	add	r1, r0
 8006822:	3184      	adds	r1, #132	; 0x84
 8006824:	4313      	orrs	r3, r2
 8006826:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	01db      	lsls	r3, r3, #7
 8006832:	4413      	add	r3, r2
 8006834:	3384      	adds	r3, #132	; 0x84
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	01db      	lsls	r3, r3, #7
 8006842:	4413      	add	r3, r2
 8006844:	3384      	adds	r3, #132	; 0x84
 8006846:	461a      	mov	r2, r3
 8006848:	2300      	movs	r3, #0
 800684a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	01db      	lsls	r3, r3, #7
 8006856:	4413      	add	r3, r2
 8006858:	3384      	adds	r3, #132	; 0x84
 800685a:	461a      	mov	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800686a:	2304      	movs	r3, #4
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	e01b      	b.n	80068a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d102      	bne.n	800687e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006878:	2303      	movs	r3, #3
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	e014      	b.n	80068a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d00b      	beq.n	800689e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800688a:	2b02      	cmp	r3, #2
 800688c:	d007      	beq.n	800689e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006892:	2b03      	cmp	r3, #3
 8006894:	d003      	beq.n	800689e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800689a:	2b07      	cmp	r3, #7
 800689c:	d102      	bne.n	80068a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800689e:	2302      	movs	r3, #2
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	e001      	b.n	80068a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80068a4:	2301      	movs	r3, #1
 80068a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	01db      	lsls	r3, r3, #7
 80068b2:	4413      	add	r3, r2
 80068b4:	3384      	adds	r3, #132	; 0x84
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	4611      	mov	r1, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	01d2      	lsls	r2, r2, #7
 80068c2:	440a      	add	r2, r1
 80068c4:	3284      	adds	r2, #132	; 0x84
 80068c6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80068ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	041a      	lsls	r2, r3, #16
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	1acb      	subs	r3, r1, r3
 80068e2:	69f9      	ldr	r1, [r7, #28]
 80068e4:	fb01 f303 	mul.w	r3, r1, r3
 80068e8:	3303      	adds	r3, #3
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	6809      	ldr	r1, [r1, #0]
 80068ee:	4608      	mov	r0, r1
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	01c9      	lsls	r1, r1, #7
 80068f4:	4401      	add	r1, r0
 80068f6:	3184      	adds	r1, #132	; 0x84
 80068f8:	4313      	orrs	r3, r2
 80068fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	01db      	lsls	r3, r3, #7
 8006906:	4413      	add	r3, r2
 8006908:	3384      	adds	r3, #132	; 0x84
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	4611      	mov	r1, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	01d2      	lsls	r2, r2, #7
 8006916:	440a      	add	r2, r1
 8006918:	3284      	adds	r2, #132	; 0x84
 800691a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	01db      	lsls	r3, r3, #7
 800692e:	4413      	add	r3, r2
 8006930:	3384      	adds	r3, #132	; 0x84
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	01db      	lsls	r3, r3, #7
 8006944:	4413      	add	r3, r2
 8006946:	3384      	adds	r3, #132	; 0x84
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	4611      	mov	r1, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	01d2      	lsls	r2, r2, #7
 8006954:	440a      	add	r2, r1
 8006956:	3284      	adds	r2, #132	; 0x84
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	6013      	str	r3, [r2, #0]
}
 800695e:	bf00      	nop
 8006960:	3724      	adds	r7, #36	; 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e22d      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d075      	beq.n	8006a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800698a:	4ba3      	ldr	r3, [pc, #652]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b04      	cmp	r3, #4
 8006994:	d00c      	beq.n	80069b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006996:	4ba0      	ldr	r3, [pc, #640]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d112      	bne.n	80069c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069a2:	4b9d      	ldr	r3, [pc, #628]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ae:	d10b      	bne.n	80069c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	4b99      	ldr	r3, [pc, #612]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05b      	beq.n	8006a74 <HAL_RCC_OscConfig+0x108>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d157      	bne.n	8006a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e208      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d106      	bne.n	80069e0 <HAL_RCC_OscConfig+0x74>
 80069d2:	4b91      	ldr	r3, [pc, #580]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a90      	ldr	r2, [pc, #576]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e01d      	b.n	8006a1c <HAL_RCC_OscConfig+0xb0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e8:	d10c      	bne.n	8006a04 <HAL_RCC_OscConfig+0x98>
 80069ea:	4b8b      	ldr	r3, [pc, #556]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a8a      	ldr	r2, [pc, #552]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b88      	ldr	r3, [pc, #544]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a87      	ldr	r2, [pc, #540]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e00b      	b.n	8006a1c <HAL_RCC_OscConfig+0xb0>
 8006a04:	4b84      	ldr	r3, [pc, #528]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a83      	ldr	r2, [pc, #524]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a80      	ldr	r2, [pc, #512]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d013      	beq.n	8006a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a24:	f7fb fe6e 	bl	8002704 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a2c:	f7fb fe6a 	bl	8002704 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b64      	cmp	r3, #100	; 0x64
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e1cd      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3e:	4b76      	ldr	r3, [pc, #472]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0xc0>
 8006a4a:	e014      	b.n	8006a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fb fe5a 	bl	8002704 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a54:	f7fb fe56 	bl	8002704 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e1b9      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a66:	4b6c      	ldr	r3, [pc, #432]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0xe8>
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d063      	beq.n	8006b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a82:	4b65      	ldr	r3, [pc, #404]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a8e:	4b62      	ldr	r3, [pc, #392]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d11c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9a:	4b5f      	ldr	r3, [pc, #380]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d116      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aa6:	4b5c      	ldr	r3, [pc, #368]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_RCC_OscConfig+0x152>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d001      	beq.n	8006abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e18d      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006abe:	4b56      	ldr	r3, [pc, #344]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	4952      	ldr	r1, [pc, #328]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad2:	e03a      	b.n	8006b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d020      	beq.n	8006b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006adc:	4b4f      	ldr	r3, [pc, #316]	; (8006c1c <HAL_RCC_OscConfig+0x2b0>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae2:	f7fb fe0f 	bl	8002704 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aea:	f7fb fe0b 	bl	8002704 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e16e      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afc:	4b46      	ldr	r3, [pc, #280]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b08:	4b43      	ldr	r3, [pc, #268]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4940      	ldr	r1, [pc, #256]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	600b      	str	r3, [r1, #0]
 8006b1c:	e015      	b.n	8006b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b1e:	4b3f      	ldr	r3, [pc, #252]	; (8006c1c <HAL_RCC_OscConfig+0x2b0>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fb fdee 	bl	8002704 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fb fdea 	bl	8002704 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e14d      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3e:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d030      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d016      	beq.n	8006b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b5e:	4b30      	ldr	r3, [pc, #192]	; (8006c20 <HAL_RCC_OscConfig+0x2b4>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b64:	f7fb fdce 	bl	8002704 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b6c:	f7fb fdca 	bl	8002704 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e12d      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b7e:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x200>
 8006b8a:	e015      	b.n	8006bb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b8c:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <HAL_RCC_OscConfig+0x2b4>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b92:	f7fb fdb7 	bl	8002704 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b98:	e008      	b.n	8006bac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b9a:	f7fb fdb3 	bl	8002704 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e116      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bac:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f0      	bne.n	8006b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80a0 	beq.w	8006d06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bca:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	4a0e      	ldr	r2, [pc, #56]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6413      	str	r3, [r2, #64]	; 0x40
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <HAL_RCC_OscConfig+0x2b8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d121      	bne.n	8006c46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <HAL_RCC_OscConfig+0x2b8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <HAL_RCC_OscConfig+0x2b8>)
 8006c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c0e:	f7fb fd79 	bl	8002704 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c14:	e011      	b.n	8006c3a <HAL_RCC_OscConfig+0x2ce>
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	42470000 	.word	0x42470000
 8006c20:	42470e80 	.word	0x42470e80
 8006c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c28:	f7fb fd6c 	bl	8002704 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e0cf      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3a:	4b6a      	ldr	r3, [pc, #424]	; (8006de4 <HAL_RCC_OscConfig+0x478>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCC_OscConfig+0x2f0>
 8006c4e:	4b66      	ldr	r3, [pc, #408]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	4a65      	ldr	r2, [pc, #404]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5a:	e01c      	b.n	8006c96 <HAL_RCC_OscConfig+0x32a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b05      	cmp	r3, #5
 8006c62:	d10c      	bne.n	8006c7e <HAL_RCC_OscConfig+0x312>
 8006c64:	4b60      	ldr	r3, [pc, #384]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	4a5f      	ldr	r2, [pc, #380]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c6a:	f043 0304 	orr.w	r3, r3, #4
 8006c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c70:	4b5d      	ldr	r3, [pc, #372]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	4a5c      	ldr	r2, [pc, #368]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7c:	e00b      	b.n	8006c96 <HAL_RCC_OscConfig+0x32a>
 8006c7e:	4b5a      	ldr	r3, [pc, #360]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	4a59      	ldr	r2, [pc, #356]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8a:	4b57      	ldr	r3, [pc, #348]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a56      	ldr	r2, [pc, #344]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d015      	beq.n	8006cca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9e:	f7fb fd31 	bl	8002704 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca4:	e00a      	b.n	8006cbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca6:	f7fb fd2d 	bl	8002704 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e08e      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	4b4a      	ldr	r3, [pc, #296]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ee      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x33a>
 8006cc8:	e014      	b.n	8006cf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cca:	f7fb fd1b 	bl	8002704 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cd0:	e00a      	b.n	8006ce8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd2:	f7fb fd17 	bl	8002704 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e078      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce8:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ee      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d105      	bne.n	8006d06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfa:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d064      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d0e:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d05c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d141      	bne.n	8006da6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d22:	4b32      	ldr	r3, [pc, #200]	; (8006dec <HAL_RCC_OscConfig+0x480>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d28:	f7fb fcec 	bl	8002704 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d30:	f7fb fce8 	bl	8002704 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e04b      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	019b      	lsls	r3, r3, #6
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	3b01      	subs	r3, #1
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	061b      	lsls	r3, r3, #24
 8006d72:	491d      	ldr	r1, [pc, #116]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d78:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <HAL_RCC_OscConfig+0x480>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7e:	f7fb fcc1 	bl	8002704 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d86:	f7fb fcbd 	bl	8002704 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e020      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0x41a>
 8006da4:	e018      	b.n	8006dd8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <HAL_RCC_OscConfig+0x480>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dac:	f7fb fcaa 	bl	8002704 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db4:	f7fb fca6 	bl	8002704 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e009      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc6:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <HAL_RCC_OscConfig+0x47c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f0      	bne.n	8006db4 <HAL_RCC_OscConfig+0x448>
 8006dd2:	e001      	b.n	8006dd8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40007000 	.word	0x40007000
 8006de8:	40023800 	.word	0x40023800
 8006dec:	42470060 	.word	0x42470060

08006df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0ca      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e04:	4b67      	ldr	r3, [pc, #412]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d90c      	bls.n	8006e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e12:	4b64      	ldr	r3, [pc, #400]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1a:	4b62      	ldr	r3, [pc, #392]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0b6      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d020      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e44:	4b58      	ldr	r3, [pc, #352]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	4a57      	ldr	r2, [pc, #348]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e5c:	4b52      	ldr	r3, [pc, #328]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	4a51      	ldr	r2, [pc, #324]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e68:	4b4f      	ldr	r3, [pc, #316]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	494c      	ldr	r1, [pc, #304]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d044      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8e:	4b46      	ldr	r3, [pc, #280]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d119      	bne.n	8006ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e07d      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d003      	beq.n	8006eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d107      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eae:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e06d      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ebe:	4b3a      	ldr	r3, [pc, #232]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e065      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ece:	4b36      	ldr	r3, [pc, #216]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f023 0203 	bic.w	r2, r3, #3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4933      	ldr	r1, [pc, #204]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ee0:	f7fb fc10 	bl	8002704 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee8:	f7fb fc0c 	bl	8002704 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e04d      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efe:	4b2a      	ldr	r3, [pc, #168]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 020c 	and.w	r2, r3, #12
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d1eb      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f10:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d20c      	bcs.n	8006f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1e:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f26:	4b1f      	ldr	r3, [pc, #124]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d001      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e030      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f44:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4915      	ldr	r1, [pc, #84]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f62:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	490d      	ldr	r1, [pc, #52]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f76:	f000 f81d 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	091b      	lsrs	r3, r3, #4
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	5cd3      	ldrb	r3, [r2, r3]
 8006f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8006f8e:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8006f92:	2000      	movs	r0, #0
 8006f94:	f7fa f87c 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40023c00 	.word	0x40023c00
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	080214ac 	.word	0x080214ac
 8006fb0:	20000000 	.word	0x20000000

08006fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fca:	4b63      	ldr	r3, [pc, #396]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 030c 	and.w	r3, r3, #12
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d007      	beq.n	8006fe6 <HAL_RCC_GetSysClockFreq+0x32>
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d008      	beq.n	8006fec <HAL_RCC_GetSysClockFreq+0x38>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 80b4 	bne.w	8007148 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fe0:	4b5e      	ldr	r3, [pc, #376]	; (800715c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006fe2:	60bb      	str	r3, [r7, #8]
       break;
 8006fe4:	e0b3      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fe6:	4b5e      	ldr	r3, [pc, #376]	; (8007160 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006fe8:	60bb      	str	r3, [r7, #8]
      break;
 8006fea:	e0b0      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fec:	4b5a      	ldr	r3, [pc, #360]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ff4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ff6:	4b58      	ldr	r3, [pc, #352]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d04a      	beq.n	8007098 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007002:	4b55      	ldr	r3, [pc, #340]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	f04f 0400 	mov.w	r4, #0
 800700c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	ea03 0501 	and.w	r5, r3, r1
 8007018:	ea04 0602 	and.w	r6, r4, r2
 800701c:	4629      	mov	r1, r5
 800701e:	4632      	mov	r2, r6
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	f04f 0400 	mov.w	r4, #0
 8007028:	0154      	lsls	r4, r2, #5
 800702a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800702e:	014b      	lsls	r3, r1, #5
 8007030:	4619      	mov	r1, r3
 8007032:	4622      	mov	r2, r4
 8007034:	1b49      	subs	r1, r1, r5
 8007036:	eb62 0206 	sbc.w	r2, r2, r6
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	f04f 0400 	mov.w	r4, #0
 8007042:	0194      	lsls	r4, r2, #6
 8007044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007048:	018b      	lsls	r3, r1, #6
 800704a:	1a5b      	subs	r3, r3, r1
 800704c:	eb64 0402 	sbc.w	r4, r4, r2
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	00e2      	lsls	r2, r4, #3
 800705a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800705e:	00d9      	lsls	r1, r3, #3
 8007060:	460b      	mov	r3, r1
 8007062:	4614      	mov	r4, r2
 8007064:	195b      	adds	r3, r3, r5
 8007066:	eb44 0406 	adc.w	r4, r4, r6
 800706a:	f04f 0100 	mov.w	r1, #0
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	0262      	lsls	r2, r4, #9
 8007074:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007078:	0259      	lsls	r1, r3, #9
 800707a:	460b      	mov	r3, r1
 800707c:	4614      	mov	r4, r2
 800707e:	4618      	mov	r0, r3
 8007080:	4621      	mov	r1, r4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f04f 0400 	mov.w	r4, #0
 8007088:	461a      	mov	r2, r3
 800708a:	4623      	mov	r3, r4
 800708c:	f7f9 f908 	bl	80002a0 <__aeabi_uldivmod>
 8007090:	4603      	mov	r3, r0
 8007092:	460c      	mov	r4, r1
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e049      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007098:	4b2f      	ldr	r3, [pc, #188]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	099b      	lsrs	r3, r3, #6
 800709e:	f04f 0400 	mov.w	r4, #0
 80070a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	ea03 0501 	and.w	r5, r3, r1
 80070ae:	ea04 0602 	and.w	r6, r4, r2
 80070b2:	4629      	mov	r1, r5
 80070b4:	4632      	mov	r2, r6
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	f04f 0400 	mov.w	r4, #0
 80070be:	0154      	lsls	r4, r2, #5
 80070c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80070c4:	014b      	lsls	r3, r1, #5
 80070c6:	4619      	mov	r1, r3
 80070c8:	4622      	mov	r2, r4
 80070ca:	1b49      	subs	r1, r1, r5
 80070cc:	eb62 0206 	sbc.w	r2, r2, r6
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	f04f 0400 	mov.w	r4, #0
 80070d8:	0194      	lsls	r4, r2, #6
 80070da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80070de:	018b      	lsls	r3, r1, #6
 80070e0:	1a5b      	subs	r3, r3, r1
 80070e2:	eb64 0402 	sbc.w	r4, r4, r2
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	00e2      	lsls	r2, r4, #3
 80070f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80070f4:	00d9      	lsls	r1, r3, #3
 80070f6:	460b      	mov	r3, r1
 80070f8:	4614      	mov	r4, r2
 80070fa:	195b      	adds	r3, r3, r5
 80070fc:	eb44 0406 	adc.w	r4, r4, r6
 8007100:	f04f 0100 	mov.w	r1, #0
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	02a2      	lsls	r2, r4, #10
 800710a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800710e:	0299      	lsls	r1, r3, #10
 8007110:	460b      	mov	r3, r1
 8007112:	4614      	mov	r4, r2
 8007114:	4618      	mov	r0, r3
 8007116:	4621      	mov	r1, r4
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f04f 0400 	mov.w	r4, #0
 800711e:	461a      	mov	r2, r3
 8007120:	4623      	mov	r3, r4
 8007122:	f7f9 f8bd 	bl	80002a0 <__aeabi_uldivmod>
 8007126:	4603      	mov	r3, r0
 8007128:	460c      	mov	r4, r1
 800712a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	3301      	adds	r3, #1
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	60bb      	str	r3, [r7, #8]
      break;
 8007146:	e002      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800714a:	60bb      	str	r3, [r7, #8]
      break;
 800714c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800714e:	68bb      	ldr	r3, [r7, #8]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007158:	40023800 	.word	0x40023800
 800715c:	00f42400 	.word	0x00f42400
 8007160:	007a1200 	.word	0x007a1200

08007164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007168:	4b03      	ldr	r3, [pc, #12]	; (8007178 <HAL_RCC_GetHCLKFreq+0x14>)
 800716a:	681b      	ldr	r3, [r3, #0]
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000000 	.word	0x20000000

0800717c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007180:	f7ff fff0 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 8007184:	4601      	mov	r1, r0
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	0a9b      	lsrs	r3, r3, #10
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	4a03      	ldr	r2, [pc, #12]	; (80071a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007192:	5cd3      	ldrb	r3, [r2, r3]
 8007194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40023800 	.word	0x40023800
 80071a0:	080214bc 	.word	0x080214bc

080071a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071a8:	f7ff ffdc 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 80071ac:	4601      	mov	r1, r0
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	0b5b      	lsrs	r3, r3, #13
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	4a03      	ldr	r2, [pc, #12]	; (80071c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ba:	5cd3      	ldrb	r3, [r2, r3]
 80071bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40023800 	.word	0x40023800
 80071c8:	080214bc 	.word	0x080214bc

080071cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	220f      	movs	r2, #15
 80071da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071dc:	4b12      	ldr	r3, [pc, #72]	; (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0203 	and.w	r2, r3, #3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007200:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RCC_GetClockConfig+0x5c>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	08db      	lsrs	r3, r3, #3
 8007206:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_RCC_GetClockConfig+0x60>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 020f 	and.w	r2, r3, #15
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	601a      	str	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40023800 	.word	0x40023800
 800722c:	40023c00 	.word	0x40023c00

08007230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d105      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007254:	2b00      	cmp	r3, #0
 8007256:	d061      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007258:	4ba3      	ldr	r3, [pc, #652]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800725e:	f7fb fa51 	bl	8002704 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007264:	e008      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007266:	f7fb fa4d 	bl	8002704 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e177      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007278:	4b9c      	ldr	r3, [pc, #624]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1f0      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d009      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	019a      	lsls	r2, r3, #6
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	071b      	lsls	r3, r3, #28
 800729c:	4993      	ldr	r1, [pc, #588]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01f      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072b0:	4b8e      	ldr	r3, [pc, #568]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80072b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b6:	0f1b      	lsrs	r3, r3, #28
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	019a      	lsls	r2, r3, #6
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	061b      	lsls	r3, r3, #24
 80072ca:	431a      	orrs	r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	071b      	lsls	r3, r3, #28
 80072d0:	4986      	ldr	r1, [pc, #536]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072d8:	4b84      	ldr	r3, [pc, #528]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80072da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072de:	f023 021f 	bic.w	r2, r3, #31
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4980      	ldr	r1, [pc, #512]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072f0:	4b7d      	ldr	r3, [pc, #500]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072f6:	f7fb fa05 	bl	8002704 <HAL_GetTick>
 80072fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072fc:	e008      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072fe:	f7fb fa01 	bl	8002704 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e12b      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007310:	4b76      	ldr	r3, [pc, #472]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007330:	2b00      	cmp	r3, #0
 8007332:	d079      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007334:	4b6e      	ldr	r3, [pc, #440]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800733a:	f7fb f9e3 	bl	8002704 <HAL_GetTick>
 800733e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007340:	e008      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007342:	f7fb f9df 	bl	8002704 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e109      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007354:	4b65      	ldr	r3, [pc, #404]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800735c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007360:	d0ef      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	d020      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800736e:	4b5f      	ldr	r3, [pc, #380]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007374:	0f1b      	lsrs	r3, r3, #28
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	019a      	lsls	r2, r3, #6
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	061b      	lsls	r3, r3, #24
 8007388:	431a      	orrs	r2, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	071b      	lsls	r3, r3, #28
 800738e:	4957      	ldr	r1, [pc, #348]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007396:	4b55      	ldr	r3, [pc, #340]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800739c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	021b      	lsls	r3, r3, #8
 80073a8:	4950      	ldr	r1, [pc, #320]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01e      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073bc:	4b4b      	ldr	r3, [pc, #300]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	0e1b      	lsrs	r3, r3, #24
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	019a      	lsls	r2, r3, #6
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	061b      	lsls	r3, r3, #24
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	071b      	lsls	r3, r3, #28
 80073dc:	4943      	ldr	r1, [pc, #268]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80073e4:	4b41      	ldr	r3, [pc, #260]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80073e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	493e      	ldr	r1, [pc, #248]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073fa:	4b3d      	ldr	r3, [pc, #244]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007400:	f7fb f980 	bl	8002704 <HAL_GetTick>
 8007404:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007406:	e008      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007408:	f7fb f97c 	bl	8002704 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e0a6      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800741a:	4b34      	ldr	r3, [pc, #208]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007426:	d1ef      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 808d 	beq.w	8007550 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	4a2b      	ldr	r2, [pc, #172]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007444:	6413      	str	r3, [r2, #64]	; 0x40
 8007446:	4b29      	ldr	r3, [pc, #164]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007452:	4b28      	ldr	r3, [pc, #160]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a27      	ldr	r2, [pc, #156]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800745e:	f7fb f951 	bl	8002704 <HAL_GetTick>
 8007462:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007464:	e008      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007466:	f7fb f94d 	bl	8002704 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e077      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007478:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007484:	4b19      	ldr	r3, [pc, #100]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d039      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d032      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074ac:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074b8:	4a0c      	ldr	r2, [pc, #48]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074be:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d11e      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80074ca:	f7fb f91b 	bl	8002704 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d0:	e014      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074d2:	f7fb f917 	bl	8002704 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d90b      	bls.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e03f      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80074e8:	42470068 	.word	0x42470068
 80074ec:	40023800 	.word	0x40023800
 80074f0:	42470070 	.word	0x42470070
 80074f4:	40007000 	.word	0x40007000
 80074f8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074fc:	4b1c      	ldr	r3, [pc, #112]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0e4      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007514:	d10d      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8007516:	4b16      	ldr	r3, [pc, #88]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800752a:	4911      	ldr	r1, [pc, #68]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800752c:	4313      	orrs	r3, r2
 800752e:	608b      	str	r3, [r1, #8]
 8007530:	e005      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8007532:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	4a0e      	ldr	r2, [pc, #56]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007538:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800753c:	6093      	str	r3, [r2, #8]
 800753e:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800754a:	4909      	ldr	r1, [pc, #36]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800754c:	4313      	orrs	r3, r2
 800754e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0310 	and.w	r3, r3, #16
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007562:	4b04      	ldr	r3, [pc, #16]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007564:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40023800 	.word	0x40023800
 8007574:	424711e0 	.word	0x424711e0

08007578 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e025      	b.n	80075d8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d106      	bne.n	80075a6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f00f f83b 	bl	801661c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f001 fc85 	bl	8008ec8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	461a      	mov	r2, r3
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	f001 fcf0 	bl	8008fae <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d101      	bne.n	80075fc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80075f8:	2302      	movs	r3, #2
 80075fa:	e018      	b.n	800762e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	4618      	mov	r0, r3
 800760e:	f001 fd4d 	bl	80090ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d104      	bne.n	8007624 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2205      	movs	r2, #5
 800761e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007622:	e003      	b.n	800762c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d101      	bne.n	8007650 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
 800764e:	e00e      	b.n	800766e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fd60 	bl	8009124 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e056      	b.n	8007736 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7f9 fbc4 	bl	8000e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	ea42 0103 	orr.w	r1, r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	0c1b      	lsrs	r3, r3, #16
 8007706:	f003 0104 	and.w	r1, r3, #4
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e01a      	b.n	8007786 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007766:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7f9 fba9 	bl	8000ec0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b088      	sub	sp, #32
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_SPI_Transmit+0x22>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e11e      	b.n	80079ee <HAL_SPI_Transmit+0x260>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077b8:	f7fa ffa4 	bl	8002704 <HAL_GetTick>
 80077bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d002      	beq.n	80077d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
 80077d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077d2:	e103      	b.n	80079dc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_SPI_Transmit+0x52>
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077e4:	e0fa      	b.n	80079dc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2203      	movs	r2, #3
 80077ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	88fa      	ldrh	r2, [r7, #6]
 80077fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782c:	d107      	bne.n	800783e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800783c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	d007      	beq.n	800785c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800785a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007864:	d14b      	bne.n	80078fe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SPI_Transmit+0xe6>
 800786e:	8afb      	ldrh	r3, [r7, #22]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d13e      	bne.n	80078f2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	881a      	ldrh	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	1c9a      	adds	r2, r3, #2
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007898:	e02b      	b.n	80078f2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d112      	bne.n	80078ce <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	881a      	ldrh	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	1c9a      	adds	r2, r3, #2
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80078cc:	e011      	b.n	80078f2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ce:	f7fa ff19 	bl	8002704 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d803      	bhi.n	80078e6 <HAL_SPI_Transmit+0x158>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e4:	d102      	bne.n	80078ec <HAL_SPI_Transmit+0x15e>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078f0:	e074      	b.n	80079dc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1ce      	bne.n	800789a <HAL_SPI_Transmit+0x10c>
 80078fc:	e04c      	b.n	8007998 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_SPI_Transmit+0x17e>
 8007906:	8afb      	ldrh	r3, [r7, #22]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d140      	bne.n	800798e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	330c      	adds	r3, #12
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007932:	e02c      	b.n	800798e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b02      	cmp	r3, #2
 8007940:	d113      	bne.n	800796a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	330c      	adds	r3, #12
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795e:	b29b      	uxth	r3, r3
 8007960:	3b01      	subs	r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	86da      	strh	r2, [r3, #54]	; 0x36
 8007968:	e011      	b.n	800798e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800796a:	f7fa fecb 	bl	8002704 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d803      	bhi.n	8007982 <HAL_SPI_Transmit+0x1f4>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d102      	bne.n	8007988 <HAL_SPI_Transmit+0x1fa>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800798c:	e026      	b.n	80079dc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1cd      	bne.n	8007934 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f8a3 	bl	8007ae8 <SPI_EndRxTxTransaction>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	77fb      	strb	r3, [r7, #31]
 80079d8:	e000      	b.n	80079dc <HAL_SPI_Transmit+0x24e>
  }

error:
 80079da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a04:	b2db      	uxtb	r3, r3
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a22:	e04c      	b.n	8007abe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d048      	beq.n	8007abe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007a2c:	f7fa fe6a 	bl	8002704 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d902      	bls.n	8007a42 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d13d      	bne.n	8007abe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a5a:	d111      	bne.n	8007a80 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a64:	d004      	beq.n	8007a70 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6e:	d107      	bne.n	8007a80 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a88:	d10f      	bne.n	8007aaa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e00f      	b.n	8007ade <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d1a3      	bne.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007af4:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <SPI_EndRxTxTransaction+0x7c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a1b      	ldr	r2, [pc, #108]	; (8007b68 <SPI_EndRxTxTransaction+0x80>)
 8007afa:	fba2 2303 	umull	r2, r3, r2, r3
 8007afe:	0d5b      	lsrs	r3, r3, #21
 8007b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b04:	fb02 f303 	mul.w	r3, r2, r3
 8007b08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b12:	d112      	bne.n	8007b3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff ff77 	bl	8007a12 <SPI_WaitFlagStateUntilTimeout>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d016      	beq.n	8007b58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2e:	f043 0220 	orr.w	r2, r3, #32
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e00f      	b.n	8007b5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b50:	2b80      	cmp	r3, #128	; 0x80
 8007b52:	d0f2      	beq.n	8007b3a <SPI_EndRxTxTransaction+0x52>
 8007b54:	e000      	b.n	8007b58 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b56:	bf00      	nop
  }

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000000 	.word	0x20000000
 8007b68:	165e9f81 	.word	0x165e9f81

08007b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e01d      	b.n	8007bba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7f9 f9b2 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f000 fa38 	bl	8008020 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b06      	cmp	r3, #6
 8007be2:	d007      	beq.n	8007bf4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	d007      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0201 	orr.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d122      	bne.n	8007cae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d11b      	bne.n	8007cae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f06f 0202 	mvn.w	r2, #2
 8007c7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f9a5 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007c9a:	e005      	b.n	8007ca8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f997 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9a8 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d122      	bne.n	8007d02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d11b      	bne.n	8007d02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f06f 0204 	mvn.w	r2, #4
 8007cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f97b 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007cee:	e005      	b.n	8007cfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f96d 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f97e 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d122      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b08      	cmp	r3, #8
 8007d1c:	d11b      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f06f 0208 	mvn.w	r2, #8
 8007d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f951 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007d42:	e005      	b.n	8007d50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f943 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f954 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d122      	bne.n	8007daa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f003 0310 	and.w	r3, r3, #16
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d11b      	bne.n	8007daa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f06f 0210 	mvn.w	r2, #16
 8007d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2208      	movs	r2, #8
 8007d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f927 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007d96:	e005      	b.n	8007da4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f919 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f92a 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d10e      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d107      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f06f 0201 	mvn.w	r2, #1
 8007dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7f8 ff35 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de0:	2b80      	cmp	r3, #128	; 0x80
 8007de2:	d10e      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d107      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa98 	bl	8008332 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b40      	cmp	r3, #64	; 0x40
 8007e0e:	d10e      	bne.n	8007e2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d107      	bne.n	8007e2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f8ef 	bl	800800c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	d10e      	bne.n	8007e5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	d107      	bne.n	8007e5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f06f 0220 	mvn.w	r2, #32
 8007e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fa62 	bl	800831e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_TIM_ConfigClockSource+0x18>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e0a6      	b.n	8007fc8 <HAL_TIM_ConfigClockSource+0x166>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e98:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ea0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b40      	cmp	r3, #64	; 0x40
 8007eb0:	d067      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x120>
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d80b      	bhi.n	8007ece <HAL_TIM_ConfigClockSource+0x6c>
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d073      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0x140>
 8007eba:	2b10      	cmp	r3, #16
 8007ebc:	d802      	bhi.n	8007ec4 <HAL_TIM_ConfigClockSource+0x62>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d06f      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ec2:	e078      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d06c      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0x140>
 8007ec8:	2b30      	cmp	r3, #48	; 0x30
 8007eca:	d06a      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007ecc:	e073      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ece:	2b70      	cmp	r3, #112	; 0x70
 8007ed0:	d00d      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x8c>
 8007ed2:	2b70      	cmp	r3, #112	; 0x70
 8007ed4:	d804      	bhi.n	8007ee0 <HAL_TIM_ConfigClockSource+0x7e>
 8007ed6:	2b50      	cmp	r3, #80	; 0x50
 8007ed8:	d033      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0xe0>
 8007eda:	2b60      	cmp	r3, #96	; 0x60
 8007edc:	d041      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007ede:	e06a      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee4:	d066      	beq.n	8007fb4 <HAL_TIM_ConfigClockSource+0x152>
 8007ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eea:	d017      	beq.n	8007f1c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007eec:	e063      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	6899      	ldr	r1, [r3, #8]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f000 f9a9 	bl	8008254 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	609a      	str	r2, [r3, #8]
      break;
 8007f1a:	e04c      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	6899      	ldr	r1, [r3, #8]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f000 f992 	bl	8008254 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689a      	ldr	r2, [r3, #8]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f3e:	609a      	str	r2, [r3, #8]
      break;
 8007f40:	e039      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6859      	ldr	r1, [r3, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f000 f906 	bl	8008160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2150      	movs	r1, #80	; 0x50
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f95f 	bl	800821e <TIM_ITRx_SetConfig>
      break;
 8007f60:	e029      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6818      	ldr	r0, [r3, #0]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	6859      	ldr	r1, [r3, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f000 f925 	bl	80081be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2160      	movs	r1, #96	; 0x60
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f94f 	bl	800821e <TIM_ITRx_SetConfig>
      break;
 8007f80:	e019      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6859      	ldr	r1, [r3, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f000 f8e6 	bl	8008160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2140      	movs	r1, #64	; 0x40
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f93f 	bl	800821e <TIM_ITRx_SetConfig>
      break;
 8007fa0:	e009      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f000 f936 	bl	800821e <TIM_ITRx_SetConfig>
      break;
 8007fb2:	e000      	b.n	8007fb6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007fb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a40      	ldr	r2, [pc, #256]	; (8008134 <TIM_Base_SetConfig+0x114>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803e:	d00f      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a3d      	ldr	r2, [pc, #244]	; (8008138 <TIM_Base_SetConfig+0x118>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00b      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a3c      	ldr	r2, [pc, #240]	; (800813c <TIM_Base_SetConfig+0x11c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d007      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a3b      	ldr	r2, [pc, #236]	; (8008140 <TIM_Base_SetConfig+0x120>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a3a      	ldr	r2, [pc, #232]	; (8008144 <TIM_Base_SetConfig+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d108      	bne.n	8008072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2f      	ldr	r2, [pc, #188]	; (8008134 <TIM_Base_SetConfig+0x114>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d02b      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008080:	d027      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a2c      	ldr	r2, [pc, #176]	; (8008138 <TIM_Base_SetConfig+0x118>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d023      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a2b      	ldr	r2, [pc, #172]	; (800813c <TIM_Base_SetConfig+0x11c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d01f      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a2a      	ldr	r2, [pc, #168]	; (8008140 <TIM_Base_SetConfig+0x120>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01b      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a29      	ldr	r2, [pc, #164]	; (8008144 <TIM_Base_SetConfig+0x124>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d017      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a28      	ldr	r2, [pc, #160]	; (8008148 <TIM_Base_SetConfig+0x128>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a27      	ldr	r2, [pc, #156]	; (800814c <TIM_Base_SetConfig+0x12c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00f      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a26      	ldr	r2, [pc, #152]	; (8008150 <TIM_Base_SetConfig+0x130>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a25      	ldr	r2, [pc, #148]	; (8008154 <TIM_Base_SetConfig+0x134>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a24      	ldr	r2, [pc, #144]	; (8008158 <TIM_Base_SetConfig+0x138>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a23      	ldr	r2, [pc, #140]	; (800815c <TIM_Base_SetConfig+0x13c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d108      	bne.n	80080e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <TIM_Base_SetConfig+0x114>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d003      	beq.n	8008118 <TIM_Base_SetConfig+0xf8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a0c      	ldr	r2, [pc, #48]	; (8008144 <TIM_Base_SetConfig+0x124>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d103      	bne.n	8008120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	615a      	str	r2, [r3, #20]
}
 8008126:	bf00      	nop
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40010000 	.word	0x40010000
 8008138:	40000400 	.word	0x40000400
 800813c:	40000800 	.word	0x40000800
 8008140:	40000c00 	.word	0x40000c00
 8008144:	40010400 	.word	0x40010400
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800
 8008154:	40001800 	.word	0x40001800
 8008158:	40001c00 	.word	0x40001c00
 800815c:	40002000 	.word	0x40002000

08008160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f023 0201 	bic.w	r2, r3, #1
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800818a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f023 030a 	bic.w	r3, r3, #10
 800819c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	621a      	str	r2, [r3, #32]
}
 80081b2:	bf00      	nop
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081be:	b480      	push	{r7}
 80081c0:	b087      	sub	sp, #28
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f023 0210 	bic.w	r2, r3, #16
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	031b      	lsls	r3, r3, #12
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4313      	orrs	r3, r2
 8008204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	621a      	str	r2, [r3, #32]
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	f043 0307 	orr.w	r3, r3, #7
 8008240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	609a      	str	r2, [r3, #8]
}
 8008248:	bf00      	nop
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800826e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	021a      	lsls	r2, r3, #8
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	431a      	orrs	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4313      	orrs	r3, r2
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	609a      	str	r2, [r3, #8]
}
 8008288:	bf00      	nop
 800828a:	371c      	adds	r7, #28
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e032      	b.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082e4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e03f      	b.n	80083d8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d106      	bne.n	8008372 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7f8 fde7 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2224      	movs	r2, #36	; 0x24
 8008376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008388:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fb92 	bl	8008ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	691a      	ldr	r2, [r3, #16]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800839e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	4613      	mov	r3, r2
 80083ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	f040 8083 	bne.w	8008508 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <HAL_UART_Transmit+0x2e>
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e07b      	b.n	800850a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_UART_Transmit+0x40>
 800841c:	2302      	movs	r3, #2
 800841e:	e074      	b.n	800850a <HAL_UART_Transmit+0x12a>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2221      	movs	r2, #33	; 0x21
 8008432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008436:	f7fa f965 	bl	8002704 <HAL_GetTick>
 800843a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	88fa      	ldrh	r2, [r7, #6]
 8008440:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008448:	e042      	b.n	80084d0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008460:	d122      	bne.n	80084a8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2200      	movs	r2, #0
 800846a:	2180      	movs	r1, #128	; 0x80
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f9b5 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e046      	b.n	800850a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800848e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3302      	adds	r3, #2
 800849c:	60bb      	str	r3, [r7, #8]
 800849e:	e017      	b.n	80084d0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60bb      	str	r3, [r7, #8]
 80084a6:	e013      	b.n	80084d0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2200      	movs	r2, #0
 80084b0:	2180      	movs	r1, #128	; 0x80
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f000 f992 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e023      	b.n	800850a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	60ba      	str	r2, [r7, #8]
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1b7      	bne.n	800844a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2200      	movs	r2, #0
 80084e2:	2140      	movs	r1, #64	; 0x40
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 f979 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e00a      	b.n	800850a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	e000      	b.n	800850a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008508:	2302      	movs	r3, #2
  }
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	4613      	mov	r3, r2
 800851e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b20      	cmp	r3, #32
 800852a:	d140      	bne.n	80085ae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <HAL_UART_Receive_IT+0x26>
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e039      	b.n	80085b0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008542:	2b01      	cmp	r3, #1
 8008544:	d101      	bne.n	800854a <HAL_UART_Receive_IT+0x38>
 8008546:	2302      	movs	r3, #2
 8008548:	e032      	b.n	80085b0 <HAL_UART_Receive_IT+0x9e>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	88fa      	ldrh	r2, [r7, #6]
 800855c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	88fa      	ldrh	r2, [r7, #6]
 8008562:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2222      	movs	r2, #34	; 0x22
 800856e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008588:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695a      	ldr	r2, [r3, #20]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f042 0201 	orr.w	r2, r2, #1
 8008598:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f042 0220 	orr.w	r2, r2, #32
 80085a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e000      	b.n	80085b0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80085ae:	2302      	movs	r3, #2
  }
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80085dc:	2300      	movs	r3, #0
 80085de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f003 030f 	and.w	r3, r3, #15
 80085ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10d      	bne.n	800860e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <HAL_UART_IRQHandler+0x52>
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9d2 	bl	80089b0 <UART_Receive_IT>
      return;
 800860c:	e0cc      	b.n	80087a8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80ab 	beq.w	800876c <HAL_UART_IRQHandler+0x1b0>
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <HAL_UART_IRQHandler+0x70>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80a0 	beq.w	800876c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_UART_IRQHandler+0x90>
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008644:	f043 0201 	orr.w	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <HAL_UART_IRQHandler+0xb0>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008664:	f043 0202 	orr.w	r2, r3, #2
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <HAL_UART_IRQHandler+0xd0>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008684:	f043 0204 	orr.w	r2, r3, #4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <HAL_UART_IRQHandler+0xf0>
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a4:	f043 0208 	orr.w	r2, r3, #8
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d078      	beq.n	80087a6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <HAL_UART_IRQHandler+0x112>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f971 	bl	80089b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	bf0c      	ite	eq
 80086dc:	2301      	moveq	r3, #1
 80086de:	2300      	movne	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <HAL_UART_IRQHandler+0x13a>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d031      	beq.n	800875a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f8ba 	bl	8008870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b40      	cmp	r3, #64	; 0x40
 8008708:	d123      	bne.n	8008752 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008718:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	2b00      	cmp	r3, #0
 8008720:	d013      	beq.n	800874a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	4a22      	ldr	r2, [pc, #136]	; (80087b0 <HAL_UART_IRQHandler+0x1f4>)
 8008728:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	4618      	mov	r0, r3
 8008730:	f7fa f947 	bl	80029c2 <HAL_DMA_Abort_IT>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d016      	beq.n	8008768 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008748:	e00e      	b.n	8008768 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f83c 	bl	80087c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008750:	e00a      	b.n	8008768 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f838 	bl	80087c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	e006      	b.n	8008768 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f834 	bl	80087c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008766:	e01e      	b.n	80087a6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008768:	bf00      	nop
    return;
 800876a:	e01c      	b.n	80087a6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008772:	2b00      	cmp	r3, #0
 8008774:	d008      	beq.n	8008788 <HAL_UART_IRQHandler+0x1cc>
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8a7 	bl	80088d4 <UART_Transmit_IT>
    return;
 8008786:	e00f      	b.n	80087a8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <HAL_UART_IRQHandler+0x1ec>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f8ef 	bl	8008980 <UART_EndTransmit_IT>
    return;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80087a6:	bf00      	nop
  }
}
 80087a8:	3720      	adds	r7, #32
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	080088ad 	.word	0x080088ad

080087b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ec:	e02c      	b.n	8008848 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f4:	d028      	beq.n	8008848 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d007      	beq.n	800880c <UART_WaitOnFlagUntilTimeout+0x30>
 80087fc:	f7f9 ff82 	bl	8002704 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	429a      	cmp	r2, r3
 800880a:	d21d      	bcs.n	8008848 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800881a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0201 	bic.w	r2, r2, #1
 800882a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2220      	movs	r2, #32
 8008838:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e00f      	b.n	8008868 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	4013      	ands	r3, r2
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	bf0c      	ite	eq
 8008858:	2301      	moveq	r3, #1
 800885a:	2300      	movne	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	429a      	cmp	r2, r3
 8008864:	d0c3      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008886:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff ff7e 	bl	80087c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b21      	cmp	r3, #33	; 0x21
 80088e6:	d144      	bne.n	8008972 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f0:	d11a      	bne.n	8008928 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008906:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d105      	bne.n	800891c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	1c9a      	adds	r2, r3, #2
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	621a      	str	r2, [r3, #32]
 800891a:	e00e      	b.n	800893a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	621a      	str	r2, [r3, #32]
 8008926:	e008      	b.n	800893a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	1c59      	adds	r1, r3, #1
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6211      	str	r1, [r2, #32]
 8008932:	781a      	ldrb	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29b      	uxth	r3, r3
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	4619      	mov	r1, r3
 8008948:	84d1      	strh	r1, [r2, #38]	; 0x26
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10f      	bne.n	800896e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	e000      	b.n	8008974 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008972:	2302      	movs	r3, #2
  }
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68da      	ldr	r2, [r3, #12]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008996:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ff07 	bl	80087b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b22      	cmp	r3, #34	; 0x22
 80089c2:	d171      	bne.n	8008aa8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089cc:	d123      	bne.n	8008a16 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10e      	bne.n	80089fa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	1c9a      	adds	r2, r3, #2
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28
 80089f8:	e029      	b.n	8008a4e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28
 8008a14:	e01b      	b.n	8008a4e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6858      	ldr	r0, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	1c59      	adds	r1, r3, #1
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6291      	str	r1, [r2, #40]	; 0x28
 8008a2e:	b2c2      	uxtb	r2, r0
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e00c      	b.n	8008a4e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a40:	1c58      	adds	r0, r3, #1
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	6288      	str	r0, [r1, #40]	; 0x28
 8008a46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d120      	bne.n	8008aa4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0220 	bic.w	r2, r2, #32
 8008a70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695a      	ldr	r2, [r3, #20]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0201 	bic.w	r2, r2, #1
 8008a90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7f7 fd9a 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e002      	b.n	8008aaa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e000      	b.n	8008aaa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008aa8:	2302      	movs	r3, #2
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ab4:	b5b0      	push	{r4, r5, r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008af4:	f023 030c 	bic.w	r3, r3, #12
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	68f9      	ldr	r1, [r7, #12]
 8008afe:	430b      	orrs	r3, r1
 8008b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b20:	f040 80e4 	bne.w	8008cec <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4aab      	ldr	r2, [pc, #684]	; (8008dd8 <UART_SetConfig+0x324>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d004      	beq.n	8008b38 <UART_SetConfig+0x84>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4aaa      	ldr	r2, [pc, #680]	; (8008ddc <UART_SetConfig+0x328>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d16c      	bne.n	8008c12 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008b38:	f7fe fb34 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009a      	lsls	r2, r3, #2
 8008b46:	441a      	add	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b52:	4aa3      	ldr	r2, [pc, #652]	; (8008de0 <UART_SetConfig+0x32c>)
 8008b54:	fba2 2303 	umull	r2, r3, r2, r3
 8008b58:	095b      	lsrs	r3, r3, #5
 8008b5a:	011c      	lsls	r4, r3, #4
 8008b5c:	f7fe fb22 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008b60:	4602      	mov	r2, r0
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009a      	lsls	r2, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	fbb2 f5f3 	udiv	r5, r2, r3
 8008b76:	f7fe fb15 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009a      	lsls	r2, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b90:	4a93      	ldr	r2, [pc, #588]	; (8008de0 <UART_SetConfig+0x32c>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	2264      	movs	r2, #100	; 0x64
 8008b9a:	fb02 f303 	mul.w	r3, r2, r3
 8008b9e:	1aeb      	subs	r3, r5, r3
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	3332      	adds	r3, #50	; 0x32
 8008ba4:	4a8e      	ldr	r2, [pc, #568]	; (8008de0 <UART_SetConfig+0x32c>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bb2:	441c      	add	r4, r3
 8008bb4:	f7fe faf6 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009a      	lsls	r2, r3, #2
 8008bc2:	441a      	add	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	fbb2 f5f3 	udiv	r5, r2, r3
 8008bce:	f7fe fae9 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009a      	lsls	r2, r3, #2
 8008bdc:	441a      	add	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be8:	4a7d      	ldr	r2, [pc, #500]	; (8008de0 <UART_SetConfig+0x32c>)
 8008bea:	fba2 2303 	umull	r2, r3, r2, r3
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	2264      	movs	r2, #100	; 0x64
 8008bf2:	fb02 f303 	mul.w	r3, r2, r3
 8008bf6:	1aeb      	subs	r3, r5, r3
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	3332      	adds	r3, #50	; 0x32
 8008bfc:	4a78      	ldr	r2, [pc, #480]	; (8008de0 <UART_SetConfig+0x32c>)
 8008bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008c02:	095b      	lsrs	r3, r3, #5
 8008c04:	f003 0207 	and.w	r2, r3, #7
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4422      	add	r2, r4
 8008c0e:	609a      	str	r2, [r3, #8]
 8008c10:	e154      	b.n	8008ebc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008c12:	f7fe fab3 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008c16:	4602      	mov	r2, r0
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009a      	lsls	r2, r3, #2
 8008c20:	441a      	add	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2c:	4a6c      	ldr	r2, [pc, #432]	; (8008de0 <UART_SetConfig+0x32c>)
 8008c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c32:	095b      	lsrs	r3, r3, #5
 8008c34:	011c      	lsls	r4, r3, #4
 8008c36:	f7fe faa1 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	009a      	lsls	r2, r3, #2
 8008c44:	441a      	add	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8008c50:	f7fe fa94 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008c54:	4602      	mov	r2, r0
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009a      	lsls	r2, r3, #2
 8008c5e:	441a      	add	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c6a:	4a5d      	ldr	r2, [pc, #372]	; (8008de0 <UART_SetConfig+0x32c>)
 8008c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	2264      	movs	r2, #100	; 0x64
 8008c74:	fb02 f303 	mul.w	r3, r2, r3
 8008c78:	1aeb      	subs	r3, r5, r3
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	3332      	adds	r3, #50	; 0x32
 8008c7e:	4a58      	ldr	r2, [pc, #352]	; (8008de0 <UART_SetConfig+0x32c>)
 8008c80:	fba2 2303 	umull	r2, r3, r2, r3
 8008c84:	095b      	lsrs	r3, r3, #5
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c8c:	441c      	add	r4, r3
 8008c8e:	f7fe fa75 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008c92:	4602      	mov	r2, r0
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009a      	lsls	r2, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	fbb2 f5f3 	udiv	r5, r2, r3
 8008ca8:	f7fe fa68 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008cac:	4602      	mov	r2, r0
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009a      	lsls	r2, r3, #2
 8008cb6:	441a      	add	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc2:	4a47      	ldr	r2, [pc, #284]	; (8008de0 <UART_SetConfig+0x32c>)
 8008cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	2264      	movs	r2, #100	; 0x64
 8008ccc:	fb02 f303 	mul.w	r3, r2, r3
 8008cd0:	1aeb      	subs	r3, r5, r3
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	3332      	adds	r3, #50	; 0x32
 8008cd6:	4a42      	ldr	r2, [pc, #264]	; (8008de0 <UART_SetConfig+0x32c>)
 8008cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cdc:	095b      	lsrs	r3, r3, #5
 8008cde:	f003 0207 	and.w	r2, r3, #7
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4422      	add	r2, r4
 8008ce8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8008cea:	e0e7      	b.n	8008ebc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a39      	ldr	r2, [pc, #228]	; (8008dd8 <UART_SetConfig+0x324>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d004      	beq.n	8008d00 <UART_SetConfig+0x24c>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a38      	ldr	r2, [pc, #224]	; (8008ddc <UART_SetConfig+0x328>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d171      	bne.n	8008de4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008d00:	f7fe fa50 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008d04:	4602      	mov	r2, r0
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009a      	lsls	r2, r3, #2
 8008d0e:	441a      	add	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1a:	4a31      	ldr	r2, [pc, #196]	; (8008de0 <UART_SetConfig+0x32c>)
 8008d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	011c      	lsls	r4, r3, #4
 8008d24:	f7fe fa3e 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009a      	lsls	r2, r3, #2
 8008d32:	441a      	add	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8008d3e:	f7fe fa31 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009a      	lsls	r2, r3, #2
 8008d4c:	441a      	add	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d58:	4a21      	ldr	r2, [pc, #132]	; (8008de0 <UART_SetConfig+0x32c>)
 8008d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5e:	095b      	lsrs	r3, r3, #5
 8008d60:	2264      	movs	r2, #100	; 0x64
 8008d62:	fb02 f303 	mul.w	r3, r2, r3
 8008d66:	1aeb      	subs	r3, r5, r3
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	3332      	adds	r3, #50	; 0x32
 8008d6c:	4a1c      	ldr	r2, [pc, #112]	; (8008de0 <UART_SetConfig+0x32c>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d78:	441c      	add	r4, r3
 8008d7a:	f7fe fa13 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009a      	lsls	r2, r3, #2
 8008d88:	441a      	add	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	fbb2 f5f3 	udiv	r5, r2, r3
 8008d94:	f7fe fa06 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009a      	lsls	r2, r3, #2
 8008da2:	441a      	add	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dae:	4a0c      	ldr	r2, [pc, #48]	; (8008de0 <UART_SetConfig+0x32c>)
 8008db0:	fba2 2303 	umull	r2, r3, r2, r3
 8008db4:	095b      	lsrs	r3, r3, #5
 8008db6:	2264      	movs	r2, #100	; 0x64
 8008db8:	fb02 f303 	mul.w	r3, r2, r3
 8008dbc:	1aeb      	subs	r3, r5, r3
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	3332      	adds	r3, #50	; 0x32
 8008dc2:	4a07      	ldr	r2, [pc, #28]	; (8008de0 <UART_SetConfig+0x32c>)
 8008dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc8:	095b      	lsrs	r3, r3, #5
 8008dca:	f003 020f 	and.w	r2, r3, #15
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4422      	add	r2, r4
 8008dd4:	609a      	str	r2, [r3, #8]
 8008dd6:	e071      	b.n	8008ebc <UART_SetConfig+0x408>
 8008dd8:	40011000 	.word	0x40011000
 8008ddc:	40011400 	.word	0x40011400
 8008de0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008de4:	f7fe f9ca 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008de8:	4602      	mov	r2, r0
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009a      	lsls	r2, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfe:	4a31      	ldr	r2, [pc, #196]	; (8008ec4 <UART_SetConfig+0x410>)
 8008e00:	fba2 2303 	umull	r2, r3, r2, r3
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	011c      	lsls	r4, r3, #4
 8008e08:	f7fe f9b8 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009a      	lsls	r2, r3, #2
 8008e16:	441a      	add	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8008e22:	f7fe f9ab 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008e26:	4602      	mov	r2, r0
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009a      	lsls	r2, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3c:	4a21      	ldr	r2, [pc, #132]	; (8008ec4 <UART_SetConfig+0x410>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	2264      	movs	r2, #100	; 0x64
 8008e46:	fb02 f303 	mul.w	r3, r2, r3
 8008e4a:	1aeb      	subs	r3, r5, r3
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	3332      	adds	r3, #50	; 0x32
 8008e50:	4a1c      	ldr	r2, [pc, #112]	; (8008ec4 <UART_SetConfig+0x410>)
 8008e52:	fba2 2303 	umull	r2, r3, r2, r3
 8008e56:	095b      	lsrs	r3, r3, #5
 8008e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e5c:	441c      	add	r4, r3
 8008e5e:	f7fe f98d 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009a      	lsls	r2, r3, #2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	fbb2 f5f3 	udiv	r5, r2, r3
 8008e78:	f7fe f980 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009a      	lsls	r2, r3, #2
 8008e86:	441a      	add	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	4a0c      	ldr	r2, [pc, #48]	; (8008ec4 <UART_SetConfig+0x410>)
 8008e94:	fba2 2303 	umull	r2, r3, r2, r3
 8008e98:	095b      	lsrs	r3, r3, #5
 8008e9a:	2264      	movs	r2, #100	; 0x64
 8008e9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ea0:	1aeb      	subs	r3, r5, r3
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	3332      	adds	r3, #50	; 0x32
 8008ea6:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <UART_SetConfig+0x410>)
 8008ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4422      	add	r2, r4
 8008eb8:	609a      	str	r2, [r3, #8]
}
 8008eba:	e7ff      	b.n	8008ebc <UART_SetConfig+0x408>
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ec4:	51eb851f 	.word	0x51eb851f

08008ec8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d029      	beq.n	8008f36 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008eee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ef2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008efc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008f02:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008f08:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008f0e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008f14:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008f1a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008f20:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008f26:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	e034      	b.n	8008fa0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f42:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f4c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008f52:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f6a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f74:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008f7a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008f80:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008f86:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008f8c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b087      	sub	sp, #28
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d02e      	beq.n	8009026 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fd4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008fe4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008fee:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008ff8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009002:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	3b01      	subs	r3, #1
 800900a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800900c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	3b01      	subs	r3, #1
 8009014:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009016:	4313      	orrs	r3, r2
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	609a      	str	r2, [r3, #8]
 8009024:	e03b      	b.n	800909e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009036:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	3b01      	subs	r3, #1
 800903e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	3b01      	subs	r3, #1
 8009046:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009048:	4313      	orrs	r3, r2
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800905c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	3b01      	subs	r3, #1
 800906a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800906c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	3b01      	subs	r3, #1
 8009074:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009076:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	3b01      	subs	r3, #1
 800907e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009080:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	3b01      	subs	r3, #1
 8009088:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800908a:	4313      	orrs	r3, r2
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80090c8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80090d2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80090da:	4313      	orrs	r3, r2
 80090dc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80090e4:	f7f9 fb0e 	bl	8002704 <HAL_GetTick>
 80090e8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80090ea:	e010      	b.n	800910e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d00c      	beq.n	800910e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d007      	beq.n	800910a <FMC_SDRAM_SendCommand+0x5e>
 80090fa:	f7f9 fb03 	bl	8002704 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d201      	bcs.n	800910e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e006      	b.n	800911c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b20      	cmp	r3, #32
 8009118:	d0e8      	beq.n	80090ec <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	695a      	ldr	r2, [r3, #20]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	431a      	orrs	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800914a:	b084      	sub	sp, #16
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	f107 001c 	add.w	r0, r7, #28
 8009158:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	2b01      	cmp	r3, #1
 8009160:	d122      	bne.n	80091a8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800918a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d105      	bne.n	800919c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f949 	bl	8009434 <USB_CoreReset>
 80091a2:	4603      	mov	r3, r0
 80091a4:	73fb      	strb	r3, [r7, #15]
 80091a6:	e01a      	b.n	80091de <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f93d 	bl	8009434 <USB_CoreReset>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d106      	bne.n	80091d2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
 80091d0:	e005      	b.n	80091de <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d10b      	bne.n	80091fc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f043 0206 	orr.w	r2, r3, #6
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f043 0220 	orr.w	r2, r3, #32
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009208:	b004      	add	sp, #16
 800920a:	4770      	bx	lr

0800920c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f043 0201 	orr.w	r2, r3, #1
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f023 0201 	bic.w	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d106      	bne.n	800927c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60da      	str	r2, [r3, #12]
 800927a:	e00b      	b.n	8009294 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	60da      	str	r2, [r3, #12]
 800928e:	e001      	b.n	8009294 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e003      	b.n	800929c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009294:	2032      	movs	r0, #50	; 0x32
 8009296:	f7f9 fa41 	bl	800271c <HAL_Delay>

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	019b      	lsls	r3, r3, #6
 80092b6:	f043 0220 	orr.w	r2, r3, #32
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a09      	ldr	r2, [pc, #36]	; (80092ec <USB_FlushTxFifo+0x48>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d901      	bls.n	80092d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e006      	b.n	80092de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d0f0      	beq.n	80092be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	00030d40 	.word	0x00030d40

080092f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2210      	movs	r2, #16
 8009300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3301      	adds	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4a09      	ldr	r2, [pc, #36]	; (8009330 <USB_FlushRxFifo+0x40>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d901      	bls.n	8009314 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e006      	b.n	8009322 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b10      	cmp	r3, #16
 800931e:	d0f0      	beq.n	8009302 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	00030d40 	.word	0x00030d40

08009334 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009334:	b480      	push	{r7}
 8009336:	b089      	sub	sp, #36	; 0x24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	4611      	mov	r1, r2
 8009340:	461a      	mov	r2, r3
 8009342:	460b      	mov	r3, r1
 8009344:	71fb      	strb	r3, [r7, #7]
 8009346:	4613      	mov	r3, r2
 8009348:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009356:	2b00      	cmp	r3, #0
 8009358:	d11a      	bne.n	8009390 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800935a:	88bb      	ldrh	r3, [r7, #4]
 800935c:	3303      	adds	r3, #3
 800935e:	089b      	lsrs	r3, r3, #2
 8009360:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009362:	2300      	movs	r3, #0
 8009364:	61bb      	str	r3, [r7, #24]
 8009366:	e00f      	b.n	8009388 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	031a      	lsls	r2, r3, #12
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	4413      	add	r3, r2
 8009370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009374:	461a      	mov	r2, r3
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	3304      	adds	r3, #4
 8009380:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	3301      	adds	r3, #1
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d3eb      	bcc.n	8009368 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3724      	adds	r7, #36	; 0x24
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800939e:	b480      	push	{r7}
 80093a0:	b089      	sub	sp, #36	; 0x24
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	60f8      	str	r0, [r7, #12]
 80093a6:	60b9      	str	r1, [r7, #8]
 80093a8:	4613      	mov	r3, r2
 80093aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	3303      	adds	r3, #3
 80093b8:	089b      	lsrs	r3, r3, #2
 80093ba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80093bc:	2300      	movs	r3, #0
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	e00b      	b.n	80093da <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	3304      	adds	r3, #4
 80093d2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3ef      	bcc.n	80093c2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80093e2:	69fb      	ldr	r3, [r7, #28]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3724      	adds	r7, #36	; 0x24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4013      	ands	r3, r2
 8009406:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009408:	68fb      	ldr	r3, [r7, #12]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	f003 0301 	and.w	r3, r3, #1
}
 8009426:	4618      	mov	r0, r3
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	4a13      	ldr	r2, [pc, #76]	; (8009498 <USB_CoreReset+0x64>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d901      	bls.n	8009452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e01b      	b.n	800948a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	daf2      	bge.n	8009440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f043 0201 	orr.w	r2, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a09      	ldr	r2, [pc, #36]	; (8009498 <USB_CoreReset+0x64>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d901      	bls.n	800947c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e006      	b.n	800948a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b01      	cmp	r3, #1
 8009486:	d0f0      	beq.n	800946a <USB_CoreReset+0x36>

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	00030d40 	.word	0x00030d40

0800949c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800949c:	b084      	sub	sp, #16
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	f107 001c 	add.w	r0, r7, #28
 80094aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094b8:	461a      	mov	r2, r3
 80094ba:	2300      	movs	r3, #0
 80094bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d018      	beq.n	8009520 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d10a      	bne.n	800950a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009502:	f043 0304 	orr.w	r3, r3, #4
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	e014      	b.n	8009534 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009518:	f023 0304 	bic.w	r3, r3, #4
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	e009      	b.n	8009534 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800952e:	f023 0304 	bic.w	r3, r3, #4
 8009532:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009534:	2110      	movs	r1, #16
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff feb4 	bl	80092a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff fed7 	bl	80092f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	e015      	b.n	8009574 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4413      	add	r3, r2
 8009550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009554:	461a      	mov	r2, r3
 8009556:	f04f 33ff 	mov.w	r3, #4294967295
 800955a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	4413      	add	r3, r2
 8009564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009568:	461a      	mov	r2, r3
 800956a:	2300      	movs	r3, #0
 800956c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3301      	adds	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	429a      	cmp	r2, r3
 800957a:	d3e5      	bcc.n	8009548 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800957c:	2101      	movs	r1, #1
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f8ac 	bl	80096dc <USB_DriveVbus>

  HAL_Delay(200U);
 8009584:	20c8      	movs	r0, #200	; 0xc8
 8009586:	f7f9 f8c9 	bl	800271c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f04f 32ff 	mov.w	r2, #4294967295
 8009596:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a14      	ldr	r2, [pc, #80]	; (8009600 <USB_HostInit+0x164>)
 80095b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a13      	ldr	r2, [pc, #76]	; (8009604 <USB_HostInit+0x168>)
 80095b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80095ba:	e009      	b.n	80095d0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2280      	movs	r2, #128	; 0x80
 80095c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a10      	ldr	r2, [pc, #64]	; (8009608 <USB_HostInit+0x16c>)
 80095c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a10      	ldr	r2, [pc, #64]	; (800960c <USB_HostInit+0x170>)
 80095cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d105      	bne.n	80095e2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	f043 0210 	orr.w	r2, r3, #16
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699a      	ldr	r2, [r3, #24]
 80095e6:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <USB_HostInit+0x174>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095fa:	b004      	add	sp, #16
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	01000200 	.word	0x01000200
 8009604:	00e00300 	.word	0x00e00300
 8009608:	00600080 	.word	0x00600080
 800960c:	004000e0 	.word	0x004000e0
 8009610:	a3200008 	.word	0xa3200008

08009614 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800964c:	4313      	orrs	r3, r2
 800964e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d107      	bne.n	8009666 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800965c:	461a      	mov	r2, r3
 800965e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009662:	6053      	str	r3, [r2, #4]
 8009664:	e009      	b.n	800967a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d106      	bne.n	800967a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009672:	461a      	mov	r2, r3
 8009674:	f241 7370 	movw	r3, #6000	; 0x1770
 8009678:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80096a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80096b8:	2064      	movs	r0, #100	; 0x64
 80096ba:	f7f9 f82f 	bl	800271c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80096cc:	200a      	movs	r0, #10
 80096ce:	f7f9 f825 	bl	800271c <HAL_Delay>

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009700:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <USB_DriveVbus+0x44>
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d106      	bne.n	8009720 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800971a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800971e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972a:	d109      	bne.n	8009740 <USB_DriveVbus+0x64>
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800973a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800973e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800974e:	b480      	push	{r7}
 8009750:	b085      	sub	sp, #20
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	0c5b      	lsrs	r3, r3, #17
 800976c:	f003 0303 	and.w	r3, r3, #3
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	b29b      	uxth	r3, r3
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
	...

080097a0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	461a      	mov	r2, r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	70fb      	strb	r3, [r7, #3]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70bb      	strb	r3, [r7, #2]
 80097b6:	4613      	mov	r3, r2
 80097b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ce:	461a      	mov	r2, r3
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80097d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d87e      	bhi.n	80098dc <USB_HC_Init+0x13c>
 80097de:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <USB_HC_Init+0x44>)
 80097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e4:	080097f5 	.word	0x080097f5
 80097e8:	0800989f 	.word	0x0800989f
 80097ec:	080097f5 	.word	0x080097f5
 80097f0:	08009861 	.word	0x08009861
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009800:	461a      	mov	r2, r3
 8009802:	f240 439d 	movw	r3, #1181	; 0x49d
 8009806:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009808:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da10      	bge.n	8009832 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	4413      	add	r3, r2
 8009818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	440a      	add	r2, r1
 8009826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800982a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800982e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009830:	e057      	b.n	80098e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800983a:	2b00      	cmp	r3, #0
 800983c:	d051      	beq.n	80098e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	4413      	add	r3, r2
 8009846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	440a      	add	r2, r1
 8009854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009858:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800985c:	60d3      	str	r3, [r2, #12]
      break;
 800985e:	e040      	b.n	80098e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	4413      	add	r3, r2
 8009868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986c:	461a      	mov	r2, r3
 800986e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009872:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009874:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009878:	2b00      	cmp	r3, #0
 800987a:	da34      	bge.n	80098e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	015a      	lsls	r2, r3, #5
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4413      	add	r3, r2
 8009884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	0151      	lsls	r1, r2, #5
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	440a      	add	r2, r1
 8009892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800989a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800989c:	e023      	b.n	80098e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098aa:	461a      	mov	r2, r3
 80098ac:	f240 2325 	movw	r3, #549	; 0x225
 80098b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da17      	bge.n	80098ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80098ba:	78fb      	ldrb	r3, [r7, #3]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80098d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80098da:	e006      	b.n	80098ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]
      break;
 80098e0:	e004      	b.n	80098ec <USB_HC_Init+0x14c>
      break;
 80098e2:	bf00      	nop
 80098e4:	e002      	b.n	80098ec <USB_HC_Init+0x14c>
      break;
 80098e6:	bf00      	nop
 80098e8:	e000      	b.n	80098ec <USB_HC_Init+0x14c>
      break;
 80098ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	2101      	movs	r1, #1
 80098fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009906:	4313      	orrs	r3, r2
 8009908:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009916:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800991a:	2b00      	cmp	r3, #0
 800991c:	da03      	bge.n	8009926 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800991e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009922:	613b      	str	r3, [r7, #16]
 8009924:	e001      	b.n	800992a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800992a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d103      	bne.n	800993a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e001      	b.n	800993e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800993e:	787b      	ldrb	r3, [r7, #1]
 8009940:	059b      	lsls	r3, r3, #22
 8009942:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009946:	78bb      	ldrb	r3, [r7, #2]
 8009948:	02db      	lsls	r3, r3, #11
 800994a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800994e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009950:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009954:	049b      	lsls	r3, r3, #18
 8009956:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800995a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800995c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800995e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009962:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	0159      	lsls	r1, r3, #5
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	440b      	add	r3, r1
 8009970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009974:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800997a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800997c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009980:	2b03      	cmp	r3, #3
 8009982:	d10f      	bne.n	80099a4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4413      	add	r3, r2
 800998c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	78fa      	ldrb	r2, [r7, #3]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	440a      	add	r2, r1
 800999a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800999e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099a2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop

080099b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08c      	sub	sp, #48	; 0x30
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	4613      	mov	r3, r2
 80099c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80099cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d028      	beq.n	8009a30 <USB_HC_StartXfer+0x7c>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	791b      	ldrb	r3, [r3, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d124      	bne.n	8009a30 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <USB_HC_StartXfer+0x50>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	795b      	ldrb	r3, [r3, #5]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d107      	bne.n	8009a04 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	785b      	ldrb	r3, [r3, #1]
 80099f8:	4619      	mov	r1, r3
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 fa2e 	bl	8009e5c <USB_DoPing>
      return HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	e112      	b.n	8009c2a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d112      	bne.n	8009a30 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	0151      	lsls	r1, r2, #5
 8009a1c:	6a3a      	ldr	r2, [r7, #32]
 8009a1e:	440a      	add	r2, r1
 8009a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009a28:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d018      	beq.n	8009a6a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	8912      	ldrh	r2, [r2, #8]
 8009a40:	4413      	add	r3, r2
 8009a42:	3b01      	subs	r3, #1
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	8912      	ldrh	r2, [r2, #8]
 8009a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a4c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009a4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009a50:	8b7b      	ldrh	r3, [r7, #26]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d90b      	bls.n	8009a6e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8009a56:	8b7b      	ldrh	r3, [r7, #26]
 8009a58:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009a5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	8912      	ldrh	r2, [r2, #8]
 8009a60:	fb02 f203 	mul.w	r2, r2, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	611a      	str	r2, [r3, #16]
 8009a68:	e001      	b.n	8009a6e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	78db      	ldrb	r3, [r3, #3]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d006      	beq.n	8009a84 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009a76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	8912      	ldrh	r2, [r2, #8]
 8009a7c:	fb02 f203 	mul.w	r2, r2, r3
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a8e:	04d9      	lsls	r1, r3, #19
 8009a90:	4b68      	ldr	r3, [pc, #416]	; (8009c34 <USB_HC_StartXfer+0x280>)
 8009a92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009a94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	7a9b      	ldrb	r3, [r3, #10]
 8009a9a:	075b      	lsls	r3, r3, #29
 8009a9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009aa0:	69f9      	ldr	r1, [r7, #28]
 8009aa2:	0148      	lsls	r0, r1, #5
 8009aa4:	6a39      	ldr	r1, [r7, #32]
 8009aa6:	4401      	add	r1, r0
 8009aa8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009aac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009aae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d009      	beq.n	8009aca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	68d9      	ldr	r1, [r3, #12]
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac6:	460a      	mov	r2, r1
 8009ac8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bf0c      	ite	eq
 8009ada:	2301      	moveq	r3, #1
 8009adc:	2300      	movne	r3, #0
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	0151      	lsls	r1, r2, #5
 8009af4:	6a3a      	ldr	r2, [r7, #32]
 8009af6:	440a      	add	r2, r1
 8009af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009afc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	7e7b      	ldrb	r3, [r7, #25]
 8009b12:	075b      	lsls	r3, r3, #29
 8009b14:	69f9      	ldr	r1, [r7, #28]
 8009b16:	0148      	lsls	r0, r1, #5
 8009b18:	6a39      	ldr	r1, [r7, #32]
 8009b1a:	4401      	add	r1, r0
 8009b1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009b20:	4313      	orrs	r3, r2
 8009b22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a41      	ldr	r2, [pc, #260]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b34:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009b36:	4b40      	ldr	r3, [pc, #256]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b3e:	4a3e      	ldr	r2, [pc, #248]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b40:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	78db      	ldrb	r3, [r3, #3]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d006      	beq.n	8009b58 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009b4a:	4b3b      	ldr	r3, [pc, #236]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b52:	4a39      	ldr	r2, [pc, #228]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	e005      	b.n	8009b64 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009b58:	4b37      	ldr	r3, [pc, #220]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b60:	4a35      	ldr	r2, [pc, #212]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b62:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b64:	4b34      	ldr	r3, [pc, #208]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b6c:	4a32      	ldr	r2, [pc, #200]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b6e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	4b2e      	ldr	r3, [pc, #184]	; (8009c38 <USB_HC_StartXfer+0x284>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d14e      	bne.n	8009c28 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	78db      	ldrb	r3, [r3, #3]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d14a      	bne.n	8009c28 <USB_HC_StartXfer+0x274>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d046      	beq.n	8009c28 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	79db      	ldrb	r3, [r3, #7]
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d830      	bhi.n	8009c04 <USB_HC_StartXfer+0x250>
 8009ba2:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <USB_HC_StartXfer+0x1f4>)
 8009ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba8:	08009bb9 	.word	0x08009bb9
 8009bac:	08009bdd 	.word	0x08009bdd
 8009bb0:	08009bb9 	.word	0x08009bb9
 8009bb4:	08009bdd 	.word	0x08009bdd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	3303      	adds	r3, #3
 8009bbe:	089b      	lsrs	r3, r3, #2
 8009bc0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009bc2:	8afa      	ldrh	r2, [r7, #22]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d91c      	bls.n	8009c08 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f043 0220 	orr.w	r2, r3, #32
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	619a      	str	r2, [r3, #24]
          }
          break;
 8009bda:	e015      	b.n	8009c08 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	3303      	adds	r3, #3
 8009be2:	089b      	lsrs	r3, r3, #2
 8009be4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009be6:	8afa      	ldrh	r2, [r7, #22]
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d90a      	bls.n	8009c0c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	619a      	str	r2, [r3, #24]
          }
          break;
 8009c02:	e003      	b.n	8009c0c <USB_HC_StartXfer+0x258>

        default:
          break;
 8009c04:	bf00      	nop
 8009c06:	e002      	b.n	8009c0e <USB_HC_StartXfer+0x25a>
          break;
 8009c08:	bf00      	nop
 8009c0a:	e000      	b.n	8009c0e <USB_HC_StartXfer+0x25a>
          break;
 8009c0c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	68d9      	ldr	r1, [r3, #12]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	785a      	ldrb	r2, [r3, #1]
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	b298      	uxth	r0, r3
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	4603      	mov	r3, r0
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff fb86 	bl	8009334 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3728      	adds	r7, #40	; 0x28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	1ff80000 	.word	0x1ff80000
 8009c38:	20000528 	.word	0x20000528

08009c3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	b29b      	uxth	r3, r3
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b087      	sub	sp, #28
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009c6e:	78fb      	ldrb	r3, [r7, #3]
 8009c70:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	0c9b      	lsrs	r3, r3, #18
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <USB_HC_Halt+0x3a>
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d16c      	bne.n	8009d72 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	0151      	lsls	r1, r2, #5
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	440a      	add	r2, r1
 8009cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cb6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d143      	bne.n	8009d4c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ce2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	0151      	lsls	r1, r2, #5
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	440a      	add	r2, r1
 8009d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d22:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	3301      	adds	r3, #1
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d30:	d81d      	bhi.n	8009d6e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d48:	d0ec      	beq.n	8009d24 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d4a:	e080      	b.n	8009e4e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	0151      	lsls	r1, r2, #5
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	440a      	add	r2, r1
 8009d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d6a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d6c:	e06f      	b.n	8009e4e <USB_HC_Halt+0x1f0>
          break;
 8009d6e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d70:	e06d      	b.n	8009e4e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	0151      	lsls	r1, r2, #5
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	440a      	add	r2, r1
 8009d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d90:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d143      	bne.n	8009e2a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	0151      	lsls	r1, r2, #5
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	440a      	add	r2, r1
 8009db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dc0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e00:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	3301      	adds	r3, #1
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e0e:	d81d      	bhi.n	8009e4c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e26:	d0ec      	beq.n	8009e02 <USB_HC_Halt+0x1a4>
 8009e28:	e011      	b.n	8009e4e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	0151      	lsls	r1, r2, #5
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	440a      	add	r2, r1
 8009e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	e000      	b.n	8009e4e <USB_HC_Halt+0x1f0>
          break;
 8009e4c:	bf00      	nop
    }
  }

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	371c      	adds	r7, #28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009e70:	2301      	movs	r3, #1
 8009e72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	04da      	lsls	r2, r3, #19
 8009e78:	4b15      	ldr	r3, [pc, #84]	; (8009ed0 <USB_DoPing+0x74>)
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	0151      	lsls	r1, r2, #5
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	440a      	add	r2, r1
 8009e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ea4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009eac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eba:	461a      	mov	r2, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	371c      	adds	r7, #28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	1ff80000 	.word	0x1ff80000

08009ed4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff f9a2 	bl	800922e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009eea:	2110      	movs	r1, #16
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff f9d9 	bl	80092a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff f9fc 	bl	80092f0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	e01f      	b.n	8009f3e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f32:	461a      	mov	r2, r3
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	613b      	str	r3, [r7, #16]
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b0f      	cmp	r3, #15
 8009f42:	d9dc      	bls.n	8009efe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009f44:	2300      	movs	r3, #0
 8009f46:	613b      	str	r3, [r7, #16]
 8009f48:	e034      	b.n	8009fb4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f60:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7e:	461a      	mov	r2, r3
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	3301      	adds	r3, #1
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f90:	d80c      	bhi.n	8009fac <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fa8:	d0ec      	beq.n	8009f84 <USB_StopHost+0xb0>
 8009faa:	e000      	b.n	8009fae <USB_StopHost+0xda>
        break;
 8009fac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	613b      	str	r3, [r7, #16]
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2b0f      	cmp	r3, #15
 8009fb8:	d9c7      	bls.n	8009f4a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f04f 32ff 	mov.w	r2, #4294967295
 8009fce:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff f91b 	bl	800920c <USB_EnableGlobalInt>

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8009fe0:	b590      	push	{r4, r7, lr}
 8009fe2:	b089      	sub	sp, #36	; 0x24
 8009fe4:	af04      	add	r7, sp, #16
 8009fe6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8009fe8:	2302      	movs	r3, #2
 8009fea:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8009fec:	2301      	movs	r3, #1
 8009fee:	2202      	movs	r2, #2
 8009ff0:	2102      	movs	r1, #2
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fc8c 	bl	800a910 <USBH_FindInterface>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	2bff      	cmp	r3, #255	; 0xff
 800a000:	f000 812a 	beq.w	800a258 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800a004:	7bbb      	ldrb	r3, [r7, #14]
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fc65 	bl	800a8d8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800a014:	2050      	movs	r0, #80	; 0x50
 800a016:	f015 fbf7 	bl	801f808 <malloc>
 800a01a:	4603      	mov	r3, r0
 800a01c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	211a      	movs	r1, #26
 800a02e:	fb01 f303 	mul.w	r3, r1, r3
 800a032:	4413      	add	r3, r2
 800a034:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	da15      	bge.n	800a06c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	211a      	movs	r1, #26
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	4413      	add	r3, r2
 800a04c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800a050:	781a      	ldrb	r2, [r3, #0]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	211a      	movs	r1, #26
 800a05c:	fb01 f303 	mul.w	r3, r1, r3
 800a060:	4413      	add	r3, r2
 800a062:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a066:	881a      	ldrh	r2, [r3, #0]
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 ff2f 	bl	800bed6 <USBH_AllocPipe>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	7819      	ldrb	r1, [r3, #0]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	7858      	ldrb	r0, [r3, #1]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	8952      	ldrh	r2, [r2, #10]
 800a098:	9202      	str	r2, [sp, #8]
 800a09a:	2203      	movs	r2, #3
 800a09c:	9201      	str	r2, [sp, #4]
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fee7 	bl	800be78 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f00d fe00 	bl	8017cb8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	210a      	movs	r1, #10
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fc26 	bl	800a910 <USBH_FindInterface>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	2bff      	cmp	r3, #255	; 0xff
 800a0cc:	f000 80c4 	beq.w	800a258 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	211a      	movs	r1, #26
 800a0d6:	fb01 f303 	mul.w	r3, r1, r3
 800a0da:	4413      	add	r3, r2
 800a0dc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	b25b      	sxtb	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	da16      	bge.n	800a116 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	211a      	movs	r1, #26
 800a0ee:	fb01 f303 	mul.w	r3, r1, r3
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	211a      	movs	r1, #26
 800a104:	fb01 f303 	mul.w	r3, r1, r3
 800a108:	4413      	add	r3, r2
 800a10a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a10e:	881a      	ldrh	r2, [r3, #0]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	835a      	strh	r2, [r3, #26]
 800a114:	e015      	b.n	800a142 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	211a      	movs	r1, #26
 800a11c:	fb01 f303 	mul.w	r3, r1, r3
 800a120:	4413      	add	r3, r2
 800a122:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800a126:	781a      	ldrb	r2, [r3, #0]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	211a      	movs	r1, #26
 800a132:	fb01 f303 	mul.w	r3, r1, r3
 800a136:	4413      	add	r3, r2
 800a138:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a13c:	881a      	ldrh	r2, [r3, #0]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	211a      	movs	r1, #26
 800a148:	fb01 f303 	mul.w	r3, r1, r3
 800a14c:	4413      	add	r3, r2
 800a14e:	f203 3352 	addw	r3, r3, #850	; 0x352
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	b25b      	sxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	da16      	bge.n	800a188 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	211a      	movs	r1, #26
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	4413      	add	r3, r2
 800a166:	f203 3352 	addw	r3, r3, #850	; 0x352
 800a16a:	781a      	ldrb	r2, [r3, #0]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	211a      	movs	r1, #26
 800a176:	fb01 f303 	mul.w	r3, r1, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a180:	881a      	ldrh	r2, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	835a      	strh	r2, [r3, #26]
 800a186:	e015      	b.n	800a1b4 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	211a      	movs	r1, #26
 800a18e:	fb01 f303 	mul.w	r3, r1, r3
 800a192:	4413      	add	r3, r2
 800a194:	f203 3352 	addw	r3, r3, #850	; 0x352
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	211a      	movs	r1, #26
 800a1a4:	fb01 f303 	mul.w	r3, r1, r3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800a1ae:	881a      	ldrh	r2, [r3, #0]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	7b9b      	ldrb	r3, [r3, #14]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fe8b 	bl	800bed6 <USBH_AllocPipe>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	7bdb      	ldrb	r3, [r3, #15]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 fe81 	bl	800bed6 <USBH_AllocPipe>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	7b59      	ldrb	r1, [r3, #13]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	7b98      	ldrb	r0, [r3, #14]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	8b12      	ldrh	r2, [r2, #24]
 800a1f4:	9202      	str	r2, [sp, #8]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	9201      	str	r2, [sp, #4]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	4602      	mov	r2, r0
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f001 fe39 	bl	800be78 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	7b19      	ldrb	r1, [r3, #12]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	7bd8      	ldrb	r0, [r3, #15]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	8b52      	ldrh	r2, [r2, #26]
 800a21e:	9202      	str	r2, [sp, #8]
 800a220:	2202      	movs	r2, #2
 800a222:	9201      	str	r2, [sp, #4]
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	4623      	mov	r3, r4
 800a228:	4602      	mov	r2, r0
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f001 fe24 	bl	800be78 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	7b5b      	ldrb	r3, [r3, #13]
 800a23c:	2200      	movs	r2, #0
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f00d fd39 	bl	8017cb8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	7b1b      	ldrb	r3, [r3, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f00d fd32 	bl	8017cb8 <USBH_LL_SetToggle>
      status = USBH_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd90      	pop	{r4, r7, pc}

0800a262 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00e      	beq.n	800a29a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 fe17 	bl	800beb6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 fe3f 	bl	800bf12 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	7b1b      	ldrb	r3, [r3, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00e      	beq.n	800a2c0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	7b1b      	ldrb	r3, [r3, #12]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 fe04 	bl	800beb6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	7b1b      	ldrb	r3, [r3, #12]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fe2c 	bl	800bf12 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	7b5b      	ldrb	r3, [r3, #13]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00e      	beq.n	800a2e6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	7b5b      	ldrb	r3, [r3, #13]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fdf1 	bl	800beb6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	7b5b      	ldrb	r3, [r3, #13]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f001 fe19 	bl	800bf12 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00b      	beq.n	800a30a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f015 fa8c 	bl	801f818 <free>
    phost->pActiveClass->pData = 0U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a306:	2200      	movs	r2, #0
 800a308:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800a31c:	2302      	movs	r3, #2
 800a31e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	3340      	adds	r3, #64	; 0x40
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f8b2 	bl	800a49a <GetLineCoding>
 800a336:	4603      	mov	r3, r0
 800a338:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d105      	bne.n	800a34c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a346:	2102      	movs	r1, #2
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	4798      	blx	r3
  }
  return status;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
	...

0800a358 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d877      	bhi.n	800a46c <USBH_CDC_Process+0x114>
 800a37c:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <USBH_CDC_Process+0x2c>)
 800a37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a382:	bf00      	nop
 800a384:	0800a399 	.word	0x0800a399
 800a388:	0800a39f 	.word	0x0800a39f
 800a38c:	0800a3cf 	.word	0x0800a3cf
 800a390:	0800a443 	.word	0x0800a443
 800a394:	0800a451 	.word	0x0800a451
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
    break;
 800a39c:	e06d      	b.n	800a47a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f897 	bl	800a4d8 <SetLineCoding>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d104      	bne.n	800a3be <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800a3bc:	e058      	b.n	800a470 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800a3be:	7bbb      	ldrb	r3, [r7, #14]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d055      	beq.n	800a470 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2204      	movs	r2, #4
 800a3c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800a3cc:	e050      	b.n	800a470 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	3340      	adds	r3, #64	; 0x40
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f860 	bl	800a49a <GetLineCoding>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d126      	bne.n	800a432 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3f6:	791b      	ldrb	r3, [r3, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d13b      	bne.n	800a474 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a406:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a408:	429a      	cmp	r2, r3
 800a40a:	d133      	bne.n	800a474 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a416:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a418:	429a      	cmp	r2, r3
 800a41a:	d12b      	bne.n	800a474 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a424:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a426:	429a      	cmp	r2, r3
 800a428:	d124      	bne.n	800a474 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f984 	bl	800a738 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800a430:	e020      	b.n	800a474 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d01d      	beq.n	800a474 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2204      	movs	r2, #4
 800a43c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800a440:	e018      	b.n	800a474 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f867 	bl	800a516 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f8f8 	bl	800a63e <CDC_ProcessReception>
    break;
 800a44e:	e014      	b.n	800a47a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800a450:	2100      	movs	r1, #0
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fffa 	bl	800b44c <USBH_ClrFeature>
 800a458:	4603      	mov	r3, r0
 800a45a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800a46a:	e005      	b.n	800a478 <USBH_CDC_Process+0x120>

  default:
    break;
 800a46c:	bf00      	nop
 800a46e:	e004      	b.n	800a47a <USBH_CDC_Process+0x122>
    break;
 800a470:	bf00      	nop
 800a472:	e002      	b.n	800a47a <USBH_CDC_Process+0x122>
    break;
 800a474:	bf00      	nop
 800a476:	e000      	b.n	800a47a <USBH_CDC_Process+0x122>
    break;
 800a478:	bf00      	nop

  }

  return status;
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	22a1      	movs	r2, #161	; 0xa1
 800a4a8:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2221      	movs	r2, #33	; 0x21
 800a4ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2207      	movs	r2, #7
 800a4c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2207      	movs	r2, #7
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f001 f99f 	bl	800b80c <USBH_CtlReq>
 800a4ce:	4603      	mov	r3, r0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2221      	movs	r2, #33	; 0x21
 800a4e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2207      	movs	r2, #7
 800a4fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2207      	movs	r2, #7
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 f980 	bl	800b80c <USBH_CtlReq>
 800a50c:	4603      	mov	r3, r0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b086      	sub	sp, #24
 800a51a:	af02      	add	r7, sp, #8
 800a51c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a528:	2300      	movs	r3, #0
 800a52a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a532:	2b01      	cmp	r3, #1
 800a534:	d002      	beq.n	800a53c <CDC_ProcessTransmission+0x26>
 800a536:	2b02      	cmp	r3, #2
 800a538:	d025      	beq.n	800a586 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800a53a:	e07c      	b.n	800a636 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	8b12      	ldrh	r2, [r2, #24]
 800a544:	4293      	cmp	r3, r2
 800a546:	d90c      	bls.n	800a562 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	69d9      	ldr	r1, [r3, #28]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8b1a      	ldrh	r2, [r3, #24]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	7b58      	ldrb	r0, [r3, #13]
 800a554:	2301      	movs	r3, #1
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4603      	mov	r3, r0
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 fc49 	bl	800bdf2 <USBH_BulkSendData>
 800a560:	e00c      	b.n	800a57c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	7b58      	ldrb	r0, [r3, #13]
 800a570:	2301      	movs	r3, #1
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	4603      	mov	r3, r0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fc3b 	bl	800bdf2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800a584:	e057      	b.n	800a636 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	7b5b      	ldrb	r3, [r3, #13]
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f00d fb69 	bl	8017c64 <USBH_LL_GetURBState>
 800a592:	4603      	mov	r3, r0
 800a594:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800a596:	7afb      	ldrb	r3, [r7, #11]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d136      	bne.n	800a60a <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	8b12      	ldrh	r2, [r2, #24]
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d90e      	bls.n	800a5c6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	8b12      	ldrh	r2, [r2, #24]
 800a5b0:	1a9a      	subs	r2, r3, r2
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	8b12      	ldrh	r2, [r2, #24]
 800a5be:	441a      	add	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	61da      	str	r2, [r3, #28]
 800a5c4:	e002      	b.n	800a5cc <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d004      	beq.n	800a5de <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a5dc:	e006      	b.n	800a5ec <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f892 	bl	800a710 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2204      	movs	r2, #4
 800a5f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a600:	2200      	movs	r2, #0
 800a602:	4619      	mov	r1, r3
 800a604:	f004 ff8e 	bl	800f524 <osMessagePut>
    break;
 800a608:	e014      	b.n	800a634 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d111      	bne.n	800a634 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2204      	movs	r2, #4
 800a61c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a62c:	2200      	movs	r2, #0
 800a62e:	4619      	mov	r1, r3
 800a630:	f004 ff78 	bl	800f524 <osMessagePut>
    break;
 800a634:	bf00      	nop
  }
}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b086      	sub	sp, #24
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a650:	2300      	movs	r3, #0
 800a652:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d002      	beq.n	800a664 <CDC_ProcessReception+0x26>
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d00e      	beq.n	800a680 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800a662:	e051      	b.n	800a708 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	6a19      	ldr	r1, [r3, #32]
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	8b5a      	ldrh	r2, [r3, #26]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	7b1b      	ldrb	r3, [r3, #12]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 fbe3 	bl	800be3c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2204      	movs	r2, #4
 800a67a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800a67e:	e043      	b.n	800a708 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	7b1b      	ldrb	r3, [r3, #12]
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f00d faec 	bl	8017c64 <USBH_LL_GetURBState>
 800a68c:	4603      	mov	r3, r0
 800a68e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800a690:	7cfb      	ldrb	r3, [r7, #19]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d137      	bne.n	800a706 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	7b1b      	ldrb	r3, [r3, #12]
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f00d fa4f 	bl	8017b40 <USBH_LL_GetLastXferSize>
 800a6a2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d016      	beq.n	800a6dc <CDC_ProcessReception+0x9e>
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	8b5b      	ldrh	r3, [r3, #26]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d910      	bls.n	800a6dc <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	1ad2      	subs	r2, r2, r3
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	6a1a      	ldr	r2, [r3, #32]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	441a      	add	r2, r3
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2203      	movs	r2, #3
 800a6d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a6da:	e006      	b.n	800a6ea <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f81d 	bl	800a724 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2204      	movs	r2, #4
 800a6ee:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6fe:	2200      	movs	r2, #0
 800a700:	4619      	mov	r1, r3
 800a702:	f004 ff0f 	bl	800f524 <osMessagePut>
    break;
 800a706:	bf00      	nop
  }
}
 800a708:	bf00      	nop
 800a70a:	3718      	adds	r7, #24
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]

}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]

}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800a74c:	b5b0      	push	{r4, r5, r7, lr}
 800a74e:	b090      	sub	sp, #64	; 0x40
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	4613      	mov	r3, r2
 800a758:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a760:	2302      	movs	r3, #2
 800a762:	e03d      	b.n	800a7e0 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	79fa      	ldrb	r2, [r7, #7]
 800a768:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 f837 	bl	800a7f0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d003      	beq.n	800a790 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a790:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <USBH_Init+0x9c>)
 800a792:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800a79c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f004 fe95 	bl	800f4d2 <osMessageCreate>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <USBH_Init+0xa0>)
 800a7b2:	f107 0414 	add.w	r4, r7, #20
 800a7b6:	461d      	mov	r5, r3
 800a7b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800a7c4:	f107 0314 	add.w	r3, r7, #20
 800a7c8:	68f9      	ldr	r1, [r7, #12]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f004 fe21 	bl	800f412 <osThreadCreate>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f00d f8f5 	bl	80179c8 <USBH_LL_Init>

  return USBH_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3740      	adds	r7, #64	; 0x40
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a7e8:	080207d8 	.word	0x080207d8
 800a7ec:	080207f4 	.word	0x080207f4

0800a7f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800a7fc:	e008      	b.n	800a810 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	32e0      	adds	r2, #224	; 0xe0
 800a804:	2100      	movs	r1, #0
 800a806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3301      	adds	r3, #1
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b0e      	cmp	r3, #14
 800a814:	d9f3      	bls.n	800a7fe <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	e009      	b.n	800a830 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	4413      	add	r3, r2
 800a822:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3301      	adds	r3, #1
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a836:	d3f1      	bcc.n	800a81c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2240      	movs	r2, #64	; 0x40
 800a85c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a882:	b480      	push	{r7}
 800a884:	b085      	sub	sp, #20
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d017      	beq.n	800a8c6 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10f      	bne.n	800a8c0 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8a6:	1c59      	adds	r1, r3, #1
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	33dc      	adds	r3, #220	; 0xdc
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]
 800a8be:	e004      	b.n	800a8ca <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	73fb      	strb	r3, [r7, #15]
 800a8c4:	e001      	b.n	800a8ca <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800a8ee:	78fa      	ldrb	r2, [r7, #3]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d204      	bcs.n	800a8fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	78fa      	ldrb	r2, [r7, #3]
 800a8f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800a8fc:	e001      	b.n	800a902 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a8fe:	2302      	movs	r3, #2
 800a900:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	461a      	mov	r2, r3
 800a91e:	4603      	mov	r3, r0
 800a920:	70fb      	strb	r3, [r7, #3]
 800a922:	460b      	mov	r3, r1
 800a924:	70bb      	strb	r3, [r7, #2]
 800a926:	4613      	mov	r3, r2
 800a928:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a938:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a93a:	e025      	b.n	800a988 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
 800a93e:	221a      	movs	r2, #26
 800a940:	fb02 f303 	mul.w	r3, r2, r3
 800a944:	3308      	adds	r3, #8
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	3302      	adds	r3, #2
 800a94c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	795b      	ldrb	r3, [r3, #5]
 800a952:	78fa      	ldrb	r2, [r7, #3]
 800a954:	429a      	cmp	r2, r3
 800a956:	d002      	beq.n	800a95e <USBH_FindInterface+0x4e>
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	2bff      	cmp	r3, #255	; 0xff
 800a95c:	d111      	bne.n	800a982 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800a962:	78ba      	ldrb	r2, [r7, #2]
 800a964:	429a      	cmp	r2, r3
 800a966:	d002      	beq.n	800a96e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800a968:	78bb      	ldrb	r3, [r7, #2]
 800a96a:	2bff      	cmp	r3, #255	; 0xff
 800a96c:	d109      	bne.n	800a982 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800a972:	787a      	ldrb	r2, [r7, #1]
 800a974:	429a      	cmp	r2, r3
 800a976:	d002      	beq.n	800a97e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a978:	787b      	ldrb	r3, [r7, #1]
 800a97a:	2bff      	cmp	r3, #255	; 0xff
 800a97c:	d101      	bne.n	800a982 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	e006      	b.n	800a990 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	3301      	adds	r3, #1
 800a986:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d9d6      	bls.n	800a93c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a98e:	23ff      	movs	r3, #255	; 0xff
}
 800a990:	4618      	mov	r0, r3
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f00d f855 	bl	8017a54 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f00d f96c 	bl	8017c8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af04      	add	r7, sp, #16
 800a9c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fb7e 	bl	800b0ce <USBH_IsPortEnabled>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10c      	bne.n	800a9f2 <USBH_Process+0x36>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d002      	beq.n	800a9f2 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2203      	movs	r2, #3
 800a9f0:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b0b      	cmp	r3, #11
 800a9fa:	f200 81ab 	bhi.w	800ad54 <USBH_Process+0x398>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <USBH_Process+0x48>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa35 	.word	0x0800aa35
 800aa08:	0800aa73 	.word	0x0800aa73
 800aa0c:	0800aa87 	.word	0x0800aa87
 800aa10:	0800ad2f 	.word	0x0800ad2f
 800aa14:	0800ad55 	.word	0x0800ad55
 800aa18:	0800ab31 	.word	0x0800ab31
 800aa1c:	0800acc9 	.word	0x0800acc9
 800aa20:	0800ab61 	.word	0x0800ab61
 800aa24:	0800ab9d 	.word	0x0800ab9d
 800aa28:	0800abd7 	.word	0x0800abd7
 800aa2c:	0800ac1f 	.word	0x0800ac1f
 800aa30:	0800ad17 	.word	0x0800ad17
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 818b 	beq.w	800ad58 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800aa48:	20c8      	movs	r0, #200	; 0xc8
 800aa4a:	f00d f968 	bl	8017d1e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f00d f85b 	bl	8017b0a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa68:	2200      	movs	r2, #0
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	f004 fd5a 	bl	800f524 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800aa70:	e172      	b.n	800ad58 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	f040 816f 	bne.w	800ad5c <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2202      	movs	r2, #2
 800aa82:	701a      	strb	r2, [r3, #0]
    }
    break;
 800aa84:	e16a      	b.n	800ad5c <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800aa86:	2064      	movs	r0, #100	; 0x64
 800aa88:	f00d f949 	bl	8017d1e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f00d f817 	bl	8017ac0 <USBH_LL_GetSpeed>
 800aa92:	4603      	mov	r3, r0
 800aa94:	461a      	mov	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2205      	movs	r2, #5
 800aaa0:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 fa16 	bl	800bed6 <USBH_AllocPipe>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	461a      	mov	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800aab2:	2180      	movs	r1, #128	; 0x80
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fa0e 	bl	800bed6 <USBH_AllocPipe>
 800aaba:	4603      	mov	r3, r0
 800aabc:	461a      	mov	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7919      	ldrb	r1, [r3, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800aad6:	b292      	uxth	r2, r2
 800aad8:	9202      	str	r2, [sp, #8]
 800aada:	2200      	movs	r2, #0
 800aadc:	9201      	str	r2, [sp, #4]
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	4603      	mov	r3, r0
 800aae2:	2280      	movs	r2, #128	; 0x80
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f9c7 	bl	800be78 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7959      	ldrb	r1, [r3, #5]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800aafe:	b292      	uxth	r2, r2
 800ab00:	9202      	str	r2, [sp, #8]
 800ab02:	2200      	movs	r2, #0
 800ab04:	9201      	str	r2, [sp, #4]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 f9b3 	bl	800be78 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab26:	2200      	movs	r2, #0
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f004 fcfb 	bl	800f524 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800ab2e:	e120      	b.n	800ad72 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f923 	bl	800ad7c <USBH_HandleEnum>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f040 8111 	bne.w	800ad60 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d103      	bne.n	800ab58 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2208      	movs	r2, #8
 800ab54:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800ab56:	e103      	b.n	800ad60 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2207      	movs	r2, #7
 800ab5c:	701a      	strb	r2, [r3, #0]
    break;
 800ab5e:	e0ff      	b.n	800ad60 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 80fc 	beq.w	800ad64 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab72:	2101      	movs	r1, #1
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2208      	movs	r2, #8
 800ab7c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2205      	movs	r2, #5
 800ab82:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab92:	2200      	movs	r2, #0
 800ab94:	4619      	mov	r1, r3
 800ab96:	f004 fcc5 	bl	800f524 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ab9a:	e0e3      	b.n	800ad64 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fc09 	bl	800b3be <USBH_SetCfg>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2209      	movs	r2, #9
 800abb6:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abcc:	2200      	movs	r2, #0
 800abce:	4619      	mov	r1, r3
 800abd0:	f004 fca8 	bl	800f524 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800abd4:	e0cd      	b.n	800ad72 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800abdc:	f003 0320 	and.w	r3, r3, #32
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800abe4:	2101      	movs	r1, #1
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fc0c 	bl	800b404 <USBH_SetFeature>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	220a      	movs	r2, #10
 800abf6:	701a      	strb	r2, [r3, #0]
 800abf8:	e002      	b.n	800ac00 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	220a      	movs	r2, #10
 800abfe:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac14:	2200      	movs	r2, #0
 800ac16:	4619      	mov	r1, r3
 800ac18:	f004 fc84 	bl	800f524 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800ac1c:	e0a9      	b.n	800ad72 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d040      	beq.n	800acaa <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]
 800ac34:	e017      	b.n	800ac66 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	33dc      	adds	r3, #220	; 0xdc
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	791a      	ldrb	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d108      	bne.n	800ac60 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	33dc      	adds	r3, #220	; 0xdc
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
 800ac62:	3301      	adds	r3, #1
 800ac64:	73fb      	strb	r3, [r7, #15]
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d0e4      	beq.n	800ac36 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d016      	beq.n	800aca4 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d109      	bne.n	800ac9c <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2206      	movs	r2, #6
 800ac8c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac94:	2103      	movs	r1, #3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
 800ac9a:	e006      	b.n	800acaa <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	220d      	movs	r2, #13
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	e002      	b.n	800acaa <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	220d      	movs	r2, #13
 800aca8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2205      	movs	r2, #5
 800acae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acbe:	2200      	movs	r2, #0
 800acc0:	4619      	mov	r1, r3
 800acc2:	f004 fc2f 	bl	800f524 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800acc6:	e054      	b.n	800ad72 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00f      	beq.n	800acf2 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	4798      	blx	r3
 800acde:	4603      	mov	r3, r0
 800ace0:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800ace2:	7bbb      	ldrb	r3, [r7, #14]
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d13e      	bne.n	800ad68 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	220b      	movs	r2, #11
 800acee:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800acf0:	e03a      	b.n	800ad68 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	220d      	movs	r2, #13
 800acf6:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2205      	movs	r2, #5
 800acfc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4619      	mov	r1, r3
 800ad10:	f004 fc08 	bl	800f524 <osMessagePut>
    break;
 800ad14:	e028      	b.n	800ad68 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d025      	beq.n	800ad6c <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	4798      	blx	r3
    }
    break;
 800ad2c:	e01e      	b.n	800ad6c <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fd5e 	bl	800a7f0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d018      	beq.n	800ad70 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800ad52:	e00d      	b.n	800ad70 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800ad54:	bf00      	nop
 800ad56:	e00c      	b.n	800ad72 <USBH_Process+0x3b6>
    break;
 800ad58:	bf00      	nop
 800ad5a:	e00a      	b.n	800ad72 <USBH_Process+0x3b6>
    break;
 800ad5c:	bf00      	nop
 800ad5e:	e008      	b.n	800ad72 <USBH_Process+0x3b6>
    break;
 800ad60:	bf00      	nop
 800ad62:	e006      	b.n	800ad72 <USBH_Process+0x3b6>
    break;
 800ad64:	bf00      	nop
 800ad66:	e004      	b.n	800ad72 <USBH_Process+0x3b6>
    break;
 800ad68:	bf00      	nop
 800ad6a:	e002      	b.n	800ad72 <USBH_Process+0x3b6>
    break;
 800ad6c:	bf00      	nop
 800ad6e:	e000      	b.n	800ad72 <USBH_Process+0x3b6>
    break;
 800ad70:	bf00      	nop
  }
 return USBH_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af04      	add	r7, sp, #16
 800ad82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ad84:	2301      	movs	r3, #1
 800ad86:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	785b      	ldrb	r3, [r3, #1]
 800ad8c:	2b07      	cmp	r3, #7
 800ad8e:	f200 8132 	bhi.w	800aff6 <USBH_HandleEnum+0x27a>
 800ad92:	a201      	add	r2, pc, #4	; (adr r2, 800ad98 <USBH_HandleEnum+0x1c>)
 800ad94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad98:	0800adb9 	.word	0x0800adb9
 800ad9c:	0800ae2b 	.word	0x0800ae2b
 800ada0:	0800ae43 	.word	0x0800ae43
 800ada4:	0800aeb9 	.word	0x0800aeb9
 800ada8:	0800aed1 	.word	0x0800aed1
 800adac:	0800aeef 	.word	0x0800aeef
 800adb0:	0800af5b 	.word	0x0800af5b
 800adb4:	0800afab 	.word	0x0800afab
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800adb8:	2108      	movs	r1, #8
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa2f 	bl	800b21e <USBH_Get_DevDesc>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f040 8119 	bne.w	800affa <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7919      	ldrb	r1, [r3, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800adec:	b292      	uxth	r2, r2
 800adee:	9202      	str	r2, [sp, #8]
 800adf0:	2200      	movs	r2, #0
 800adf2:	9201      	str	r2, [sp, #4]
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	4603      	mov	r3, r0
 800adf8:	2280      	movs	r2, #128	; 0x80
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 f83c 	bl	800be78 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7959      	ldrb	r1, [r3, #5]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ae14:	b292      	uxth	r2, r2
 800ae16:	9202      	str	r2, [sp, #8]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	9201      	str	r2, [sp, #4]
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2200      	movs	r2, #0
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 f828 	bl	800be78 <USBH_OpenPipe>

    }
    break;
 800ae28:	e0e7      	b.n	800affa <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800ae2a:	2112      	movs	r1, #18
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f9f6 	bl	800b21e <USBH_Get_DevDesc>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f040 80e2 	bne.w	800affe <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	705a      	strb	r2, [r3, #1]

    }
    break;
 800ae40:	e0dd      	b.n	800affe <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800ae42:	2101      	movs	r1, #1
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fa96 	bl	800b376 <USBH_SetAddress>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f040 80d8 	bne.w	800b002 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800ae52:	2002      	movs	r0, #2
 800ae54:	f00c ff63 	bl	8017d1e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2203      	movs	r2, #3
 800ae64:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7919      	ldrb	r1, [r3, #4]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ae7a:	b292      	uxth	r2, r2
 800ae7c:	9202      	str	r2, [sp, #8]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	9201      	str	r2, [sp, #4]
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	4603      	mov	r3, r0
 800ae86:	2280      	movs	r2, #128	; 0x80
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fff5 	bl	800be78 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	7959      	ldrb	r1, [r3, #5]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800aea2:	b292      	uxth	r2, r2
 800aea4:	9202      	str	r2, [sp, #8]
 800aea6:	2200      	movs	r2, #0
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	4603      	mov	r3, r0
 800aeae:	2200      	movs	r2, #0
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 ffe1 	bl	800be78 <USBH_OpenPipe>
    }
    break;
 800aeb6:	e0a4      	b.n	800b002 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800aeb8:	2109      	movs	r1, #9
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f9d7 	bl	800b26e <USBH_Get_CfgDesc>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f040 809f 	bne.w	800b006 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2204      	movs	r2, #4
 800aecc:	705a      	strb	r2, [r3, #1]
    }
    break;
 800aece:	e09a      	b.n	800b006 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800aed6:	4619      	mov	r1, r3
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f9c8 	bl	800b26e <USBH_Get_CfgDesc>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f040 8092 	bne.w	800b00a <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2205      	movs	r2, #5
 800aeea:	705a      	strb	r2, [r3, #1]
    }
    break;
 800aeec:	e08d      	b.n	800b00a <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01e      	beq.n	800af36 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800af04:	23ff      	movs	r3, #255	; 0xff
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f9d5 	bl	800b2b6 <USBH_Get_StringDesc>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d17d      	bne.n	800b00e <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2206      	movs	r2, #6
 800af16:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2205      	movs	r2, #5
 800af1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af2c:	2200      	movs	r2, #0
 800af2e:	4619      	mov	r1, r3
 800af30:	f004 faf8 	bl	800f524 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800af34:	e06b      	b.n	800b00e <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2206      	movs	r2, #6
 800af3a:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2205      	movs	r2, #5
 800af40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af50:	2200      	movs	r2, #0
 800af52:	4619      	mov	r1, r3
 800af54:	f004 fae6 	bl	800f524 <osMessagePut>
    break;
 800af58:	e059      	b.n	800b00e <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800af60:	2b00      	cmp	r3, #0
 800af62:	d010      	beq.n	800af86 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800af70:	23ff      	movs	r3, #255	; 0xff
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f99f 	bl	800b2b6 <USBH_Get_StringDesc>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d149      	bne.n	800b012 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2207      	movs	r2, #7
 800af82:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800af84:	e045      	b.n	800b012 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2207      	movs	r2, #7
 800af8a:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2205      	movs	r2, #5
 800af90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afa0:	2200      	movs	r2, #0
 800afa2:	4619      	mov	r1, r3
 800afa4:	f004 fabe 	bl	800f524 <osMessagePut>
    break;
 800afa8:	e033      	b.n	800b012 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00f      	beq.n	800afd4 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800afc0:	23ff      	movs	r3, #255	; 0xff
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f977 	bl	800b2b6 <USBH_Get_StringDesc>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d123      	bne.n	800b016 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800afd2:	e020      	b.n	800b016 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2205      	movs	r2, #5
 800afdc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afec:	2200      	movs	r2, #0
 800afee:	4619      	mov	r1, r3
 800aff0:	f004 fa98 	bl	800f524 <osMessagePut>
    break;
 800aff4:	e00f      	b.n	800b016 <USBH_HandleEnum+0x29a>

  default:
    break;
 800aff6:	bf00      	nop
 800aff8:	e00e      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800affa:	bf00      	nop
 800affc:	e00c      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800affe:	bf00      	nop
 800b000:	e00a      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800b002:	bf00      	nop
 800b004:	e008      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800b006:	bf00      	nop
 800b008:	e006      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800b00a:	bf00      	nop
 800b00c:	e004      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800b00e:	bf00      	nop
 800b010:	e002      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800b012:	bf00      	nop
 800b014:	e000      	b.n	800b018 <USBH_HandleEnum+0x29c>
    break;
 800b016:	bf00      	nop
  }
  return Status;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop

0800b024 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b082      	sub	sp, #8
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f804 	bl	800b066 <USBH_HandleSof>
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b0b      	cmp	r3, #11
 800b076:	d10a      	bne.n	800b08e <USBH_HandleSof+0x28>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	4798      	blx	r3
  }
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800b0a6:	bf00      	nop
}
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800b0c2:	bf00      	nop
}
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10f      	bne.n	800b11a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b112:	2104      	movs	r1, #4
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	4798      	blx	r3
 800b118:	e007      	b.n	800b12a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b120:	2b01      	cmp	r3, #1
 800b122:	d102      	bne.n	800b12a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2202      	movs	r2, #2
 800b128:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b13e:	2200      	movs	r2, #0
 800b140:	4619      	mov	r1, r3
 800b142:	f004 f9ef 	bl	800f524 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f00c fc96 	bl	8017a8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	791b      	ldrb	r3, [r3, #4]
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fed4 	bl	800bf12 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	795b      	ldrb	r3, [r3, #5]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fece 	bl	800bf12 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d005      	beq.n	800b194 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b18e:	2105      	movs	r1, #5
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f00c fc5d 	bl	8017a54 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2203      	movs	r2, #3
 800b19e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	f004 f9b4 	bl	800f524 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b086      	sub	sp, #24
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800b1d4:	f107 030c 	add.w	r3, r7, #12
 800b1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f004 f9e1 	bl	800f5a4 <osMessageGet>
    if(event.status == osEventMessage)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b10      	cmp	r3, #16
 800b1e6:	d1f2      	bne.n	800b1ce <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff fbe7 	bl	800a9bc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b1ee:	e7ee      	b.n	800b1ce <USBH_Process_OS+0x8>

0800b1f0 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b20c:	2200      	movs	r2, #0
 800b20e:	4619      	mov	r1, r3
 800b210:	f004 f988 	bl	800f524 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b086      	sub	sp, #24
 800b222:	af02      	add	r7, sp, #8
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	b29b      	uxth	r3, r3
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	4613      	mov	r3, r2
 800b238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b23c:	2100      	movs	r1, #0
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f864 	bl	800b30c <USBH_GetDescriptor>
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f203 3022 	addw	r0, r3, #802	; 0x322
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b25a:	78fa      	ldrb	r2, [r7, #3]
 800b25c:	b292      	uxth	r2, r2
 800b25e:	4619      	mov	r1, r3
 800b260:	f000 f918 	bl	800b494 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b086      	sub	sp, #24
 800b272:	af02      	add	r7, sp, #8
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	331c      	adds	r3, #28
 800b27e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800b280:	887b      	ldrh	r3, [r7, #2]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b28a:	2100      	movs	r1, #0
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f83d 	bl	800b30c <USBH_GetDescriptor>
 800b292:	4603      	mov	r3, r0
 800b294:	72fb      	strb	r3, [r7, #11]
 800b296:	7afb      	ldrb	r3, [r7, #11]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d107      	bne.n	800b2ac <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800b2a2:	887a      	ldrh	r2, [r7, #2]
 800b2a4:	68f9      	ldr	r1, [r7, #12]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f964 	bl	800b574 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b088      	sub	sp, #32
 800b2ba:	af02      	add	r7, sp, #8
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	72fb      	strb	r3, [r7, #11]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b2d2:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800b2da:	893b      	ldrh	r3, [r7, #8]
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f812 	bl	800b30c <USBH_GetDescriptor>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75fb      	strb	r3, [r7, #23]
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d107      	bne.n	800b302 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2f8:	893a      	ldrh	r2, [r7, #8]
 800b2fa:	6879      	ldr	r1, [r7, #4]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 fa37 	bl	800b770 <USBH_ParseStringDesc>
  }
  return status;
 800b302:	7dfb      	ldrb	r3, [r7, #23]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	607b      	str	r3, [r7, #4]
 800b316:	460b      	mov	r3, r1
 800b318:	72fb      	strb	r3, [r7, #11]
 800b31a:	4613      	mov	r3, r2
 800b31c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	789b      	ldrb	r3, [r3, #2]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d11c      	bne.n	800b360 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b326:	7afb      	ldrb	r3, [r7, #11]
 800b328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2206      	movs	r2, #6
 800b336:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	893a      	ldrh	r2, [r7, #8]
 800b33c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b33e:	893b      	ldrh	r3, [r7, #8]
 800b340:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b348:	d104      	bne.n	800b354 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f240 4209 	movw	r2, #1033	; 0x409
 800b350:	829a      	strh	r2, [r3, #20]
 800b352:	e002      	b.n	800b35a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	8b3a      	ldrh	r2, [r7, #24]
 800b35e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800b360:	8b3b      	ldrh	r3, [r7, #24]
 800b362:	461a      	mov	r2, r3
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 fa50 	bl	800b80c <USBH_CtlReq>
 800b36c:	4603      	mov	r3, r0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b082      	sub	sp, #8
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	460b      	mov	r3, r1
 800b380:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	789b      	ldrb	r3, [r3, #2]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d10f      	bne.n	800b3aa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2205      	movs	r2, #5
 800b394:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b396:	78fb      	ldrb	r3, [r7, #3]
 800b398:	b29a      	uxth	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa2c 	bl	800b80c <USBH_CtlReq>
 800b3b4:	4603      	mov	r3, r0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	789b      	ldrb	r3, [r3, #2]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d10e      	bne.n	800b3f0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2209      	movs	r2, #9
 800b3dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	887a      	ldrh	r2, [r7, #2]
 800b3e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fa09 	bl	800b80c <USBH_CtlReq>
 800b3fa:	4603      	mov	r3, r0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	789b      	ldrb	r3, [r3, #2]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d10f      	bne.n	800b438 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2203      	movs	r2, #3
 800b422:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b424:	78fb      	ldrb	r3, [r7, #3]
 800b426:	b29a      	uxth	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b438:	2200      	movs	r2, #0
 800b43a:	2100      	movs	r1, #0
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f9e5 	bl	800b80c <USBH_CtlReq>
 800b442:	4603      	mov	r3, r0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	789b      	ldrb	r3, [r3, #2]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d10f      	bne.n	800b480 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2202      	movs	r2, #2
 800b464:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b472:	78fb      	ldrb	r3, [r7, #3]
 800b474:	b29a      	uxth	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800b480:	2200      	movs	r2, #0
 800b482:	2100      	movs	r1, #0
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f9c1 	bl	800b80c <USBH_CtlReq>
 800b48a:	4603      	mov	r3, r0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	781a      	ldrb	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	785a      	ldrb	r2, [r3, #1]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	3302      	adds	r3, #2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	3303      	adds	r3, #3
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	021b      	lsls	r3, r3, #8
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	791a      	ldrb	r2, [r3, #4]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	795a      	ldrb	r2, [r3, #5]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	799a      	ldrb	r2, [r3, #6]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	79da      	ldrb	r2, [r3, #7]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b4ee:	88fb      	ldrh	r3, [r7, #6]
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d939      	bls.n	800b568 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	3309      	adds	r3, #9
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	b29b      	uxth	r3, r3
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	b29b      	uxth	r3, r3
 800b508:	4313      	orrs	r3, r2
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	330a      	adds	r3, #10
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	b29a      	uxth	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	330b      	adds	r3, #11
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b29b      	uxth	r3, r3
 800b520:	021b      	lsls	r3, r3, #8
 800b522:	b29b      	uxth	r3, r3
 800b524:	4313      	orrs	r3, r2
 800b526:	b29a      	uxth	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	330c      	adds	r3, #12
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	b29a      	uxth	r2, r3
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	330d      	adds	r3, #13
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	021b      	lsls	r3, r3, #8
 800b53e:	b29b      	uxth	r3, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	b29a      	uxth	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	7b9a      	ldrb	r2, [r3, #14]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	7bda      	ldrb	r2, [r3, #15]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	7c1a      	ldrb	r2, [r3, #16]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	7c5a      	ldrb	r2, [r3, #17]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	745a      	strb	r2, [r3, #17]
  }
}
 800b568:	bf00      	nop
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08a      	sub	sp, #40	; 0x28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	4613      	mov	r3, r2
 800b580:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	781a      	ldrb	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	785a      	ldrb	r2, [r3, #1]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	3303      	adds	r3, #3
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	021b      	lsls	r3, r3, #8
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	791a      	ldrb	r2, [r3, #4]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	795a      	ldrb	r2, [r3, #5]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	799a      	ldrb	r2, [r3, #6]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	79da      	ldrb	r2, [r3, #7]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	7a1a      	ldrb	r2, [r3, #8]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	2b09      	cmp	r3, #9
 800b5ee:	d95f      	bls.n	800b6b0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b5f0:	2309      	movs	r3, #9
 800b5f2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5f8:	e051      	b.n	800b69e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5fa:	f107 0316 	add.w	r3, r7, #22
 800b5fe:	4619      	mov	r1, r3
 800b600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b602:	f000 f8e8 	bl	800b7d6 <USBH_GetNextDesc>
 800b606:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	785b      	ldrb	r3, [r3, #1]
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d146      	bne.n	800b69e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b614:	221a      	movs	r2, #26
 800b616:	fb02 f303 	mul.w	r3, r2, r3
 800b61a:	3308      	adds	r3, #8
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	3302      	adds	r3, #2
 800b622:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800b624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b626:	69f8      	ldr	r0, [r7, #28]
 800b628:	f000 f846 	bl	800b6b8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b62c:	2300      	movs	r3, #0
 800b62e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b632:	2300      	movs	r3, #0
 800b634:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b636:	e022      	b.n	800b67e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800b638:	f107 0316 	add.w	r3, r7, #22
 800b63c:	4619      	mov	r1, r3
 800b63e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b640:	f000 f8c9 	bl	800b7d6 <USBH_GetNextDesc>
 800b644:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	785b      	ldrb	r3, [r3, #1]
 800b64a:	2b05      	cmp	r3, #5
 800b64c:	d117      	bne.n	800b67e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b64e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b652:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b656:	3201      	adds	r2, #1
 800b658:	00d2      	lsls	r2, r2, #3
 800b65a:	211a      	movs	r1, #26
 800b65c:	fb01 f303 	mul.w	r3, r1, r3
 800b660:	4413      	add	r3, r2
 800b662:	3308      	adds	r3, #8
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	3304      	adds	r3, #4
 800b66a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800b66c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b66e:	69b8      	ldr	r0, [r7, #24]
 800b670:	f000 f851 	bl	800b716 <USBH_ParseEPDesc>
            ep_ix++;
 800b674:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b678:	3301      	adds	r3, #1
 800b67a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	791b      	ldrb	r3, [r3, #4]
 800b682:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b686:	429a      	cmp	r2, r3
 800b688:	d204      	bcs.n	800b694 <USBH_ParseCfgDesc+0x120>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	885a      	ldrh	r2, [r3, #2]
 800b68e:	8afb      	ldrh	r3, [r7, #22]
 800b690:	429a      	cmp	r2, r3
 800b692:	d8d1      	bhi.n	800b638 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b698:	3301      	adds	r3, #1
 800b69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b69e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d804      	bhi.n	800b6b0 <USBH_ParseCfgDesc+0x13c>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	885a      	ldrh	r2, [r3, #2]
 800b6aa:	8afb      	ldrh	r3, [r7, #22]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d8a4      	bhi.n	800b5fa <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b6b0:	bf00      	nop
 800b6b2:	3728      	adds	r7, #40	; 0x28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	781a      	ldrb	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	785a      	ldrb	r2, [r3, #1]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	789a      	ldrb	r2, [r3, #2]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	78da      	ldrb	r2, [r3, #3]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	791a      	ldrb	r2, [r3, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	795a      	ldrb	r2, [r3, #5]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	799a      	ldrb	r2, [r3, #6]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	79da      	ldrb	r2, [r3, #7]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	7a1a      	ldrb	r2, [r3, #8]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	721a      	strb	r2, [r3, #8]
}
 800b70a:	bf00      	nop
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781a      	ldrb	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	785a      	ldrb	r2, [r3, #1]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	789a      	ldrb	r2, [r3, #2]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	78da      	ldrb	r2, [r3, #3]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	3304      	adds	r3, #4
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	b29a      	uxth	r2, r3
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	3305      	adds	r3, #5
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	b29b      	uxth	r3, r3
 800b750:	021b      	lsls	r3, r3, #8
 800b752:	b29b      	uxth	r3, r3
 800b754:	4313      	orrs	r3, r2
 800b756:	b29a      	uxth	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	799a      	ldrb	r2, [r3, #6]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	719a      	strb	r2, [r3, #6]
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	4613      	mov	r3, r2
 800b77c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3301      	adds	r3, #1
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b03      	cmp	r3, #3
 800b786:	d120      	bne.n	800b7ca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	1e9a      	subs	r2, r3, #2
 800b78e:	88fb      	ldrh	r3, [r7, #6]
 800b790:	4293      	cmp	r3, r2
 800b792:	bf28      	it	cs
 800b794:	4613      	movcs	r3, r2
 800b796:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	3302      	adds	r3, #2
 800b79c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b79e:	2300      	movs	r3, #0
 800b7a0:	82fb      	strh	r3, [r7, #22]
 800b7a2:	e00b      	b.n	800b7bc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b7a4:	8afb      	ldrh	r3, [r7, #22]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b7b6:	8afb      	ldrh	r3, [r7, #22]
 800b7b8:	3302      	adds	r3, #2
 800b7ba:	82fb      	strh	r3, [r7, #22]
 800b7bc:	8afa      	ldrh	r2, [r7, #22]
 800b7be:	8abb      	ldrh	r3, [r7, #20]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d3ef      	bcc.n	800b7a4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]
  }
}
 800b7ca:	bf00      	nop
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b085      	sub	sp, #20
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	881a      	ldrh	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b81a:	2301      	movs	r3, #1
 800b81c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	789b      	ldrb	r3, [r3, #2]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d002      	beq.n	800b82c <USBH_CtlReq+0x20>
 800b826:	2b02      	cmp	r3, #2
 800b828:	d01d      	beq.n	800b866 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800b82a:	e042      	b.n	800b8b2 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	88fa      	ldrh	r2, [r7, #6]
 800b836:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2201      	movs	r2, #1
 800b83c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2202      	movs	r2, #2
 800b842:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800b844:	2301      	movs	r3, #1
 800b846:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2203      	movs	r2, #3
 800b84c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b85c:	2200      	movs	r2, #0
 800b85e:	4619      	mov	r1, r3
 800b860:	f003 fe60 	bl	800f524 <osMessagePut>
    break;
 800b864:	e025      	b.n	800b8b2 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f000 f828 	bl	800b8bc <USBH_HandleControl>
 800b86c:	4603      	mov	r3, r0
 800b86e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800b870:	7dfb      	ldrb	r3, [r7, #23]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d108      	bne.n	800b888 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2201      	movs	r2, #1
 800b87a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]
    break;
 800b886:	e013      	b.n	800b8b0 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d108      	bne.n	800b8a0 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2201      	movs	r2, #1
 800b892:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800b89a:	2303      	movs	r3, #3
 800b89c:	75fb      	strb	r3, [r7, #23]
    break;
 800b89e:	e007      	b.n	800b8b0 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d104      	bne.n	800b8b0 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	75fb      	strb	r3, [r7, #23]
    break;
 800b8b0:	bf00      	nop
  }
  return status;
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af02      	add	r7, sp, #8
 800b8c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7e1b      	ldrb	r3, [r3, #24]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	2b0a      	cmp	r3, #10
 800b8d4:	f200 821f 	bhi.w	800bd16 <USBH_HandleControl+0x45a>
 800b8d8:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <USBH_HandleControl+0x24>)
 800b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b90d 	.word	0x0800b90d
 800b8e4:	0800b927 	.word	0x0800b927
 800b8e8:	0800b9c9 	.word	0x0800b9c9
 800b8ec:	0800b9ef 	.word	0x0800b9ef
 800b8f0:	0800ba7b 	.word	0x0800ba7b
 800b8f4:	0800baa7 	.word	0x0800baa7
 800b8f8:	0800bb69 	.word	0x0800bb69
 800b8fc:	0800bb8b 	.word	0x0800bb8b
 800b900:	0800bc1d 	.word	0x0800bc1d
 800b904:	0800bc45 	.word	0x0800bc45
 800b908:	0800bcd7 	.word	0x0800bcd7
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f103 0110 	add.w	r1, r3, #16
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	795b      	ldrb	r3, [r3, #5]
 800b916:	461a      	mov	r2, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fa0d 	bl	800bd38 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2202      	movs	r2, #2
 800b922:	761a      	strb	r2, [r3, #24]
    break;
 800b924:	e202      	b.n	800bd2c <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	795b      	ldrb	r3, [r3, #5]
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f00c f999 	bl	8017c64 <USBH_LL_GetURBState>
 800b932:	4603      	mov	r3, r0
 800b934:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d12c      	bne.n	800b996 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7c1b      	ldrb	r3, [r3, #16]
 800b940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b944:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	8adb      	ldrh	r3, [r3, #22]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00a      	beq.n	800b964 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800b94e:	7b7b      	ldrb	r3, [r7, #13]
 800b950:	2b80      	cmp	r3, #128	; 0x80
 800b952:	d103      	bne.n	800b95c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2203      	movs	r2, #3
 800b958:	761a      	strb	r2, [r3, #24]
 800b95a:	e00d      	b.n	800b978 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2205      	movs	r2, #5
 800b960:	761a      	strb	r2, [r3, #24]
 800b962:	e009      	b.n	800b978 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800b964:	7b7b      	ldrb	r3, [r7, #13]
 800b966:	2b80      	cmp	r3, #128	; 0x80
 800b968:	d103      	bne.n	800b972 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2209      	movs	r2, #9
 800b96e:	761a      	strb	r2, [r3, #24]
 800b970:	e002      	b.n	800b978 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2207      	movs	r2, #7
 800b976:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2203      	movs	r2, #3
 800b97c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b98c:	2200      	movs	r2, #0
 800b98e:	4619      	mov	r1, r3
 800b990:	f003 fdc8 	bl	800f524 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b994:	e1c1      	b.n	800bd1a <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d003      	beq.n	800b9a4 <USBH_HandleControl+0xe8>
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	f040 81bb 	bne.w	800bd1a <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	220b      	movs	r2, #11
 800b9a8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2203      	movs	r2, #3
 800b9ae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9be:	2200      	movs	r2, #0
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f003 fdaf 	bl	800f524 <osMessagePut>
    break;
 800b9c6:	e1a8      	b.n	800bd1a <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6899      	ldr	r1, [r3, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	899a      	ldrh	r2, [r3, #12]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	791b      	ldrb	r3, [r3, #4]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f9e8 	bl	800bdb6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	761a      	strb	r2, [r3, #24]
    break;
 800b9ec:	e19e      	b.n	800bd2c <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	791b      	ldrb	r3, [r3, #4]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f00c f935 	bl	8017c64 <USBH_LL_GetURBState>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d110      	bne.n	800ba26 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2209      	movs	r2, #9
 800ba08:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2203      	movs	r2, #3
 800ba0e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba1e:	2200      	movs	r2, #0
 800ba20:	4619      	mov	r1, r3
 800ba22:	f003 fd7f 	bl	800f524 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	2b05      	cmp	r3, #5
 800ba2a:	d110      	bne.n	800ba4e <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2203      	movs	r2, #3
 800ba34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba44:	2200      	movs	r2, #0
 800ba46:	4619      	mov	r1, r3
 800ba48:	f003 fd6c 	bl	800f524 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ba4c:	e167      	b.n	800bd1e <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	f040 8164 	bne.w	800bd1e <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	220b      	movs	r2, #11
 800ba5a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2203      	movs	r2, #3
 800ba60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba70:	2200      	movs	r2, #0
 800ba72:	4619      	mov	r1, r3
 800ba74:	f003 fd56 	bl	800f524 <osMessagePut>
    break;
 800ba78:	e151      	b.n	800bd1e <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6899      	ldr	r1, [r3, #8]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	899a      	ldrh	r2, [r3, #12]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	7958      	ldrb	r0, [r3, #5]
 800ba86:	2301      	movs	r3, #1
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f96d 	bl	800bd6c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2206      	movs	r2, #6
 800baa2:	761a      	strb	r2, [r3, #24]
    break;
 800baa4:	e142      	b.n	800bd2c <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	795b      	ldrb	r3, [r3, #5]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f00c f8d9 	bl	8017c64 <USBH_LL_GetURBState>
 800bab2:	4603      	mov	r3, r0
 800bab4:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d111      	bne.n	800bae0 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2207      	movs	r2, #7
 800bac0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2203      	movs	r2, #3
 800bac6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bad6:	2200      	movs	r2, #0
 800bad8:	4619      	mov	r1, r3
 800bada:	f003 fd23 	bl	800f524 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bade:	e120      	b.n	800bd22 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	d113      	bne.n	800bb0e <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	220c      	movs	r2, #12
 800baea:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800baec:	2303      	movs	r3, #3
 800baee:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2203      	movs	r2, #3
 800baf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb04:	2200      	movs	r2, #0
 800bb06:	4619      	mov	r1, r3
 800bb08:	f003 fd0c 	bl	800f524 <osMessagePut>
    break;
 800bb0c:	e109      	b.n	800bd22 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d111      	bne.n	800bb38 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2205      	movs	r2, #5
 800bb18:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4619      	mov	r1, r3
 800bb32:	f003 fcf7 	bl	800f524 <osMessagePut>
    break;
 800bb36:	e0f4      	b.n	800bd22 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	f040 80f1 	bne.w	800bd22 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	220b      	movs	r2, #11
 800bb44:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800bb46:	2302      	movs	r3, #2
 800bb48:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2203      	movs	r2, #3
 800bb4e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb5e:	2200      	movs	r2, #0
 800bb60:	4619      	mov	r1, r3
 800bb62:	f003 fcdf 	bl	800f524 <osMessagePut>
    break;
 800bb66:	e0dc      	b.n	800bd22 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	791b      	ldrb	r3, [r3, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	2100      	movs	r1, #0
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f920 	bl	800bdb6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2208      	movs	r2, #8
 800bb86:	761a      	strb	r2, [r3, #24]

    break;
 800bb88:	e0d0      	b.n	800bd2c <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	791b      	ldrb	r3, [r3, #4]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f00c f867 	bl	8017c64 <USBH_LL_GetURBState>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d113      	bne.n	800bbc8 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	220d      	movs	r2, #13
 800bba4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2203      	movs	r2, #3
 800bbae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	f003 fcaf 	bl	800f524 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bbc6:	e0ae      	b.n	800bd26 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800bbc8:	7bbb      	ldrb	r3, [r7, #14]
 800bbca:	2b04      	cmp	r3, #4
 800bbcc:	d111      	bne.n	800bbf2 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	220b      	movs	r2, #11
 800bbd2:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2203      	movs	r2, #3
 800bbd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4619      	mov	r1, r3
 800bbec:	f003 fc9a 	bl	800f524 <osMessagePut>
    break;
 800bbf0:	e099      	b.n	800bd26 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b05      	cmp	r3, #5
 800bbf6:	f040 8096 	bne.w	800bd26 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2203      	movs	r2, #3
 800bc02:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc12:	2200      	movs	r2, #0
 800bc14:	4619      	mov	r1, r3
 800bc16:	f003 fc85 	bl	800f524 <osMessagePut>
    break;
 800bc1a:	e084      	b.n	800bd26 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	795a      	ldrb	r2, [r3, #5]
 800bc20:	2301      	movs	r3, #1
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	4613      	mov	r3, r2
 800bc26:	2200      	movs	r2, #0
 800bc28:	2100      	movs	r1, #0
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f89e 	bl	800bd6c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	220a      	movs	r2, #10
 800bc40:	761a      	strb	r2, [r3, #24]
    break;
 800bc42:	e073      	b.n	800bd2c <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	795b      	ldrb	r3, [r3, #5]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f00c f80a 	bl	8017c64 <USBH_LL_GetURBState>
 800bc50:	4603      	mov	r3, r0
 800bc52:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d113      	bne.n	800bc82 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	220d      	movs	r2, #13
 800bc62:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2203      	movs	r2, #3
 800bc68:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc78:	2200      	movs	r2, #0
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	f003 fc52 	bl	800f524 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800bc80:	e053      	b.n	800bd2a <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d111      	bne.n	800bcac <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2209      	movs	r2, #9
 800bc8c:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2203      	movs	r2, #3
 800bc92:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bca2:	2200      	movs	r2, #0
 800bca4:	4619      	mov	r1, r3
 800bca6:	f003 fc3d 	bl	800f524 <osMessagePut>
    break;
 800bcaa:	e03e      	b.n	800bd2a <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d13b      	bne.n	800bd2a <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	220b      	movs	r2, #11
 800bcb6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2203      	movs	r2, #3
 800bcbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bccc:	2200      	movs	r2, #0
 800bcce:	4619      	mov	r1, r3
 800bcd0:	f003 fc28 	bl	800f524 <osMessagePut>
    break;
 800bcd4:	e029      	b.n	800bd2a <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7e5b      	ldrb	r3, [r3, #25]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	765a      	strb	r2, [r3, #25]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7e5b      	ldrb	r3, [r3, #25]
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d809      	bhi.n	800bcfe <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f00b fecd 	bl	8017a8a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800bcfc:	e016      	b.n	800bd2c <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bd04:	2106      	movs	r1, #6
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800bd10:	2302      	movs	r3, #2
 800bd12:	73fb      	strb	r3, [r7, #15]
    break;
 800bd14:	e00a      	b.n	800bd2c <USBH_HandleControl+0x470>

  default:
    break;
 800bd16:	bf00      	nop
 800bd18:	e008      	b.n	800bd2c <USBH_HandleControl+0x470>
    break;
 800bd1a:	bf00      	nop
 800bd1c:	e006      	b.n	800bd2c <USBH_HandleControl+0x470>
    break;
 800bd1e:	bf00      	nop
 800bd20:	e004      	b.n	800bd2c <USBH_HandleControl+0x470>
    break;
 800bd22:	bf00      	nop
 800bd24:	e002      	b.n	800bd2c <USBH_HandleControl+0x470>
    break;
 800bd26:	bf00      	nop
 800bd28:	e000      	b.n	800bd2c <USBH_HandleControl+0x470>
    break;
 800bd2a:	bf00      	nop
  }
  return status;
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop

0800bd38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b088      	sub	sp, #32
 800bd3c:	af04      	add	r7, sp, #16
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800bd46:	79f9      	ldrb	r1, [r7, #7]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9303      	str	r3, [sp, #12]
 800bd4c:	2308      	movs	r3, #8
 800bd4e:	9302      	str	r3, [sp, #8]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	9301      	str	r3, [sp, #4]
 800bd54:	2300      	movs	r3, #0
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f00b ff50 	bl	8017c02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af04      	add	r7, sp, #16
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	4611      	mov	r1, r2
 800bd78:	461a      	mov	r2, r3
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	80fb      	strh	r3, [r7, #6]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800bd90:	7979      	ldrb	r1, [r7, #5]
 800bd92:	7e3b      	ldrb	r3, [r7, #24]
 800bd94:	9303      	str	r3, [sp, #12]
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	9302      	str	r3, [sp, #8]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	2301      	movs	r3, #1
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	2300      	movs	r3, #0
 800bda4:	2200      	movs	r2, #0
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f00b ff2b 	bl	8017c02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b088      	sub	sp, #32
 800bdba:	af04      	add	r7, sp, #16
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	80fb      	strh	r3, [r7, #6]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800bdcc:	7979      	ldrb	r1, [r7, #5]
 800bdce:	2300      	movs	r3, #0
 800bdd0:	9303      	str	r3, [sp, #12]
 800bdd2:	88fb      	ldrh	r3, [r7, #6]
 800bdd4:	9302      	str	r3, [sp, #8]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	2301      	movs	r3, #1
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	2300      	movs	r3, #0
 800bde0:	2201      	movs	r2, #1
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f00b ff0d 	bl	8017c02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bde8:	2300      	movs	r3, #0

}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b088      	sub	sp, #32
 800bdf6:	af04      	add	r7, sp, #16
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	461a      	mov	r2, r3
 800be00:	460b      	mov	r3, r1
 800be02:	80fb      	strh	r3, [r7, #6]
 800be04:	4613      	mov	r3, r2
 800be06:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800be16:	7979      	ldrb	r1, [r7, #5]
 800be18:	7e3b      	ldrb	r3, [r7, #24]
 800be1a:	9303      	str	r3, [sp, #12]
 800be1c:	88fb      	ldrh	r3, [r7, #6]
 800be1e:	9302      	str	r3, [sp, #8]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	2301      	movs	r3, #1
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	2302      	movs	r3, #2
 800be2a:	2200      	movs	r2, #0
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f00b fee8 	bl	8017c02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af04      	add	r7, sp, #16
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4611      	mov	r1, r2
 800be48:	461a      	mov	r2, r3
 800be4a:	460b      	mov	r3, r1
 800be4c:	80fb      	strh	r3, [r7, #6]
 800be4e:	4613      	mov	r3, r2
 800be50:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800be52:	7979      	ldrb	r1, [r7, #5]
 800be54:	2300      	movs	r3, #0
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	88fb      	ldrh	r3, [r7, #6]
 800be5a:	9302      	str	r3, [sp, #8]
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	2301      	movs	r3, #1
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	2302      	movs	r3, #2
 800be66:	2201      	movs	r2, #1
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f00b feca 	bl	8017c02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af04      	add	r7, sp, #16
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	4608      	mov	r0, r1
 800be82:	4611      	mov	r1, r2
 800be84:	461a      	mov	r2, r3
 800be86:	4603      	mov	r3, r0
 800be88:	70fb      	strb	r3, [r7, #3]
 800be8a:	460b      	mov	r3, r1
 800be8c:	70bb      	strb	r3, [r7, #2]
 800be8e:	4613      	mov	r3, r2
 800be90:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800be92:	7878      	ldrb	r0, [r7, #1]
 800be94:	78ba      	ldrb	r2, [r7, #2]
 800be96:	78f9      	ldrb	r1, [r7, #3]
 800be98:	8b3b      	ldrh	r3, [r7, #24]
 800be9a:	9302      	str	r3, [sp, #8]
 800be9c:	7d3b      	ldrb	r3, [r7, #20]
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	7c3b      	ldrb	r3, [r7, #16]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	4603      	mov	r3, r0
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f00b fe5d 	bl	8017b66 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800beac:	2300      	movs	r3, #0

}
 800beae:	4618      	mov	r0, r3
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b082      	sub	sp, #8
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	460b      	mov	r3, r1
 800bec0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f00b fe7c 	bl	8017bc4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800becc:	2300      	movs	r3, #0

}
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b084      	sub	sp, #16
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	460b      	mov	r3, r1
 800bee0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f831 	bl	800bf4a <USBH_GetFreePipe>
 800bee8:	4603      	mov	r3, r0
 800beea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800beec:	89fb      	ldrh	r3, [r7, #14]
 800beee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d007      	beq.n	800bf06 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800bef6:	78fb      	ldrb	r3, [r7, #3]
 800bef8:	89fa      	ldrh	r2, [r7, #14]
 800befa:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	32e0      	adds	r2, #224	; 0xe0
 800bf02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800bf06:	89fb      	ldrh	r3, [r7, #14]
 800bf08:	b2db      	uxtb	r3, r3
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	2b0a      	cmp	r3, #10
 800bf22:	d80b      	bhi.n	800bf3c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800bf24:	78fa      	ldrb	r2, [r7, #3]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	32e0      	adds	r2, #224	; 0xe0
 800bf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2e:	78fa      	ldrb	r2, [r7, #3]
 800bf30:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	32e0      	adds	r2, #224	; 0xe0
 800bf38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b085      	sub	sp, #20
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bf56:	2300      	movs	r3, #0
 800bf58:	73fb      	strb	r3, [r7, #15]
 800bf5a:	e00e      	b.n	800bf7a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bf5c:	7bfa      	ldrb	r2, [r7, #15]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	32e0      	adds	r2, #224	; 0xe0
 800bf62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	e007      	b.n	800bf84 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	3301      	adds	r3, #1
 800bf78:	73fb      	strb	r3, [r7, #15]
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
 800bf7c:	2b0a      	cmp	r3, #10
 800bf7e:	d9ed      	bls.n	800bf5c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800bf80:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
    {
 800bf98:	4a04      	ldr	r2, [pc, #16]	; (800bfac <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	601a      	str	r2, [r3, #0]
    }
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	080214cc 	.word	0x080214cc

0800bfb0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
    }
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff ffe9 	bl	800bf90 <_ZN8touchgfx15TouchControllerD1Ev>
 800bfbe:	2104      	movs	r1, #4
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f013 fba4 	bl	801f70e <_ZdlPvj>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	80da      	strh	r2, [r3, #6]
    }
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800bffe:	b480      	push	{r7}
 800c000:	b083      	sub	sp, #12
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	807b      	strh	r3, [r7, #2]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	887a      	ldrh	r2, [r7, #2]
 800c00e:	801a      	strh	r2, [r3, #0]
    {
    }
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
	...

0800c020 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	4a04      	ldr	r2, [pc, #16]	; (800c03c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4618      	mov	r0, r3
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	08023468 	.word	0x08023468

0800c040 <_ZN8touchgfx8DrawableD0Ev>:
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff ffe9 	bl	800c020 <_ZN8touchgfx8DrawableD1Ev>
 800c04e:	2128      	movs	r1, #40	; 0x28
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f013 fb5c 	bl	801f70e <_ZdlPvj>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	4608      	mov	r0, r1
 800c06a:	4611      	mov	r1, r2
 800c06c:	461a      	mov	r2, r3
 800c06e:	4603      	mov	r3, r0
 800c070:	817b      	strh	r3, [r7, #10]
 800c072:	460b      	mov	r3, r1
 800c074:	813b      	strh	r3, [r7, #8]
 800c076:	4613      	mov	r3, r2
 800c078:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3334      	adds	r3, #52	; 0x34
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c086:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	4798      	blx	r3
        setWidth(width);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3338      	adds	r3, #56	; 0x38
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c09a:	4611      	mov	r1, r2
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	4798      	blx	r3
        setHeight(height);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	333c      	adds	r3, #60	; 0x3c
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	4798      	blx	r3
    };
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	887a      	ldrh	r2, [r7, #2]
 800c0ca:	809a      	strh	r2, [r3, #4]
    }
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	887a      	ldrh	r2, [r7, #2]
 800c0e8:	80da      	strh	r2, [r3, #6]
    }
 800c0ea:	bf00      	nop
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	460b      	mov	r3, r1
 800c100:	807b      	strh	r3, [r7, #2]
 800c102:	4613      	mov	r3, r2
 800c104:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	332c      	adds	r3, #44	; 0x2c
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c112:	4611      	mov	r1, r2
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	4798      	blx	r3
        setY(y);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3330      	adds	r3, #48	; 0x30
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c124:	4611      	mov	r1, r2
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	4798      	blx	r3
    }
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800c132:	b480      	push	{r7}
 800c134:	b083      	sub	sp, #12
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	460b      	mov	r3, r1
 800c13c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	887a      	ldrh	r2, [r7, #2]
 800c142:	811a      	strh	r2, [r3, #8]
    }
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	460b      	mov	r3, r1
 800c15a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	887a      	ldrh	r2, [r7, #2]
 800c160:	815a      	strh	r2, [r3, #10]
    }
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
 800c1a2:	bf00      	nop
 800c1a4:	370c      	adds	r7, #12
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800c1ae:	b480      	push	{r7}
 800c1b0:	b083      	sub	sp, #12
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	6039      	str	r1, [r7, #0]
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800c200:	4618      	mov	r0, r3
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	807b      	strh	r3, [r7, #2]
 800c218:	4613      	mov	r3, r2
 800c21a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3354      	adds	r3, #84	; 0x54
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	8879      	ldrh	r1, [r7, #2]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c22c:	b292      	uxth	r2, r2
 800c22e:	1a8a      	subs	r2, r1, r2
 800c230:	b292      	uxth	r2, r2
 800c232:	b210      	sxth	r0, r2
 800c234:	8839      	ldrh	r1, [r7, #0]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c23c:	b292      	uxth	r2, r2
 800c23e:	1a8a      	subs	r2, r1, r2
 800c240:	b292      	uxth	r2, r2
 800c242:	b212      	sxth	r2, r2
 800c244:	4601      	mov	r1, r0
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	4798      	blx	r3
    }
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c252:	b480      	push	{r7}
 800c254:	b083      	sub	sp, #12
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c260:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c268:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c270:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800c272:	bf00      	nop
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	60b9      	str	r1, [r7, #8]
 800c288:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f7ff ffe1 	bl	800c252 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	601a      	str	r2, [r3, #0]
    }
 800c29e:	bf00      	nop
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
	...

0800c2a8 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	4a05      	ldr	r2, [pc, #20]	; (800c2c8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff feb1 	bl	800c020 <_ZN8touchgfx8DrawableD1Ev>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	080214e4 	.word	0x080214e4

0800c2cc <_ZN8touchgfx6WidgetD0Ev>:
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ffe7 	bl	800c2a8 <_ZN8touchgfx6WidgetD1Ev>
 800c2da:	2128      	movs	r1, #40	; 0x28
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f013 fa16 	bl	801f70e <_ZdlPvj>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	607b      	str	r3, [r7, #4]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	817b      	strh	r3, [r7, #10]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff ff69 	bl	800c1d8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d008      	beq.n	800c31e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff ff6f 	bl	800c1f2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c31a:	2301      	movs	r3, #1
 800c31c:	e000      	b.n	800c320 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800c31e:	2300      	movs	r3, #0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d002      	beq.n	800c32a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	601a      	str	r2, [r3, #0]
        }
    }
 800c32a:	bf00      	nop
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800c33a:	2301      	movs	r3, #1
    }
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 800c350:	2308      	movs	r3, #8
    }
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
	...

0800c360 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	4a05      	ldr	r2, [pc, #20]	; (800c380 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fe55 	bl	800c020 <_ZN8touchgfx8DrawableD1Ev>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4618      	mov	r0, r3
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	08021550 	.word	0x08021550

0800c384 <_ZN8touchgfx9ContainerD0Ev>:
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff ffe7 	bl	800c360 <_ZN8touchgfx9ContainerD1Ev>
 800c392:	212c      	movs	r1, #44	; 0x2c
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f013 f9ba 	bl	801f70e <_ZdlPvj>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800c3ac:	2312      	movs	r3, #18
    }
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
	...

0800c3bc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	4a05      	ldr	r2, [pc, #20]	; (800c3dc <_ZN8touchgfx5ImageD1Ev+0x20>)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff ff6b 	bl	800c2a8 <_ZN8touchgfx6WidgetD1Ev>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	08021be4 	.word	0x08021be4

0800c3e0 <_ZN8touchgfx5ImageD0Ev>:
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff ffe7 	bl	800c3bc <_ZN8touchgfx5ImageD1Ev>
 800c3ee:	212c      	movs	r1, #44	; 0x2c
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f013 f98c 	bl	801f70e <_ZdlPvj>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c400:	b480      	push	{r7}
 800c402:	af00      	add	r7, sp, #0
    {
        return instance;
 800c404:	4b03      	ldr	r3, [pc, #12]	; (800c414 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c406:	681b      	ldr	r3, [r3, #0]
    }
 800c408:	4618      	mov	r0, r3
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20009ac0 	.word	0x20009ac0

0800c418 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c418:	b480      	push	{r7}
 800c41a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c41c:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c424:	2b00      	cmp	r3, #0
 800c426:	d008      	beq.n	800c43a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c428:	4b08      	ldr	r3, [pc, #32]	; (800c44c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c438:	e002      	b.n	800c440 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800c43a:	4b04      	ldr	r3, [pc, #16]	; (800c44c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800c440:	4618      	mov	r0, r3
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20009ac0 	.word	0x20009ac0

0800c450 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	4608      	mov	r0, r1
 800c45a:	4611      	mov	r1, r2
 800c45c:	461a      	mov	r2, r3
 800c45e:	4603      	mov	r3, r0
 800c460:	817b      	strh	r3, [r7, #10]
 800c462:	460b      	mov	r3, r1
 800c464:	813b      	strh	r3, [r7, #8]
 800c466:	4613      	mov	r3, r2
 800c468:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	897a      	ldrh	r2, [r7, #10]
 800c46e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	893a      	ldrh	r2, [r7, #8]
 800c474:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	88fa      	ldrh	r2, [r7, #6]
 800c47a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	8b3a      	ldrh	r2, [r7, #24]
 800c480:	80da      	strh	r2, [r3, #6]
    }
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	4413      	add	r3, r2
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	b21b      	sxth	r3, r3
    }
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	4413      	add	r3, r2
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	b21b      	sxth	r3, r3
    }
 800c4d8:	4618      	mov	r0, r3
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	807b      	strh	r3, [r7, #2]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800c4fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	db1a      	blt.n	800c538 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7ff ffc4 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c508:	4603      	mov	r3, r0
 800c50a:	461a      	mov	r2, r3
 800c50c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c510:	4293      	cmp	r3, r2
 800c512:	da11      	bge.n	800c538 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800c51a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c51e:	429a      	cmp	r2, r3
 800c520:	db0a      	blt.n	800c538 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff ffc9 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c528:	4603      	mov	r3, r0
 800c52a:	461a      	mov	r2, r3
 800c52c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c530:	4293      	cmp	r3, r2
 800c532:	da01      	bge.n	800c538 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800c534:	2301      	movs	r3, #1
 800c536:	e000      	b.n	800c53a <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800c538:	2300      	movs	r3, #0
    }
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800c542:	b590      	push	{r4, r7, lr}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f9b3 4000 	ldrsh.w	r4, [r3]
 800c552:	6838      	ldr	r0, [r7, #0]
 800c554:	f7ff ff9c 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c558:	4603      	mov	r3, r0
 800c55a:	429c      	cmp	r4, r3
 800c55c:	da1e      	bge.n	800c59c <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff ff96 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c564:	4603      	mov	r3, r0
 800c566:	461a      	mov	r2, r3
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c56e:	429a      	cmp	r2, r3
 800c570:	dd14      	ble.n	800c59c <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800c578:	6838      	ldr	r0, [r7, #0]
 800c57a:	f7ff ff9e 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c57e:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800c580:	429c      	cmp	r4, r3
 800c582:	da0b      	bge.n	800c59c <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff ff98 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c58a:	4603      	mov	r3, r0
 800c58c:	461a      	mov	r2, r3
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800c594:	429a      	cmp	r2, r3
 800c596:	dd01      	ble.n	800c59c <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800c598:	2301      	movs	r3, #1
 800c59a:	e000      	b.n	800c59e <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800c59c:	2300      	movs	r3, #0
    }
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd90      	pop	{r4, r7, pc}

0800c5a6 <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	6811      	ldr	r1, [r2, #0]
 800c5b8:	6852      	ldr	r2, [r2, #4]
 800c5ba:	6019      	str	r1, [r3, #0]
 800c5bc:	605a      	str	r2, [r3, #4]
        r &= other;
 800c5be:	6879      	ldr	r1, [r7, #4]
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 f805 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800c5c6:	bf00      	nop
    }
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800c5d0:	b590      	push	{r4, r7, lr}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7ff ffb0 	bl	800c542 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d05f      	beq.n	800c6a8 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	dd03      	ble.n	800c600 <_ZN8touchgfx4RectaNERKS0_+0x30>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5fe:	e002      	b.n	800c606 <_ZN8touchgfx4RectaNERKS0_+0x36>
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c606:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c614:	429a      	cmp	r2, r3
 800c616:	dd04      	ble.n	800c622 <_ZN8touchgfx4RectaNERKS0_+0x52>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3302      	adds	r3, #2
 800c61c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c620:	e002      	b.n	800c628 <_ZN8touchgfx4RectaNERKS0_+0x58>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c628:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff ff30 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c630:	4603      	mov	r3, r0
 800c632:	461c      	mov	r4, r3
 800c634:	6838      	ldr	r0, [r7, #0]
 800c636:	f7ff ff2b 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c63a:	4603      	mov	r3, r0
 800c63c:	429c      	cmp	r4, r3
 800c63e:	da05      	bge.n	800c64c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff ff25 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c646:	4603      	mov	r3, r0
 800c648:	b29b      	uxth	r3, r3
 800c64a:	e004      	b.n	800c656 <_ZN8touchgfx4RectaNERKS0_+0x86>
 800c64c:	6838      	ldr	r0, [r7, #0]
 800c64e:	f7ff ff1f 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c652:	4603      	mov	r3, r0
 800c654:	b29b      	uxth	r3, r3
 800c656:	89fa      	ldrh	r2, [r7, #14]
 800c658:	1a9b      	subs	r3, r3, r2
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	b21a      	sxth	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7ff ff29 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c668:	4603      	mov	r3, r0
 800c66a:	461c      	mov	r4, r3
 800c66c:	6838      	ldr	r0, [r7, #0]
 800c66e:	f7ff ff24 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c672:	4603      	mov	r3, r0
 800c674:	429c      	cmp	r4, r3
 800c676:	da05      	bge.n	800c684 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ff1e 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c67e:	4603      	mov	r3, r0
 800c680:	b29b      	uxth	r3, r3
 800c682:	e004      	b.n	800c68e <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800c684:	6838      	ldr	r0, [r7, #0]
 800c686:	f7ff ff18 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c68a:	4603      	mov	r3, r0
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	89ba      	ldrh	r2, [r7, #12]
 800c690:	1a9b      	subs	r3, r3, r2
 800c692:	b29b      	uxth	r3, r3
 800c694:	b21a      	sxth	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	80da      	strh	r2, [r3, #6]
            x = newX;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	89fa      	ldrh	r2, [r7, #14]
 800c69e:	801a      	strh	r2, [r3, #0]
            y = newY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	89ba      	ldrh	r2, [r7, #12]
 800c6a4:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800c6a6:	e00b      	b.n	800c6c0 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	801a      	strh	r2, [r3, #0]
            y = 0;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	805a      	strh	r2, [r3, #2]
            width = 0;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	809a      	strh	r2, [r3, #4]
            height = 0;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	80da      	strh	r2, [r3, #6]
    }
 800c6c0:	bf00      	nop
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd90      	pop	{r4, r7, pc}

0800c6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800c6c8:	b590      	push	{r4, r7, lr}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800c6d2:	6838      	ldr	r0, [r7, #0]
 800c6d4:	f000 f884 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	f083 0301 	eor.w	r3, r3, #1
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d079      	beq.n	800c7d8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f87b 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d014      	beq.n	800c71a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800c718:	e05e      	b.n	800c7d8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c726:	429a      	cmp	r2, r3
 800c728:	da03      	bge.n	800c732 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c730:	e002      	b.n	800c738 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c738:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c746:	429a      	cmp	r2, r3
 800c748:	da04      	bge.n	800c754 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3302      	adds	r3, #2
 800c74e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c752:	e002      	b.n	800c75a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c75a:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff fe97 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c762:	4603      	mov	r3, r0
 800c764:	461c      	mov	r4, r3
 800c766:	6838      	ldr	r0, [r7, #0]
 800c768:	f7ff fe92 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c76c:	4603      	mov	r3, r0
 800c76e:	429c      	cmp	r4, r3
 800c770:	dd04      	ble.n	800c77c <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7ff fe8c 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c778:	4603      	mov	r3, r0
 800c77a:	e003      	b.n	800c784 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800c77c:	6838      	ldr	r0, [r7, #0]
 800c77e:	f7ff fe87 	bl	800c490 <_ZNK8touchgfx4Rect5rightEv>
 800c782:	4603      	mov	r3, r0
 800c784:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff fe97 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461c      	mov	r4, r3
 800c790:	6838      	ldr	r0, [r7, #0]
 800c792:	f7ff fe92 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c796:	4603      	mov	r3, r0
 800c798:	429c      	cmp	r4, r3
 800c79a:	dd04      	ble.n	800c7a6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff fe8c 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	e003      	b.n	800c7ae <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800c7a6:	6838      	ldr	r0, [r7, #0]
 800c7a8:	f7ff fe87 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	813b      	strh	r3, [r7, #8]
                x = newX;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	89fa      	ldrh	r2, [r7, #14]
 800c7b4:	801a      	strh	r2, [r3, #0]
                y = newY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	89ba      	ldrh	r2, [r7, #12]
 800c7ba:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800c7bc:	897a      	ldrh	r2, [r7, #10]
 800c7be:	89fb      	ldrh	r3, [r7, #14]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	b21a      	sxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800c7ca:	893a      	ldrh	r2, [r7, #8]
 800c7cc:	89bb      	ldrh	r3, [r7, #12]
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	b21a      	sxth	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	80da      	strh	r2, [r3, #6]
    }
 800c7d8:	bf00      	nop
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd90      	pop	{r4, r7, pc}

0800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d004      	beq.n	800c7fc <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e000      	b.n	800c802 <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800c800:	2300      	movs	r3, #0
    }
 800c802:	4618      	mov	r0, r3
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <_ZNK8touchgfx8Drawable7getRectEv>:
    const Rect& getRect() const
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
        return rect;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3304      	adds	r3, #4
    }
 800c81a:	4618      	mov	r0, r3
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <_ZNK8touchgfx8Drawable4getXEv>:
    int16_t getX() const
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
        return rect.x;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <_ZNK8touchgfx8Drawable4getYEv>:
    int16_t getY() const
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
        return rect.y;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b085      	sub	sp, #20
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	6039      	str	r1, [r7, #0]
    bool found = false;
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86c:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00d      	beq.n	800c890 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10a      	bne.n	800c890 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	bf0c      	ite	eq
 800c882:	2301      	moveq	r3, #1
 800c884:	2300      	movne	r3, #0
 800c886:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800c88e:	e7ee      	b.n	800c86e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800c890:	7bfb      	ldrb	r3, [r7, #15]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d105      	bne.n	800c8be <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800c8b2:	4b22      	ldr	r3, [pc, #136]	; (800c93c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800c8b4:	4a22      	ldr	r2, [pc, #136]	; (800c940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c8b6:	2123      	movs	r1, #35	; 0x23
 800c8b8:	4822      	ldr	r0, [pc, #136]	; (800c944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c8ba:	f012 ff45 	bl	801f748 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d005      	beq.n	800c8d2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800c8c6:	4b20      	ldr	r3, [pc, #128]	; (800c948 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800c8c8:	4a1d      	ldr	r2, [pc, #116]	; (800c940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c8ca:	2124      	movs	r1, #36	; 0x24
 800c8cc:	481d      	ldr	r0, [pc, #116]	; (800c944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c8ce:	f012 ff3b 	bl	801f748 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800c8ec:	e021      	b.n	800c932 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f2:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00d      	beq.n	800c918 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	429a      	cmp	r2, r3
 800c902:	d105      	bne.n	800c910 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800c904:	4b11      	ldr	r3, [pc, #68]	; (800c94c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800c906:	4a0e      	ldr	r2, [pc, #56]	; (800c940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c908:	2135      	movs	r1, #53	; 0x35
 800c90a:	480e      	ldr	r0, [pc, #56]	; (800c944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c90c:	f012 ff1c 	bl	801f748 <__assert_func>
            head = head->nextSibling;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800c916:	e7ed      	b.n	800c8f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d105      	bne.n	800c92c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800c920:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800c922:	4a07      	ldr	r2, [pc, #28]	; (800c940 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800c924:	2138      	movs	r1, #56	; 0x38
 800c926:	4807      	ldr	r0, [pc, #28]	; (800c944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800c928:	f012 ff0e 	bl	801f748 <__assert_func>
        head->nextSibling = &d;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	619a      	str	r2, [r3, #24]
}
 800c932:	bf00      	nop
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	08020810 	.word	0x08020810
 800c940:	080215d8 	.word	0x080215d8
 800c944:	0802083c 	.word	0x0802083c
 800c948:	08020894 	.word	0x08020894
 800c94c:	080208cc 	.word	0x080208cc

0800c950 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d031      	beq.n	800c9c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d112      	bne.n	800c992 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	2200      	movs	r2, #0
 800c970:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d103      	bne.n	800c982 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800c980:	e022      	b.n	800c9c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	699a      	ldr	r2, [r3, #24]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2200      	movs	r2, #0
 800c98e:	619a      	str	r2, [r3, #24]
        return;
 800c990:	e01a      	b.n	800c9c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c996:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d014      	beq.n	800c9c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d10a      	bne.n	800c9be <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	699a      	ldr	r2, [r3, #24]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	619a      	str	r2, [r3, #24]
            return;
 800c9bc:	e004      	b.n	800c9c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800c9c4:	e7e8      	b.n	800c998 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800c9c6:	bf00      	nop
        }
    }
}
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b085      	sub	sp, #20
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00e      	beq.n	800ca00 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e6:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ec:	699a      	ldr	r2, [r3, #24]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800c9fe:	e7ec      	b.n	800c9da <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800ca00:	bf00      	nop
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ca1a:	bf00      	nop
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b088      	sub	sp, #32
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff fbd0 	bl	800c1d8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f083 0301 	eor.w	r3, r3, #1
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d103      	bne.n	800ca4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d101      	bne.n	800ca50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e000      	b.n	800ca52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800ca50:	2300      	movs	r3, #0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d14e      	bne.n	800caf4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	f107 0314 	add.w	r3, r7, #20
 800ca5c:	6810      	ldr	r0, [r2, #0]
 800ca5e:	6851      	ldr	r1, [r2, #4]
 800ca60:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca66:	61fb      	str	r3, [r7, #28]
    while (d)
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d043      	beq.n	800caf6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800ca6e:	69f8      	ldr	r0, [r7, #28]
 800ca70:	f7ff fbb2 	bl	800c1d8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d038      	beq.n	800caec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800ca7a:	69f8      	ldr	r0, [r7, #28]
 800ca7c:	f7ff fec7 	bl	800c80e <_ZNK8touchgfx8Drawable7getRectEv>
 800ca80:	4602      	mov	r2, r0
 800ca82:	f107 030c 	add.w	r3, r7, #12
 800ca86:	f107 0114 	add.w	r1, r7, #20
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fd8b 	bl	800c5a6 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800ca90:	f107 030c 	add.w	r3, r7, #12
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff fea3 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f083 0301 	eor.w	r3, r3, #1
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d022      	beq.n	800caec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800caa6:	69f8      	ldr	r0, [r7, #28]
 800caa8:	f7ff febd 	bl	800c826 <_ZNK8touchgfx8Drawable4getXEv>
 800caac:	4603      	mov	r3, r0
 800caae:	4619      	mov	r1, r3
 800cab0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	b28b      	uxth	r3, r1
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	b29b      	uxth	r3, r3
 800cabc:	b21b      	sxth	r3, r3
 800cabe:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800cac0:	69f8      	ldr	r0, [r7, #28]
 800cac2:	f7ff febd 	bl	800c840 <_ZNK8touchgfx8Drawable4getYEv>
 800cac6:	4603      	mov	r3, r0
 800cac8:	4619      	mov	r1, r3
 800caca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cace:	b29a      	uxth	r2, r3
 800cad0:	b28b      	uxth	r3, r1
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	b21b      	sxth	r3, r3
 800cad8:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3308      	adds	r3, #8
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f107 020c 	add.w	r2, r7, #12
 800cae6:	4611      	mov	r1, r2
 800cae8:	69f8      	ldr	r0, [r7, #28]
 800caea:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	61fb      	str	r3, [r7, #28]
    while (d)
 800caf2:	e7b9      	b.n	800ca68 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800caf4:	bf00      	nop
    }
}
 800caf6:	3720      	adds	r7, #32
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800cafc:	b590      	push	{r4, r7, lr}
 800cafe:	b087      	sub	sp, #28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	607b      	str	r3, [r7, #4]
 800cb06:	460b      	mov	r3, r1
 800cb08:	817b      	strh	r3, [r7, #10]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7ff fb6e 	bl	800c1f2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb26:	617b      	str	r3, [r7, #20]
    while (d)
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d038      	beq.n	800cba0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800cb2e:	6978      	ldr	r0, [r7, #20]
 800cb30:	f7ff fb52 	bl	800c1d8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00e      	beq.n	800cb58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800cb3a:	6978      	ldr	r0, [r7, #20]
 800cb3c:	f7ff fe67 	bl	800c80e <_ZNK8touchgfx8Drawable7getRectEv>
 800cb40:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800cb44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	f7ff fccb 	bl	800c4e4 <_ZNK8touchgfx4Rect9intersectEss>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800cb54:	2301      	movs	r3, #1
 800cb56:	e000      	b.n	800cb5a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d01c      	beq.n	800cb98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800cb5e:	897c      	ldrh	r4, [r7, #10]
 800cb60:	6978      	ldr	r0, [r7, #20]
 800cb62:	f7ff fe60 	bl	800c826 <_ZNK8touchgfx8Drawable4getXEv>
 800cb66:	4603      	mov	r3, r0
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	1ae3      	subs	r3, r4, r3
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800cb70:	893c      	ldrh	r4, [r7, #8]
 800cb72:	6978      	ldr	r0, [r7, #20]
 800cb74:	f7ff fe64 	bl	800c840 <_ZNK8touchgfx8Drawable4getYEv>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	1ae3      	subs	r3, r4, r3
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	331c      	adds	r3, #28
 800cb88:	681c      	ldr	r4, [r3, #0]
 800cb8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800cb8e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6978      	ldr	r0, [r7, #20]
 800cb96:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	617b      	str	r3, [r7, #20]
    while (d)
 800cb9e:	e7c3      	b.n	800cb28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800cba0:	bf00      	nop
 800cba2:	371c      	adds	r7, #28
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd90      	pop	{r4, r7, pc}

0800cba8 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2100      	movs	r1, #0
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff fc47 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
}
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b086      	sub	sp, #24
 800cbce:	af02      	add	r7, sp, #8
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd8:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff fc33 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    while (d)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00b      	beq.n	800cc08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff fe0c 	bl	800c80e <_ZNK8touchgfx8Drawable7getRectEv>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff fd64 	bl	800c6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	60fb      	str	r3, [r7, #12]
    while (d)
 800cc06:	e7f0      	b.n	800cbea <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800cc08:	bf00      	nop
}
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b084      	sub	sp, #16
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	807b      	strh	r3, [r7, #2]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc26:	60fb      	str	r3, [r7, #12]
    while (d)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00d      	beq.n	800cc4a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3354      	adds	r3, #84	; 0x54
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cc3a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	4798      	blx	r3
        d = d->nextSibling;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	60fb      	str	r3, [r7, #12]
    while (d)
 800cc48:	e7ee      	b.n	800cc28 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b084      	sub	sp, #16
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc60:	60fb      	str	r3, [r7, #12]
    while (d)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00a      	beq.n	800cc7e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68f9      	ldr	r1, [r7, #12]
 800cc72:	6838      	ldr	r0, [r7, #0]
 800cc74:	4798      	blx	r3
        d = d->nextSibling;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	60fb      	str	r3, [r7, #12]
    while (d)
 800cc7c:	e7f1      	b.n	800cc62 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800cc7e:	bf00      	nop
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b086      	sub	sp, #24
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	60b9      	str	r1, [r7, #8]
 800cc90:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d107      	bne.n	800ccaa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3364      	adds	r3, #100	; 0x64
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	4798      	blx	r3
        return;
 800cca8:	e026      	b.n	800ccf8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	615a      	str	r2, [r3, #20]
 800ccc4:	e018      	b.n	800ccf8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccca:	617b      	str	r3, [r7, #20]
        while (tmp)
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d012      	beq.n	800ccf8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d10a      	bne.n	800ccf0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	699a      	ldr	r2, [r3, #24]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	615a      	str	r2, [r3, #20]
                return;
 800ccee:	e003      	b.n	800ccf8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	699b      	ldr	r3, [r3, #24]
 800ccf4:	617b      	str	r3, [r7, #20]
        while (tmp)
 800ccf6:	e7e9      	b.n	800cccc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b088      	sub	sp, #32
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	60b9      	str	r1, [r7, #8]
 800cd08:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7ff fa63 	bl	800c1d8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800cd12:	4603      	mov	r3, r0
 800cd14:	f083 0301 	eor.w	r3, r3, #1
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d14b      	bne.n	800cdb6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d049      	beq.n	800cdba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd2a:	61fb      	str	r3, [r7, #28]
    while (d)
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d044      	beq.n	800cdbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800cd32:	69f8      	ldr	r0, [r7, #28]
 800cd34:	f7ff fa50 	bl	800c1d8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d037      	beq.n	800cdae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800cd3e:	69f8      	ldr	r0, [r7, #28]
 800cd40:	f7ff fd65 	bl	800c80e <_ZNK8touchgfx8Drawable7getRectEv>
 800cd44:	4602      	mov	r2, r0
 800cd46:	f107 0314 	add.w	r3, r7, #20
 800cd4a:	68b9      	ldr	r1, [r7, #8]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff fc2a 	bl	800c5a6 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800cd52:	f107 0314 	add.w	r3, r7, #20
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7ff fd42 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f083 0301 	eor.w	r3, r3, #1
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d022      	beq.n	800cdae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800cd68:	69f8      	ldr	r0, [r7, #28]
 800cd6a:	f7ff fd5c 	bl	800c826 <_ZNK8touchgfx8Drawable4getXEv>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	4619      	mov	r1, r3
 800cd72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	b28b      	uxth	r3, r1
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	b21b      	sxth	r3, r3
 800cd80:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800cd82:	69f8      	ldr	r0, [r7, #28]
 800cd84:	f7ff fd5c 	bl	800c840 <_ZNK8touchgfx8Drawable4getYEv>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	b28b      	uxth	r3, r1
 800cd94:	1ad3      	subs	r3, r2, r3
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	b21b      	sxth	r3, r3
 800cd9a:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3360      	adds	r3, #96	; 0x60
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f107 0114 	add.w	r1, r7, #20
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	69f8      	ldr	r0, [r7, #28]
 800cdac:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	61fb      	str	r3, [r7, #28]
    while (d)
 800cdb4:	e7ba      	b.n	800cd2c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800cdb6:	bf00      	nop
 800cdb8:	e000      	b.n	800cdbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800cdba:	bf00      	nop
    }
}
 800cdbc:	3720      	adds	r7, #32
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
        return rect.width;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
        return rect.height;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800cdea:	4618      	mov	r0, r3
 800cdec:	370c      	adds	r7, #12
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	4a04      	ldr	r2, [pc, #16]	; (800ce14 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	0802161c 	.word	0x0802161c

0800ce18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
    {
    }
 800ce20:	4a04      	ldr	r2, [pc, #16]	; (800ce34 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	601a      	str	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	0802161c 	.word	0x0802161c

0800ce38 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
    }
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff ffe9 	bl	800ce18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800ce46:	2104      	movs	r1, #4
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f012 fc60 	bl	801f70e <_ZdlPvj>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
        color = col;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	601a      	str	r2, [r3, #0]
    }
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
	...

0800ce78 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af02      	add	r7, sp, #8
 800ce7e:	6078      	str	r0, [r7, #4]
        visible(true)
 800ce80:	4a13      	ldr	r2, [pc, #76]	; (800ced0 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	1d18      	adds	r0, r3, #4
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	2200      	movs	r2, #0
 800ce92:	2100      	movs	r1, #0
 800ce94:	f7ff fadc 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	330c      	adds	r3, #12
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff f897 	bl	800bfd0 <_ZN8touchgfx4RectC1Ev>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	615a      	str	r2, [r3, #20]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	619a      	str	r2, [r3, #24]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	61da      	str	r2, [r3, #28]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	08023468 	.word	0x08023468

0800ced4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	78fa      	ldrb	r2, [r7, #3]
 800cee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff ffba 	bl	800ce78 <_ZN8touchgfx8DrawableC1Ev>
 800cf04:	4a05      	ldr	r2, [pc, #20]	; (800cf1c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4618      	mov	r0, r3
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	08021550 	.word	0x08021550

0800cf20 <_ZN8touchgfx6WidgetC1Ev>:
    Widget() : Drawable() { }
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7ff ffa4 	bl	800ce78 <_ZN8touchgfx8DrawableC1Ev>
 800cf30:	4a03      	ldr	r2, [pc, #12]	; (800cf40 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	080214e4 	.word	0x080214e4

0800cf44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff ffe5 	bl	800cf20 <_ZN8touchgfx6WidgetC1Ev>
 800cf56:	4a0b      	ldr	r2, [pc, #44]	; (800cf84 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3326      	adds	r3, #38	; 0x26
 800cf60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff f84a 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	22ff      	movs	r2, #255	; 0xff
 800cf6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        setBitmap(bmp);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f001 fd57 	bl	800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	08021be4 	.word	0x08021be4

0800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800cf88:	b590      	push	{r4, r7, lr}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	4603      	mov	r3, r0
 800cf90:	71fb      	strb	r3, [r7, #7]
 800cf92:	460b      	mov	r3, r1
 800cf94:	71bb      	strb	r3, [r7, #6]
 800cf96:	4613      	mov	r3, r2
 800cf98:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800cf9a:	f7ff fa31 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d105      	bne.n	800cfb0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800cfa4:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800cfa6:	4a0b      	ldr	r2, [pc, #44]	; (800cfd4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800cfa8:	2138      	movs	r1, #56	; 0x38
 800cfaa:	480b      	ldr	r0, [pc, #44]	; (800cfd8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800cfac:	f012 fbcc 	bl	801f748 <__assert_func>
 800cfb0:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800cfb2:	f7ff fa31 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800cfb6:	6803      	ldr	r3, [r0, #0]
 800cfb8:	332c      	adds	r3, #44	; 0x2c
 800cfba:	681c      	ldr	r4, [r3, #0]
 800cfbc:	797b      	ldrb	r3, [r7, #5]
 800cfbe:	79ba      	ldrb	r2, [r7, #6]
 800cfc0:	79f9      	ldrb	r1, [r7, #7]
 800cfc2:	47a0      	blx	r4
 800cfc4:	4603      	mov	r3, r0
    }
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd90      	pop	{r4, r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	08020900 	.word	0x08020900
 800cfd4:	0802162c 	.word	0x0802162c
 800cfd8:	08020944 	.word	0x08020944

0800cfdc <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	4a04      	ldr	r2, [pc, #16]	; (800cff8 <_ZN8touchgfx5EventD1Ev+0x1c>)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	601a      	str	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4618      	mov	r0, r3
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	080216b8 	.word	0x080216b8

0800cffc <_ZN8touchgfx5EventD0Ev>:
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7ff ffe9 	bl	800cfdc <_ZN8touchgfx5EventD1Ev>
 800d00a:	2104      	movs	r1, #4
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f012 fb7e 	bl	801f70e <_ZdlPvj>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4618      	mov	r0, r3
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	4a05      	ldr	r2, [pc, #20]	; (800d03c <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7ff ffd5 	bl	800cfdc <_ZN8touchgfx5EventD1Ev>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4618      	mov	r0, r3
 800d036:	3708      	adds	r7, #8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	080216a4 	.word	0x080216a4

0800d040 <_ZN8touchgfx10ClickEventD0Ev>:
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff ffe7 	bl	800d01c <_ZN8touchgfx10ClickEventD1Ev>
 800d04e:	210c      	movs	r1, #12
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f012 fb5c 	bl	801f70e <_ZdlPvj>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4618      	mov	r0, r3
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <_ZNK8touchgfx10ClickEvent4getXEv>:
     *
     *        Gets the x coordinate of this event.
     *
     * @return The x coordinate of this event.
     */
    int16_t getX() const
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
    {
        return _x;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800d06e:	4618      	mov	r0, r3
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <_ZNK8touchgfx10ClickEvent4getYEv>:
     *
     *        Gets the y coordinate of this event.
     *
     * @return The y coordinate of this event.
     */
    int16_t getY() const
 800d07a:	b480      	push	{r7}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
    {
        return _y;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800d088:	4618      	mov	r0, r3
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	791b      	ldrb	r3, [r3, #4]
    }
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800d0b4:	2300      	movs	r3, #0
    }
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
	...

0800d0c4 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	4a05      	ldr	r2, [pc, #20]	; (800d0e4 <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff ff81 	bl	800cfdc <_ZN8touchgfx5EventD1Ev>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	08021690 	.word	0x08021690

0800d0e8 <_ZN8touchgfx9DragEventD0Ev>:
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff ffe7 	bl	800d0c4 <_ZN8touchgfx9DragEventD1Ev>
 800d0f6:	2110      	movs	r1, #16
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f012 fb08 	bl	801f70e <_ZdlPvj>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <_ZNK8touchgfx9DragEvent7getNewXEv>:
     *
     *        Gets the new x coordinate (dragged to).
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
    {
        return _newX;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <_ZNK8touchgfx9DragEvent7getNewYEv>:
     *
     *        Gets the new x coordinate (dragged to).
     *
     * @return The new y coordinate (dragged to).
     */
    int16_t getNewY() const
 800d122:	b480      	push	{r7}
 800d124:	b083      	sub	sp, #12
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
    {
        return _newY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    }
 800d130:	4618      	mov	r0, r3
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800d144:	2301      	movs	r3, #1
    }
 800d146:	4618      	mov	r0, r3
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
	...

0800d154 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4618      	mov	r0, r3
 800d160:	f7ff fede 	bl	800cf20 <_ZN8touchgfx6WidgetC1Ev>
 800d164:	4a09      	ldr	r2, [pc, #36]	; (800d18c <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	629a      	str	r2, [r3, #40]	; 0x28
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2101      	movs	r1, #1
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7ff fea9 	bl	800ced4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	08021a88 	.word	0x08021a88

0800d190 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	4a05      	ldr	r2, [pc, #20]	; (800d1cc <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff f873 	bl	800c2a8 <_ZN8touchgfx6WidgetD1Ev>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	08021a88 	.word	0x08021a88

0800d1d0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff ffe7 	bl	800d1ac <_ZN8touchgfx14AbstractButtonD1Ev>
 800d1de:	2130      	movs	r1, #48	; 0x30
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f012 fa94 	bl	801f70e <_ZdlPvj>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff ffaa 	bl	800d154 <_ZN8touchgfx14AbstractButtonC1Ev>
 800d200:	4a0c      	ldr	r2, [pc, #48]	; (800d234 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	332e      	adds	r3, #46	; 0x2e
 800d20a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fef5 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3330      	adds	r3, #48	; 0x30
 800d218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe feee 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	22ff      	movs	r2, #255	; 0xff
 800d226:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	08021af8 	.word	0x08021af8

0800d238 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	4a05      	ldr	r2, [pc, #20]	; (800d258 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff ffaf 	bl	800d1ac <_ZN8touchgfx14AbstractButtonD1Ev>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	08021af8 	.word	0x08021af8

0800d25c <_ZN8touchgfx6ButtonD0Ev>:
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff ffe7 	bl	800d238 <_ZN8touchgfx6ButtonD1Ev>
 800d26a:	2134      	movs	r1, #52	; 0x34
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f012 fa4e 	bl	801f70e <_ZdlPvj>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	4a04      	ldr	r2, [pc, #16]	; (800d298 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	080216cc 	.word	0x080216cc

0800d29c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
    }
 800d2a4:	4a04      	ldr	r2, [pc, #16]	; (800d2b8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr
 800d2b8:	080216cc 	.word	0x080216cc

0800d2bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
    }
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff ffe9 	bl	800d29c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d2ca:	2104      	movs	r1, #4
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f012 fa1e 	bl	801f70e <_ZdlPvj>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMax
     */
    virtual uint16_t getIndicatorMin() const
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800d2ea:	b29b      	uxth	r3, r3
    }
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMin
     */
    virtual uint16_t getIndicatorMax() const
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800d306:	b29b      	uxth	r3, r3
    }
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <_ZNK8touchgfx6Slider11getMinValueEv>:
     *
     * @return The minimum value.
     * @see setValueRange
     * @see getMaxValue
     */
    virtual uint16_t getMinValue() const
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMin;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d320:	b29b      	uxth	r3, r3
    }
 800d322:	4618      	mov	r0, r3
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <_ZNK8touchgfx6Slider11getMaxValueEv>:
     *
     * @return The maximum value.
     * @see setValueRange
     * @see getMinValue
     */
    virtual uint16_t getMaxValue() const
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMax;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33a:	b29b      	uxth	r3, r3
    }
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <_ZNK8touchgfx6Slider7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SLIDER;
 800d350:	2318      	movs	r3, #24
    }
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
	...

0800d360 <_ZN8touchgfx6SliderC1Ev>:

#include <touchgfx/containers/Slider.hpp>

namespace touchgfx
{
Slider::Slider() :
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
    valueRangeMax(1),
    indicatorMinPosition(0),
    indicatorMaxPosition(1),
    startValueCallback(0),
    stopValueCallback(0),
    newValueCallback(0)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7ff fdc2 	bl	800cef4 <_ZN8touchgfx9ContainerC1Ev>
 800d370:	4a42      	ldr	r2, [pc, #264]	; (800d47c <_ZN8touchgfx6SliderC1Ev+0x11c>)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	601a      	str	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	631a      	str	r2, [r3, #48]	; 0x30
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	635a      	str	r2, [r3, #52]	; 0x34
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	639a      	str	r2, [r3, #56]	; 0x38
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800d396:	f107 030c 	add.w	r3, r7, #12
 800d39a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe fe2d 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800d3a4:	f107 030c 	add.w	r3, r7, #12
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f7ff fdca 	bl	800cf44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800d3b6:	f107 0310 	add.w	r3, r7, #16
 800d3ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fe fe1d 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800d3c4:	f107 0310 	add.w	r3, r7, #16
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f7ff fdba 	bl	800cf44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800d3d6:	f107 0314 	add.w	r3, r7, #20
 800d3da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fe0d 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800d3e4:	f107 0314 	add.w	r3, r7, #20
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f7ff fdaa 	bl	800cf44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	33c0      	adds	r3, #192	; 0xc0
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff fd7d 	bl	800cef4 <_ZN8touchgfx9ContainerC1Ev>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
{
    setTouchable(true);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2101      	movs	r1, #1
 800d426:	4618      	mov	r0, r3
 800d428:	f7ff fd54 	bl	800ced4 <_ZN8touchgfx8Drawable12setTouchableEb>

    // The backgroundSelectedViewPort is a container into which the bitmap for the "filled" background
    // is placed. Containers are viewports, so the dimension of this container controls how
    // much of the filled background is visible.
    backgroundSelectedViewPort.add(backgroundSelected);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3368      	adds	r3, #104	; 0x68
 800d436:	4619      	mov	r1, r3
 800d438:	4610      	mov	r0, r2
 800d43a:	f7ff fa31 	bl	800c8a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Container::add(background);
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	333c      	adds	r3, #60	; 0x3c
 800d444:	4619      	mov	r1, r3
 800d446:	4610      	mov	r0, r2
 800d448:	f7ff fa2a 	bl	800c8a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(backgroundSelectedViewPort);
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	33c0      	adds	r3, #192	; 0xc0
 800d452:	4619      	mov	r1, r3
 800d454:	4610      	mov	r0, r2
 800d456:	f7ff fa23 	bl	800c8a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(indicator);
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3394      	adds	r3, #148	; 0x94
 800d460:	4619      	mov	r1, r3
 800d462:	4610      	mov	r0, r2
 800d464:	f7ff fa1c 	bl	800c8a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    // Default value range
    Slider::setValueRange(0, 100);
 800d468:	2264      	movs	r2, #100	; 0x64
 800d46a:	2100      	movs	r1, #0
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fce3 	bl	800de38 <_ZN8touchgfx6Slider13setValueRangeEii>
}
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	371c      	adds	r7, #28
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd90      	pop	{r4, r7, pc}
 800d47c:	080216e4 	.word	0x080216e4

0800d480 <_ZN8touchgfx6SliderD1Ev>:

Slider::~Slider()
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	4a0f      	ldr	r2, [pc, #60]	; (800d4c8 <_ZN8touchgfx6SliderD1Ev+0x48>)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	601a      	str	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	33c0      	adds	r3, #192	; 0xc0
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe ff64 	bl	800c360 <_ZN8touchgfx9ContainerD1Ev>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	3394      	adds	r3, #148	; 0x94
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fe ff8d 	bl	800c3bc <_ZN8touchgfx5ImageD1Ev>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3368      	adds	r3, #104	; 0x68
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe ff88 	bl	800c3bc <_ZN8touchgfx5ImageD1Ev>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	333c      	adds	r3, #60	; 0x3c
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fe ff83 	bl	800c3bc <_ZN8touchgfx5ImageD1Ev>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fe ff51 	bl	800c360 <_ZN8touchgfx9ContainerD1Ev>
{
}
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	080216e4 	.word	0x080216e4

0800d4cc <_ZN8touchgfx6SliderD0Ev>:
Slider::~Slider()
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
}
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7ff ffd3 	bl	800d480 <_ZN8touchgfx6SliderD1Ev>
 800d4da:	21fc      	movs	r1, #252	; 0xfc
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f012 f916 	bl	801f70e <_ZdlPvj>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:

void Slider::setBitmaps(const Bitmap& sliderBackground, const Bitmap& sliderBackgroundSelected, const Bitmap& indicatorBitmap)
{
 800d4ec:	b590      	push	{r4, r7, lr}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
 800d4f8:	603b      	str	r3, [r7, #0]
    assert(sliderBackground.getWidth() == sliderBackgroundSelected.getWidth() &&
 800d4fa:	68b8      	ldr	r0, [r7, #8]
 800d4fc:	f00e fbec 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d500:	4603      	mov	r3, r0
 800d502:	461c      	mov	r4, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f00e fbe7 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d50a:	4603      	mov	r3, r0
 800d50c:	429c      	cmp	r4, r3
 800d50e:	d10a      	bne.n	800d526 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x3a>
 800d510:	68b8      	ldr	r0, [r7, #8]
 800d512:	f00e fc1b 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d516:	4603      	mov	r3, r0
 800d518:	461c      	mov	r4, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f00e fc16 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d520:	4603      	mov	r3, r0
 800d522:	429c      	cmp	r4, r3
 800d524:	d005      	beq.n	800d532 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x46>
 800d526:	4b1b      	ldr	r3, [pc, #108]	; (800d594 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xa8>)
 800d528:	4a1b      	ldr	r2, [pc, #108]	; (800d598 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xac>)
 800d52a:	2137      	movs	r1, #55	; 0x37
 800d52c:	481b      	ldr	r0, [pc, #108]	; (800d59c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xb0>)
 800d52e:	f012 f90b 	bl	801f748 <__assert_func>
 800d532:	bf00      	nop
           sliderBackground.getHeight() == sliderBackgroundSelected.getHeight() &&
           "Slider::setBitmaps - background and backgroundFilled must have same dimensions");

    background.setBitmap(sliderBackground);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	333c      	adds	r3, #60	; 0x3c
 800d538:	68b9      	ldr	r1, [r7, #8]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f001 fa74 	bl	800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelected.setBitmap(sliderBackgroundSelected);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3368      	adds	r3, #104	; 0x68
 800d544:	6879      	ldr	r1, [r7, #4]
 800d546:	4618      	mov	r0, r3
 800d548:	f001 fa6e 	bl	800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    indicator.setBitmap(indicatorBitmap);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	3394      	adds	r3, #148	; 0x94
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	4618      	mov	r0, r3
 800d554:	f001 fa68 	bl	800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelectedViewPort.setWidth(backgroundSelected.getWidth());
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3368      	adds	r3, #104	; 0x68
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff fc2d 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d568:	4603      	mov	r3, r0
 800d56a:	4619      	mov	r1, r3
 800d56c:	4620      	mov	r0, r4
 800d56e:	f7fe fde0 	bl	800c132 <_ZN8touchgfx8Drawable8setWidthEs>
    backgroundSelectedViewPort.setHeight(backgroundSelected.getHeight());
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3368      	adds	r3, #104	; 0x68
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff fc2d 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800d582:	4603      	mov	r3, r0
 800d584:	4619      	mov	r1, r3
 800d586:	4620      	mov	r0, r4
 800d588:	f7fe fde2 	bl	800c150 <_ZN8touchgfx8Drawable9setHeightEs>
}
 800d58c:	bf00      	nop
 800d58e:	3714      	adds	r7, #20
 800d590:	46bd      	mov	sp, r7
 800d592:	bd90      	pop	{r4, r7, pc}
 800d594:	08020990 	.word	0x08020990
 800d598:	080217a8 	.word	0x080217a8
 800d59c:	08020a70 	.word	0x08020a70

0800d5a0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
{
    setBitmaps(Bitmap(sliderBackground), Bitmap(sliderBackgroundSelected), Bitmap(indicatorBitmap));
}

void Slider::setupHorizontalSlider(uint16_t backgroundX, uint16_t backgroundY, uint16_t indicatorY, uint16_t indicatorMinX, uint16_t indicatorMaxX)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	4608      	mov	r0, r1
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	817b      	strh	r3, [r7, #10]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	813b      	strh	r3, [r7, #8]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	80fb      	strh	r3, [r7, #6]
    assert(indicatorMinX < indicatorMaxX && "Slider::setupHorizontalSlider - indicatorMinX must be smaller than indicatorMaxX");
 800d5ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d5bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d305      	bcc.n	800d5ce <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x2e>
 800d5c2:	4b4a      	ldr	r3, [pc, #296]	; (800d6ec <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x14c>)
 800d5c4:	4a4a      	ldr	r2, [pc, #296]	; (800d6f0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x150>)
 800d5c6:	2147      	movs	r1, #71	; 0x47
 800d5c8:	484a      	ldr	r0, [pc, #296]	; (800d6f4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x154>)
 800d5ca:	f012 f8bd 	bl	801f748 <__assert_func>

    sliderOrientation = HORIZONTAL;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    background.setXY(backgroundX, backgroundY);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	333c      	adds	r3, #60	; 0x3c
 800d5da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d5de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe fd87 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	33c0      	adds	r3, #192	; 0xc0
 800d5ec:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d5f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe fd7e 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelected.setXY(0, 0);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	3368      	adds	r3, #104	; 0x68
 800d5fe:	2200      	movs	r2, #0
 800d600:	2100      	movs	r1, #0
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe fd77 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    indicator.setY(indicatorY);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3394      	adds	r3, #148	; 0x94
 800d60c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d610:	4611      	mov	r1, r2
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe fd60 	bl	800c0d8 <_ZN8touchgfx8Drawable4setYEs>

    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	333c      	adds	r3, #60	; 0x3c
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff fbd0 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d622:	4603      	mov	r3, r0
 800d624:	b29a      	uxth	r2, r3
 800d626:	897b      	ldrh	r3, [r7, #10]
 800d628:	4413      	add	r3, r2
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	837b      	strh	r3, [r7, #26]
    uint16_t indicatorWidth = indicatorMaxX + static_cast<uint16_t>(indicator.getWidth());
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3394      	adds	r3, #148	; 0x94
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff fbc5 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d638:	4603      	mov	r3, r0
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d63e:	4413      	add	r3, r2
 800d640:	b29b      	uxth	r3, r3
 800d642:	833b      	strh	r3, [r7, #24]
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800d644:	8b7a      	ldrh	r2, [r7, #26]
 800d646:	8b3b      	ldrh	r3, [r7, #24]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d902      	bls.n	800d652 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb2>
 800d64c:	8b7b      	ldrh	r3, [r7, #26]
 800d64e:	b21b      	sxth	r3, r3
 800d650:	e001      	b.n	800d656 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb6>
 800d652:	8b3b      	ldrh	r3, [r7, #24]
 800d654:	b21b      	sxth	r3, r3
 800d656:	83fb      	strh	r3, [r7, #30]

    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	333c      	adds	r3, #60	; 0x3c
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff fbbd 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800d662:	4603      	mov	r3, r0
 800d664:	b29a      	uxth	r2, r3
 800d666:	893b      	ldrh	r3, [r7, #8]
 800d668:	4413      	add	r3, r2
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	82fb      	strh	r3, [r7, #22]
    uint16_t indicatorHeight = indicatorY + static_cast<uint16_t>(indicator.getHeight());
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3394      	adds	r3, #148	; 0x94
 800d672:	4618      	mov	r0, r3
 800d674:	f7ff fbb2 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800d678:	4603      	mov	r3, r0
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	88fb      	ldrh	r3, [r7, #6]
 800d67e:	4413      	add	r3, r2
 800d680:	b29b      	uxth	r3, r3
 800d682:	82bb      	strh	r3, [r7, #20]
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800d684:	8afa      	ldrh	r2, [r7, #22]
 800d686:	8abb      	ldrh	r3, [r7, #20]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d902      	bls.n	800d692 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf2>
 800d68c:	8afb      	ldrh	r3, [r7, #22]
 800d68e:	b21b      	sxth	r3, r3
 800d690:	e001      	b.n	800d696 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf6>
 800d692:	8abb      	ldrh	r3, [r7, #20]
 800d694:	b21b      	sxth	r3, r3
 800d696:	83bb      	strh	r3, [r7, #28]

    indicatorMinPosition = indicatorMinX;
 800d698:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxX;
 800d6a2:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

    setWidth(newWidth);
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3338      	adds	r3, #56	; 0x38
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	4798      	blx	r3
    setHeight(newHeight);
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	333c      	adds	r3, #60	; 0x3c
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	4798      	blx	r3

    setValue(currentValue);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	33a8      	adds	r3, #168	; 0xa8
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d6dc:	4611      	mov	r1, r2
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	4798      	blx	r3
}
 800d6e2:	bf00      	nop
 800d6e4:	3720      	adds	r7, #32
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	08020ac4 	.word	0x08020ac4
 800d6f0:	08021818 	.word	0x08021818
 800d6f4:	08020a70 	.word	0x08020a70

0800d6f8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:

void Slider::setupVerticalSlider(uint16_t backgroundX, uint16_t backgroundY, uint16_t indicatorX, uint16_t indicatorMinY, uint16_t indicatorMaxY)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	4608      	mov	r0, r1
 800d702:	4611      	mov	r1, r2
 800d704:	461a      	mov	r2, r3
 800d706:	4603      	mov	r3, r0
 800d708:	817b      	strh	r3, [r7, #10]
 800d70a:	460b      	mov	r3, r1
 800d70c:	813b      	strh	r3, [r7, #8]
 800d70e:	4613      	mov	r3, r2
 800d710:	80fb      	strh	r3, [r7, #6]
    assert(indicatorMinY < indicatorMaxY && "Slider::setupVerticalSlider - indicatorMinY must be smaller than indicatorMaxY");
 800d712:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d714:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d716:	429a      	cmp	r2, r3
 800d718:	d305      	bcc.n	800d726 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x2e>
 800d71a:	4b46      	ldr	r3, [pc, #280]	; (800d834 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x13c>)
 800d71c:	4a46      	ldr	r2, [pc, #280]	; (800d838 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x140>)
 800d71e:	2163      	movs	r1, #99	; 0x63
 800d720:	4846      	ldr	r0, [pc, #280]	; (800d83c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x144>)
 800d722:	f012 f811 	bl	801f748 <__assert_func>

    sliderOrientation = VERTICAL;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    background.setXY(backgroundX, backgroundY);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	333c      	adds	r3, #60	; 0x3c
 800d732:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d736:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fcdb 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	33c0      	adds	r3, #192	; 0xc0
 800d744:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d748:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe fcd2 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    indicator.setX(indicatorX);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	3394      	adds	r3, #148	; 0x94
 800d756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fe fcac 	bl	800c0ba <_ZN8touchgfx8Drawable4setXEs>

    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	333c      	adds	r3, #60	; 0x3c
 800d766:	4618      	mov	r0, r3
 800d768:	f7ff fb2b 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d76c:	4603      	mov	r3, r0
 800d76e:	b29a      	uxth	r2, r3
 800d770:	897b      	ldrh	r3, [r7, #10]
 800d772:	4413      	add	r3, r2
 800d774:	b29b      	uxth	r3, r3
 800d776:	837b      	strh	r3, [r7, #26]
    uint16_t indicatorWidth = indicatorX + static_cast<uint16_t>(indicator.getWidth());
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	3394      	adds	r3, #148	; 0x94
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff fb20 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d782:	4603      	mov	r3, r0
 800d784:	b29a      	uxth	r2, r3
 800d786:	88fb      	ldrh	r3, [r7, #6]
 800d788:	4413      	add	r3, r2
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	833b      	strh	r3, [r7, #24]
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800d78e:	8b7a      	ldrh	r2, [r7, #26]
 800d790:	8b3b      	ldrh	r3, [r7, #24]
 800d792:	429a      	cmp	r2, r3
 800d794:	d902      	bls.n	800d79c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>
 800d796:	8b7b      	ldrh	r3, [r7, #26]
 800d798:	b21b      	sxth	r3, r3
 800d79a:	e001      	b.n	800d7a0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>
 800d79c:	8b3b      	ldrh	r3, [r7, #24]
 800d79e:	b21b      	sxth	r3, r3
 800d7a0:	83fb      	strh	r3, [r7, #30]

    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	333c      	adds	r3, #60	; 0x3c
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7ff fb18 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	893b      	ldrh	r3, [r7, #8]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	82fb      	strh	r3, [r7, #22]
    uint16_t indicatorHeight = indicatorMaxY + static_cast<uint16_t>(indicator.getHeight());
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	3394      	adds	r3, #148	; 0x94
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff fb0d 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d7c8:	4413      	add	r3, r2
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	82bb      	strh	r3, [r7, #20]
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800d7ce:	8afa      	ldrh	r2, [r7, #22]
 800d7d0:	8abb      	ldrh	r3, [r7, #20]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d902      	bls.n	800d7dc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe4>
 800d7d6:	8afb      	ldrh	r3, [r7, #22]
 800d7d8:	b21b      	sxth	r3, r3
 800d7da:	e001      	b.n	800d7e0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe8>
 800d7dc:	8abb      	ldrh	r3, [r7, #20]
 800d7de:	b21b      	sxth	r3, r3
 800d7e0:	83bb      	strh	r3, [r7, #28]

    indicatorMinPosition = indicatorMinY;
 800d7e2:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxY;
 800d7ec:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

    setWidth(newWidth);
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3338      	adds	r3, #56	; 0x38
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d804:	4610      	mov	r0, r2
 800d806:	4798      	blx	r3
    setHeight(newHeight);
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	333c      	adds	r3, #60	; 0x3c
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800d816:	4610      	mov	r0, r2
 800d818:	4798      	blx	r3

    setValue(currentValue);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	33a8      	adds	r3, #168	; 0xa8
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d826:	4611      	mov	r1, r2
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	4798      	blx	r3
}
 800d82c:	bf00      	nop
 800d82e:	3720      	adds	r7, #32
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	08020b38 	.word	0x08020b38
 800d838:	08021880 	.word	0x08021880
 800d83c:	08020a70 	.word	0x08020a70

0800d840 <_ZN8touchgfx6Slider8setValueEi>:

void Slider::setValue(int value)
{
 800d840:	b590      	push	{r4, r7, lr}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
    updateIndicatorPosition(valueToPosition(value));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	33ac      	adds	r3, #172	; 0xac
 800d850:	681c      	ldr	r4, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	33b0      	adds	r3, #176	; 0xb0
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	4798      	blx	r3
 800d860:	4603      	mov	r3, r0
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	47a0      	blx	r4
}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd90      	pop	{r4, r7, pc}

0800d870 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:

void Slider::handleClickEvent(const ClickEvent& evt)
{
 800d870:	b5b0      	push	{r4, r5, r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
    if ((evt.getType() == ClickEvent::PRESSED) || (evt.getType() == ClickEvent::RELEASED))
 800d87a:	6838      	ldr	r0, [r7, #0]
 800d87c:	f7ff fc0a 	bl	800d094 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d005      	beq.n	800d892 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x22>
 800d886:	6838      	ldr	r0, [r7, #0]
 800d888:	f7ff fc04 	bl	800d094 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d101      	bne.n	800d896 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x26>
 800d892:	2301      	movs	r3, #1
 800d894:	e000      	b.n	800d898 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x28>
 800d896:	2300      	movs	r3, #0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f000 8088 	beq.w	800d9ae <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x13e>
    {
        // Communicate the start value if a listener is registered
        if ((evt.getType() == ClickEvent::PRESSED) && (startValueCallback != 0) && startValueCallback->isValid())
 800d89e:	6838      	ldr	r0, [r7, #0]
 800d8a0:	f7ff fbf8 	bl	800d094 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d114      	bne.n	800d8d4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00f      	beq.n	800d8d4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	330c      	adds	r3, #12
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	4798      	blx	r3
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e000      	b.n	800d8d6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x66>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00c      	beq.n	800d8f4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x84>
        {
            startValueCallback->execute(*this, currentValue);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	4798      	blx	r3
        }

        if (sliderOrientation == HORIZONTAL)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d116      	bne.n	800d92c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xbc>
        {
            updateIndicatorPosition(evt.getX() - getIndicatorRadius());
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	33ac      	adds	r3, #172	; 0xac
 800d904:	681c      	ldr	r4, [r3, #0]
 800d906:	6838      	ldr	r0, [r7, #0]
 800d908:	f7ff fbaa 	bl	800d060 <_ZNK8touchgfx10ClickEvent4getXEv>
 800d90c:	4603      	mov	r3, r0
 800d90e:	b29d      	uxth	r5, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	33b8      	adds	r3, #184	; 0xb8
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	4798      	blx	r3
 800d91c:	4603      	mov	r3, r0
 800d91e:	1aeb      	subs	r3, r5, r3
 800d920:	b29b      	uxth	r3, r3
 800d922:	b21b      	sxth	r3, r3
 800d924:	4619      	mov	r1, r3
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	47a0      	blx	r4
 800d92a:	e015      	b.n	800d958 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xe8>
        }
        else
        {
            updateIndicatorPosition(evt.getY() - getIndicatorRadius());
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	33ac      	adds	r3, #172	; 0xac
 800d932:	681c      	ldr	r4, [r3, #0]
 800d934:	6838      	ldr	r0, [r7, #0]
 800d936:	f7ff fba0 	bl	800d07a <_ZNK8touchgfx10ClickEvent4getYEv>
 800d93a:	4603      	mov	r3, r0
 800d93c:	b29d      	uxth	r5, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	33b8      	adds	r3, #184	; 0xb8
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	4798      	blx	r3
 800d94a:	4603      	mov	r3, r0
 800d94c:	1aeb      	subs	r3, r5, r3
 800d94e:	b29b      	uxth	r3, r3
 800d950:	b21b      	sxth	r3, r3
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	47a0      	blx	r4
        }

        // Communicate the stop value if a listener is registered
        if ((evt.getType() == ClickEvent::RELEASED) && (stopValueCallback != 0) && stopValueCallback->isValid())
 800d958:	6838      	ldr	r0, [r7, #0]
 800d95a:	f7ff fb9b 	bl	800d094 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b01      	cmp	r3, #1
 800d962:	d114      	bne.n	800d98e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00f      	beq.n	800d98e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	330c      	adds	r3, #12
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4610      	mov	r0, r2
 800d982:	4798      	blx	r3
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e000      	b.n	800d990 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x120>
 800d98e:	2300      	movs	r3, #0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00c      	beq.n	800d9ae <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x13e>
        {
            stopValueCallback->execute(*this, currentValue);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d9aa:	6879      	ldr	r1, [r7, #4]
 800d9ac:	4798      	blx	r3
        }
    }
}
 800d9ae:	bf00      	nop
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bdb0      	pop	{r4, r5, r7, pc}

0800d9b6 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:

void Slider::handleDragEvent(const DragEvent& evt)
{
 800d9b6:	b5b0      	push	{r4, r5, r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	6039      	str	r1, [r7, #0]
    if (sliderOrientation == HORIZONTAL)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d116      	bne.n	800d9f8 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x42>
    {
        updateIndicatorPosition(evt.getNewX() - getIndicatorRadius());
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	33ac      	adds	r3, #172	; 0xac
 800d9d0:	681c      	ldr	r4, [r3, #0]
 800d9d2:	6838      	ldr	r0, [r7, #0]
 800d9d4:	f7ff fb98 	bl	800d108 <_ZNK8touchgfx9DragEvent7getNewXEv>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	b29d      	uxth	r5, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	33b8      	adds	r3, #184	; 0xb8
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	4798      	blx	r3
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	1aeb      	subs	r3, r5, r3
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	b21b      	sxth	r3, r3
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	47a0      	blx	r4
    }
    else
    {
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
    }
}
 800d9f6:	e015      	b.n	800da24 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x6e>
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	33ac      	adds	r3, #172	; 0xac
 800d9fe:	681c      	ldr	r4, [r3, #0]
 800da00:	6838      	ldr	r0, [r7, #0]
 800da02:	f7ff fb8e 	bl	800d122 <_ZNK8touchgfx9DragEvent7getNewYEv>
 800da06:	4603      	mov	r3, r0
 800da08:	b29d      	uxth	r5, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	33b8      	adds	r3, #184	; 0xb8
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	4798      	blx	r3
 800da16:	4603      	mov	r3, r0
 800da18:	1aeb      	subs	r3, r5, r3
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	b21b      	sxth	r3, r3
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	47a0      	blx	r4
}
 800da24:	bf00      	nop
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bdb0      	pop	{r4, r5, r7, pc}

0800da2c <_ZNK8touchgfx6Slider15valueToPositionEi>:

int16_t Slider::valueToPosition(int value) const
{
 800da2c:	b590      	push	{r4, r7, lr}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
    value = MAX(MIN(valueRangeMax, value), valueRangeMin);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	da02      	bge.n	800da46 <_ZNK8touchgfx6Slider15valueToPositionEi+0x1a>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da44:	e001      	b.n	800da4a <_ZNK8touchgfx6Slider15valueToPositionEi+0x1e>
 800da46:	463b      	mov	r3, r7
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800da4e:	4293      	cmp	r3, r2
 800da50:	dd0a      	ble.n	800da68 <_ZNK8touchgfx6Slider15valueToPositionEi+0x3c>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	429a      	cmp	r2, r3
 800da5a:	da02      	bge.n	800da62 <_ZNK8touchgfx6Slider15valueToPositionEi+0x36>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da60:	e004      	b.n	800da6c <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>
 800da62:	463b      	mov	r3, r7
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	e001      	b.n	800da6c <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6c:	603b      	str	r3, [r7, #0]

    int coordinateOffset = ((value - valueRangeMin) * (getIndicatorPositionRangeSize() + 1)) / getValueRangeSize();
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da74:	1ad4      	subs	r4, r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	33bc      	adds	r3, #188	; 0xbc
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
 800da82:	4603      	mov	r3, r0
 800da84:	3301      	adds	r3, #1
 800da86:	fb03 f404 	mul.w	r4, r3, r4
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	33c0      	adds	r3, #192	; 0xc0
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	4798      	blx	r3
 800da96:	4603      	mov	r3, r0
 800da98:	fb94 f3f3 	sdiv	r3, r4, r3
 800da9c:	60bb      	str	r3, [r7, #8]

    int result = indicatorMinPosition + coordinateOffset;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800daa4:	461a      	mov	r2, r3
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	4413      	add	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]

    if (sliderOrientation == VERTICAL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d10b      	bne.n	800dace <_ZNK8touchgfx6Slider15valueToPositionEi+0xa2>
    {
        // Vertical slider grows as the position decreases so invert the coordinate
        result = indicatorMinPosition + (indicatorMaxPosition - result);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800dabc:	461a      	mov	r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800dac4:	4619      	mov	r1, r3
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	1acb      	subs	r3, r1, r3
 800daca:	4413      	add	r3, r2
 800dacc:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	b21b      	sxth	r3, r3
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd90      	pop	{r4, r7, pc}

0800dada <_ZNK8touchgfx6Slider15positionToValueEs>:

int Slider::positionToValue(int16_t position) const
{
 800dada:	b590      	push	{r4, r7, lr}
 800dadc:	b087      	sub	sp, #28
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	460b      	mov	r3, r1
 800dae4:	807b      	strh	r3, [r7, #2]
    int result;

    if (position == indicatorMinPosition)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800daec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d103      	bne.n	800dafc <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
    {
        // Ensure that min coordinate always results in min value
        result = valueRangeMin;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf8:	617b      	str	r3, [r7, #20]
 800dafa:	e035      	b.n	800db68 <_ZNK8touchgfx6Slider15positionToValueEs+0x8e>
    }
    else if (position == indicatorMaxPosition)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800db02:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800db06:	429a      	cmp	r2, r3
 800db08:	d103      	bne.n	800db12 <_ZNK8touchgfx6Slider15positionToValueEs+0x38>
    {
        // Ensure that max coordinate always results in max value
        result = valueRangeMax;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0e:	617b      	str	r3, [r7, #20]
 800db10:	e02a      	b.n	800db68 <_ZNK8touchgfx6Slider15positionToValueEs+0x8e>
    }
    else
    {
        int rounding = getIndicatorPositionRangeSize() / 2;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	33bc      	adds	r3, #188	; 0xbc
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	4798      	blx	r3
 800db1e:	4603      	mov	r3, r0
 800db20:	0fda      	lsrs	r2, r3, #31
 800db22:	4413      	add	r3, r2
 800db24:	105b      	asrs	r3, r3, #1
 800db26:	613b      	str	r3, [r7, #16]
        int valueOffset = (((position - indicatorMinPosition) * getValueRangeSize()) + rounding) / getIndicatorPositionRangeSize();
 800db28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 800db32:	1a9c      	subs	r4, r3, r2
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	33c0      	adds	r3, #192	; 0xc0
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	4798      	blx	r3
 800db40:	4603      	mov	r3, r0
 800db42:	fb03 f204 	mul.w	r2, r3, r4
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	18d4      	adds	r4, r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	33bc      	adds	r3, #188	; 0xbc
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	4798      	blx	r3
 800db56:	4603      	mov	r3, r0
 800db58:	fb94 f3f3 	sdiv	r3, r4, r3
 800db5c:	60fb      	str	r3, [r7, #12]

        result = valueRangeMin + valueOffset;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	4413      	add	r3, r2
 800db66:	617b      	str	r3, [r7, #20]
    }

    if (sliderOrientation == VERTICAL)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d107      	bne.n	800db82 <_ZNK8touchgfx6Slider15positionToValueEs+0xa8>
    {
        // Vertical slider grows as the position decreases so invert the value
        result = valueRangeMin + (valueRangeMax - result);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	1acb      	subs	r3, r1, r3
 800db7e:	4413      	add	r3, r2
 800db80:	617b      	str	r3, [r7, #20]
    }

    return result;
 800db82:	697b      	ldr	r3, [r7, #20]
}
 800db84:	4618      	mov	r0, r3
 800db86:	371c      	adds	r7, #28
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd90      	pop	{r4, r7, pc}

0800db8c <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:

void Slider::updateIndicatorPosition(int16_t position)
{
 800db8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db8e:	b087      	sub	sp, #28
 800db90:	af02      	add	r7, sp, #8
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	460b      	mov	r3, r1
 800db96:	807b      	strh	r3, [r7, #2]
    // Cut off positions outside the slider area
    position = MIN(MAX(position, indicatorMinPosition), indicatorMaxPosition);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f9b3 20ec 	ldrsh.w	r2, [r3, #236]	; 0xec
 800db9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dba2:	4293      	cmp	r3, r2
 800dba4:	bfb8      	it	lt
 800dba6:	4613      	movlt	r3, r2
 800dba8:	b21a      	sxth	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	da0d      	bge.n	800dbd0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x44>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f9b3 20ec 	ldrsh.w	r2, [r3, #236]	; 0xec
 800dbba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	db03      	blt.n	800dbca <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x3e>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800dbc8:	e005      	b.n	800dbd6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x4a>
 800dbca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbce:	e002      	b.n	800dbd6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x4a>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800dbd6:	807b      	strh	r3, [r7, #2]

    if (sliderOrientation == HORIZONTAL)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d137      	bne.n	800dc52 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xc6>
    {
        indicator.moveTo(position, indicator.getY());
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800dbe8:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	3394      	adds	r3, #148	; 0x94
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fe fe25 	bl	800c840 <_ZNK8touchgfx8Drawable4getYEv>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f7fe fb05 	bl	800c20c <_ZN8touchgfx8Drawable6moveToEss>

        backgroundSelectedViewPort.invalidate();
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	33c0      	adds	r3, #192	; 0xc0
 800dc06:	4618      	mov	r0, r3
 800dc08:	f00c fb49 	bl	801a29e <_ZNK8touchgfx8Drawable10invalidateEv>
        backgroundSelectedViewPort.setWidth((position - backgroundSelectedViewPort.getX()) + getIndicatorRadius());
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
 800dc12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc16:	b29c      	uxth	r4, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	33c0      	adds	r3, #192	; 0xc0
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fe fe02 	bl	800c826 <_ZNK8touchgfx8Drawable4getXEv>
 800dc22:	4603      	mov	r3, r0
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	1ae3      	subs	r3, r4, r3
 800dc28:	b29c      	uxth	r4, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	33b8      	adds	r3, #184	; 0xb8
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	4798      	blx	r3
 800dc36:	4603      	mov	r3, r0
 800dc38:	4423      	add	r3, r4
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	b21b      	sxth	r3, r3
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4628      	mov	r0, r5
 800dc42:	f7fe fa76 	bl	800c132 <_ZN8touchgfx8Drawable8setWidthEs>
        backgroundSelectedViewPort.invalidate();
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	33c0      	adds	r3, #192	; 0xc0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f00c fb27 	bl	801a29e <_ZNK8touchgfx8Drawable10invalidateEv>
 800dc50:	e06e      	b.n	800dd30 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1a4>
    }
    else
    {
        indicator.moveTo(indicator.getX(), position);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	3394      	adds	r3, #148	; 0x94
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fe fde2 	bl	800c826 <_ZNK8touchgfx8Drawable4getXEv>
 800dc62:	4603      	mov	r3, r0
 800dc64:	4619      	mov	r1, r3
 800dc66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f7fe facd 	bl	800c20c <_ZN8touchgfx8Drawable6moveToEss>

        backgroundSelectedViewPort.invalidate();
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	33c0      	adds	r3, #192	; 0xc0
 800dc76:	4618      	mov	r0, r3
 800dc78:	f00c fb11 	bl	801a29e <_ZNK8touchgfx8Drawable10invalidateEv>
        int16_t newViewPortHeight = background.getRect().bottom() - (position + getIndicatorRadius());
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	333c      	adds	r3, #60	; 0x3c
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe fdc4 	bl	800c80e <_ZNK8touchgfx8Drawable7getRectEv>
 800dc86:	4603      	mov	r3, r0
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7fe fc16 	bl	800c4ba <_ZNK8touchgfx4Rect6bottomEv>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	b29c      	uxth	r4, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	33b8      	adds	r3, #184	; 0xb8
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	4798      	blx	r3
 800dc9e:	4603      	mov	r3, r0
 800dca0:	461a      	mov	r2, r3
 800dca2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	4413      	add	r3, r2
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	1ae3      	subs	r3, r4, r3
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	81fb      	strh	r3, [r7, #14]
        backgroundSelectedViewPort.setPosition(backgroundSelectedViewPort.getX(), position + getIndicatorRadius(), backgroundSelectedViewPort.getWidth(), newViewPortHeight);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	33c0      	adds	r3, #192	; 0xc0
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe fdb2 	bl	800c826 <_ZNK8touchgfx8Drawable4getXEv>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461e      	mov	r6, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	33b8      	adds	r3, #184	; 0xb8
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	4798      	blx	r3
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	4413      	add	r3, r2
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	b21d      	sxth	r5, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	33c0      	adds	r3, #192	; 0xc0
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7ff f86b 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800dcec:	4603      	mov	r3, r0
 800dcee:	461a      	mov	r2, r3
 800dcf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	462a      	mov	r2, r5
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f7fe f9af 	bl	800c060 <_ZN8touchgfx8Drawable11setPositionEssss>
        backgroundSelected.setY(-(backgroundSelected.getHeight() - newViewPortHeight));
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f103 0568 	add.w	r5, r3, #104	; 0x68
 800dd08:	89fc      	ldrh	r4, [r7, #14]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	3368      	adds	r3, #104	; 0x68
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff f864 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800dd14:	4603      	mov	r3, r0
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	1ae3      	subs	r3, r4, r3
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	b21b      	sxth	r3, r3
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4628      	mov	r0, r5
 800dd22:	f7fe f9d9 	bl	800c0d8 <_ZN8touchgfx8Drawable4setYEs>
        backgroundSelectedViewPort.invalidate();
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	33c0      	adds	r3, #192	; 0xc0
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f00c fab7 	bl	801a29e <_ZNK8touchgfx8Drawable10invalidateEv>
    }

    currentValue = positionToValue(position);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	33b4      	adds	r3, #180	; 0xb4
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	4798      	blx	r3
 800dd42:	4602      	mov	r2, r0
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	631a      	str	r2, [r3, #48]	; 0x30

    // Communicate the new value if a listener is registered
    if ((newValueCallback != 0) && newValueCallback->isValid())
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00f      	beq.n	800dd72 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e6>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	330c      	adds	r3, #12
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4610      	mov	r0, r2
 800dd66:	4798      	blx	r3
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e6>
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e000      	b.n	800dd74 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e8>
 800dd72:	2300      	movs	r3, #0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00c      	beq.n	800dd92 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x206>
    {
        newValueCallback->execute(*this, currentValue);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	3308      	adds	r3, #8
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	4798      	blx	r3
    }
}
 800dd92:	bf00      	nop
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd9a <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:

uint16_t Slider::getIndicatorRadius() const
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b084      	sub	sp, #16
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
    uint16_t result;

    if (sliderOrientation == HORIZONTAL)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10b      	bne.n	800ddc4 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x2a>
    {
        result = indicator.getWidth() / 2;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	3394      	adds	r3, #148	; 0x94
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff f806 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	0fda      	lsrs	r2, r3, #31
 800ddba:	4413      	add	r3, r2
 800ddbc:	105b      	asrs	r3, r3, #1
 800ddbe:	b21b      	sxth	r3, r3
 800ddc0:	81fb      	strh	r3, [r7, #14]
 800ddc2:	e00a      	b.n	800ddda <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x40>
    }
    else
    {
        result = indicator.getHeight() / 2;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	3394      	adds	r3, #148	; 0x94
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7ff f807 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	0fda      	lsrs	r2, r3, #31
 800ddd2:	4413      	add	r3, r2
 800ddd4:	105b      	asrs	r3, r3, #1
 800ddd6:	b21b      	sxth	r3, r3
 800ddd8:	81fb      	strh	r3, [r7, #14]
    }

    return result;
 800ddda:	89fb      	ldrh	r3, [r7, #14]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZN8touchgfx6Slider13setValueRangeEiii>:

void Slider::setValueRange(int minValue, int maxValue, int newValue)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
 800ddf0:	603b      	str	r3, [r7, #0]
    assert(minValue < maxValue && "Slider::setValueRange - minValue must be smaller than maxValue");
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	db06      	blt.n	800de08 <_ZN8touchgfx6Slider13setValueRangeEiii+0x24>
 800ddfa:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <_ZN8touchgfx6Slider13setValueRangeEiii+0x48>)
 800ddfc:	4a0c      	ldr	r2, [pc, #48]	; (800de30 <_ZN8touchgfx6Slider13setValueRangeEiii+0x4c>)
 800ddfe:	f240 110b 	movw	r1, #267	; 0x10b
 800de02:	480c      	ldr	r0, [pc, #48]	; (800de34 <_ZN8touchgfx6Slider13setValueRangeEiii+0x50>)
 800de04:	f011 fca0 	bl	801f748 <__assert_func>

    valueRangeMin = minValue;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	635a      	str	r2, [r3, #52]	; 0x34
    valueRangeMax = maxValue;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	639a      	str	r2, [r3, #56]	; 0x38

    setValue(newValue);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	33a8      	adds	r3, #168	; 0xa8
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6839      	ldr	r1, [r7, #0]
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	4798      	blx	r3
}
 800de22:	bf00      	nop
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	08020bac 	.word	0x08020bac
 800de30:	080218e8 	.word	0x080218e8
 800de34:	08020a70 	.word	0x08020a70

0800de38 <_ZN8touchgfx6Slider13setValueRangeEii>:

void Slider::setValueRange(int minValue, int maxValue)
{
 800de38:	b590      	push	{r4, r7, lr}
 800de3a:	b087      	sub	sp, #28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
    int newValue = currentValue;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de48:	617b      	str	r3, [r7, #20]

    if (currentValue < minValue)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	429a      	cmp	r2, r3
 800de52:	dd02      	ble.n	800de5a <_ZN8touchgfx6Slider13setValueRangeEii+0x22>
    {
        newValue = minValue;
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	e006      	b.n	800de68 <_ZN8touchgfx6Slider13setValueRangeEii+0x30>
    }
    else if (currentValue > maxValue)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	429a      	cmp	r2, r3
 800de62:	da01      	bge.n	800de68 <_ZN8touchgfx6Slider13setValueRangeEii+0x30>
    {
        newValue = maxValue;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	617b      	str	r3, [r7, #20]
    }

    setValueRange(minValue, maxValue, newValue);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3398      	adds	r3, #152	; 0x98
 800de6e:	681c      	ldr	r4, [r3, #0]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	68b9      	ldr	r1, [r7, #8]
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	47a0      	blx	r4
}
 800de7a:	bf00      	nop
 800de7c:	371c      	adds	r7, #28
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd90      	pop	{r4, r7, pc}

0800de82 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:

int Slider::getIndicatorPositionRangeSize() const
{
 800de82:	b480      	push	{r7}
 800de84:	b083      	sub	sp, #12
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
    return indicatorMaxPosition - indicatorMinPosition;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800de90:	461a      	mov	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800de98:	1ad3      	subs	r3, r2, r3
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:

int Slider::getValueRangeSize() const
{
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
    return valueRangeMax - valueRangeMin;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb6:	1ad3      	subs	r3, r2, r3
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800decc:	4b07      	ldr	r3, [pc, #28]	; (800deec <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d105      	bne.n	800dee0 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800ded4:	4b06      	ldr	r3, [pc, #24]	; (800def0 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800ded6:	4a07      	ldr	r2, [pc, #28]	; (800def4 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800ded8:	21b6      	movs	r1, #182	; 0xb6
 800deda:	4807      	ldr	r0, [pc, #28]	; (800def8 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800dedc:	f011 fc34 	bl	801f748 <__assert_func>
        return bitmapId;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	881b      	ldrh	r3, [r3, #0]
    }
 800dee4:	4618      	mov	r0, r3
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	20009b5c 	.word	0x20009b5c
 800def0:	08020c04 	.word	0x08020c04
 800def4:	08021924 	.word	0x08021924
 800def8:	08020c40 	.word	0x08020c40

0800defc <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4618      	mov	r0, r3
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE>:
         * @param textDirection  The text direction.
         * @param indentation    The indentation of the text from the left and right of the text
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, int16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	70fb      	strb	r3, [r7, #3]
        {
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	3308      	adds	r3, #8
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7ff ffe6 	bl	800defc <_ZN8touchgfx9colortypeC1Ev>
            this->font = font;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	601a      	str	r2, [r3, #0]
            this->color = color;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	609a      	str	r2, [r3, #8]
            this->alpha = alpha;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	78fa      	ldrb	r2, [r7, #3]
 800df40:	739a      	strb	r2, [r3, #14]
            this->alignment = alignment;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	7e3a      	ldrb	r2, [r7, #24]
 800df46:	711a      	strb	r2, [r3, #4]
            this->textDirection = textDirection;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800df4e:	715a      	strb	r2, [r3, #5]
            this->rotation = rotation;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f897 2020 	ldrb.w	r2, [r7, #32]
 800df56:	719a      	strb	r2, [r3, #6]
            this->linespace = linespace;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	8bba      	ldrh	r2, [r7, #28]
 800df5c:	819a      	strh	r2, [r3, #12]
            this->indentation = indentation;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800df64:	73da      	strb	r2, [r3, #15]
            this->wideTextAction = wideTextAction;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800df6c:	741a      	strb	r2, [r3, #16]
        }
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	4618      	mov	r0, r3
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <_ZN8touchgfx9TypedTextC1Et>:
     *
     *        Construct a typed text.
     *
     * @param id The id of the TypedText.
     */
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	460b      	mov	r3, r1
 800df82:	807b      	strh	r3, [r7, #2]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	887a      	ldrh	r2, [r7, #2]
 800df88:	801a      	strh	r2, [r3, #0]
    {
    }
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
     *
     *        Has the TypedText been set to a proper value.
     *
     * @return Is the id valid.
     */
    bool hasValidId() const
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	bf14      	ite	ne
 800dfac:	2301      	movne	r3, #1
 800dfae:	2300      	moveq	r3, #0
 800dfb0:	b2db      	uxtb	r3, r3
    }
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	370c      	adds	r7, #12
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
	...

0800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>:
     *
     *        Gets the text associated with this TypedText.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText() const
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f85b 	bl	800e084 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800dfce:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	881b      	ldrh	r3, [r3, #0]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4610      	mov	r0, r2
 800dfda:	f006 fda7 	bl	8014b2c <_ZNK8touchgfx5Texts7getTextEt>
 800dfde:	4603      	mov	r3, r0
    }
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	20009b30 	.word	0x20009b30

0800dfec <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f845 	bl	800e084 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800dffa:	4b08      	ldr	r3, [pc, #32]	; (800e01c <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	4b08      	ldr	r3, [pc, #32]	; (800e020 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800e000:	6819      	ldr	r1, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	440b      	add	r3, r1
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	681b      	ldr	r3, [r3, #0]
    }
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	20009b2c 	.word	0x20009b2c
 800e020:	20009b24 	.word	0x20009b24

0800e024 <_ZNK8touchgfx9TypedText12getAlignmentEv>:
     *
     *        Gets the alignment associated with this TypedText.
     *
     * @return The alignment.
     */
    Alignment getAlignment() const
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f829 	bl	800e084 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 800e032:	4b07      	ldr	r3, [pc, #28]	; (800e050 <_ZNK8touchgfx9TypedText12getAlignmentEv+0x2c>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	005b      	lsls	r3, r3, #1
 800e03c:	4413      	add	r3, r2
 800e03e:	785b      	ldrb	r3, [r3, #1]
 800e040:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e044:	b2db      	uxtb	r3, r3
    }
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	20009b24 	.word	0x20009b24

0800e054 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f000 f811 	bl	800e084 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800e062:	4b07      	ldr	r3, [pc, #28]	; (800e080 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	4413      	add	r3, r2
 800e06e:	785b      	ldrb	r3, [r3, #1]
 800e070:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e074:	b2db      	uxtb	r3, r3
    }
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	20009b24 	.word	0x20009b24

0800e084 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e08c:	4b0c      	ldr	r3, [pc, #48]	; (800e0c0 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d105      	bne.n	800e0a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800e094:	4b0b      	ldr	r3, [pc, #44]	; (800e0c4 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800e096:	4a0c      	ldr	r2, [pc, #48]	; (800e0c8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e098:	21de      	movs	r1, #222	; 0xde
 800e09a:	480c      	ldr	r0, [pc, #48]	; (800e0cc <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e09c:	f011 fb54 	bl	801f748 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	881a      	ldrh	r2, [r3, #0]
 800e0a4:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d305      	bcc.n	800e0b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800e0ae:	4a06      	ldr	r2, [pc, #24]	; (800e0c8 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e0b0:	21df      	movs	r1, #223	; 0xdf
 800e0b2:	4806      	ldr	r0, [pc, #24]	; (800e0cc <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e0b4:	f011 fb48 	bl	801f748 <__assert_func>
    }
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	20009b24 	.word	0x20009b24
 800e0c4:	08020db8 	.word	0x08020db8
 800e0c8:	08021a50 	.word	0x08021a50
 800e0cc:	08020dfc 	.word	0x08020dfc
 800e0d0:	20009b28 	.word	0x20009b28
 800e0d4:	08020e4c 	.word	0x08020e4c

0800e0d8 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fe ff1c 	bl	800cf20 <_ZN8touchgfx6WidgetC1Ev>
 800e0e8:	4a13      	ldr	r2, [pc, #76]	; (800e138 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3326      	adds	r3, #38	; 0x26
 800e0f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7ff ff3e 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3328      	adds	r3, #40	; 0x28
 800e100:	2100      	movs	r1, #0
 800e102:	4618      	mov	r0, r3
 800e104:	f7fe fea8 	bl	800ce58 <_ZN8touchgfx9colortypeC1Em>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	22ff      	movs	r2, #255	; 0xff
 800e112:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    { }
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	08021cc8 	.word	0x08021cc8

0800e13c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af02      	add	r7, sp, #8
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800e146:	2300      	movs	r3, #0
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	2300      	movs	r3, #0
 800e14c:	2200      	movs	r2, #0
 800e14e:	2100      	movs	r1, #0
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7fe f97d 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    }
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800e15e:	b480      	push	{r7}
 800e160:	b083      	sub	sp, #12
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e16e:	bf00      	nop
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800e17a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e17c:	b085      	sub	sp, #20
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	460b      	mov	r3, r1
 800e184:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800e186:	687e      	ldr	r6, [r7, #4]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3330      	adds	r3, #48	; 0x30
 800e18e:	681c      	ldr	r4, [r3, #0]
 800e190:	887d      	ldrh	r5, [r7, #2]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f836 	bl	800e204 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800e198:	4603      	mov	r3, r0
 800e19a:	81bb      	strh	r3, [r7, #12]
 800e19c:	f107 030c 	add.w	r3, r7, #12
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff ff23 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	6813      	ldr	r3, [r2, #0]
 800e1aa:	332c      	adds	r3, #44	; 0x2c
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	4798      	blx	r3
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	1aeb      	subs	r3, r5, r3
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	b21b      	sxth	r3, r3
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	4630      	mov	r0, r6
 800e1be:	47a0      	blx	r4
    }
 800e1c0:	bf00      	nop
 800e1c2:	3714      	adds	r7, #20
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1c8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	807b      	strh	r3, [r7, #2]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	332c      	adds	r3, #44	; 0x2c
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	4798      	blx	r3
        setBaselineY(baselineY);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3364      	adds	r3, #100	; 0x64
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	4798      	blx	r3
    }
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800e210:	4618      	mov	r0, r3
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <_ZNK8touchgfx8TextArea7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREA.
     */
    virtual uint16_t getType() const
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREA;
 800e224:	230d      	movs	r3, #13
    }
 800e226:	4618      	mov	r0, r3
 800e228:	370c      	adds	r7, #12
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
	...

0800e234 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	4a05      	ldr	r2, [pc, #20]	; (800e254 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	601a      	str	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4618      	mov	r0, r3
 800e246:	f7fe f82f 	bl	800c2a8 <_ZN8touchgfx6WidgetD1Ev>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4618      	mov	r0, r3
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	08021cc8 	.word	0x08021cc8

0800e258 <_ZN8touchgfx8TextAreaD0Ev>:
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f7ff ffe7 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 800e266:	2134      	movs	r1, #52	; 0x34
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f011 fa50 	bl	801f70e <_ZdlPvj>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase() : TextArea() {  }
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4618      	mov	r0, r3
 800e284:	f7ff ff28 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 800e288:	4a03      	ldr	r2, [pc, #12]	; (800e298 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	601a      	str	r2, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4618      	mov	r0, r3
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	080219dc 	.word	0x080219dc

0800e29c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	4a05      	ldr	r2, [pc, #20]	; (800e2bc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	601a      	str	r2, [r3, #0]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff ffc1 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3708      	adds	r7, #8
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	080219dc 	.word	0x080219dc

0800e2c0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff ffe7 	bl	800e29c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e2ce:	2134      	movs	r1, #52	; 0x34
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f011 fa1c 	bl	801f70e <_ZdlPvj>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7ff ffc4 	bl	800e278 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800e2f0:	4a05      	ldr	r2, [pc, #20]	; (800e308 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	601a      	str	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	08021960 	.word	0x08021960

0800e30c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
     *
     *        Gets text height.
     *
     * @return The text height.
     */
    virtual int16_t getTextHeight()
 800e30c:	b590      	push	{r4, r7, lr}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3326      	adds	r3, #38	; 0x26
 800e318:	4618      	mov	r0, r3
 800e31a:	f7ff fe3d 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00e      	beq.n	800e342 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x36>
 800e324:	687c      	ldr	r4, [r7, #4]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3326      	adds	r3, #38	; 0x26
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7ff fe48 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 800e330:	4601      	mov	r1, r0
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e336:	461a      	mov	r2, r3
 800e338:	4620      	mov	r0, r4
 800e33a:	f000 fec9 	bl	800f0d0 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
 800e33e:	4603      	mov	r3, r0
 800e340:	e000      	b.n	800e344 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
 800e342:	2300      	movs	r3, #0
    }
 800e344:	4618      	mov	r0, r3
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd90      	pop	{r4, r7, pc}

0800e34c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
     *        Draws TextArea and its text if a Font is set and the TypedText associated with
     *        the TextArea is valid.
     *
     * @param area The invalidated area.
     */
    virtual void draw(const Rect& area) const
 800e34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e34e:	b093      	sub	sp, #76	; 0x4c
 800e350:	af06      	add	r7, sp, #24
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
    {
        if (typedText.hasValidId())
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	3326      	adds	r3, #38	; 0x26
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff fe1c 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d055      	beq.n	800e412 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc6>
        {
            const Font* fontToDraw = typedText.getFont();
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	3326      	adds	r3, #38	; 0x26
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff fe3e 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800e370:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (fontToDraw != 0)
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d04c      	beq.n	800e412 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc6>
            {
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3326      	adds	r3, #38	; 0x26
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff fe4e 	bl	800e024 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800e388:	4603      	mov	r3, r0
 800e38a:	607b      	str	r3, [r7, #4]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3326      	adds	r3, #38	; 0x26
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff fe59 	bl	800e054 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	603b      	str	r3, [r7, #0]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	f107 0010 	add.w	r0, r7, #16
 800e3b8:	9105      	str	r1, [sp, #20]
 800e3ba:	9304      	str	r3, [sp, #16]
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	9103      	str	r1, [sp, #12]
 800e3c0:	9502      	str	r5, [sp, #8]
 800e3c2:	9401      	str	r4, [sp, #4]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	4633      	mov	r3, r6
 800e3ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e3cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3ce:	f7ff fda3 	bl	800df18 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE>
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard, 0);
 800e3d2:	f7fe f821 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3de:	4611      	mov	r1, r2
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f00c f806 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	3326      	adds	r3, #38	; 0x26
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7ff fde8 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	9203      	str	r2, [sp, #12]
 800e3fa:	9302      	str	r3, [sp, #8]
 800e3fc:	9101      	str	r1, [sp, #4]
 800e3fe:	f107 0310 	add.w	r3, r7, #16
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e40a:	ca06      	ldmia	r2, {r1, r2}
 800e40c:	4620      	mov	r0, r4
 800e40e:	f00a fced 	bl	8018dec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
            }
        }
    }
 800e412:	bf00      	nop
 800e414:	3734      	adds	r7, #52	; 0x34
 800e416:	46bd      	mov	sp, r7
 800e418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e41a <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800e41a:	b480      	push	{r7}
 800e41c:	b083      	sub	sp, #12
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800e42a:	bf00      	nop
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 800e436:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e438:	b083      	sub	sp, #12
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	3326      	adds	r3, #38	; 0x26
 800e442:	4618      	mov	r0, r3
 800e444:	f7ff fda8 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d01c      	beq.n	800e488 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x52>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3326      	adds	r3, #38	; 0x26
 800e452:	4618      	mov	r0, r3
 800e454:	f7ff fdca 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800e458:	4605      	mov	r5, r0
 800e45a:	682b      	ldr	r3, [r5, #0]
 800e45c:	331c      	adds	r3, #28
 800e45e:	681c      	ldr	r4, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3326      	adds	r3, #38	; 0x26
 800e464:	4618      	mov	r0, r3
 800e466:	f7ff fdf5 	bl	800e054 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800e46a:	4603      	mov	r3, r0
 800e46c:	461e      	mov	r6, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	3326      	adds	r3, #38	; 0x26
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fda4 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 800e478:	4602      	mov	r2, r0
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e47e:	4631      	mov	r1, r6
 800e480:	4628      	mov	r0, r5
 800e482:	47a0      	blx	r4
 800e484:	4603      	mov	r3, r0
 800e486:	e000      	b.n	800e48a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x54>
 800e488:	2300      	movs	r3, #0
    }
 800e48a:	4618      	mov	r0, r3
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e492 <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
 800e492:	b480      	push	{r7}
 800e494:	b083      	sub	sp, #12
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
 800e49a:	230e      	movs	r3, #14
    }
 800e49c:	4618      	mov	r0, r3
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	4a05      	ldr	r2, [pc, #20]	; (800e4c8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff feef 	bl	800e29c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	08021960 	.word	0x08021960

0800e4cc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7ff ffe7 	bl	800e4a8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e4da:	2138      	movs	r1, #56	; 0x38
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f011 f916 	bl	801f70e <_ZdlPvj>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 800e506:	b480      	push	{r7}
 800e508:	b083      	sub	sp, #12
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 800e50e:	2302      	movs	r3, #2
    }
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e52c:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 800e52e:	6838      	ldr	r0, [r7, #0]
 800e530:	f7fe fdb0 	bl	800d094 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	bf0c      	ite	eq
 800e53a:	2301      	moveq	r3, #1
 800e53c:	2300      	movne	r3, #0
 800e53e:	b2da      	uxtb	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d005      	beq.n	800e55c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 800e550:	7bfb      	ldrb	r3, [r7, #15]
 800e552:	f083 0301 	eor.w	r3, r3, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10a      	bne.n	800e572 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e562:	f083 0301 	eor.w	r3, r3, #1
 800e566:	b2db      	uxtb	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d009      	beq.n	800e580 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 800e56c:	7bfb      	ldrb	r3, [r7, #15]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d006      	beq.n	800e580 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3314      	adds	r3, #20
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4610      	mov	r0, r2
 800e57e:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800e580:	7bfb      	ldrb	r3, [r7, #15]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d00b      	beq.n	800e59e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800e586:	6838      	ldr	r0, [r7, #0]
 800e588:	f7fe fd84 	bl	800d094 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d105      	bne.n	800e59e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800e59a:	2301      	movs	r3, #1
 800e59c:	e000      	b.n	800e5a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d015      	beq.n	800e5d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	330c      	adds	r3, #12
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	4798      	blx	r3
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d009      	beq.n	800e5d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6879      	ldr	r1, [r7, #4]
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	4798      	blx	r3
        }
    }
}
 800e5d0:	bf00      	nop
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 800e5e0:	2305      	movs	r3, #5
    }
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 800e5ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5f0:	b08d      	sub	sp, #52	; 0x34
 800e5f2:	af04      	add	r7, sp, #16
 800e5f4:	6078      	str	r0, [r7, #4]
 800e5f6:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3330      	adds	r3, #48	; 0x30
 800e606:	e001      	b.n	800e60c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	332e      	adds	r3, #46	; 0x2e
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 800e610:	f107 031c 	add.w	r3, r7, #28
 800e614:	4618      	mov	r0, r3
 800e616:	f00d fb5f 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e61a:	4603      	mov	r3, r0
 800e61c:	b21c      	sxth	r4, r3
 800e61e:	f107 031c 	add.w	r3, r7, #28
 800e622:	4618      	mov	r0, r3
 800e624:	f00d fb92 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e628:	4603      	mov	r3, r0
 800e62a:	b21b      	sxth	r3, r3
 800e62c:	f107 0014 	add.w	r0, r7, #20
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	4623      	mov	r3, r4
 800e634:	2200      	movs	r2, #0
 800e636:	2100      	movs	r1, #0
 800e638:	f7fd ff0a 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 800e63c:	f107 0314 	add.w	r3, r7, #20
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	4618      	mov	r0, r3
 800e644:	f7fd ffc4 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 800e648:	f107 031c 	add.w	r3, r7, #28
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fc39 	bl	800dec4 <_ZNK8touchgfx6Bitmap5getIdEv>
 800e652:	4603      	mov	r3, r0
 800e654:	461a      	mov	r2, r3
 800e656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d00c      	beq.n	800e678 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800e65e:	f107 0314 	add.w	r3, r7, #20
 800e662:	4618      	mov	r0, r3
 800e664:	f7fe f8bc 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e668:	4603      	mov	r3, r0
 800e66a:	f083 0301 	eor.w	r3, r3, #1
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800e674:	2301      	movs	r3, #1
 800e676:	e000      	b.n	800e67a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 800e678:	2300      	movs	r3, #0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d024      	beq.n	800e6c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 800e67e:	f107 030c 	add.w	r3, r7, #12
 800e682:	4618      	mov	r0, r3
 800e684:	f7fd fca4 	bl	800bfd0 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	3324      	adds	r3, #36	; 0x24
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f107 010c 	add.w	r1, r7, #12
 800e696:	4610      	mov	r0, r2
 800e698:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 800e69a:	f7fd febd 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800e69e:	6803      	ldr	r3, [r0, #0]
 800e6a0:	330c      	adds	r3, #12
 800e6a2:	681c      	ldr	r4, [r3, #0]
 800e6a4:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 800e6a8:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e6b2:	f107 011c 	add.w	r1, r7, #28
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	9202      	str	r2, [sp, #8]
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	f107 0314 	add.w	r3, r7, #20
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	4633      	mov	r3, r6
 800e6c4:	462a      	mov	r2, r5
 800e6c6:	47a0      	blx	r4
    }
}
 800e6c8:	bf00      	nop
 800e6ca:	3724      	adds	r7, #36	; 0x24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e6d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 800e6d0:	b590      	push	{r4, r7, lr}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	8812      	ldrh	r2, [r2, #0]
 800e6e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	8812      	ldrh	r2, [r2, #0]
 800e6ea:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 800e6ec:	68fc      	ldr	r4, [r7, #12]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3330      	adds	r3, #48	; 0x30
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f00d faf0 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	b21b      	sxth	r3, r3
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4620      	mov	r0, r4
 800e700:	f7fd fd17 	bl	800c132 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 800e704:	68fc      	ldr	r4, [r7, #12]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	3330      	adds	r3, #48	; 0x30
 800e70a:	4618      	mov	r0, r3
 800e70c:	f00d fb1e 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e710:	4603      	mov	r3, r0
 800e712:	b21b      	sxth	r3, r3
 800e714:	4619      	mov	r1, r3
 800e716:	4620      	mov	r0, r4
 800e718:	f7fd fd1a 	bl	800c150 <_ZN8touchgfx8Drawable9setHeightEs>
}
 800e71c:	bf00      	nop
 800e71e:	3714      	adds	r7, #20
 800e720:	46bd      	mov	sp, r7
 800e722:	bd90      	pop	{r4, r7, pc}

0800e724 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af02      	add	r7, sp, #8
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e734:	2bff      	cmp	r3, #255	; 0xff
 800e736:	d008      	beq.n	800e74a <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800e738:	2300      	movs	r3, #0
 800e73a:	9300      	str	r3, [sp, #0]
 800e73c:	2300      	movs	r3, #0
 800e73e:	2200      	movs	r2, #0
 800e740:	2100      	movs	r1, #0
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7fd fe84 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
 800e748:	e015      	b.n	800e776 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e750:	2b00      	cmp	r3, #0
 800e752:	d008      	beq.n	800e766 <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4611      	mov	r1, r2
 800e75e:	4618      	mov	r0, r3
 800e760:	f00d fb2e 	bl	801bdc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e764:	e007      	b.n	800e776 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f00d fb25 	bl	801bdc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <_ZNK8touchgfx14ButtonWithIcon7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTONWITHICON.
     */
    virtual uint16_t getType() const
 800e77e:	b480      	push	{r7}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTONWITHICON;
 800e786:	2306      	movs	r3, #6
    }
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <_ZN8touchgfx14ButtonWithIconC1Ev>:
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
ButtonWithIcon::ButtonWithIcon() :
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
    Button(),
    iconX(0),
    iconY(0)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe fd26 	bl	800d1f0 <_ZN8touchgfx6ButtonC1Ev>
 800e7a4:	4a0d      	ldr	r2, [pc, #52]	; (800e7dc <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	3334      	adds	r3, #52	; 0x34
 800e7ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fd fc23 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	3336      	adds	r3, #54	; 0x36
 800e7bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fd fc1c 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	871a      	strh	r2, [r3, #56]	; 0x38
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	875a      	strh	r2, [r3, #58]	; 0x3a
{
}
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	08021b6c 	.word	0x08021b6c

0800e7e0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:

void ButtonWithIcon::setBitmaps(const Bitmap& newBackgroundReleased, const Bitmap& newBackgroundPressed,
                                const Bitmap& newIconReleased, const Bitmap& newIconPressed)
{
 800e7e0:	b590      	push	{r4, r7, lr}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
    Button::setBitmaps(newBackgroundReleased, newBackgroundPressed);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	68b9      	ldr	r1, [r7, #8]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7ff ff6b 	bl	800e6d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    iconReleased = newIconReleased;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	8812      	ldrh	r2, [r2, #0]
 800e800:	869a      	strh	r2, [r3, #52]	; 0x34
    iconPressed = newIconPressed;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6a3a      	ldr	r2, [r7, #32]
 800e806:	8812      	ldrh	r2, [r2, #0]
 800e808:	86da      	strh	r2, [r3, #54]	; 0x36

    iconX = (getWidth() / 2) - (newIconPressed.getWidth() / 2);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fe fad8 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e812:	4603      	mov	r3, r0
 800e814:	0fda      	lsrs	r2, r3, #31
 800e816:	4413      	add	r3, r2
 800e818:	105b      	asrs	r3, r3, #1
 800e81a:	b21b      	sxth	r3, r3
 800e81c:	b29c      	uxth	r4, r3
 800e81e:	6a38      	ldr	r0, [r7, #32]
 800e820:	f00d fa5a 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e824:	4603      	mov	r3, r0
 800e826:	085b      	lsrs	r3, r3, #1
 800e828:	b29b      	uxth	r3, r3
 800e82a:	1ae3      	subs	r3, r4, r3
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	b21a      	sxth	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	871a      	strh	r2, [r3, #56]	; 0x38
    iconY = (getHeight() / 2) - (newIconPressed.getHeight() / 2);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	4618      	mov	r0, r3
 800e838:	f7fe fad0 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800e83c:	4603      	mov	r3, r0
 800e83e:	0fda      	lsrs	r2, r3, #31
 800e840:	4413      	add	r3, r2
 800e842:	105b      	asrs	r3, r3, #1
 800e844:	b21b      	sxth	r3, r3
 800e846:	b29c      	uxth	r4, r3
 800e848:	6a38      	ldr	r0, [r7, #32]
 800e84a:	f00d fa7f 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e84e:	4603      	mov	r3, r0
 800e850:	085b      	lsrs	r3, r3, #1
 800e852:	b29b      	uxth	r3, r3
 800e854:	1ae3      	subs	r3, r4, r3
 800e856:	b29b      	uxth	r3, r3
 800e858:	b21a      	sxth	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800e85e:	bf00      	nop
 800e860:	3714      	adds	r7, #20
 800e862:	46bd      	mov	sp, r7
 800e864:	bd90      	pop	{r4, r7, pc}

0800e866 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:

void ButtonWithIcon::draw(const Rect& invalidatedArea) const
{
 800e866:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e868:	b08f      	sub	sp, #60	; 0x3c
 800e86a:	af04      	add	r7, sp, #16
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	6039      	str	r1, [r7, #0]
    Button::draw(invalidatedArea);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6839      	ldr	r1, [r7, #0]
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff feba 	bl	800e5ee <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    Bitmap bmp((pressed ? iconPressed : iconReleased));
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e880:	2b00      	cmp	r3, #0
 800e882:	d002      	beq.n	800e88a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x24>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	3336      	adds	r3, #54	; 0x36
 800e888:	e001      	b.n	800e88e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x28>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3334      	adds	r3, #52	; 0x34
 800e88e:	881b      	ldrh	r3, [r3, #0]
 800e890:	84bb      	strh	r3, [r7, #36]	; 0x24
    Rect iconRect(iconX, iconY, bmp.getWidth(), bmp.getHeight());
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f9b3 503a 	ldrsh.w	r5, [r3, #58]	; 0x3a
 800e89e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f00d fa18 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	b21e      	sxth	r6, r3
 800e8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f00d fa4b 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	b21b      	sxth	r3, r3
 800e8ba:	f107 001c 	add.w	r0, r7, #28
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	4633      	mov	r3, r6
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	f7fd fdc3 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    Rect dirty = invalidatedArea & iconRect;
 800e8ca:	f107 0314 	add.w	r3, r7, #20
 800e8ce:	f107 021c 	add.w	r2, r7, #28
 800e8d2:	6839      	ldr	r1, [r7, #0]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fd fe66 	bl	800c5a6 <_ZNK8touchgfx4RectanERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 800e8da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7ff faf0 	bl	800dec4 <_ZNK8touchgfx6Bitmap5getIdEv>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d00c      	beq.n	800e90a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 800e8f0:	f107 0314 	add.w	r3, r7, #20
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fd ff73 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	f083 0301 	eor.w	r3, r3, #1
 800e900:	b2db      	uxtb	r3, r3
 800e902:	2b00      	cmp	r3, #0
 800e904:	d001      	beq.n	800e90a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 800e906:	2301      	movs	r3, #1
 800e908:	e000      	b.n	800e90c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 800e90a:	2300      	movs	r3, #0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d04a      	beq.n	800e9a6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x140>
    {
        Rect r;
 800e910:	f107 030c 	add.w	r3, r7, #12
 800e914:	4618      	mov	r0, r3
 800e916:	f7fd fb5b 	bl	800bfd0 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3324      	adds	r3, #36	; 0x24
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f107 010c 	add.w	r1, r7, #12
 800e928:	4610      	mov	r0, r2
 800e92a:	4798      	blx	r3
        dirty.x -= iconX;
 800e92c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e930:	b29a      	uxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800e938:	b29b      	uxth	r3, r3
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	b21b      	sxth	r3, r3
 800e940:	82bb      	strh	r3, [r7, #20]
        dirty.y -= iconY;
 800e942:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e946:	b29a      	uxth	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800e94e:	b29b      	uxth	r3, r3
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	b29b      	uxth	r3, r3
 800e954:	b21b      	sxth	r3, r3
 800e956:	82fb      	strh	r3, [r7, #22]
        HAL::lcd().drawPartialBitmap(bmp, r.x + iconX, r.y + iconY, dirty, alpha);
 800e958:	f7fd fd5e 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800e95c:	6803      	ldr	r3, [r0, #0]
 800e95e:	330c      	adds	r3, #12
 800e960:	681c      	ldr	r4, [r3, #0]
 800e962:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800e96e:	b29b      	uxth	r3, r3
 800e970:	4413      	add	r3, r2
 800e972:	b29b      	uxth	r3, r3
 800e974:	b21d      	sxth	r5, r3
 800e976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800e982:	b29b      	uxth	r3, r3
 800e984:	4413      	add	r3, r2
 800e986:	b29b      	uxth	r3, r3
 800e988:	b21e      	sxth	r6, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e990:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e994:	2201      	movs	r2, #1
 800e996:	9202      	str	r2, [sp, #8]
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	f107 0314 	add.w	r3, r7, #20
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	4633      	mov	r3, r6
 800e9a2:	462a      	mov	r2, r5
 800e9a4:	47a0      	blx	r4
    }
}
 800e9a6:	bf00      	nop
 800e9a8:	372c      	adds	r7, #44	; 0x2c
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e9b0 <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	4a05      	ldr	r2, [pc, #20]	; (800e9d0 <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe fc39 	bl	800d238 <_ZN8touchgfx6ButtonD1Ev>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	08021b6c 	.word	0x08021b6c

0800e9d4 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff ffe7 	bl	800e9b0 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800e9e2:	213c      	movs	r1, #60	; 0x3c
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f010 fe92 	bl	801f70e <_ZdlPvj>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3708      	adds	r7, #8
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 800e9f4:	b590      	push	{r4, r7, lr}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af02      	add	r7, sp, #8
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800e9fe:	6838      	ldr	r0, [r7, #0]
 800ea00:	f00d f96a 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ea04:	4603      	mov	r3, r0
 800ea06:	b21c      	sxth	r4, r3
 800ea08:	6838      	ldr	r0, [r7, #0]
 800ea0a:	f00d f99f 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	b21b      	sxth	r3, r3
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	4623      	mov	r3, r4
 800ea16:	2200      	movs	r2, #0
 800ea18:	2100      	movs	r1, #0
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f7fd fd18 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    }
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd90      	pop	{r4, r7, pc}

0800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 800ea28:	b5b0      	push	{r4, r5, r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	8812      	ldrh	r2, [r2, #0]
 800ea38:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 800ea3a:	687d      	ldr	r5, [r7, #4]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3338      	adds	r3, #56	; 0x38
 800ea42:	681c      	ldr	r4, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	3326      	adds	r3, #38	; 0x26
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f00d f945 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	b21b      	sxth	r3, r3
 800ea52:	4619      	mov	r1, r3
 800ea54:	4628      	mov	r0, r5
 800ea56:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 800ea58:	687d      	ldr	r5, [r7, #4]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	333c      	adds	r3, #60	; 0x3c
 800ea60:	681c      	ldr	r4, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	3326      	adds	r3, #38	; 0x26
 800ea66:	4618      	mov	r0, r3
 800ea68:	f00d f970 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	b21b      	sxth	r3, r3
 800ea70:	4619      	mov	r1, r3
 800ea72:	4628      	mov	r0, r5
 800ea74:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	3326      	adds	r3, #38	; 0x26
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f00d f9fa 	bl	801be74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 800ea8a:	bf00      	nop
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bdb0      	pop	{r4, r5, r7, pc}

0800ea92 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 800ea92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea94:	b08d      	sub	sp, #52	; 0x34
 800ea96:	af04      	add	r7, sp, #16
 800ea98:	6078      	str	r0, [r7, #4]
 800ea9a:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 800ea9c:	f107 0310 	add.w	r3, r7, #16
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fd fa95 	bl	800bfd0 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3324      	adds	r3, #36	; 0x24
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f107 0110 	add.w	r1, r7, #16
 800eab4:	4610      	mov	r0, r2
 800eab6:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eabe:	f107 0318 	add.w	r3, r7, #24
 800eac2:	4611      	mov	r1, r2
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7ff ff95 	bl	800e9f4 <_ZNK8touchgfx6Bitmap7getRectEv>
 800eaca:	f107 0308 	add.w	r3, r7, #8
 800eace:	f107 0118 	add.w	r1, r7, #24
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fd fd66 	bl	800c5a6 <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 800eada:	f107 0308 	add.w	r3, r7, #8
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fd fe7e 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 800eae4:	4603      	mov	r3, r0
 800eae6:	f083 0301 	eor.w	r3, r3, #1
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d017      	beq.n	800eb20 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 800eaf0:	f7fd fc92 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800eaf4:	6803      	ldr	r3, [r0, #0]
 800eaf6:	330c      	adds	r3, #12
 800eaf8:	681c      	ldr	r4, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800eb00:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 800eb04:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb0e:	2201      	movs	r2, #1
 800eb10:	9202      	str	r2, [sp, #8]
 800eb12:	9301      	str	r3, [sp, #4]
 800eb14:	f107 0308 	add.w	r3, r7, #8
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	4633      	mov	r3, r6
 800eb1c:	462a      	mov	r2, r5
 800eb1e:	47a0      	blx	r4
    }
}
 800eb20:	bf00      	nop
 800eb22:	3724      	adds	r7, #36	; 0x24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb28 <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb38:	2bff      	cmp	r3, #255	; 0xff
 800eb3a:	d008      	beq.n	800eb4e <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	2300      	movs	r3, #0
 800eb42:	2200      	movs	r2, #0
 800eb44:	2100      	movs	r1, #0
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7fd fc82 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
 800eb4c:	e007      	b.n	800eb5e <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4611      	mov	r1, r2
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f00d f931 	bl	801bdc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <_ZNK8touchgfx14SnapshotWidget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_SNAPSHOTWIDGET.
     */
    virtual uint16_t getType() const
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SNAPSHOTWIDGET;
 800eb6e:	230c      	movs	r3, #12
    }
 800eb70:	4618      	mov	r0, r3
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
#include <touchgfx/widgets/SnapshotWidget.hpp>
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
SnapshotWidget::SnapshotWidget() : Widget(), bitmapId(BITMAP_INVALID), alpha(255)
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fe f9ca 	bl	800cf20 <_ZN8touchgfx6WidgetC1Ev>
 800eb8c:	4a07      	ldr	r2, [pc, #28]	; (800ebac <_ZN8touchgfx14SnapshotWidgetC1Ev+0x30>)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	601a      	str	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb98:	84da      	strh	r2, [r3, #38]	; 0x26
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	22ff      	movs	r2, #255	; 0xff
 800eb9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
}
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	08021c54 	.word	0x08021c54

0800ebb0 <_ZN8touchgfx14SnapshotWidgetD1Ev>:

SnapshotWidget::~SnapshotWidget()
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	4a05      	ldr	r2, [pc, #20]	; (800ebd0 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fd fb71 	bl	800c2a8 <_ZN8touchgfx6WidgetD1Ev>
{
}
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	08021c54 	.word	0x08021c54

0800ebd4 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
SnapshotWidget::~SnapshotWidget()
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
}
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff ffe7 	bl	800ebb0 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800ebe2:	212c      	movs	r1, #44	; 0x2c
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f010 fd92 	bl	801f70e <_ZdlPvj>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4618      	mov	r0, r3
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:

void SnapshotWidget::draw(const Rect& invalidatedArea) const
{
 800ebf4:	b5b0      	push	{r4, r5, r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af02      	add	r7, sp, #8
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
    if (alpha == 0 || bitmapId == BITMAP_INVALID)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d049      	beq.n	800ec9c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0xa8>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d043      	beq.n	800ec9c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0xa8>
    {
        return;
    }

    Rect absRect(0, 0, Bitmap(bitmapId).getWidth(), rect.height);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ec18:	f107 0310 	add.w	r3, r7, #16
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fd f9ed 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800ec24:	f107 0310 	add.w	r3, r7, #16
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f00d f855 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	b21a      	sxth	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ec38:	f107 0008 	add.w	r0, r7, #8
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	2200      	movs	r2, #0
 800ec42:	2100      	movs	r1, #0
 800ec44:	f7fd fc04 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    translateRectToAbsolute(absRect);
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	3324      	adds	r3, #36	; 0x24
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f107 0108 	add.w	r1, r7, #8
 800ec56:	4610      	mov	r0, r2
 800ec58:	4798      	blx	r3
    HAL::lcd().blitCopy((const uint16_t*)Bitmap(bitmapId).getData(), absRect, invalidatedArea, alpha, false);
 800ec5a:	f7fd fbdd 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800ec5e:	4605      	mov	r5, r0
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	3310      	adds	r3, #16
 800ec64:	681c      	ldr	r4, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ec6a:	f107 0314 	add.w	r3, r7, #20
 800ec6e:	4611      	mov	r1, r2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fd f9c4 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 800ec76:	f107 0314 	add.w	r3, r7, #20
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f00d f934 	bl	801bee8 <_ZNK8touchgfx6Bitmap7getDataEv>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec86:	f107 0108 	add.w	r1, r7, #8
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	9201      	str	r2, [sp, #4]
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	460a      	mov	r2, r1
 800ec94:	4601      	mov	r1, r0
 800ec96:	4628      	mov	r0, r5
 800ec98:	47a0      	blx	r4
 800ec9a:	e000      	b.n	800ec9e <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0xaa>
        return;
 800ec9c:	bf00      	nop
}
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bdb0      	pop	{r4, r5, r7, pc}

0800eca4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:

Rect SnapshotWidget::getSolidRect() const
{
 800eca4:	b590      	push	{r4, r7, lr}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af02      	add	r7, sp, #8
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
    if (alpha < 255 || bitmapId == BITMAP_INVALID)
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecb4:	2bff      	cmp	r3, #255	; 0xff
 800ecb6:	d105      	bne.n	800ecc4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ecbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d108      	bne.n	800ecd6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x32>
    {
        return Rect(0, 0, 0, 0);
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	2300      	movs	r3, #0
 800ecca:	2200      	movs	r2, #0
 800eccc:	2100      	movs	r1, #0
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7fd fbbe 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
 800ecd4:	e011      	b.n	800ecfa <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x56>
    }
    else
    {
        return Rect(0, 0, getWidth(), getHeight());
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fe f872 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ecde:	4603      	mov	r3, r0
 800ece0:	461c      	mov	r4, r3
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe f879 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800ecea:	4603      	mov	r3, r0
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	4623      	mov	r3, r4
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7fd fbab 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    }
}
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	370c      	adds	r7, #12
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd90      	pop	{r4, r7, pc}

0800ed02 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:

void SnapshotWidget::makeSnapshot()
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
    makeSnapshot(BITMAP_ANIMATION_STORAGE);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3368      	adds	r3, #104	; 0x68
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	4798      	blx	r3
}
 800ed1a:	bf00      	nop
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:

void SnapshotWidget::makeSnapshot(const BitmapId bmp)
{
 800ed22:	b590      	push	{r4, r7, lr}
 800ed24:	b089      	sub	sp, #36	; 0x24
 800ed26:	af02      	add	r7, sp, #8
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	807b      	strh	r3, [r7, #2]
    Rect visRect(0, 0, rect.width, rect.height);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ed3a:	f107 0010 	add.w	r0, r7, #16
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	4613      	mov	r3, r2
 800ed42:	2200      	movs	r2, #0
 800ed44:	2100      	movs	r1, #0
 800ed46:	f7fd fb83 	bl	800c450 <_ZN8touchgfx4RectC1Essss>
    getVisibleRect(visRect);
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	3320      	adds	r3, #32
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f107 0110 	add.w	r1, r7, #16
 800ed58:	4610      	mov	r0, r2
 800ed5a:	4798      	blx	r3
    Rect absRect = getAbsoluteRect();
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	f107 0308 	add.w	r3, r7, #8
 800ed62:	4611      	mov	r1, r2
 800ed64:	4618      	mov	r0, r3
 800ed66:	f00b fb44 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
    bitmapId = (HAL::lcd().copyFrameBufferRegionToMemory(visRect, absRect, bmp)) ? bmp : BITMAP_INVALID;
 800ed6a:	f7fd fb55 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800ed6e:	6803      	ldr	r3, [r0, #0]
 800ed70:	3318      	adds	r3, #24
 800ed72:	681c      	ldr	r4, [r3, #0]
 800ed74:	887b      	ldrh	r3, [r7, #2]
 800ed76:	f107 0208 	add.w	r2, r7, #8
 800ed7a:	f107 0110 	add.w	r1, r7, #16
 800ed7e:	47a0      	blx	r4
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d001      	beq.n	800ed8a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt+0x68>
 800ed86:	887a      	ldrh	r2, [r7, #2]
 800ed88:	e001      	b.n	800ed8e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt+0x6c>
 800ed8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	84da      	strh	r2, [r3, #38]	; 0x26
}
 800ed92:	bf00      	nop
 800ed94:	371c      	adds	r7, #28
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd90      	pop	{r4, r7, pc}

0800ed9a <_ZN8touchgfx8TextArea13getTextHeightEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
int16_t TextArea::getTextHeight()
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b082      	sub	sp, #8
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3326      	adds	r3, #38	; 0x26
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff f8f6 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00b      	beq.n	800edca <_ZN8touchgfx8TextArea13getTextHeightEv+0x30>
    {
        return getTextHeightInternal(typedText.getText());
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	3326      	adds	r3, #38	; 0x26
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff f902 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 800edbc:	4603      	mov	r3, r0
 800edbe:	4619      	mov	r1, r3
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 f90b 	bl	800efdc <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>
 800edc6:	4603      	mov	r3, r0
 800edc8:	e000      	b.n	800edcc <_ZN8touchgfx8TextArea13getTextHeightEv+0x32>
    }
    else
    {
        return 0;
 800edca:	2300      	movs	r3, #0
    }
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3708      	adds	r7, #8
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:

uint16_t TextArea::getTextWidth() const
{
 800edd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText()) : 0;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	3326      	adds	r3, #38	; 0x26
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7ff f8d9 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d01b      	beq.n	800ee24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x50>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	3326      	adds	r3, #38	; 0x26
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff f8fb 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800edf6:	4605      	mov	r5, r0
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	331c      	adds	r3, #28
 800edfc:	681c      	ldr	r4, [r3, #0]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3326      	adds	r3, #38	; 0x26
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7ff f926 	bl	800e054 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	461e      	mov	r6, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3326      	adds	r3, #38	; 0x26
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7ff f8d5 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 800ee16:	4603      	mov	r3, r0
 800ee18:	461a      	mov	r2, r3
 800ee1a:	4631      	mov	r1, r6
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	47a0      	blx	r4
 800ee20:	4603      	mov	r3, r0
 800ee22:	e000      	b.n	800ee26 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x52>
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee2e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:

void TextArea::draw(const Rect& area) const
{
 800ee2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee30:	b093      	sub	sp, #76	; 0x4c
 800ee32:	af06      	add	r7, sp, #24
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
    if (typedText.hasValidId())
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	3326      	adds	r3, #38	; 0x26
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff f8ab 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d054      	beq.n	800eef2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xc4>
    {
        const Font* fontToDraw = typedText.getFont();
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	3326      	adds	r3, #38	; 0x26
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7ff f8cd 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800ee52:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (fontToDraw != 0)
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d04b      	beq.n	800eef2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xc4>
        {
            LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	3326      	adds	r3, #38	; 0x26
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7ff f8dd 	bl	800e024 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	607b      	str	r3, [r7, #4]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	3326      	adds	r3, #38	; 0x26
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff f8e8 	bl	800e054 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800ee84:	4603      	mov	r3, r0
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee8e:	68fa      	ldr	r2, [r7, #12]
 800ee90:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	f107 0010 	add.w	r0, r7, #16
 800ee9a:	9105      	str	r1, [sp, #20]
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	9103      	str	r1, [sp, #12]
 800eea2:	9502      	str	r5, [sp, #8]
 800eea4:	9401      	str	r4, [sp, #4]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	4633      	mov	r3, r6
 800eeac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800eeae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eeb0:	f7ff f832 	bl	800df18 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), 0, 0);
 800eeb4:	f7fd fab0 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	68fa      	ldr	r2, [r7, #12]
 800eebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f00b fa95 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3326      	adds	r3, #38	; 0x26
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff f877 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 800eed2:	4602      	mov	r2, r0
 800eed4:	2300      	movs	r3, #0
 800eed6:	9303      	str	r3, [sp, #12]
 800eed8:	2300      	movs	r3, #0
 800eeda:	9302      	str	r3, [sp, #8]
 800eedc:	9201      	str	r2, [sp, #4]
 800eede:	f107 0310 	add.w	r3, r7, #16
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800eeea:	ca06      	ldmia	r2, {r1, r2}
 800eeec:	4620      	mov	r0, r4
 800eeee:	f009 ff7d 	bl	8018dec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
        }
    }
}
 800eef2:	bf00      	nop
 800eef4:	3734      	adds	r7, #52	; 0x34
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:

void TextArea::setTypedText(TypedText t)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b082      	sub	sp, #8
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
 800ef02:	8039      	strh	r1, [r7, #0]
    typedText = t;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	883a      	ldrh	r2, [r7, #0]
 800ef08:	84da      	strh	r2, [r3, #38]	; 0x26
    // If this TextArea does not yet have a width and height,
    // just assign the smallest possible size to fit current text.
    if ((getWidth() == 0) && (getHeight() == 0))
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fd ff58 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d108      	bne.n	800ef2a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fd ff5e 	bl	800cddc <_ZNK8touchgfx8Drawable9getHeightEv>
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d101      	bne.n	800ef2a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 800ef26:	2301      	movs	r3, #1
 800ef28:	e000      	b.n	800ef2c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x32>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x3c>
    {
        resizeToCurrentText();
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f804 	bl	800ef3e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    }
}
 800ef36:	bf00      	nop
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:

void TextArea::resizeToCurrentText()
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b084      	sub	sp, #16
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3326      	adds	r3, #38	; 0x26
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff f824 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d03e      	beq.n	800efd4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
    {
        uint16_t w = getTextWidth();
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	3370      	adds	r3, #112	; 0x70
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	4798      	blx	r3
 800ef62:	4603      	mov	r3, r0
 800ef64:	81fb      	strh	r3, [r7, #14]
        uint16_t h = getTextHeight();
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	336c      	adds	r3, #108	; 0x6c
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	4798      	blx	r3
 800ef72:	4603      	mov	r3, r0
 800ef74:	81bb      	strh	r3, [r7, #12]
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d004      	beq.n	800ef8a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4c>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef86:	2b02      	cmp	r3, #2
 800ef88:	d112      	bne.n	800efb0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x72>
        {
            setWidth(w);
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3338      	adds	r3, #56	; 0x38
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800ef98:	4610      	mov	r0, r2
 800ef9a:	4798      	blx	r3
            setHeight(h);
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	333c      	adds	r3, #60	; 0x3c
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800efaa:	4610      	mov	r0, r2
 800efac:	4798      	blx	r3
        {
            setWidth(h);
            setHeight(w);
        }
    }
}
 800efae:	e011      	b.n	800efd4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
            setWidth(h);
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	3338      	adds	r3, #56	; 0x38
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800efbe:	4610      	mov	r0, r2
 800efc0:	4798      	blx	r3
            setHeight(w);
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	333c      	adds	r3, #60	; 0x3c
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800efd0:	4610      	mov	r0, r2
 800efd2:	4798      	blx	r3
}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>:
        }
    }
}

int16_t TextArea::getTextHeightInternal(const Unicode::UnicodeChar* format, ...) const
{
 800efdc:	b40e      	push	{r1, r2, r3}
 800efde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efe0:	b09e      	sub	sp, #120	; 0x78
 800efe2:	af02      	add	r7, sp, #8
 800efe4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, format);
 800efe6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800efea:	667b      	str	r3, [r7, #100]	; 0x64

    const Font* fontToDraw = typedText.getFont();
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	3326      	adds	r3, #38	; 0x26
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fe fffb 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800eff6:	66f8      	str	r0, [r7, #108]	; 0x6c
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 800eff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	3330      	adds	r3, #48	; 0x30
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f002:	4798      	blx	r3
 800f004:	4603      	mov	r3, r0
 800f006:	b21b      	sxth	r3, r3
 800f008:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    TextProvider textProvider;
 800f00c:	f107 0308 	add.w	r3, r7, #8
 800f010:	4618      	mov	r0, r3
 800f012:	f00c f87d 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg, fontToDraw->getGSUBTable());
 800f016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3344      	adds	r3, #68	; 0x44
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f020:	4798      	blx	r3
 800f022:	4603      	mov	r3, r0
 800f024:	f107 0008 	add.w	r0, r7, #8
 800f028:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f02a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f02e:	f00c f88c 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>

    int16_t numLines = LCD::getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3326      	adds	r3, #38	; 0x26
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7ff f809 	bl	800e054 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800f042:	4603      	mov	r3, r0
 800f044:	461d      	mov	r5, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	3326      	adds	r3, #38	; 0x26
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fe ffce 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800f050:	4606      	mov	r6, r0
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	f7fd feb4 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f05a:	4603      	mov	r3, r0
 800f05c:	f107 0008 	add.w	r0, r7, #8
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	4633      	mov	r3, r6
 800f064:	462a      	mov	r2, r5
 800f066:	4621      	mov	r1, r4
 800f068:	f00a f90f 	bl	801928a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800f06c:	4603      	mov	r3, r0
 800f06e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    va_end(pArg);
    return (textHeight + linespace > 0) ? (numLines * textHeight + (numLines - 1) * linespace) : (numLines > 0) ? (textHeight) : 0;
 800f072:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f076:	461a      	mov	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800f07e:	4413      	add	r3, r2
 800f080:	2b00      	cmp	r3, #0
 800f082:	dd16      	ble.n	800f0b2 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xd6>
 800f084:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800f088:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	fb12 f303 	smulbb	r3, r2, r3
 800f092:	b29a      	uxth	r2, r3
 800f094:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f098:	3b01      	subs	r3, #1
 800f09a:	b299      	uxth	r1, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	fb11 f303 	smulbb	r3, r1, r3
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	4413      	add	r3, r2
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	b21b      	sxth	r3, r3
 800f0b0:	e007      	b.n	800f0c2 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xe6>
 800f0b2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	dd02      	ble.n	800f0c0 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xe4>
 800f0ba:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f0be:	e000      	b.n	800f0c2 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xe6>
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3770      	adds	r7, #112	; 0x70
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f0cc:	b003      	add	sp, #12
 800f0ce:	4770      	bx	lr

0800f0d0 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 800f0d0:	b40e      	push	{r1, r2, r3}
 800f0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d4:	b09e      	sub	sp, #120	; 0x78
 800f0d6:	af02      	add	r7, sp, #8
 800f0d8:	6078      	str	r0, [r7, #4]
    if (!typedText.hasValidId())
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3326      	adds	r3, #38	; 0x26
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe ff5a 	bl	800df98 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	f083 0301 	eor.w	r3, r3, #1
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x24>
    {
        return 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	e06d      	b.n	800f1d0 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x100>
    }

    va_list pArg;
    va_start(pArg, format);
 800f0f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f0f8:	667b      	str	r3, [r7, #100]	; 0x64

    const Font* fontToDraw = typedText.getFont();
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	3326      	adds	r3, #38	; 0x26
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fe ff74 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800f104:	66f8      	str	r0, [r7, #108]	; 0x6c
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 800f106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3330      	adds	r3, #48	; 0x30
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f110:	4798      	blx	r3
 800f112:	4603      	mov	r3, r0
 800f114:	b21b      	sxth	r3, r3
 800f116:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    TextProvider textProvider;
 800f11a:	f107 0308 	add.w	r3, r7, #8
 800f11e:	4618      	mov	r0, r3
 800f120:	f00b fff6 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg, fontToDraw->getGSUBTable());
 800f124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	3344      	adds	r3, #68	; 0x44
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f12e:	4798      	blx	r3
 800f130:	4603      	mov	r3, r0
 800f132:	f107 0008 	add.w	r0, r7, #8
 800f136:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f138:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f13c:	f00c f805 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>

    int16_t numLines = LCD::getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	3326      	adds	r3, #38	; 0x26
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fe ff82 	bl	800e054 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800f150:	4603      	mov	r3, r0
 800f152:	461d      	mov	r5, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3326      	adds	r3, #38	; 0x26
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fe ff47 	bl	800dfec <_ZNK8touchgfx9TypedText7getFontEv>
 800f15e:	4606      	mov	r6, r0
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	f7fd fe2d 	bl	800cdc2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f168:	4603      	mov	r3, r0
 800f16a:	f107 0008 	add.w	r0, r7, #8
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	4633      	mov	r3, r6
 800f172:	462a      	mov	r2, r5
 800f174:	4621      	mov	r1, r4
 800f176:	f00a f888 	bl	801928a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800f17a:	4603      	mov	r3, r0
 800f17c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    va_end(pArg);
    return (textHeight + linespace > 0) ? (numLines * textHeight + (numLines - 1) * linespace) : (numLines > 0) ? (textHeight) : 0;
 800f180:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f184:	461a      	mov	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800f18c:	4413      	add	r3, r2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dd16      	ble.n	800f1c0 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xf0>
 800f192:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800f196:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	fb12 f303 	smulbb	r3, r2, r3
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f1a6:	3b01      	subs	r3, #1
 800f1a8:	b299      	uxth	r1, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	fb11 f303 	smulbb	r3, r1, r3
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	4413      	add	r3, r2
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	b21b      	sxth	r3, r3
 800f1be:	e007      	b.n	800f1d0 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x100>
 800f1c0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dd02      	ble.n	800f1ce <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xfe>
 800f1c8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800f1cc:	e000      	b.n	800f1d0 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x100>
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3770      	adds	r7, #112	; 0x70
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f1da:	b003      	add	sp, #12
 800f1dc:	4770      	bx	lr

0800f1de <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 800f1de:	b480      	push	{r7}
 800f1e0:	b083      	sub	sp, #12
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	b29b      	uxth	r3, r3
    }
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr

0800f1f8 <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 800f1fc:	2203      	movs	r2, #3
 800f1fe:	2100      	movs	r1, #0
 800f200:	2001      	movs	r0, #1
 800f202:	f000 fbd1 	bl	800f9a8 <xQueueGenericCreate>
 800f206:	4602      	mov	r2, r0
 800f208:	4b0b      	ldr	r3, [pc, #44]	; (800f238 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800f20a:	601a      	str	r2, [r3, #0]
 800f20c:	4b0a      	ldr	r3, [pc, #40]	; (800f238 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d006      	beq.n	800f222 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 800f214:	4b08      	ldr	r3, [pc, #32]	; (800f238 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800f216:	6818      	ldr	r0, [r3, #0]
 800f218:	2300      	movs	r3, #0
 800f21a:	2200      	movs	r2, #0
 800f21c:	2100      	movs	r1, #0
 800f21e:	f000 fc1f 	bl	800fa60 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 800f222:	2200      	movs	r2, #0
 800f224:	2101      	movs	r1, #1
 800f226:	2001      	movs	r0, #1
 800f228:	f000 fbbe 	bl	800f9a8 <xQueueGenericCreate>
 800f22c:	4602      	mov	r2, r0
 800f22e:	4b03      	ldr	r3, [pc, #12]	; (800f23c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800f230:	601a      	str	r2, [r3, #0]
}
 800f232:	bf00      	nop
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	2000052c 	.word	0x2000052c
 800f23c:	20000530 	.word	0x20000530

0800f240 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 800f244:	4b04      	ldr	r3, [pc, #16]	; (800f258 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f04f 31ff 	mov.w	r1, #4294967295
 800f24c:	4618      	mov	r0, r3
 800f24e:	f000 fefb 	bl	8010048 <xQueueSemaphoreTake>
}
 800f252:	bf00      	nop
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	2000052c 	.word	0x2000052c

0800f25c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 800f260:	4b04      	ldr	r3, [pc, #16]	; (800f274 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 800f262:	6818      	ldr	r0, [r3, #0]
 800f264:	2300      	movs	r3, #0
 800f266:	2200      	movs	r2, #0
 800f268:	2100      	movs	r1, #0
 800f26a:	f000 fbf9 	bl	800fa60 <xQueueGenericSend>
}
 800f26e:	bf00      	nop
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	2000052c 	.word	0x2000052c

0800f278 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 800f27c:	4b03      	ldr	r3, [pc, #12]	; (800f28c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2100      	movs	r1, #0
 800f282:	4618      	mov	r0, r3
 800f284:	f000 fee0 	bl	8010048 <xQueueSemaphoreTake>
}
 800f288:	bf00      	nop
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	2000052c 	.word	0x2000052c

0800f290 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 800f296:	2300      	movs	r3, #0
 800f298:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 800f29a:	4b0b      	ldr	r3, [pc, #44]	; (800f2c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	1d3a      	adds	r2, r7, #4
 800f2a0:	4611      	mov	r1, r2
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 fd6a 	bl	800fd7c <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d007      	beq.n	800f2be <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 800f2ae:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 800f2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	f3bf 8f6f 	isb	sy
}
 800f2be:	bf00      	nop
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	2000052c 	.word	0x2000052c
 800f2cc:	e000ed04 	.word	0xe000ed04

0800f2d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
    if (vsync_q)
 800f2d6:	4b0e      	ldr	r3, [pc, #56]	; (800f310 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d013      	beq.n	800f306 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 800f2e2:	4b0b      	ldr	r3, [pc, #44]	; (800f310 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800f2e4:	6818      	ldr	r0, [r3, #0]
 800f2e6:	1d3a      	adds	r2, r7, #4
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	490a      	ldr	r1, [pc, #40]	; (800f314 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 800f2ec:	f000 fcb2 	bl	800fc54 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d007      	beq.n	800f306 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 800f2f6:	4b08      	ldr	r3, [pc, #32]	; (800f318 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 800f2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	f3bf 8f6f 	isb	sy
    }
}
 800f306:	bf00      	nop
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	20000530 	.word	0x20000530
 800f314:	20000058 	.word	0x20000058
 800f318:	e000ed04 	.word	0xe000ed04

0800f31c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 800f320:	4b08      	ldr	r3, [pc, #32]	; (800f344 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2200      	movs	r2, #0
 800f326:	4908      	ldr	r1, [pc, #32]	; (800f348 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f328:	4618      	mov	r0, r3
 800f32a:	f000 fdb1 	bl	800fe90 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 800f32e:	4b05      	ldr	r3, [pc, #20]	; (800f344 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f04f 32ff 	mov.w	r2, #4294967295
 800f336:	4904      	ldr	r1, [pc, #16]	; (800f348 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f338:	4618      	mov	r0, r3
 800f33a:	f000 fda9 	bl	800fe90 <xQueueReceive>
}
 800f33e:	bf00      	nop
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	20000530 	.word	0x20000530
 800f348:	20000058 	.word	0x20000058

0800f34c <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d007      	beq.n	800f36a <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 800f35a:	f7fd f851 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 800f35e:	4603      	mov	r3, r0
 800f360:	2101      	movs	r1, #1
 800f362:	4618      	mov	r0, r3
 800f364:	f009 fb66 	bl	8018a34 <_ZN8touchgfx3HAL12setMCUActiveEb>
 800f368:	e006      	b.n	800f378 <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 800f36a:	f7fd f849 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 800f36e:	4603      	mov	r3, r0
 800f370:	2100      	movs	r1, #0
 800f372:	4618      	mov	r0, r3
 800f374:	f009 fb5e 	bl	8018a34 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 800f378:	2301      	movs	r3, #1
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}

0800f382 <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 800f382:	b480      	push	{r7}
 800f384:	b083      	sub	sp, #12
 800f386:	af00      	add	r7, sp, #0
 800f388:	6078      	str	r0, [r7, #4]
 800f38a:	6039      	str	r1, [r7, #0]
        while (1);
 800f38c:	e7fe      	b.n	800f38c <vApplicationStackOverflowHook+0xa>

0800f38e <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 800f38e:	b480      	push	{r7}
 800f390:	b083      	sub	sp, #12
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	6039      	str	r1, [r7, #0]
        while (1);
 800f398:	e7fe      	b.n	800f398 <vApplicationMallocFailedHook+0xa>
	...

0800f39c <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 800f39c:	b580      	push	{r7, lr}
 800f39e:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 800f3a0:	4902      	ldr	r1, [pc, #8]	; (800f3ac <vApplicationIdleHook+0x10>)
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	f001 fc86 	bl	8010cb4 <vTaskSetApplicationTaskTag>
    }
 800f3a8:	bf00      	nop
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	0800f34d 	.word	0x0800f34d

0800f3b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b085      	sub	sp, #20
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f3be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f3c2:	2b84      	cmp	r3, #132	; 0x84
 800f3c4:	d005      	beq.n	800f3d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f3c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	3303      	adds	r3, #3
 800f3d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3e6:	f3ef 8305 	mrs	r3, IPSR
 800f3ea:	607b      	str	r3, [r7, #4]
  return(result);
 800f3ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bf14      	ite	ne
 800f3f2:	2301      	movne	r3, #1
 800f3f4:	2300      	moveq	r3, #0
 800f3f6:	b2db      	uxtb	r3, r3
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f408:	f001 fa90 	bl	801092c <vTaskStartScheduler>
  
  return osOK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	bd80      	pop	{r7, pc}

0800f412 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f412:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f414:	b089      	sub	sp, #36	; 0x24
 800f416:	af04      	add	r7, sp, #16
 800f418:	6078      	str	r0, [r7, #4]
 800f41a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d020      	beq.n	800f466 <osThreadCreate+0x54>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	699b      	ldr	r3, [r3, #24]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01c      	beq.n	800f466 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	685c      	ldr	r4, [r3, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681d      	ldr	r5, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	691e      	ldr	r6, [r3, #16]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff ffb6 	bl	800f3b0 <makeFreeRtosPriority>
 800f444:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	695b      	ldr	r3, [r3, #20]
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f44e:	9202      	str	r2, [sp, #8]
 800f450:	9301      	str	r3, [sp, #4]
 800f452:	9100      	str	r1, [sp, #0]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	4632      	mov	r2, r6
 800f458:	4629      	mov	r1, r5
 800f45a:	4620      	mov	r0, r4
 800f45c:	f001 f8a1 	bl	80105a2 <xTaskCreateStatic>
 800f460:	4603      	mov	r3, r0
 800f462:	60fb      	str	r3, [r7, #12]
 800f464:	e01c      	b.n	800f4a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685c      	ldr	r4, [r3, #4]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f472:	b29e      	uxth	r6, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7ff ff98 	bl	800f3b0 <makeFreeRtosPriority>
 800f480:	4602      	mov	r2, r0
 800f482:	f107 030c 	add.w	r3, r7, #12
 800f486:	9301      	str	r3, [sp, #4]
 800f488:	9200      	str	r2, [sp, #0]
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	4632      	mov	r2, r6
 800f48e:	4629      	mov	r1, r5
 800f490:	4620      	mov	r0, r4
 800f492:	f001 f8df 	bl	8010654 <xTaskCreate>
 800f496:	4603      	mov	r3, r0
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d001      	beq.n	800f4a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f49c:	2300      	movs	r3, #0
 800f49e:	e000      	b.n	800f4a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3714      	adds	r7, #20
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b084      	sub	sp, #16
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <osDelay+0x16>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	e000      	b.n	800f4c2 <osDelay+0x18>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f001 f9fe 	bl	80108c4 <vTaskDelay>
  
  return osOK;
 800f4c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f4d2:	b590      	push	{r4, r7, lr}
 800f4d4:	b085      	sub	sp, #20
 800f4d6:	af02      	add	r7, sp, #8
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d012      	beq.n	800f50a <osMessageCreate+0x38>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00e      	beq.n	800f50a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6818      	ldr	r0, [r3, #0]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6859      	ldr	r1, [r3, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	689a      	ldr	r2, [r3, #8]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	68dc      	ldr	r4, [r3, #12]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	4623      	mov	r3, r4
 800f502:	f000 f9df 	bl	800f8c4 <xQueueGenericCreateStatic>
 800f506:	4603      	mov	r3, r0
 800f508:	e008      	b.n	800f51c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6818      	ldr	r0, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	4619      	mov	r1, r3
 800f516:	f000 fa47 	bl	800f9a8 <xQueueGenericCreate>
 800f51a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	bd90      	pop	{r4, r7, pc}

0800f524 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b086      	sub	sp, #24
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f530:	2300      	movs	r3, #0
 800f532:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d101      	bne.n	800f542 <osMessagePut+0x1e>
    ticks = 1;
 800f53e:	2301      	movs	r3, #1
 800f540:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f542:	f7ff ff4d 	bl	800f3e0 <inHandlerMode>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d018      	beq.n	800f57e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f54c:	f107 0210 	add.w	r2, r7, #16
 800f550:	f107 0108 	add.w	r1, r7, #8
 800f554:	2300      	movs	r3, #0
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f000 fb7c 	bl	800fc54 <xQueueGenericSendFromISR>
 800f55c:	4603      	mov	r3, r0
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d001      	beq.n	800f566 <osMessagePut+0x42>
      return osErrorOS;
 800f562:	23ff      	movs	r3, #255	; 0xff
 800f564:	e018      	b.n	800f598 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d014      	beq.n	800f596 <osMessagePut+0x72>
 800f56c:	4b0c      	ldr	r3, [pc, #48]	; (800f5a0 <osMessagePut+0x7c>)
 800f56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	e00b      	b.n	800f596 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f57e:	f107 0108 	add.w	r1, r7, #8
 800f582:	2300      	movs	r3, #0
 800f584:	697a      	ldr	r2, [r7, #20]
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f000 fa6a 	bl	800fa60 <xQueueGenericSend>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d001      	beq.n	800f596 <osMessagePut+0x72>
      return osErrorOS;
 800f592:	23ff      	movs	r3, #255	; 0xff
 800f594:	e000      	b.n	800f598 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f596:	2300      	movs	r3, #0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3718      	adds	r7, #24
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	e000ed04 	.word	0xe000ed04

0800f5a4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f5a4:	b590      	push	{r4, r7, lr}
 800f5a6:	b08b      	sub	sp, #44	; 0x2c
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d10a      	bne.n	800f5d4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f5be:	2380      	movs	r3, #128	; 0x80
 800f5c0:	617b      	str	r3, [r7, #20]
    return event;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	461c      	mov	r4, r3
 800f5c6:	f107 0314 	add.w	r3, r7, #20
 800f5ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f5ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f5d2:	e054      	b.n	800f67e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e2:	d103      	bne.n	800f5ec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e8:	627b      	str	r3, [r7, #36]	; 0x24
 800f5ea:	e009      	b.n	800f600 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d006      	beq.n	800f600 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800f5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d101      	bne.n	800f600 <osMessageGet+0x5c>
      ticks = 1;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f600:	f7ff feee 	bl	800f3e0 <inHandlerMode>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01c      	beq.n	800f644 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f60a:	f107 0220 	add.w	r2, r7, #32
 800f60e:	f107 0314 	add.w	r3, r7, #20
 800f612:	3304      	adds	r3, #4
 800f614:	4619      	mov	r1, r3
 800f616:	68b8      	ldr	r0, [r7, #8]
 800f618:	f000 fe1e 	bl	8010258 <xQueueReceiveFromISR>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d102      	bne.n	800f628 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f622:	2310      	movs	r3, #16
 800f624:	617b      	str	r3, [r7, #20]
 800f626:	e001      	b.n	800f62c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f628:	2300      	movs	r3, #0
 800f62a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d01d      	beq.n	800f66e <osMessageGet+0xca>
 800f632:	4b15      	ldr	r3, [pc, #84]	; (800f688 <osMessageGet+0xe4>)
 800f634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f638:	601a      	str	r2, [r3, #0]
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	e014      	b.n	800f66e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f644:	f107 0314 	add.w	r3, r7, #20
 800f648:	3304      	adds	r3, #4
 800f64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f64c:	4619      	mov	r1, r3
 800f64e:	68b8      	ldr	r0, [r7, #8]
 800f650:	f000 fc1e 	bl	800fe90 <xQueueReceive>
 800f654:	4603      	mov	r3, r0
 800f656:	2b01      	cmp	r3, #1
 800f658:	d102      	bne.n	800f660 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f65a:	2310      	movs	r3, #16
 800f65c:	617b      	str	r3, [r7, #20]
 800f65e:	e006      	b.n	800f66e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <osMessageGet+0xc6>
 800f666:	2300      	movs	r3, #0
 800f668:	e000      	b.n	800f66c <osMessageGet+0xc8>
 800f66a:	2340      	movs	r3, #64	; 0x40
 800f66c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	461c      	mov	r4, r3
 800f672:	f107 0314 	add.w	r3, r7, #20
 800f676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f67a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	372c      	adds	r7, #44	; 0x2c
 800f682:	46bd      	mov	sp, r7
 800f684:	bd90      	pop	{r4, r7, pc}
 800f686:	bf00      	nop
 800f688:	e000ed04 	.word	0xe000ed04

0800f68c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f103 0208 	add.w	r2, r3, #8
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f103 0208 	add.w	r2, r3, #8
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f103 0208 	add.w	r2, r3, #8
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f6da:	bf00      	nop
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b085      	sub	sp, #20
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	689a      	ldr	r2, [r3, #8]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	683a      	ldr	r2, [r7, #0]
 800f710:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	601a      	str	r2, [r3, #0]
}
 800f722:	bf00      	nop
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr

0800f72e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f72e:	b480      	push	{r7}
 800f730:	b085      	sub	sp, #20
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
 800f736:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f744:	d103      	bne.n	800f74e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	60fb      	str	r3, [r7, #12]
 800f74c:	e00c      	b.n	800f768 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	3308      	adds	r3, #8
 800f752:	60fb      	str	r3, [r7, #12]
 800f754:	e002      	b.n	800f75c <vListInsert+0x2e>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	685b      	ldr	r3, [r3, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	429a      	cmp	r2, r3
 800f766:	d2f6      	bcs.n	800f756 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	1c5a      	adds	r2, r3, #1
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	601a      	str	r2, [r3, #0]
}
 800f794:	bf00      	nop
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	691b      	ldr	r3, [r3, #16]
 800f7ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	6892      	ldr	r2, [r2, #8]
 800f7b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	6852      	ldr	r2, [r2, #4]
 800f7c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d103      	bne.n	800f7d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	689a      	ldr	r2, [r3, #8]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	1e5a      	subs	r2, r3, #1
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3714      	adds	r7, #20
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d109      	bne.n	800f81c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80c:	f383 8811 	msr	BASEPRI, r3
 800f810:	f3bf 8f6f 	isb	sy
 800f814:	f3bf 8f4f 	dsb	sy
 800f818:	60bb      	str	r3, [r7, #8]
 800f81a:	e7fe      	b.n	800f81a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f81c:	f002 f85e 	bl	80118dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f828:	68f9      	ldr	r1, [r7, #12]
 800f82a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f82c:	fb01 f303 	mul.w	r3, r1, r3
 800f830:	441a      	add	r2, r3
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f84c:	3b01      	subs	r3, #1
 800f84e:	68f9      	ldr	r1, [r7, #12]
 800f850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f852:	fb01 f303 	mul.w	r3, r1, r3
 800f856:	441a      	add	r2, r3
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	22ff      	movs	r2, #255	; 0xff
 800f860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	22ff      	movs	r2, #255	; 0xff
 800f868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d114      	bne.n	800f89c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	691b      	ldr	r3, [r3, #16]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d01a      	beq.n	800f8b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	3310      	adds	r3, #16
 800f87e:	4618      	mov	r0, r3
 800f880:	f001 fb06 	bl	8010e90 <xTaskRemoveFromEventList>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d012      	beq.n	800f8b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f88a:	4b0d      	ldr	r3, [pc, #52]	; (800f8c0 <xQueueGenericReset+0xcc>)
 800f88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	e009      	b.n	800f8b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	3310      	adds	r3, #16
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff fef3 	bl	800f68c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	3324      	adds	r3, #36	; 0x24
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7ff feee 	bl	800f68c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f8b0:	f002 f842 	bl	8011938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f8b4:	2301      	movs	r3, #1
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	e000ed04 	.word	0xe000ed04

0800f8c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b08e      	sub	sp, #56	; 0x38
 800f8c8:	af02      	add	r7, sp, #8
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
 800f8d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d109      	bne.n	800f8ec <xQueueGenericCreateStatic+0x28>
 800f8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8dc:	f383 8811 	msr	BASEPRI, r3
 800f8e0:	f3bf 8f6f 	isb	sy
 800f8e4:	f3bf 8f4f 	dsb	sy
 800f8e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8ea:	e7fe      	b.n	800f8ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d109      	bne.n	800f906 <xQueueGenericCreateStatic+0x42>
 800f8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f6:	f383 8811 	msr	BASEPRI, r3
 800f8fa:	f3bf 8f6f 	isb	sy
 800f8fe:	f3bf 8f4f 	dsb	sy
 800f902:	627b      	str	r3, [r7, #36]	; 0x24
 800f904:	e7fe      	b.n	800f904 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <xQueueGenericCreateStatic+0x4e>
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <xQueueGenericCreateStatic+0x52>
 800f912:	2301      	movs	r3, #1
 800f914:	e000      	b.n	800f918 <xQueueGenericCreateStatic+0x54>
 800f916:	2300      	movs	r3, #0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d109      	bne.n	800f930 <xQueueGenericCreateStatic+0x6c>
 800f91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f920:	f383 8811 	msr	BASEPRI, r3
 800f924:	f3bf 8f6f 	isb	sy
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	623b      	str	r3, [r7, #32]
 800f92e:	e7fe      	b.n	800f92e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d102      	bne.n	800f93c <xQueueGenericCreateStatic+0x78>
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d101      	bne.n	800f940 <xQueueGenericCreateStatic+0x7c>
 800f93c:	2301      	movs	r3, #1
 800f93e:	e000      	b.n	800f942 <xQueueGenericCreateStatic+0x7e>
 800f940:	2300      	movs	r3, #0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d109      	bne.n	800f95a <xQueueGenericCreateStatic+0x96>
 800f946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94a:	f383 8811 	msr	BASEPRI, r3
 800f94e:	f3bf 8f6f 	isb	sy
 800f952:	f3bf 8f4f 	dsb	sy
 800f956:	61fb      	str	r3, [r7, #28]
 800f958:	e7fe      	b.n	800f958 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f95a:	2348      	movs	r3, #72	; 0x48
 800f95c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	2b48      	cmp	r3, #72	; 0x48
 800f962:	d009      	beq.n	800f978 <xQueueGenericCreateStatic+0xb4>
 800f964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f968:	f383 8811 	msr	BASEPRI, r3
 800f96c:	f3bf 8f6f 	isb	sy
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	61bb      	str	r3, [r7, #24]
 800f976:	e7fe      	b.n	800f976 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00d      	beq.n	800f99e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	2201      	movs	r2, #1
 800f986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f98a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	4613      	mov	r3, r2
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	68b9      	ldr	r1, [r7, #8]
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 f842 	bl	800fa22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3730      	adds	r7, #48	; 0x30
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b08a      	sub	sp, #40	; 0x28
 800f9ac:	af02      	add	r7, sp, #8
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d109      	bne.n	800f9d0 <xQueueGenericCreate+0x28>
 800f9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c0:	f383 8811 	msr	BASEPRI, r3
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	613b      	str	r3, [r7, #16]
 800f9ce:	e7fe      	b.n	800f9ce <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d102      	bne.n	800f9dc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	61fb      	str	r3, [r7, #28]
 800f9da:	e004      	b.n	800f9e6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	fb02 f303 	mul.w	r3, r2, r3
 800f9e4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	3348      	adds	r3, #72	; 0x48
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f002 f890 	bl	8011b10 <pvPortMalloc>
 800f9f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d00f      	beq.n	800fa18 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	3348      	adds	r3, #72	; 0x48
 800f9fc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa06:	79fa      	ldrb	r2, [r7, #7]
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	697a      	ldr	r2, [r7, #20]
 800fa10:	68b9      	ldr	r1, [r7, #8]
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f000 f805 	bl	800fa22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800fa18:	69bb      	ldr	r3, [r7, #24]
	}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3720      	adds	r7, #32
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b084      	sub	sp, #16
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	60f8      	str	r0, [r7, #12]
 800fa2a:	60b9      	str	r1, [r7, #8]
 800fa2c:	607a      	str	r2, [r7, #4]
 800fa2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d103      	bne.n	800fa3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	69ba      	ldr	r2, [r7, #24]
 800fa3a:	601a      	str	r2, [r3, #0]
 800fa3c:	e002      	b.n	800fa44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fa50:	2101      	movs	r1, #1
 800fa52:	69b8      	ldr	r0, [r7, #24]
 800fa54:	f7ff fece 	bl	800f7f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fa58:	bf00      	nop
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08e      	sub	sp, #56	; 0x38
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
 800fa6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d109      	bne.n	800fa90 <xQueueGenericSend+0x30>
 800fa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa80:	f383 8811 	msr	BASEPRI, r3
 800fa84:	f3bf 8f6f 	isb	sy
 800fa88:	f3bf 8f4f 	dsb	sy
 800fa8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa8e:	e7fe      	b.n	800fa8e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d103      	bne.n	800fa9e <xQueueGenericSend+0x3e>
 800fa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d101      	bne.n	800faa2 <xQueueGenericSend+0x42>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	e000      	b.n	800faa4 <xQueueGenericSend+0x44>
 800faa2:	2300      	movs	r3, #0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d109      	bne.n	800fabc <xQueueGenericSend+0x5c>
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	627b      	str	r3, [r7, #36]	; 0x24
 800faba:	e7fe      	b.n	800faba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d103      	bne.n	800faca <xQueueGenericSend+0x6a>
 800fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d101      	bne.n	800face <xQueueGenericSend+0x6e>
 800faca:	2301      	movs	r3, #1
 800facc:	e000      	b.n	800fad0 <xQueueGenericSend+0x70>
 800face:	2300      	movs	r3, #0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d109      	bne.n	800fae8 <xQueueGenericSend+0x88>
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	623b      	str	r3, [r7, #32]
 800fae6:	e7fe      	b.n	800fae6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fae8:	f001 fb90 	bl	801120c <xTaskGetSchedulerState>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d102      	bne.n	800faf8 <xQueueGenericSend+0x98>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d101      	bne.n	800fafc <xQueueGenericSend+0x9c>
 800faf8:	2301      	movs	r3, #1
 800fafa:	e000      	b.n	800fafe <xQueueGenericSend+0x9e>
 800fafc:	2300      	movs	r3, #0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d109      	bne.n	800fb16 <xQueueGenericSend+0xb6>
 800fb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb06:	f383 8811 	msr	BASEPRI, r3
 800fb0a:	f3bf 8f6f 	isb	sy
 800fb0e:	f3bf 8f4f 	dsb	sy
 800fb12:	61fb      	str	r3, [r7, #28]
 800fb14:	e7fe      	b.n	800fb14 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb16:	f001 fee1 	bl	80118dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d302      	bcc.n	800fb2c <xQueueGenericSend+0xcc>
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d129      	bne.n	800fb80 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb2c:	683a      	ldr	r2, [r7, #0]
 800fb2e:	68b9      	ldr	r1, [r7, #8]
 800fb30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb32:	f000 fc26 	bl	8010382 <prvCopyDataToQueue>
 800fb36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d010      	beq.n	800fb62 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb42:	3324      	adds	r3, #36	; 0x24
 800fb44:	4618      	mov	r0, r3
 800fb46:	f001 f9a3 	bl	8010e90 <xTaskRemoveFromEventList>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d013      	beq.n	800fb78 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fb50:	4b3f      	ldr	r3, [pc, #252]	; (800fc50 <xQueueGenericSend+0x1f0>)
 800fb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb56:	601a      	str	r2, [r3, #0]
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	e00a      	b.n	800fb78 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d007      	beq.n	800fb78 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fb68:	4b39      	ldr	r3, [pc, #228]	; (800fc50 <xQueueGenericSend+0x1f0>)
 800fb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	f3bf 8f4f 	dsb	sy
 800fb74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fb78:	f001 fede 	bl	8011938 <vPortExitCritical>
				return pdPASS;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e063      	b.n	800fc48 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d103      	bne.n	800fb8e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb86:	f001 fed7 	bl	8011938 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e05c      	b.n	800fc48 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d106      	bne.n	800fba2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb94:	f107 0314 	add.w	r3, r7, #20
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f001 f9db 	bl	8010f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fba2:	f001 fec9 	bl	8011938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fba6:	f000 ff1f 	bl	80109e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbaa:	f001 fe97 	bl	80118dc <vPortEnterCritical>
 800fbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fbb4:	b25b      	sxtb	r3, r3
 800fbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbba:	d103      	bne.n	800fbc4 <xQueueGenericSend+0x164>
 800fbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbca:	b25b      	sxtb	r3, r3
 800fbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd0:	d103      	bne.n	800fbda <xQueueGenericSend+0x17a>
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbda:	f001 fead 	bl	8011938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbde:	1d3a      	adds	r2, r7, #4
 800fbe0:	f107 0314 	add.w	r3, r7, #20
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f001 f9ca 	bl	8010f80 <xTaskCheckForTimeOut>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d124      	bne.n	800fc3c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fbf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbf4:	f000 fcbd 	bl	8010572 <prvIsQueueFull>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d018      	beq.n	800fc30 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc00:	3310      	adds	r3, #16
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	4611      	mov	r1, r2
 800fc06:	4618      	mov	r0, r3
 800fc08:	f001 f91e 	bl	8010e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc0e:	f000 fc48 	bl	80104a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc12:	f000 fef7 	bl	8010a04 <xTaskResumeAll>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f47f af7c 	bne.w	800fb16 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800fc1e:	4b0c      	ldr	r3, [pc, #48]	; (800fc50 <xQueueGenericSend+0x1f0>)
 800fc20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	f3bf 8f6f 	isb	sy
 800fc2e:	e772      	b.n	800fb16 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fc30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc32:	f000 fc36 	bl	80104a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc36:	f000 fee5 	bl	8010a04 <xTaskResumeAll>
 800fc3a:	e76c      	b.n	800fb16 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fc3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc3e:	f000 fc30 	bl	80104a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc42:	f000 fedf 	bl	8010a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fc46:	2300      	movs	r3, #0
		}
	}
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3738      	adds	r7, #56	; 0x38
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	e000ed04 	.word	0xe000ed04

0800fc54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b08e      	sub	sp, #56	; 0x38
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
 800fc60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d109      	bne.n	800fc80 <xQueueGenericSendFromISR+0x2c>
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	627b      	str	r3, [r7, #36]	; 0x24
 800fc7e:	e7fe      	b.n	800fc7e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d103      	bne.n	800fc8e <xQueueGenericSendFromISR+0x3a>
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d101      	bne.n	800fc92 <xQueueGenericSendFromISR+0x3e>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e000      	b.n	800fc94 <xQueueGenericSendFromISR+0x40>
 800fc92:	2300      	movs	r3, #0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d109      	bne.n	800fcac <xQueueGenericSendFromISR+0x58>
 800fc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9c:	f383 8811 	msr	BASEPRI, r3
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	623b      	str	r3, [r7, #32]
 800fcaa:	e7fe      	b.n	800fcaa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d103      	bne.n	800fcba <xQueueGenericSendFromISR+0x66>
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d101      	bne.n	800fcbe <xQueueGenericSendFromISR+0x6a>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e000      	b.n	800fcc0 <xQueueGenericSendFromISR+0x6c>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d109      	bne.n	800fcd8 <xQueueGenericSendFromISR+0x84>
 800fcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	61fb      	str	r3, [r7, #28]
 800fcd6:	e7fe      	b.n	800fcd6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcd8:	f001 fedc 	bl	8011a94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fcdc:	f3ef 8211 	mrs	r2, BASEPRI
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	61ba      	str	r2, [r7, #24]
 800fcf2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fcf4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d302      	bcc.n	800fd0a <xQueueGenericSendFromISR+0xb6>
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	d12c      	bne.n	800fd64 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	68b9      	ldr	r1, [r7, #8]
 800fd18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd1a:	f000 fb32 	bl	8010382 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd1e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd26:	d112      	bne.n	800fd4e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d016      	beq.n	800fd5e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd32:	3324      	adds	r3, #36	; 0x24
 800fd34:	4618      	mov	r0, r3
 800fd36:	f001 f8ab 	bl	8010e90 <xTaskRemoveFromEventList>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d00e      	beq.n	800fd5e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00b      	beq.n	800fd5e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2201      	movs	r2, #1
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	e007      	b.n	800fd5e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd52:	3301      	adds	r3, #1
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	b25a      	sxtb	r2, r3
 800fd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fd5e:	2301      	movs	r3, #1
 800fd60:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fd62:	e001      	b.n	800fd68 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd64:	2300      	movs	r3, #0
 800fd66:	637b      	str	r3, [r7, #52]	; 0x34
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3738      	adds	r7, #56	; 0x38
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b08e      	sub	sp, #56	; 0x38
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d109      	bne.n	800fda4 <xQueueGiveFromISR+0x28>
	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	623b      	str	r3, [r7, #32]
 800fda2:	e7fe      	b.n	800fda2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d009      	beq.n	800fdc0 <xQueueGiveFromISR+0x44>
 800fdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb0:	f383 8811 	msr	BASEPRI, r3
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	61fb      	str	r3, [r7, #28]
 800fdbe:	e7fe      	b.n	800fdbe <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800fdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d103      	bne.n	800fdd0 <xQueueGiveFromISR+0x54>
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d101      	bne.n	800fdd4 <xQueueGiveFromISR+0x58>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e000      	b.n	800fdd6 <xQueueGiveFromISR+0x5a>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d109      	bne.n	800fdee <xQueueGiveFromISR+0x72>
 800fdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdde:	f383 8811 	msr	BASEPRI, r3
 800fde2:	f3bf 8f6f 	isb	sy
 800fde6:	f3bf 8f4f 	dsb	sy
 800fdea:	61bb      	str	r3, [r7, #24]
 800fdec:	e7fe      	b.n	800fdec <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdee:	f001 fe51 	bl	8011a94 <vPortValidateInterruptPriority>
	__asm volatile
 800fdf2:	f3ef 8211 	mrs	r2, BASEPRI
 800fdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	617a      	str	r2, [r7, #20]
 800fe08:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fe0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d22b      	bcs.n	800fe76 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe38:	d112      	bne.n	800fe60 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d016      	beq.n	800fe70 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe44:	3324      	adds	r3, #36	; 0x24
 800fe46:	4618      	mov	r0, r3
 800fe48:	f001 f822 	bl	8010e90 <xTaskRemoveFromEventList>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d00e      	beq.n	800fe70 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00b      	beq.n	800fe70 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	e007      	b.n	800fe70 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe64:	3301      	adds	r3, #1
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	b25a      	sxtb	r2, r3
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fe70:	2301      	movs	r3, #1
 800fe72:	637b      	str	r3, [r7, #52]	; 0x34
 800fe74:	e001      	b.n	800fe7a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe76:	2300      	movs	r3, #0
 800fe78:	637b      	str	r3, [r7, #52]	; 0x34
 800fe7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3738      	adds	r7, #56	; 0x38
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b08c      	sub	sp, #48	; 0x30
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d109      	bne.n	800febe <xQueueReceive+0x2e>
	__asm volatile
 800feaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feae:	f383 8811 	msr	BASEPRI, r3
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	f3bf 8f4f 	dsb	sy
 800feba:	623b      	str	r3, [r7, #32]
 800febc:	e7fe      	b.n	800febc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d103      	bne.n	800fecc <xQueueReceive+0x3c>
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d101      	bne.n	800fed0 <xQueueReceive+0x40>
 800fecc:	2301      	movs	r3, #1
 800fece:	e000      	b.n	800fed2 <xQueueReceive+0x42>
 800fed0:	2300      	movs	r3, #0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d109      	bne.n	800feea <xQueueReceive+0x5a>
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	f383 8811 	msr	BASEPRI, r3
 800fede:	f3bf 8f6f 	isb	sy
 800fee2:	f3bf 8f4f 	dsb	sy
 800fee6:	61fb      	str	r3, [r7, #28]
 800fee8:	e7fe      	b.n	800fee8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800feea:	f001 f98f 	bl	801120c <xTaskGetSchedulerState>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d102      	bne.n	800fefa <xQueueReceive+0x6a>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d101      	bne.n	800fefe <xQueueReceive+0x6e>
 800fefa:	2301      	movs	r3, #1
 800fefc:	e000      	b.n	800ff00 <xQueueReceive+0x70>
 800fefe:	2300      	movs	r3, #0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d109      	bne.n	800ff18 <xQueueReceive+0x88>
 800ff04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff08:	f383 8811 	msr	BASEPRI, r3
 800ff0c:	f3bf 8f6f 	isb	sy
 800ff10:	f3bf 8f4f 	dsb	sy
 800ff14:	61bb      	str	r3, [r7, #24]
 800ff16:	e7fe      	b.n	800ff16 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff18:	f001 fce0 	bl	80118dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d01f      	beq.n	800ff68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff28:	68b9      	ldr	r1, [r7, #8]
 800ff2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff2c:	f000 fa93 	bl	8010456 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff32:	1e5a      	subs	r2, r3, #1
 800ff34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3a:	691b      	ldr	r3, [r3, #16]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d00f      	beq.n	800ff60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff42:	3310      	adds	r3, #16
 800ff44:	4618      	mov	r0, r3
 800ff46:	f000 ffa3 	bl	8010e90 <xTaskRemoveFromEventList>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d007      	beq.n	800ff60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff50:	4b3c      	ldr	r3, [pc, #240]	; (8010044 <xQueueReceive+0x1b4>)
 800ff52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff56:	601a      	str	r2, [r3, #0]
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff60:	f001 fcea 	bl	8011938 <vPortExitCritical>
				return pdPASS;
 800ff64:	2301      	movs	r3, #1
 800ff66:	e069      	b.n	801003c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d103      	bne.n	800ff76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff6e:	f001 fce3 	bl	8011938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff72:	2300      	movs	r3, #0
 800ff74:	e062      	b.n	801003c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d106      	bne.n	800ff8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff7c:	f107 0310 	add.w	r3, r7, #16
 800ff80:	4618      	mov	r0, r3
 800ff82:	f000 ffe7 	bl	8010f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff86:	2301      	movs	r3, #1
 800ff88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff8a:	f001 fcd5 	bl	8011938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff8e:	f000 fd2b 	bl	80109e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff92:	f001 fca3 	bl	80118dc <vPortEnterCritical>
 800ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff9c:	b25b      	sxtb	r3, r3
 800ff9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa2:	d103      	bne.n	800ffac <xQueueReceive+0x11c>
 800ffa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ffb2:	b25b      	sxtb	r3, r3
 800ffb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffb8:	d103      	bne.n	800ffc2 <xQueueReceive+0x132>
 800ffba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ffc2:	f001 fcb9 	bl	8011938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffc6:	1d3a      	adds	r2, r7, #4
 800ffc8:	f107 0310 	add.w	r3, r7, #16
 800ffcc:	4611      	mov	r1, r2
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 ffd6 	bl	8010f80 <xTaskCheckForTimeOut>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d123      	bne.n	8010022 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffdc:	f000 fab3 	bl	8010546 <prvIsQueueEmpty>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d017      	beq.n	8010016 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe8:	3324      	adds	r3, #36	; 0x24
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	4611      	mov	r1, r2
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 ff2a 	bl	8010e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fff6:	f000 fa54 	bl	80104a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fffa:	f000 fd03 	bl	8010a04 <xTaskResumeAll>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d189      	bne.n	800ff18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010004:	4b0f      	ldr	r3, [pc, #60]	; (8010044 <xQueueReceive+0x1b4>)
 8010006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801000a:	601a      	str	r2, [r3, #0]
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	f3bf 8f6f 	isb	sy
 8010014:	e780      	b.n	800ff18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010018:	f000 fa43 	bl	80104a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801001c:	f000 fcf2 	bl	8010a04 <xTaskResumeAll>
 8010020:	e77a      	b.n	800ff18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010024:	f000 fa3d 	bl	80104a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010028:	f000 fcec 	bl	8010a04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801002c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801002e:	f000 fa8a 	bl	8010546 <prvIsQueueEmpty>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	f43f af6f 	beq.w	800ff18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801003a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801003c:	4618      	mov	r0, r3
 801003e:	3730      	adds	r7, #48	; 0x30
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	e000ed04 	.word	0xe000ed04

08010048 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b08e      	sub	sp, #56	; 0x38
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010052:	2300      	movs	r3, #0
 8010054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801005a:	2300      	movs	r3, #0
 801005c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801005e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010060:	2b00      	cmp	r3, #0
 8010062:	d109      	bne.n	8010078 <xQueueSemaphoreTake+0x30>
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	623b      	str	r3, [r7, #32]
 8010076:	e7fe      	b.n	8010076 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801007c:	2b00      	cmp	r3, #0
 801007e:	d009      	beq.n	8010094 <xQueueSemaphoreTake+0x4c>
 8010080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	61fb      	str	r3, [r7, #28]
 8010092:	e7fe      	b.n	8010092 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010094:	f001 f8ba 	bl	801120c <xTaskGetSchedulerState>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d102      	bne.n	80100a4 <xQueueSemaphoreTake+0x5c>
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d101      	bne.n	80100a8 <xQueueSemaphoreTake+0x60>
 80100a4:	2301      	movs	r3, #1
 80100a6:	e000      	b.n	80100aa <xQueueSemaphoreTake+0x62>
 80100a8:	2300      	movs	r3, #0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d109      	bne.n	80100c2 <xQueueSemaphoreTake+0x7a>
 80100ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b2:	f383 8811 	msr	BASEPRI, r3
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	61bb      	str	r3, [r7, #24]
 80100c0:	e7fe      	b.n	80100c0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80100c2:	f001 fc0b 	bl	80118dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d024      	beq.n	801011c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80100d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d4:	1e5a      	subs	r2, r3, #1
 80100d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d104      	bne.n	80100ec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80100e2:	f001 fa59 	bl	8011598 <pvTaskIncrementMutexHeldCount>
 80100e6:	4602      	mov	r2, r0
 80100e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ea:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ee:	691b      	ldr	r3, [r3, #16]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d00f      	beq.n	8010114 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f6:	3310      	adds	r3, #16
 80100f8:	4618      	mov	r0, r3
 80100fa:	f000 fec9 	bl	8010e90 <xTaskRemoveFromEventList>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d007      	beq.n	8010114 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010104:	4b53      	ldr	r3, [pc, #332]	; (8010254 <xQueueSemaphoreTake+0x20c>)
 8010106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010114:	f001 fc10 	bl	8011938 <vPortExitCritical>
				return pdPASS;
 8010118:	2301      	movs	r3, #1
 801011a:	e096      	b.n	801024a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d110      	bne.n	8010144 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010124:	2b00      	cmp	r3, #0
 8010126:	d009      	beq.n	801013c <xQueueSemaphoreTake+0xf4>
 8010128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012c:	f383 8811 	msr	BASEPRI, r3
 8010130:	f3bf 8f6f 	isb	sy
 8010134:	f3bf 8f4f 	dsb	sy
 8010138:	617b      	str	r3, [r7, #20]
 801013a:	e7fe      	b.n	801013a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801013c:	f001 fbfc 	bl	8011938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010140:	2300      	movs	r3, #0
 8010142:	e082      	b.n	801024a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801014a:	f107 030c 	add.w	r3, r7, #12
 801014e:	4618      	mov	r0, r3
 8010150:	f000 ff00 	bl	8010f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010154:	2301      	movs	r3, #1
 8010156:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010158:	f001 fbee 	bl	8011938 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801015c:	f000 fc44 	bl	80109e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010160:	f001 fbbc 	bl	80118dc <vPortEnterCritical>
 8010164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801016a:	b25b      	sxtb	r3, r3
 801016c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010170:	d103      	bne.n	801017a <xQueueSemaphoreTake+0x132>
 8010172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010174:	2200      	movs	r2, #0
 8010176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801017a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010180:	b25b      	sxtb	r3, r3
 8010182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010186:	d103      	bne.n	8010190 <xQueueSemaphoreTake+0x148>
 8010188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018a:	2200      	movs	r2, #0
 801018c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010190:	f001 fbd2 	bl	8011938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010194:	463a      	mov	r2, r7
 8010196:	f107 030c 	add.w	r3, r7, #12
 801019a:	4611      	mov	r1, r2
 801019c:	4618      	mov	r0, r3
 801019e:	f000 feef 	bl	8010f80 <xTaskCheckForTimeOut>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d132      	bne.n	801020e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101aa:	f000 f9cc 	bl	8010546 <prvIsQueueEmpty>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d026      	beq.n	8010202 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d109      	bne.n	80101d0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80101bc:	f001 fb8e 	bl	80118dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80101c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f001 f83f 	bl	8011248 <xTaskPriorityInherit>
 80101ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80101cc:	f001 fbb4 	bl	8011938 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80101d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d2:	3324      	adds	r3, #36	; 0x24
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	4611      	mov	r1, r2
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 fe35 	bl	8010e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80101de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101e0:	f000 f95f 	bl	80104a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80101e4:	f000 fc0e 	bl	8010a04 <xTaskResumeAll>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f47f af69 	bne.w	80100c2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80101f0:	4b18      	ldr	r3, [pc, #96]	; (8010254 <xQueueSemaphoreTake+0x20c>)
 80101f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	f3bf 8f4f 	dsb	sy
 80101fc:	f3bf 8f6f 	isb	sy
 8010200:	e75f      	b.n	80100c2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010204:	f000 f94d 	bl	80104a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010208:	f000 fbfc 	bl	8010a04 <xTaskResumeAll>
 801020c:	e759      	b.n	80100c2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801020e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010210:	f000 f947 	bl	80104a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010214:	f000 fbf6 	bl	8010a04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801021a:	f000 f994 	bl	8010546 <prvIsQueueEmpty>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	f43f af4e 	beq.w	80100c2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00d      	beq.n	8010248 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801022c:	f001 fb56 	bl	80118dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010232:	f000 f88e 	bl	8010352 <prvGetDisinheritPriorityAfterTimeout>
 8010236:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801023e:	4618      	mov	r0, r3
 8010240:	f001 f90c 	bl	801145c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010244:	f001 fb78 	bl	8011938 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010248:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801024a:	4618      	mov	r0, r3
 801024c:	3738      	adds	r7, #56	; 0x38
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	e000ed04 	.word	0xe000ed04

08010258 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08e      	sub	sp, #56	; 0x38
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026a:	2b00      	cmp	r3, #0
 801026c:	d109      	bne.n	8010282 <xQueueReceiveFromISR+0x2a>
 801026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	623b      	str	r3, [r7, #32]
 8010280:	e7fe      	b.n	8010280 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d103      	bne.n	8010290 <xQueueReceiveFromISR+0x38>
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801028c:	2b00      	cmp	r3, #0
 801028e:	d101      	bne.n	8010294 <xQueueReceiveFromISR+0x3c>
 8010290:	2301      	movs	r3, #1
 8010292:	e000      	b.n	8010296 <xQueueReceiveFromISR+0x3e>
 8010294:	2300      	movs	r3, #0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d109      	bne.n	80102ae <xQueueReceiveFromISR+0x56>
 801029a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029e:	f383 8811 	msr	BASEPRI, r3
 80102a2:	f3bf 8f6f 	isb	sy
 80102a6:	f3bf 8f4f 	dsb	sy
 80102aa:	61fb      	str	r3, [r7, #28]
 80102ac:	e7fe      	b.n	80102ac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102ae:	f001 fbf1 	bl	8011a94 <vPortValidateInterruptPriority>
	__asm volatile
 80102b2:	f3ef 8211 	mrs	r2, BASEPRI
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	61ba      	str	r2, [r7, #24]
 80102c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80102ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d02f      	beq.n	801033a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80102da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102e4:	68b9      	ldr	r1, [r7, #8]
 80102e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102e8:	f000 f8b5 	bl	8010456 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ee:	1e5a      	subs	r2, r3, #1
 80102f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80102f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80102f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fc:	d112      	bne.n	8010324 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	691b      	ldr	r3, [r3, #16]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d016      	beq.n	8010334 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010308:	3310      	adds	r3, #16
 801030a:	4618      	mov	r0, r3
 801030c:	f000 fdc0 	bl	8010e90 <xTaskRemoveFromEventList>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00e      	beq.n	8010334 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00b      	beq.n	8010334 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	e007      	b.n	8010334 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010328:	3301      	adds	r3, #1
 801032a:	b2db      	uxtb	r3, r3
 801032c:	b25a      	sxtb	r2, r3
 801032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010334:	2301      	movs	r3, #1
 8010336:	637b      	str	r3, [r7, #52]	; 0x34
 8010338:	e001      	b.n	801033e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801033a:	2300      	movs	r3, #0
 801033c:	637b      	str	r3, [r7, #52]	; 0x34
 801033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010340:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801034a:	4618      	mov	r0, r3
 801034c:	3738      	adds	r7, #56	; 0x38
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010352:	b480      	push	{r7}
 8010354:	b085      	sub	sp, #20
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035e:	2b00      	cmp	r3, #0
 8010360:	d006      	beq.n	8010370 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f1c3 0307 	rsb	r3, r3, #7
 801036c:	60fb      	str	r3, [r7, #12]
 801036e:	e001      	b.n	8010374 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010370:	2300      	movs	r3, #0
 8010372:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010374:	68fb      	ldr	r3, [r7, #12]
	}
 8010376:	4618      	mov	r0, r3
 8010378:	3714      	adds	r7, #20
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr

08010382 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b086      	sub	sp, #24
 8010386:	af00      	add	r7, sp, #0
 8010388:	60f8      	str	r0, [r7, #12]
 801038a:	60b9      	str	r1, [r7, #8]
 801038c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801038e:	2300      	movs	r3, #0
 8010390:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010396:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801039c:	2b00      	cmp	r3, #0
 801039e:	d10d      	bne.n	80103bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d14d      	bne.n	8010444 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	4618      	mov	r0, r3
 80103ae:	f000 ffd1 	bl	8011354 <xTaskPriorityDisinherit>
 80103b2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	605a      	str	r2, [r3, #4]
 80103ba:	e043      	b.n	8010444 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d119      	bne.n	80103f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6898      	ldr	r0, [r3, #8]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ca:	461a      	mov	r2, r3
 80103cc:	68b9      	ldr	r1, [r7, #8]
 80103ce:	f00f fa2b 	bl	801f828 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	689a      	ldr	r2, [r3, #8]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103da:	441a      	add	r2, r3
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	689a      	ldr	r2, [r3, #8]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d32b      	bcc.n	8010444 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	609a      	str	r2, [r3, #8]
 80103f4:	e026      	b.n	8010444 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	68d8      	ldr	r0, [r3, #12]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103fe:	461a      	mov	r2, r3
 8010400:	68b9      	ldr	r1, [r7, #8]
 8010402:	f00f fa11 	bl	801f828 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	68da      	ldr	r2, [r3, #12]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801040e:	425b      	negs	r3, r3
 8010410:	441a      	add	r2, r3
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	68da      	ldr	r2, [r3, #12]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	429a      	cmp	r2, r3
 8010420:	d207      	bcs.n	8010432 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	685a      	ldr	r2, [r3, #4]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801042a:	425b      	negs	r3, r3
 801042c:	441a      	add	r2, r3
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2b02      	cmp	r3, #2
 8010436:	d105      	bne.n	8010444 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d002      	beq.n	8010444 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	3b01      	subs	r3, #1
 8010442:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	1c5a      	adds	r2, r3, #1
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801044c:	697b      	ldr	r3, [r7, #20]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3718      	adds	r7, #24
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}

08010456 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b082      	sub	sp, #8
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010464:	2b00      	cmp	r3, #0
 8010466:	d018      	beq.n	801049a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	68da      	ldr	r2, [r3, #12]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010470:	441a      	add	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	68da      	ldr	r2, [r3, #12]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	429a      	cmp	r2, r3
 8010480:	d303      	bcc.n	801048a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	68d9      	ldr	r1, [r3, #12]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010492:	461a      	mov	r2, r3
 8010494:	6838      	ldr	r0, [r7, #0]
 8010496:	f00f f9c7 	bl	801f828 <memcpy>
	}
}
 801049a:	bf00      	nop
 801049c:	3708      	adds	r7, #8
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b084      	sub	sp, #16
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80104aa:	f001 fa17 	bl	80118dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80104b6:	e011      	b.n	80104dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d012      	beq.n	80104e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3324      	adds	r3, #36	; 0x24
 80104c4:	4618      	mov	r0, r3
 80104c6:	f000 fce3 	bl	8010e90 <xTaskRemoveFromEventList>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80104d0:	f000 fdb6 	bl	8011040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
 80104d6:	3b01      	subs	r3, #1
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80104dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	dce9      	bgt.n	80104b8 <prvUnlockQueue+0x16>
 80104e4:	e000      	b.n	80104e8 <prvUnlockQueue+0x46>
					break;
 80104e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	22ff      	movs	r2, #255	; 0xff
 80104ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80104f0:	f001 fa22 	bl	8011938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80104f4:	f001 f9f2 	bl	80118dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010500:	e011      	b.n	8010526 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	691b      	ldr	r3, [r3, #16]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d012      	beq.n	8010530 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	3310      	adds	r3, #16
 801050e:	4618      	mov	r0, r3
 8010510:	f000 fcbe 	bl	8010e90 <xTaskRemoveFromEventList>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801051a:	f000 fd91 	bl	8011040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801051e:	7bbb      	ldrb	r3, [r7, #14]
 8010520:	3b01      	subs	r3, #1
 8010522:	b2db      	uxtb	r3, r3
 8010524:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801052a:	2b00      	cmp	r3, #0
 801052c:	dce9      	bgt.n	8010502 <prvUnlockQueue+0x60>
 801052e:	e000      	b.n	8010532 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010530:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	22ff      	movs	r2, #255	; 0xff
 8010536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801053a:	f001 f9fd 	bl	8011938 <vPortExitCritical>
}
 801053e:	bf00      	nop
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b084      	sub	sp, #16
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801054e:	f001 f9c5 	bl	80118dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010556:	2b00      	cmp	r3, #0
 8010558:	d102      	bne.n	8010560 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801055a:	2301      	movs	r3, #1
 801055c:	60fb      	str	r3, [r7, #12]
 801055e:	e001      	b.n	8010564 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010560:	2300      	movs	r3, #0
 8010562:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010564:	f001 f9e8 	bl	8011938 <vPortExitCritical>

	return xReturn;
 8010568:	68fb      	ldr	r3, [r7, #12]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b084      	sub	sp, #16
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801057a:	f001 f9af 	bl	80118dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010586:	429a      	cmp	r2, r3
 8010588:	d102      	bne.n	8010590 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801058a:	2301      	movs	r3, #1
 801058c:	60fb      	str	r3, [r7, #12]
 801058e:	e001      	b.n	8010594 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010590:	2300      	movs	r3, #0
 8010592:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010594:	f001 f9d0 	bl	8011938 <vPortExitCritical>

	return xReturn;
 8010598:	68fb      	ldr	r3, [r7, #12]
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b08e      	sub	sp, #56	; 0x38
 80105a6:	af04      	add	r7, sp, #16
 80105a8:	60f8      	str	r0, [r7, #12]
 80105aa:	60b9      	str	r1, [r7, #8]
 80105ac:	607a      	str	r2, [r7, #4]
 80105ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80105b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d109      	bne.n	80105ca <xTaskCreateStatic+0x28>
	__asm volatile
 80105b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	623b      	str	r3, [r7, #32]
 80105c8:	e7fe      	b.n	80105c8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80105ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d109      	bne.n	80105e4 <xTaskCreateStatic+0x42>
 80105d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	61fb      	str	r3, [r7, #28]
 80105e2:	e7fe      	b.n	80105e2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80105e4:	2358      	movs	r3, #88	; 0x58
 80105e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	2b58      	cmp	r3, #88	; 0x58
 80105ec:	d009      	beq.n	8010602 <xTaskCreateStatic+0x60>
 80105ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f2:	f383 8811 	msr	BASEPRI, r3
 80105f6:	f3bf 8f6f 	isb	sy
 80105fa:	f3bf 8f4f 	dsb	sy
 80105fe:	61bb      	str	r3, [r7, #24]
 8010600:	e7fe      	b.n	8010600 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010604:	2b00      	cmp	r3, #0
 8010606:	d01e      	beq.n	8010646 <xTaskCreateStatic+0xa4>
 8010608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060a:	2b00      	cmp	r3, #0
 801060c:	d01b      	beq.n	8010646 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801060e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010610:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010616:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061a:	2202      	movs	r2, #2
 801061c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010620:	2300      	movs	r3, #0
 8010622:	9303      	str	r3, [sp, #12]
 8010624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010626:	9302      	str	r3, [sp, #8]
 8010628:	f107 0314 	add.w	r3, r7, #20
 801062c:	9301      	str	r3, [sp, #4]
 801062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	68b9      	ldr	r1, [r7, #8]
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f000 f850 	bl	80106de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801063e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010640:	f000 f8d6 	bl	80107f0 <prvAddNewTaskToReadyList>
 8010644:	e001      	b.n	801064a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8010646:	2300      	movs	r3, #0
 8010648:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801064a:	697b      	ldr	r3, [r7, #20]
	}
 801064c:	4618      	mov	r0, r3
 801064e:	3728      	adds	r7, #40	; 0x28
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010654:	b580      	push	{r7, lr}
 8010656:	b08c      	sub	sp, #48	; 0x30
 8010658:	af04      	add	r7, sp, #16
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	603b      	str	r3, [r7, #0]
 8010660:	4613      	mov	r3, r2
 8010662:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010664:	88fb      	ldrh	r3, [r7, #6]
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	4618      	mov	r0, r3
 801066a:	f001 fa51 	bl	8011b10 <pvPortMalloc>
 801066e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00e      	beq.n	8010694 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010676:	2058      	movs	r0, #88	; 0x58
 8010678:	f001 fa4a 	bl	8011b10 <pvPortMalloc>
 801067c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d003      	beq.n	801068c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	631a      	str	r2, [r3, #48]	; 0x30
 801068a:	e005      	b.n	8010698 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801068c:	6978      	ldr	r0, [r7, #20]
 801068e:	f001 fb05 	bl	8011c9c <vPortFree>
 8010692:	e001      	b.n	8010698 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010694:	2300      	movs	r3, #0
 8010696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d017      	beq.n	80106ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106a6:	88fa      	ldrh	r2, [r7, #6]
 80106a8:	2300      	movs	r3, #0
 80106aa:	9303      	str	r3, [sp, #12]
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b2:	9301      	str	r3, [sp, #4]
 80106b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b6:	9300      	str	r3, [sp, #0]
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	68b9      	ldr	r1, [r7, #8]
 80106bc:	68f8      	ldr	r0, [r7, #12]
 80106be:	f000 f80e 	bl	80106de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80106c2:	69f8      	ldr	r0, [r7, #28]
 80106c4:	f000 f894 	bl	80107f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80106c8:	2301      	movs	r3, #1
 80106ca:	61bb      	str	r3, [r7, #24]
 80106cc:	e002      	b.n	80106d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80106ce:	f04f 33ff 	mov.w	r3, #4294967295
 80106d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80106d4:	69bb      	ldr	r3, [r7, #24]
	}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3720      	adds	r7, #32
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b088      	sub	sp, #32
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	60f8      	str	r0, [r7, #12]
 80106e6:	60b9      	str	r1, [r7, #8]
 80106e8:	607a      	str	r2, [r7, #4]
 80106ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80106ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	461a      	mov	r2, r3
 80106f6:	21a5      	movs	r1, #165	; 0xa5
 80106f8:	f00f f8a1 	bl	801f83e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80106fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010706:	3b01      	subs	r3, #1
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	4413      	add	r3, r2
 801070c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	f023 0307 	bic.w	r3, r3, #7
 8010714:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	f003 0307 	and.w	r3, r3, #7
 801071c:	2b00      	cmp	r3, #0
 801071e:	d009      	beq.n	8010734 <prvInitialiseNewTask+0x56>
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	617b      	str	r3, [r7, #20]
 8010732:	e7fe      	b.n	8010732 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010734:	2300      	movs	r3, #0
 8010736:	61fb      	str	r3, [r7, #28]
 8010738:	e012      	b.n	8010760 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	4413      	add	r3, r2
 8010740:	7819      	ldrb	r1, [r3, #0]
 8010742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	4413      	add	r3, r2
 8010748:	3334      	adds	r3, #52	; 0x34
 801074a:	460a      	mov	r2, r1
 801074c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	4413      	add	r3, r2
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d006      	beq.n	8010768 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801075a:	69fb      	ldr	r3, [r7, #28]
 801075c:	3301      	adds	r3, #1
 801075e:	61fb      	str	r3, [r7, #28]
 8010760:	69fb      	ldr	r3, [r7, #28]
 8010762:	2b0f      	cmp	r3, #15
 8010764:	d9e9      	bls.n	801073a <prvInitialiseNewTask+0x5c>
 8010766:	e000      	b.n	801076a <prvInitialiseNewTask+0x8c>
		{
			break;
 8010768:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801076a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076c:	2200      	movs	r2, #0
 801076e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010774:	2b06      	cmp	r3, #6
 8010776:	d901      	bls.n	801077c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010778:	2306      	movs	r3, #6
 801077a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801077c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010786:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078a:	2200      	movs	r2, #0
 801078c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	3304      	adds	r3, #4
 8010792:	4618      	mov	r0, r3
 8010794:	f7fe ff9a 	bl	800f6cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079a:	3318      	adds	r3, #24
 801079c:	4618      	mov	r0, r3
 801079e:	f7fe ff95 	bl	800f6cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107aa:	f1c3 0207 	rsb	r2, r3, #7
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80107b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80107b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ba:	2200      	movs	r2, #0
 80107bc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80107be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c0:	2200      	movs	r2, #0
 80107c2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80107cc:	683a      	ldr	r2, [r7, #0]
 80107ce:	68f9      	ldr	r1, [r7, #12]
 80107d0:	69b8      	ldr	r0, [r7, #24]
 80107d2:	f000 ff5b 	bl	801168c <pxPortInitialiseStack>
 80107d6:	4602      	mov	r2, r0
 80107d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80107dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80107e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80107e8:	bf00      	nop
 80107ea:	3720      	adds	r7, #32
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80107f8:	f001 f870 	bl	80118dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80107fc:	4b2a      	ldr	r3, [pc, #168]	; (80108a8 <prvAddNewTaskToReadyList+0xb8>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	3301      	adds	r3, #1
 8010802:	4a29      	ldr	r2, [pc, #164]	; (80108a8 <prvAddNewTaskToReadyList+0xb8>)
 8010804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010806:	4b29      	ldr	r3, [pc, #164]	; (80108ac <prvAddNewTaskToReadyList+0xbc>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d109      	bne.n	8010822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801080e:	4a27      	ldr	r2, [pc, #156]	; (80108ac <prvAddNewTaskToReadyList+0xbc>)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010814:	4b24      	ldr	r3, [pc, #144]	; (80108a8 <prvAddNewTaskToReadyList+0xb8>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d110      	bne.n	801083e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801081c:	f000 fc36 	bl	801108c <prvInitialiseTaskLists>
 8010820:	e00d      	b.n	801083e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010822:	4b23      	ldr	r3, [pc, #140]	; (80108b0 <prvAddNewTaskToReadyList+0xc0>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d109      	bne.n	801083e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801082a:	4b20      	ldr	r3, [pc, #128]	; (80108ac <prvAddNewTaskToReadyList+0xbc>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010834:	429a      	cmp	r2, r3
 8010836:	d802      	bhi.n	801083e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010838:	4a1c      	ldr	r2, [pc, #112]	; (80108ac <prvAddNewTaskToReadyList+0xbc>)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801083e:	4b1d      	ldr	r3, [pc, #116]	; (80108b4 <prvAddNewTaskToReadyList+0xc4>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	3301      	adds	r3, #1
 8010844:	4a1b      	ldr	r2, [pc, #108]	; (80108b4 <prvAddNewTaskToReadyList+0xc4>)
 8010846:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084c:	2201      	movs	r2, #1
 801084e:	409a      	lsls	r2, r3
 8010850:	4b19      	ldr	r3, [pc, #100]	; (80108b8 <prvAddNewTaskToReadyList+0xc8>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4313      	orrs	r3, r2
 8010856:	4a18      	ldr	r2, [pc, #96]	; (80108b8 <prvAddNewTaskToReadyList+0xc8>)
 8010858:	6013      	str	r3, [r2, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801085e:	4613      	mov	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4413      	add	r3, r2
 8010864:	009b      	lsls	r3, r3, #2
 8010866:	4a15      	ldr	r2, [pc, #84]	; (80108bc <prvAddNewTaskToReadyList+0xcc>)
 8010868:	441a      	add	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	3304      	adds	r3, #4
 801086e:	4619      	mov	r1, r3
 8010870:	4610      	mov	r0, r2
 8010872:	f7fe ff38 	bl	800f6e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010876:	f001 f85f 	bl	8011938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801087a:	4b0d      	ldr	r3, [pc, #52]	; (80108b0 <prvAddNewTaskToReadyList+0xc0>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00e      	beq.n	80108a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010882:	4b0a      	ldr	r3, [pc, #40]	; (80108ac <prvAddNewTaskToReadyList+0xbc>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801088c:	429a      	cmp	r2, r3
 801088e:	d207      	bcs.n	80108a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010890:	4b0b      	ldr	r3, [pc, #44]	; (80108c0 <prvAddNewTaskToReadyList+0xd0>)
 8010892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108a0:	bf00      	nop
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	20000634 	.word	0x20000634
 80108ac:	20000534 	.word	0x20000534
 80108b0:	20000640 	.word	0x20000640
 80108b4:	20000650 	.word	0x20000650
 80108b8:	2000063c 	.word	0x2000063c
 80108bc:	20000538 	.word	0x20000538
 80108c0:	e000ed04 	.word	0xe000ed04

080108c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80108cc:	2300      	movs	r3, #0
 80108ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d016      	beq.n	8010904 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80108d6:	4b13      	ldr	r3, [pc, #76]	; (8010924 <vTaskDelay+0x60>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d009      	beq.n	80108f2 <vTaskDelay+0x2e>
 80108de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e2:	f383 8811 	msr	BASEPRI, r3
 80108e6:	f3bf 8f6f 	isb	sy
 80108ea:	f3bf 8f4f 	dsb	sy
 80108ee:	60bb      	str	r3, [r7, #8]
 80108f0:	e7fe      	b.n	80108f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80108f2:	f000 f879 	bl	80109e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80108f6:	2100      	movs	r1, #0
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 fe61 	bl	80115c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80108fe:	f000 f881 	bl	8010a04 <xTaskResumeAll>
 8010902:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d107      	bne.n	801091a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801090a:	4b07      	ldr	r3, [pc, #28]	; (8010928 <vTaskDelay+0x64>)
 801090c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010910:	601a      	str	r2, [r3, #0]
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801091a:	bf00      	nop
 801091c:	3710      	adds	r7, #16
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	2000065c 	.word	0x2000065c
 8010928:	e000ed04 	.word	0xe000ed04

0801092c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08a      	sub	sp, #40	; 0x28
 8010930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010932:	2300      	movs	r3, #0
 8010934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801093a:	463a      	mov	r2, r7
 801093c:	1d39      	adds	r1, r7, #4
 801093e:	f107 0308 	add.w	r3, r7, #8
 8010942:	4618      	mov	r0, r3
 8010944:	f7ef fe2c 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010948:	6839      	ldr	r1, [r7, #0]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68ba      	ldr	r2, [r7, #8]
 801094e:	9202      	str	r2, [sp, #8]
 8010950:	9301      	str	r3, [sp, #4]
 8010952:	2300      	movs	r3, #0
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	2300      	movs	r3, #0
 8010958:	460a      	mov	r2, r1
 801095a:	491d      	ldr	r1, [pc, #116]	; (80109d0 <vTaskStartScheduler+0xa4>)
 801095c:	481d      	ldr	r0, [pc, #116]	; (80109d4 <vTaskStartScheduler+0xa8>)
 801095e:	f7ff fe20 	bl	80105a2 <xTaskCreateStatic>
 8010962:	4602      	mov	r2, r0
 8010964:	4b1c      	ldr	r3, [pc, #112]	; (80109d8 <vTaskStartScheduler+0xac>)
 8010966:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010968:	4b1b      	ldr	r3, [pc, #108]	; (80109d8 <vTaskStartScheduler+0xac>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010970:	2301      	movs	r3, #1
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	e001      	b.n	801097a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010976:	2300      	movs	r3, #0
 8010978:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d115      	bne.n	80109ac <vTaskStartScheduler+0x80>
 8010980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010984:	f383 8811 	msr	BASEPRI, r3
 8010988:	f3bf 8f6f 	isb	sy
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010992:	4b12      	ldr	r3, [pc, #72]	; (80109dc <vTaskStartScheduler+0xb0>)
 8010994:	f04f 32ff 	mov.w	r2, #4294967295
 8010998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801099a:	4b11      	ldr	r3, [pc, #68]	; (80109e0 <vTaskStartScheduler+0xb4>)
 801099c:	2201      	movs	r2, #1
 801099e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80109a0:	4b10      	ldr	r3, [pc, #64]	; (80109e4 <vTaskStartScheduler+0xb8>)
 80109a2:	2200      	movs	r2, #0
 80109a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80109a6:	f000 fefb 	bl	80117a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80109aa:	e00d      	b.n	80109c8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b2:	d109      	bne.n	80109c8 <vTaskStartScheduler+0x9c>
 80109b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b8:	f383 8811 	msr	BASEPRI, r3
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	e7fe      	b.n	80109c6 <vTaskStartScheduler+0x9a>
}
 80109c8:	bf00      	nop
 80109ca:	3718      	adds	r7, #24
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	08020f18 	.word	0x08020f18
 80109d4:	08011059 	.word	0x08011059
 80109d8:	20000658 	.word	0x20000658
 80109dc:	20000654 	.word	0x20000654
 80109e0:	20000640 	.word	0x20000640
 80109e4:	20000638 	.word	0x20000638

080109e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80109e8:	b480      	push	{r7}
 80109ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80109ec:	4b04      	ldr	r3, [pc, #16]	; (8010a00 <vTaskSuspendAll+0x18>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	3301      	adds	r3, #1
 80109f2:	4a03      	ldr	r2, [pc, #12]	; (8010a00 <vTaskSuspendAll+0x18>)
 80109f4:	6013      	str	r3, [r2, #0]
}
 80109f6:	bf00      	nop
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr
 8010a00:	2000065c 	.word	0x2000065c

08010a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a12:	4b41      	ldr	r3, [pc, #260]	; (8010b18 <xTaskResumeAll+0x114>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d109      	bne.n	8010a2e <xTaskResumeAll+0x2a>
 8010a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	603b      	str	r3, [r7, #0]
 8010a2c:	e7fe      	b.n	8010a2c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a2e:	f000 ff55 	bl	80118dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a32:	4b39      	ldr	r3, [pc, #228]	; (8010b18 <xTaskResumeAll+0x114>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	3b01      	subs	r3, #1
 8010a38:	4a37      	ldr	r2, [pc, #220]	; (8010b18 <xTaskResumeAll+0x114>)
 8010a3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a3c:	4b36      	ldr	r3, [pc, #216]	; (8010b18 <xTaskResumeAll+0x114>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d161      	bne.n	8010b08 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010a44:	4b35      	ldr	r3, [pc, #212]	; (8010b1c <xTaskResumeAll+0x118>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d05d      	beq.n	8010b08 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a4c:	e02e      	b.n	8010aac <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010a4e:	4b34      	ldr	r3, [pc, #208]	; (8010b20 <xTaskResumeAll+0x11c>)
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	3318      	adds	r3, #24
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fe fea0 	bl	800f7a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	3304      	adds	r3, #4
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fe fe9b 	bl	800f7a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a6e:	2201      	movs	r2, #1
 8010a70:	409a      	lsls	r2, r3
 8010a72:	4b2c      	ldr	r3, [pc, #176]	; (8010b24 <xTaskResumeAll+0x120>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4313      	orrs	r3, r2
 8010a78:	4a2a      	ldr	r2, [pc, #168]	; (8010b24 <xTaskResumeAll+0x120>)
 8010a7a:	6013      	str	r3, [r2, #0]
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a80:	4613      	mov	r3, r2
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	4413      	add	r3, r2
 8010a86:	009b      	lsls	r3, r3, #2
 8010a88:	4a27      	ldr	r2, [pc, #156]	; (8010b28 <xTaskResumeAll+0x124>)
 8010a8a:	441a      	add	r2, r3
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	3304      	adds	r3, #4
 8010a90:	4619      	mov	r1, r3
 8010a92:	4610      	mov	r0, r2
 8010a94:	f7fe fe27 	bl	800f6e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a9c:	4b23      	ldr	r3, [pc, #140]	; (8010b2c <xTaskResumeAll+0x128>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d302      	bcc.n	8010aac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8010aa6:	4b22      	ldr	r3, [pc, #136]	; (8010b30 <xTaskResumeAll+0x12c>)
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010aac:	4b1c      	ldr	r3, [pc, #112]	; (8010b20 <xTaskResumeAll+0x11c>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1cc      	bne.n	8010a4e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010aba:	f000 fb81 	bl	80111c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010abe:	4b1d      	ldr	r3, [pc, #116]	; (8010b34 <xTaskResumeAll+0x130>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d010      	beq.n	8010aec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010aca:	f000 f837 	bl	8010b3c <xTaskIncrementTick>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d002      	beq.n	8010ada <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8010ad4:	4b16      	ldr	r3, [pc, #88]	; (8010b30 <xTaskResumeAll+0x12c>)
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	3b01      	subs	r3, #1
 8010ade:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1f1      	bne.n	8010aca <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8010ae6:	4b13      	ldr	r3, [pc, #76]	; (8010b34 <xTaskResumeAll+0x130>)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010aec:	4b10      	ldr	r3, [pc, #64]	; (8010b30 <xTaskResumeAll+0x12c>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d009      	beq.n	8010b08 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010af4:	2301      	movs	r3, #1
 8010af6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010af8:	4b0f      	ldr	r3, [pc, #60]	; (8010b38 <xTaskResumeAll+0x134>)
 8010afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010afe:	601a      	str	r2, [r3, #0]
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b08:	f000 ff16 	bl	8011938 <vPortExitCritical>

	return xAlreadyYielded;
 8010b0c:	68bb      	ldr	r3, [r7, #8]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	2000065c 	.word	0x2000065c
 8010b1c:	20000634 	.word	0x20000634
 8010b20:	200005f4 	.word	0x200005f4
 8010b24:	2000063c 	.word	0x2000063c
 8010b28:	20000538 	.word	0x20000538
 8010b2c:	20000534 	.word	0x20000534
 8010b30:	20000648 	.word	0x20000648
 8010b34:	20000644 	.word	0x20000644
 8010b38:	e000ed04 	.word	0xe000ed04

08010b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010b42:	2300      	movs	r3, #0
 8010b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b46:	4b50      	ldr	r3, [pc, #320]	; (8010c88 <xTaskIncrementTick+0x14c>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	f040 808c 	bne.w	8010c68 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010b50:	4b4e      	ldr	r3, [pc, #312]	; (8010c8c <xTaskIncrementTick+0x150>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	3301      	adds	r3, #1
 8010b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010b58:	4a4c      	ldr	r2, [pc, #304]	; (8010c8c <xTaskIncrementTick+0x150>)
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d11f      	bne.n	8010ba4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010b64:	4b4a      	ldr	r3, [pc, #296]	; (8010c90 <xTaskIncrementTick+0x154>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d009      	beq.n	8010b82 <xTaskIncrementTick+0x46>
 8010b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	603b      	str	r3, [r7, #0]
 8010b80:	e7fe      	b.n	8010b80 <xTaskIncrementTick+0x44>
 8010b82:	4b43      	ldr	r3, [pc, #268]	; (8010c90 <xTaskIncrementTick+0x154>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	60fb      	str	r3, [r7, #12]
 8010b88:	4b42      	ldr	r3, [pc, #264]	; (8010c94 <xTaskIncrementTick+0x158>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a40      	ldr	r2, [pc, #256]	; (8010c90 <xTaskIncrementTick+0x154>)
 8010b8e:	6013      	str	r3, [r2, #0]
 8010b90:	4a40      	ldr	r2, [pc, #256]	; (8010c94 <xTaskIncrementTick+0x158>)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6013      	str	r3, [r2, #0]
 8010b96:	4b40      	ldr	r3, [pc, #256]	; (8010c98 <xTaskIncrementTick+0x15c>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	4a3e      	ldr	r2, [pc, #248]	; (8010c98 <xTaskIncrementTick+0x15c>)
 8010b9e:	6013      	str	r3, [r2, #0]
 8010ba0:	f000 fb0e 	bl	80111c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ba4:	4b3d      	ldr	r3, [pc, #244]	; (8010c9c <xTaskIncrementTick+0x160>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	693a      	ldr	r2, [r7, #16]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d34d      	bcc.n	8010c4a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bae:	4b38      	ldr	r3, [pc, #224]	; (8010c90 <xTaskIncrementTick+0x154>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d101      	bne.n	8010bbc <xTaskIncrementTick+0x80>
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e000      	b.n	8010bbe <xTaskIncrementTick+0x82>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d004      	beq.n	8010bcc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bc2:	4b36      	ldr	r3, [pc, #216]	; (8010c9c <xTaskIncrementTick+0x160>)
 8010bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010bc8:	601a      	str	r2, [r3, #0]
					break;
 8010bca:	e03e      	b.n	8010c4a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010bcc:	4b30      	ldr	r3, [pc, #192]	; (8010c90 <xTaskIncrementTick+0x154>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d203      	bcs.n	8010bec <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010be4:	4a2d      	ldr	r2, [pc, #180]	; (8010c9c <xTaskIncrementTick+0x160>)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6013      	str	r3, [r2, #0]
						break;
 8010bea:	e02e      	b.n	8010c4a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	3304      	adds	r3, #4
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fe fdd5 	bl	800f7a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d004      	beq.n	8010c08 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	3318      	adds	r3, #24
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fe fdcc 	bl	800f7a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	409a      	lsls	r2, r3
 8010c10:	4b23      	ldr	r3, [pc, #140]	; (8010ca0 <xTaskIncrementTick+0x164>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4313      	orrs	r3, r2
 8010c16:	4a22      	ldr	r2, [pc, #136]	; (8010ca0 <xTaskIncrementTick+0x164>)
 8010c18:	6013      	str	r3, [r2, #0]
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c1e:	4613      	mov	r3, r2
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	4413      	add	r3, r2
 8010c24:	009b      	lsls	r3, r3, #2
 8010c26:	4a1f      	ldr	r2, [pc, #124]	; (8010ca4 <xTaskIncrementTick+0x168>)
 8010c28:	441a      	add	r2, r3
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	4619      	mov	r1, r3
 8010c30:	4610      	mov	r0, r2
 8010c32:	f7fe fd58 	bl	800f6e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c3a:	4b1b      	ldr	r3, [pc, #108]	; (8010ca8 <xTaskIncrementTick+0x16c>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d3b4      	bcc.n	8010bae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010c44:	2301      	movs	r3, #1
 8010c46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c48:	e7b1      	b.n	8010bae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010c4a:	4b17      	ldr	r3, [pc, #92]	; (8010ca8 <xTaskIncrementTick+0x16c>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c50:	4914      	ldr	r1, [pc, #80]	; (8010ca4 <xTaskIncrementTick+0x168>)
 8010c52:	4613      	mov	r3, r2
 8010c54:	009b      	lsls	r3, r3, #2
 8010c56:	4413      	add	r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	440b      	add	r3, r1
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d907      	bls.n	8010c72 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8010c62:	2301      	movs	r3, #1
 8010c64:	617b      	str	r3, [r7, #20]
 8010c66:	e004      	b.n	8010c72 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010c68:	4b10      	ldr	r3, [pc, #64]	; (8010cac <xTaskIncrementTick+0x170>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	4a0f      	ldr	r2, [pc, #60]	; (8010cac <xTaskIncrementTick+0x170>)
 8010c70:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010c72:	4b0f      	ldr	r3, [pc, #60]	; (8010cb0 <xTaskIncrementTick+0x174>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d001      	beq.n	8010c7e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010c7e:	697b      	ldr	r3, [r7, #20]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3718      	adds	r7, #24
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	2000065c 	.word	0x2000065c
 8010c8c:	20000638 	.word	0x20000638
 8010c90:	200005ec 	.word	0x200005ec
 8010c94:	200005f0 	.word	0x200005f0
 8010c98:	2000064c 	.word	0x2000064c
 8010c9c:	20000654 	.word	0x20000654
 8010ca0:	2000063c 	.word	0x2000063c
 8010ca4:	20000538 	.word	0x20000538
 8010ca8:	20000534 	.word	0x20000534
 8010cac:	20000644 	.word	0x20000644
 8010cb0:	20000648 	.word	0x20000648

08010cb4 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d103      	bne.n	8010ccc <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8010cc4:	4b08      	ldr	r3, [pc, #32]	; (8010ce8 <vTaskSetApplicationTaskTag+0x34>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	60fb      	str	r3, [r7, #12]
 8010cca:	e001      	b.n	8010cd0 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8010cd0:	f000 fe04 	bl	80118dc <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	683a      	ldr	r2, [r7, #0]
 8010cd8:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8010cda:	f000 fe2d 	bl	8011938 <vPortExitCritical>
	}
 8010cde:	bf00      	nop
 8010ce0:	3710      	adds	r7, #16
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20000534 	.word	0x20000534

08010cec <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d103      	bne.n	8010d04 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8010cfc:	4b0b      	ldr	r3, [pc, #44]	; (8010d2c <xTaskCallApplicationTaskHook+0x40>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	60fb      	str	r3, [r7, #12]
 8010d02:	e001      	b.n	8010d08 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d005      	beq.n	8010d1c <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d14:	6838      	ldr	r0, [r7, #0]
 8010d16:	4798      	blx	r3
 8010d18:	60b8      	str	r0, [r7, #8]
 8010d1a:	e001      	b.n	8010d20 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8010d20:	68bb      	ldr	r3, [r7, #8]
	}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	20000534 	.word	0x20000534

08010d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b088      	sub	sp, #32
 8010d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d36:	4b3f      	ldr	r3, [pc, #252]	; (8010e34 <vTaskSwitchContext+0x104>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d003      	beq.n	8010d46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010d3e:	4b3e      	ldr	r3, [pc, #248]	; (8010e38 <vTaskSwitchContext+0x108>)
 8010d40:	2201      	movs	r2, #1
 8010d42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010d44:	e071      	b.n	8010e2a <vTaskSwitchContext+0xfa>
		xYieldPending = pdFALSE;
 8010d46:	4b3c      	ldr	r3, [pc, #240]	; (8010e38 <vTaskSwitchContext+0x108>)
 8010d48:	2200      	movs	r2, #0
 8010d4a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8010d4c:	4b3b      	ldr	r3, [pc, #236]	; (8010e3c <vTaskSwitchContext+0x10c>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2101      	movs	r1, #1
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7ff ffca 	bl	8010cec <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 8010d58:	4b38      	ldr	r3, [pc, #224]	; (8010e3c <vTaskSwitchContext+0x10c>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d5e:	61fb      	str	r3, [r7, #28]
 8010d60:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010d64:	61bb      	str	r3, [r7, #24]
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	69ba      	ldr	r2, [r7, #24]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d111      	bne.n	8010d94 <vTaskSwitchContext+0x64>
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	3304      	adds	r3, #4
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	69ba      	ldr	r2, [r7, #24]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d10b      	bne.n	8010d94 <vTaskSwitchContext+0x64>
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	3308      	adds	r3, #8
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	69ba      	ldr	r2, [r7, #24]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d105      	bne.n	8010d94 <vTaskSwitchContext+0x64>
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	330c      	adds	r3, #12
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	69ba      	ldr	r2, [r7, #24]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d008      	beq.n	8010da6 <vTaskSwitchContext+0x76>
 8010d94:	4b29      	ldr	r3, [pc, #164]	; (8010e3c <vTaskSwitchContext+0x10c>)
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	4b28      	ldr	r3, [pc, #160]	; (8010e3c <vTaskSwitchContext+0x10c>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	3334      	adds	r3, #52	; 0x34
 8010d9e:	4619      	mov	r1, r3
 8010da0:	4610      	mov	r0, r2
 8010da2:	f7fe faee 	bl	800f382 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010da6:	4b26      	ldr	r3, [pc, #152]	; (8010e40 <vTaskSwitchContext+0x110>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	fab3 f383 	clz	r3, r3
 8010db2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010db4:	7afb      	ldrb	r3, [r7, #11]
 8010db6:	f1c3 031f 	rsb	r3, r3, #31
 8010dba:	617b      	str	r3, [r7, #20]
 8010dbc:	4921      	ldr	r1, [pc, #132]	; (8010e44 <vTaskSwitchContext+0x114>)
 8010dbe:	697a      	ldr	r2, [r7, #20]
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	4413      	add	r3, r2
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	440b      	add	r3, r1
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d109      	bne.n	8010de4 <vTaskSwitchContext+0xb4>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	607b      	str	r3, [r7, #4]
 8010de2:	e7fe      	b.n	8010de2 <vTaskSwitchContext+0xb2>
 8010de4:	697a      	ldr	r2, [r7, #20]
 8010de6:	4613      	mov	r3, r2
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	4413      	add	r3, r2
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4a15      	ldr	r2, [pc, #84]	; (8010e44 <vTaskSwitchContext+0x114>)
 8010df0:	4413      	add	r3, r2
 8010df2:	613b      	str	r3, [r7, #16]
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	685a      	ldr	r2, [r3, #4]
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	605a      	str	r2, [r3, #4]
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	685a      	ldr	r2, [r3, #4]
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	3308      	adds	r3, #8
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d104      	bne.n	8010e14 <vTaskSwitchContext+0xe4>
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	685a      	ldr	r2, [r3, #4]
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	605a      	str	r2, [r3, #4]
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	4a08      	ldr	r2, [pc, #32]	; (8010e3c <vTaskSwitchContext+0x10c>)
 8010e1c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8010e1e:	4b07      	ldr	r3, [pc, #28]	; (8010e3c <vTaskSwitchContext+0x10c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2100      	movs	r1, #0
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff ff61 	bl	8010cec <xTaskCallApplicationTaskHook>
}
 8010e2a:	bf00      	nop
 8010e2c:	3720      	adds	r7, #32
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	2000065c 	.word	0x2000065c
 8010e38:	20000648 	.word	0x20000648
 8010e3c:	20000534 	.word	0x20000534
 8010e40:	2000063c 	.word	0x2000063c
 8010e44:	20000538 	.word	0x20000538

08010e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d109      	bne.n	8010e6c <vTaskPlaceOnEventList+0x24>
 8010e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5c:	f383 8811 	msr	BASEPRI, r3
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	60fb      	str	r3, [r7, #12]
 8010e6a:	e7fe      	b.n	8010e6a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e6c:	4b07      	ldr	r3, [pc, #28]	; (8010e8c <vTaskPlaceOnEventList+0x44>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	3318      	adds	r3, #24
 8010e72:	4619      	mov	r1, r3
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7fe fc5a 	bl	800f72e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	6838      	ldr	r0, [r7, #0]
 8010e7e:	f000 fb9f 	bl	80115c0 <prvAddCurrentTaskToDelayedList>
}
 8010e82:	bf00      	nop
 8010e84:	3710      	adds	r7, #16
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	20000534 	.word	0x20000534

08010e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d109      	bne.n	8010eba <xTaskRemoveFromEventList+0x2a>
 8010ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	60fb      	str	r3, [r7, #12]
 8010eb8:	e7fe      	b.n	8010eb8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	3318      	adds	r3, #24
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fe fc6e 	bl	800f7a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ec4:	4b1d      	ldr	r3, [pc, #116]	; (8010f3c <xTaskRemoveFromEventList+0xac>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d11c      	bne.n	8010f06 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	3304      	adds	r3, #4
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe fc65 	bl	800f7a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eda:	2201      	movs	r2, #1
 8010edc:	409a      	lsls	r2, r3
 8010ede:	4b18      	ldr	r3, [pc, #96]	; (8010f40 <xTaskRemoveFromEventList+0xb0>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	4a16      	ldr	r2, [pc, #88]	; (8010f40 <xTaskRemoveFromEventList+0xb0>)
 8010ee6:	6013      	str	r3, [r2, #0]
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eec:	4613      	mov	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4413      	add	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4a13      	ldr	r2, [pc, #76]	; (8010f44 <xTaskRemoveFromEventList+0xb4>)
 8010ef6:	441a      	add	r2, r3
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	3304      	adds	r3, #4
 8010efc:	4619      	mov	r1, r3
 8010efe:	4610      	mov	r0, r2
 8010f00:	f7fe fbf1 	bl	800f6e6 <vListInsertEnd>
 8010f04:	e005      	b.n	8010f12 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	3318      	adds	r3, #24
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	480e      	ldr	r0, [pc, #56]	; (8010f48 <xTaskRemoveFromEventList+0xb8>)
 8010f0e:	f7fe fbea 	bl	800f6e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f16:	4b0d      	ldr	r3, [pc, #52]	; (8010f4c <xTaskRemoveFromEventList+0xbc>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d905      	bls.n	8010f2c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010f20:	2301      	movs	r3, #1
 8010f22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010f24:	4b0a      	ldr	r3, [pc, #40]	; (8010f50 <xTaskRemoveFromEventList+0xc0>)
 8010f26:	2201      	movs	r2, #1
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	e001      	b.n	8010f30 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010f30:	697b      	ldr	r3, [r7, #20]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3718      	adds	r7, #24
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	2000065c 	.word	0x2000065c
 8010f40:	2000063c 	.word	0x2000063c
 8010f44:	20000538 	.word	0x20000538
 8010f48:	200005f4 	.word	0x200005f4
 8010f4c:	20000534 	.word	0x20000534
 8010f50:	20000648 	.word	0x20000648

08010f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f5c:	4b06      	ldr	r3, [pc, #24]	; (8010f78 <vTaskInternalSetTimeOutState+0x24>)
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f64:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <vTaskInternalSetTimeOutState+0x28>)
 8010f66:	681a      	ldr	r2, [r3, #0]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	605a      	str	r2, [r3, #4]
}
 8010f6c:	bf00      	nop
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr
 8010f78:	2000064c 	.word	0x2000064c
 8010f7c:	20000638 	.word	0x20000638

08010f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b088      	sub	sp, #32
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d109      	bne.n	8010fa4 <xTaskCheckForTimeOut+0x24>
 8010f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f94:	f383 8811 	msr	BASEPRI, r3
 8010f98:	f3bf 8f6f 	isb	sy
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	613b      	str	r3, [r7, #16]
 8010fa2:	e7fe      	b.n	8010fa2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d109      	bne.n	8010fbe <xTaskCheckForTimeOut+0x3e>
 8010faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fae:	f383 8811 	msr	BASEPRI, r3
 8010fb2:	f3bf 8f6f 	isb	sy
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	60fb      	str	r3, [r7, #12]
 8010fbc:	e7fe      	b.n	8010fbc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010fbe:	f000 fc8d 	bl	80118dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010fc2:	4b1d      	ldr	r3, [pc, #116]	; (8011038 <xTaskCheckForTimeOut+0xb8>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	69ba      	ldr	r2, [r7, #24]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fda:	d102      	bne.n	8010fe2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	61fb      	str	r3, [r7, #28]
 8010fe0:	e023      	b.n	801102a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	4b15      	ldr	r3, [pc, #84]	; (801103c <xTaskCheckForTimeOut+0xbc>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d007      	beq.n	8010ffe <xTaskCheckForTimeOut+0x7e>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	69ba      	ldr	r2, [r7, #24]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d302      	bcc.n	8010ffe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	61fb      	str	r3, [r7, #28]
 8010ffc:	e015      	b.n	801102a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	697a      	ldr	r2, [r7, #20]
 8011004:	429a      	cmp	r2, r3
 8011006:	d20b      	bcs.n	8011020 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	1ad2      	subs	r2, r2, r3
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7ff ff9d 	bl	8010f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801101a:	2300      	movs	r3, #0
 801101c:	61fb      	str	r3, [r7, #28]
 801101e:	e004      	b.n	801102a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	2200      	movs	r2, #0
 8011024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011026:	2301      	movs	r3, #1
 8011028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801102a:	f000 fc85 	bl	8011938 <vPortExitCritical>

	return xReturn;
 801102e:	69fb      	ldr	r3, [r7, #28]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3720      	adds	r7, #32
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	20000638 	.word	0x20000638
 801103c:	2000064c 	.word	0x2000064c

08011040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011040:	b480      	push	{r7}
 8011042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011044:	4b03      	ldr	r3, [pc, #12]	; (8011054 <vTaskMissedYield+0x14>)
 8011046:	2201      	movs	r2, #1
 8011048:	601a      	str	r2, [r3, #0]
}
 801104a:	bf00      	nop
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	4770      	bx	lr
 8011054:	20000648 	.word	0x20000648

08011058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011060:	f000 f854 	bl	801110c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011064:	4b07      	ldr	r3, [pc, #28]	; (8011084 <prvIdleTask+0x2c>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d907      	bls.n	801107c <prvIdleTask+0x24>
			{
				taskYIELD();
 801106c:	4b06      	ldr	r3, [pc, #24]	; (8011088 <prvIdleTask+0x30>)
 801106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801107c:	f7fe f98e 	bl	800f39c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011080:	e7ee      	b.n	8011060 <prvIdleTask+0x8>
 8011082:	bf00      	nop
 8011084:	20000538 	.word	0x20000538
 8011088:	e000ed04 	.word	0xe000ed04

0801108c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011092:	2300      	movs	r3, #0
 8011094:	607b      	str	r3, [r7, #4]
 8011096:	e00c      	b.n	80110b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	4613      	mov	r3, r2
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	4413      	add	r3, r2
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	4a12      	ldr	r2, [pc, #72]	; (80110ec <prvInitialiseTaskLists+0x60>)
 80110a4:	4413      	add	r3, r2
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fe faf0 	bl	800f68c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	3301      	adds	r3, #1
 80110b0:	607b      	str	r3, [r7, #4]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b06      	cmp	r3, #6
 80110b6:	d9ef      	bls.n	8011098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80110b8:	480d      	ldr	r0, [pc, #52]	; (80110f0 <prvInitialiseTaskLists+0x64>)
 80110ba:	f7fe fae7 	bl	800f68c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80110be:	480d      	ldr	r0, [pc, #52]	; (80110f4 <prvInitialiseTaskLists+0x68>)
 80110c0:	f7fe fae4 	bl	800f68c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80110c4:	480c      	ldr	r0, [pc, #48]	; (80110f8 <prvInitialiseTaskLists+0x6c>)
 80110c6:	f7fe fae1 	bl	800f68c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80110ca:	480c      	ldr	r0, [pc, #48]	; (80110fc <prvInitialiseTaskLists+0x70>)
 80110cc:	f7fe fade 	bl	800f68c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80110d0:	480b      	ldr	r0, [pc, #44]	; (8011100 <prvInitialiseTaskLists+0x74>)
 80110d2:	f7fe fadb 	bl	800f68c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80110d6:	4b0b      	ldr	r3, [pc, #44]	; (8011104 <prvInitialiseTaskLists+0x78>)
 80110d8:	4a05      	ldr	r2, [pc, #20]	; (80110f0 <prvInitialiseTaskLists+0x64>)
 80110da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80110dc:	4b0a      	ldr	r3, [pc, #40]	; (8011108 <prvInitialiseTaskLists+0x7c>)
 80110de:	4a05      	ldr	r2, [pc, #20]	; (80110f4 <prvInitialiseTaskLists+0x68>)
 80110e0:	601a      	str	r2, [r3, #0]
}
 80110e2:	bf00      	nop
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	20000538 	.word	0x20000538
 80110f0:	200005c4 	.word	0x200005c4
 80110f4:	200005d8 	.word	0x200005d8
 80110f8:	200005f4 	.word	0x200005f4
 80110fc:	20000608 	.word	0x20000608
 8011100:	20000620 	.word	0x20000620
 8011104:	200005ec 	.word	0x200005ec
 8011108:	200005f0 	.word	0x200005f0

0801110c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011112:	e019      	b.n	8011148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011114:	f000 fbe2 	bl	80118dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011118:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <prvCheckTasksWaitingTermination+0x4c>)
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	3304      	adds	r3, #4
 8011124:	4618      	mov	r0, r3
 8011126:	f7fe fb3b 	bl	800f7a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801112a:	4b0c      	ldr	r3, [pc, #48]	; (801115c <prvCheckTasksWaitingTermination+0x50>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	3b01      	subs	r3, #1
 8011130:	4a0a      	ldr	r2, [pc, #40]	; (801115c <prvCheckTasksWaitingTermination+0x50>)
 8011132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011134:	4b0a      	ldr	r3, [pc, #40]	; (8011160 <prvCheckTasksWaitingTermination+0x54>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	3b01      	subs	r3, #1
 801113a:	4a09      	ldr	r2, [pc, #36]	; (8011160 <prvCheckTasksWaitingTermination+0x54>)
 801113c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801113e:	f000 fbfb 	bl	8011938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 f80e 	bl	8011164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011148:	4b05      	ldr	r3, [pc, #20]	; (8011160 <prvCheckTasksWaitingTermination+0x54>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d1e1      	bne.n	8011114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	20000608 	.word	0x20000608
 801115c:	20000634 	.word	0x20000634
 8011160:	2000061c 	.word	0x2000061c

08011164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011172:	2b00      	cmp	r3, #0
 8011174:	d108      	bne.n	8011188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801117a:	4618      	mov	r0, r3
 801117c:	f000 fd8e 	bl	8011c9c <vPortFree>
				vPortFree( pxTCB );
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 fd8b 	bl	8011c9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011186:	e017      	b.n	80111b8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801118e:	2b01      	cmp	r3, #1
 8011190:	d103      	bne.n	801119a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 fd82 	bl	8011c9c <vPortFree>
	}
 8011198:	e00e      	b.n	80111b8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	d009      	beq.n	80111b8 <prvDeleteTCB+0x54>
 80111a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a8:	f383 8811 	msr	BASEPRI, r3
 80111ac:	f3bf 8f6f 	isb	sy
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	60fb      	str	r3, [r7, #12]
 80111b6:	e7fe      	b.n	80111b6 <prvDeleteTCB+0x52>
	}
 80111b8:	bf00      	nop
 80111ba:	3710      	adds	r7, #16
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111c6:	4b0f      	ldr	r3, [pc, #60]	; (8011204 <prvResetNextTaskUnblockTime+0x44>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d101      	bne.n	80111d4 <prvResetNextTaskUnblockTime+0x14>
 80111d0:	2301      	movs	r3, #1
 80111d2:	e000      	b.n	80111d6 <prvResetNextTaskUnblockTime+0x16>
 80111d4:	2300      	movs	r3, #0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d004      	beq.n	80111e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80111da:	4b0b      	ldr	r3, [pc, #44]	; (8011208 <prvResetNextTaskUnblockTime+0x48>)
 80111dc:	f04f 32ff 	mov.w	r2, #4294967295
 80111e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80111e2:	e008      	b.n	80111f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80111e4:	4b07      	ldr	r3, [pc, #28]	; (8011204 <prvResetNextTaskUnblockTime+0x44>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	68db      	ldr	r3, [r3, #12]
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	4a05      	ldr	r2, [pc, #20]	; (8011208 <prvResetNextTaskUnblockTime+0x48>)
 80111f4:	6013      	str	r3, [r2, #0]
}
 80111f6:	bf00      	nop
 80111f8:	370c      	adds	r7, #12
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	200005ec 	.word	0x200005ec
 8011208:	20000654 	.word	0x20000654

0801120c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011212:	4b0b      	ldr	r3, [pc, #44]	; (8011240 <xTaskGetSchedulerState+0x34>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d102      	bne.n	8011220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801121a:	2301      	movs	r3, #1
 801121c:	607b      	str	r3, [r7, #4]
 801121e:	e008      	b.n	8011232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011220:	4b08      	ldr	r3, [pc, #32]	; (8011244 <xTaskGetSchedulerState+0x38>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011228:	2302      	movs	r3, #2
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	e001      	b.n	8011232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801122e:	2300      	movs	r3, #0
 8011230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011232:	687b      	ldr	r3, [r7, #4]
	}
 8011234:	4618      	mov	r0, r3
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	20000640 	.word	0x20000640
 8011244:	2000065c 	.word	0x2000065c

08011248 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011254:	2300      	movs	r3, #0
 8011256:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d06e      	beq.n	801133c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011262:	4b39      	ldr	r3, [pc, #228]	; (8011348 <xTaskPriorityInherit+0x100>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011268:	429a      	cmp	r2, r3
 801126a:	d25e      	bcs.n	801132a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	699b      	ldr	r3, [r3, #24]
 8011270:	2b00      	cmp	r3, #0
 8011272:	db06      	blt.n	8011282 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011274:	4b34      	ldr	r3, [pc, #208]	; (8011348 <xTaskPriorityInherit+0x100>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127a:	f1c3 0207 	rsb	r2, r3, #7
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	6959      	ldr	r1, [r3, #20]
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801128a:	4613      	mov	r3, r2
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	4413      	add	r3, r2
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	4a2e      	ldr	r2, [pc, #184]	; (801134c <xTaskPriorityInherit+0x104>)
 8011294:	4413      	add	r3, r2
 8011296:	4299      	cmp	r1, r3
 8011298:	d101      	bne.n	801129e <xTaskPriorityInherit+0x56>
 801129a:	2301      	movs	r3, #1
 801129c:	e000      	b.n	80112a0 <xTaskPriorityInherit+0x58>
 801129e:	2300      	movs	r3, #0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d03a      	beq.n	801131a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	3304      	adds	r3, #4
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fe fa79 	bl	800f7a0 <uxListRemove>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d115      	bne.n	80112e0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b8:	4924      	ldr	r1, [pc, #144]	; (801134c <xTaskPriorityInherit+0x104>)
 80112ba:	4613      	mov	r3, r2
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	4413      	add	r3, r2
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	440b      	add	r3, r1
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d10a      	bne.n	80112e0 <xTaskPriorityInherit+0x98>
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ce:	2201      	movs	r2, #1
 80112d0:	fa02 f303 	lsl.w	r3, r2, r3
 80112d4:	43da      	mvns	r2, r3
 80112d6:	4b1e      	ldr	r3, [pc, #120]	; (8011350 <xTaskPriorityInherit+0x108>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4013      	ands	r3, r2
 80112dc:	4a1c      	ldr	r2, [pc, #112]	; (8011350 <xTaskPriorityInherit+0x108>)
 80112de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112e0:	4b19      	ldr	r3, [pc, #100]	; (8011348 <xTaskPriorityInherit+0x100>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ee:	2201      	movs	r2, #1
 80112f0:	409a      	lsls	r2, r3
 80112f2:	4b17      	ldr	r3, [pc, #92]	; (8011350 <xTaskPriorityInherit+0x108>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4313      	orrs	r3, r2
 80112f8:	4a15      	ldr	r2, [pc, #84]	; (8011350 <xTaskPriorityInherit+0x108>)
 80112fa:	6013      	str	r3, [r2, #0]
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011300:	4613      	mov	r3, r2
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	4413      	add	r3, r2
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	4a10      	ldr	r2, [pc, #64]	; (801134c <xTaskPriorityInherit+0x104>)
 801130a:	441a      	add	r2, r3
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	3304      	adds	r3, #4
 8011310:	4619      	mov	r1, r3
 8011312:	4610      	mov	r0, r2
 8011314:	f7fe f9e7 	bl	800f6e6 <vListInsertEnd>
 8011318:	e004      	b.n	8011324 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801131a:	4b0b      	ldr	r3, [pc, #44]	; (8011348 <xTaskPriorityInherit+0x100>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011324:	2301      	movs	r3, #1
 8011326:	60fb      	str	r3, [r7, #12]
 8011328:	e008      	b.n	801133c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801132e:	4b06      	ldr	r3, [pc, #24]	; (8011348 <xTaskPriorityInherit+0x100>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011334:	429a      	cmp	r2, r3
 8011336:	d201      	bcs.n	801133c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011338:	2301      	movs	r3, #1
 801133a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801133c:	68fb      	ldr	r3, [r7, #12]
	}
 801133e:	4618      	mov	r0, r3
 8011340:	3710      	adds	r7, #16
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	20000534 	.word	0x20000534
 801134c:	20000538 	.word	0x20000538
 8011350:	2000063c 	.word	0x2000063c

08011354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011360:	2300      	movs	r3, #0
 8011362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d06c      	beq.n	8011444 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801136a:	4b39      	ldr	r3, [pc, #228]	; (8011450 <xTaskPriorityDisinherit+0xfc>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	693a      	ldr	r2, [r7, #16]
 8011370:	429a      	cmp	r2, r3
 8011372:	d009      	beq.n	8011388 <xTaskPriorityDisinherit+0x34>
 8011374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011378:	f383 8811 	msr	BASEPRI, r3
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	60fb      	str	r3, [r7, #12]
 8011386:	e7fe      	b.n	8011386 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801138c:	2b00      	cmp	r3, #0
 801138e:	d109      	bne.n	80113a4 <xTaskPriorityDisinherit+0x50>
 8011390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011394:	f383 8811 	msr	BASEPRI, r3
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	f3bf 8f4f 	dsb	sy
 80113a0:	60bb      	str	r3, [r7, #8]
 80113a2:	e7fe      	b.n	80113a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113a8:	1e5a      	subs	r2, r3, #1
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d044      	beq.n	8011444 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d140      	bne.n	8011444 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	3304      	adds	r3, #4
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7fe f9ea 	bl	800f7a0 <uxListRemove>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d115      	bne.n	80113fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113d6:	491f      	ldr	r1, [pc, #124]	; (8011454 <xTaskPriorityDisinherit+0x100>)
 80113d8:	4613      	mov	r3, r2
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	4413      	add	r3, r2
 80113de:	009b      	lsls	r3, r3, #2
 80113e0:	440b      	add	r3, r1
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10a      	bne.n	80113fe <xTaskPriorityDisinherit+0xaa>
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ec:	2201      	movs	r2, #1
 80113ee:	fa02 f303 	lsl.w	r3, r2, r3
 80113f2:	43da      	mvns	r2, r3
 80113f4:	4b18      	ldr	r3, [pc, #96]	; (8011458 <xTaskPriorityDisinherit+0x104>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4013      	ands	r3, r2
 80113fa:	4a17      	ldr	r2, [pc, #92]	; (8011458 <xTaskPriorityDisinherit+0x104>)
 80113fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140a:	f1c3 0207 	rsb	r2, r3, #7
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011416:	2201      	movs	r2, #1
 8011418:	409a      	lsls	r2, r3
 801141a:	4b0f      	ldr	r3, [pc, #60]	; (8011458 <xTaskPriorityDisinherit+0x104>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	4313      	orrs	r3, r2
 8011420:	4a0d      	ldr	r2, [pc, #52]	; (8011458 <xTaskPriorityDisinherit+0x104>)
 8011422:	6013      	str	r3, [r2, #0]
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011428:	4613      	mov	r3, r2
 801142a:	009b      	lsls	r3, r3, #2
 801142c:	4413      	add	r3, r2
 801142e:	009b      	lsls	r3, r3, #2
 8011430:	4a08      	ldr	r2, [pc, #32]	; (8011454 <xTaskPriorityDisinherit+0x100>)
 8011432:	441a      	add	r2, r3
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	3304      	adds	r3, #4
 8011438:	4619      	mov	r1, r3
 801143a:	4610      	mov	r0, r2
 801143c:	f7fe f953 	bl	800f6e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011440:	2301      	movs	r3, #1
 8011442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011444:	697b      	ldr	r3, [r7, #20]
	}
 8011446:	4618      	mov	r0, r3
 8011448:	3718      	adds	r7, #24
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	20000534 	.word	0x20000534
 8011454:	20000538 	.word	0x20000538
 8011458:	2000063c 	.word	0x2000063c

0801145c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801145c:	b580      	push	{r7, lr}
 801145e:	b088      	sub	sp, #32
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801146a:	2301      	movs	r3, #1
 801146c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 8086 	beq.w	8011582 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011476:	69bb      	ldr	r3, [r7, #24]
 8011478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801147a:	2b00      	cmp	r3, #0
 801147c:	d109      	bne.n	8011492 <vTaskPriorityDisinheritAfterTimeout+0x36>
 801147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011482:	f383 8811 	msr	BASEPRI, r3
 8011486:	f3bf 8f6f 	isb	sy
 801148a:	f3bf 8f4f 	dsb	sy
 801148e:	60fb      	str	r3, [r7, #12]
 8011490:	e7fe      	b.n	8011490 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011496:	683a      	ldr	r2, [r7, #0]
 8011498:	429a      	cmp	r2, r3
 801149a:	d902      	bls.n	80114a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	61fb      	str	r3, [r7, #28]
 80114a0:	e002      	b.n	80114a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ac:	69fa      	ldr	r2, [r7, #28]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d067      	beq.n	8011582 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114b6:	697a      	ldr	r2, [r7, #20]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d162      	bne.n	8011582 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80114bc:	4b33      	ldr	r3, [pc, #204]	; (801158c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	69ba      	ldr	r2, [r7, #24]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d109      	bne.n	80114da <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80114c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ca:	f383 8811 	msr	BASEPRI, r3
 80114ce:	f3bf 8f6f 	isb	sy
 80114d2:	f3bf 8f4f 	dsb	sy
 80114d6:	60bb      	str	r3, [r7, #8]
 80114d8:	e7fe      	b.n	80114d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	69fa      	ldr	r2, [r7, #28]
 80114e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114e6:	69bb      	ldr	r3, [r7, #24]
 80114e8:	699b      	ldr	r3, [r3, #24]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	db04      	blt.n	80114f8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	f1c3 0207 	rsb	r2, r3, #7
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	6959      	ldr	r1, [r3, #20]
 80114fc:	693a      	ldr	r2, [r7, #16]
 80114fe:	4613      	mov	r3, r2
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	4a22      	ldr	r2, [pc, #136]	; (8011590 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011508:	4413      	add	r3, r2
 801150a:	4299      	cmp	r1, r3
 801150c:	d101      	bne.n	8011512 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 801150e:	2301      	movs	r3, #1
 8011510:	e000      	b.n	8011514 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8011512:	2300      	movs	r3, #0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d034      	beq.n	8011582 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	3304      	adds	r3, #4
 801151c:	4618      	mov	r0, r3
 801151e:	f7fe f93f 	bl	800f7a0 <uxListRemove>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d115      	bne.n	8011554 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801152c:	4918      	ldr	r1, [pc, #96]	; (8011590 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801152e:	4613      	mov	r3, r2
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	4413      	add	r3, r2
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	440b      	add	r3, r1
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d10a      	bne.n	8011554 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011542:	2201      	movs	r2, #1
 8011544:	fa02 f303 	lsl.w	r3, r2, r3
 8011548:	43da      	mvns	r2, r3
 801154a:	4b12      	ldr	r3, [pc, #72]	; (8011594 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4013      	ands	r3, r2
 8011550:	4a10      	ldr	r2, [pc, #64]	; (8011594 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011552:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011558:	2201      	movs	r2, #1
 801155a:	409a      	lsls	r2, r3
 801155c:	4b0d      	ldr	r3, [pc, #52]	; (8011594 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4313      	orrs	r3, r2
 8011562:	4a0c      	ldr	r2, [pc, #48]	; (8011594 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011564:	6013      	str	r3, [r2, #0]
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801156a:	4613      	mov	r3, r2
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	4413      	add	r3, r2
 8011570:	009b      	lsls	r3, r3, #2
 8011572:	4a07      	ldr	r2, [pc, #28]	; (8011590 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011574:	441a      	add	r2, r3
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	3304      	adds	r3, #4
 801157a:	4619      	mov	r1, r3
 801157c:	4610      	mov	r0, r2
 801157e:	f7fe f8b2 	bl	800f6e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011582:	bf00      	nop
 8011584:	3720      	adds	r7, #32
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	20000534 	.word	0x20000534
 8011590:	20000538 	.word	0x20000538
 8011594:	2000063c 	.word	0x2000063c

08011598 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011598:	b480      	push	{r7}
 801159a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801159c:	4b07      	ldr	r3, [pc, #28]	; (80115bc <pvTaskIncrementMutexHeldCount+0x24>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d004      	beq.n	80115ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80115a4:	4b05      	ldr	r3, [pc, #20]	; (80115bc <pvTaskIncrementMutexHeldCount+0x24>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80115aa:	3201      	adds	r2, #1
 80115ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80115ae:	4b03      	ldr	r3, [pc, #12]	; (80115bc <pvTaskIncrementMutexHeldCount+0x24>)
 80115b0:	681b      	ldr	r3, [r3, #0]
	}
 80115b2:	4618      	mov	r0, r3
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr
 80115bc:	20000534 	.word	0x20000534

080115c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80115ca:	4b29      	ldr	r3, [pc, #164]	; (8011670 <prvAddCurrentTaskToDelayedList+0xb0>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115d0:	4b28      	ldr	r3, [pc, #160]	; (8011674 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	3304      	adds	r3, #4
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fe f8e2 	bl	800f7a0 <uxListRemove>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d10b      	bne.n	80115fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80115e2:	4b24      	ldr	r3, [pc, #144]	; (8011674 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e8:	2201      	movs	r2, #1
 80115ea:	fa02 f303 	lsl.w	r3, r2, r3
 80115ee:	43da      	mvns	r2, r3
 80115f0:	4b21      	ldr	r3, [pc, #132]	; (8011678 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4013      	ands	r3, r2
 80115f6:	4a20      	ldr	r2, [pc, #128]	; (8011678 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011600:	d10a      	bne.n	8011618 <prvAddCurrentTaskToDelayedList+0x58>
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d007      	beq.n	8011618 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011608:	4b1a      	ldr	r3, [pc, #104]	; (8011674 <prvAddCurrentTaskToDelayedList+0xb4>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3304      	adds	r3, #4
 801160e:	4619      	mov	r1, r3
 8011610:	481a      	ldr	r0, [pc, #104]	; (801167c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011612:	f7fe f868 	bl	800f6e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011616:	e026      	b.n	8011666 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4413      	add	r3, r2
 801161e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011620:	4b14      	ldr	r3, [pc, #80]	; (8011674 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	68ba      	ldr	r2, [r7, #8]
 8011626:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	429a      	cmp	r2, r3
 801162e:	d209      	bcs.n	8011644 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011630:	4b13      	ldr	r3, [pc, #76]	; (8011680 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	4b0f      	ldr	r3, [pc, #60]	; (8011674 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	3304      	adds	r3, #4
 801163a:	4619      	mov	r1, r3
 801163c:	4610      	mov	r0, r2
 801163e:	f7fe f876 	bl	800f72e <vListInsert>
}
 8011642:	e010      	b.n	8011666 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011644:	4b0f      	ldr	r3, [pc, #60]	; (8011684 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	4b0a      	ldr	r3, [pc, #40]	; (8011674 <prvAddCurrentTaskToDelayedList+0xb4>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	3304      	adds	r3, #4
 801164e:	4619      	mov	r1, r3
 8011650:	4610      	mov	r0, r2
 8011652:	f7fe f86c 	bl	800f72e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011656:	4b0c      	ldr	r3, [pc, #48]	; (8011688 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	68ba      	ldr	r2, [r7, #8]
 801165c:	429a      	cmp	r2, r3
 801165e:	d202      	bcs.n	8011666 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011660:	4a09      	ldr	r2, [pc, #36]	; (8011688 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	6013      	str	r3, [r2, #0]
}
 8011666:	bf00      	nop
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	20000638 	.word	0x20000638
 8011674:	20000534 	.word	0x20000534
 8011678:	2000063c 	.word	0x2000063c
 801167c:	20000620 	.word	0x20000620
 8011680:	200005f0 	.word	0x200005f0
 8011684:	200005ec 	.word	0x200005ec
 8011688:	20000654 	.word	0x20000654

0801168c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801168c:	b480      	push	{r7}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	3b04      	subs	r3, #4
 801169c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80116a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	3b04      	subs	r3, #4
 80116aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	f023 0201 	bic.w	r2, r3, #1
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	3b04      	subs	r3, #4
 80116ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80116bc:	4a0c      	ldr	r2, [pc, #48]	; (80116f0 <pxPortInitialiseStack+0x64>)
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	3b14      	subs	r3, #20
 80116c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	3b04      	subs	r3, #4
 80116d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f06f 0202 	mvn.w	r2, #2
 80116da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	3b20      	subs	r3, #32
 80116e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80116e2:	68fb      	ldr	r3, [r7, #12]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	080116f5 	.word	0x080116f5

080116f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80116f4:	b480      	push	{r7}
 80116f6:	b085      	sub	sp, #20
 80116f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80116fa:	2300      	movs	r3, #0
 80116fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80116fe:	4b11      	ldr	r3, [pc, #68]	; (8011744 <prvTaskExitError+0x50>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011706:	d009      	beq.n	801171c <prvTaskExitError+0x28>
 8011708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170c:	f383 8811 	msr	BASEPRI, r3
 8011710:	f3bf 8f6f 	isb	sy
 8011714:	f3bf 8f4f 	dsb	sy
 8011718:	60fb      	str	r3, [r7, #12]
 801171a:	e7fe      	b.n	801171a <prvTaskExitError+0x26>
 801171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011720:	f383 8811 	msr	BASEPRI, r3
 8011724:	f3bf 8f6f 	isb	sy
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801172e:	bf00      	nop
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d0fc      	beq.n	8011730 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011736:	bf00      	nop
 8011738:	3714      	adds	r7, #20
 801173a:	46bd      	mov	sp, r7
 801173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop
 8011744:	2000005c 	.word	0x2000005c
	...

08011750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011750:	4b07      	ldr	r3, [pc, #28]	; (8011770 <pxCurrentTCBConst2>)
 8011752:	6819      	ldr	r1, [r3, #0]
 8011754:	6808      	ldr	r0, [r1, #0]
 8011756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175a:	f380 8809 	msr	PSP, r0
 801175e:	f3bf 8f6f 	isb	sy
 8011762:	f04f 0000 	mov.w	r0, #0
 8011766:	f380 8811 	msr	BASEPRI, r0
 801176a:	4770      	bx	lr
 801176c:	f3af 8000 	nop.w

08011770 <pxCurrentTCBConst2>:
 8011770:	20000534 	.word	0x20000534
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011774:	bf00      	nop
 8011776:	bf00      	nop

08011778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011778:	4808      	ldr	r0, [pc, #32]	; (801179c <prvPortStartFirstTask+0x24>)
 801177a:	6800      	ldr	r0, [r0, #0]
 801177c:	6800      	ldr	r0, [r0, #0]
 801177e:	f380 8808 	msr	MSP, r0
 8011782:	f04f 0000 	mov.w	r0, #0
 8011786:	f380 8814 	msr	CONTROL, r0
 801178a:	b662      	cpsie	i
 801178c:	b661      	cpsie	f
 801178e:	f3bf 8f4f 	dsb	sy
 8011792:	f3bf 8f6f 	isb	sy
 8011796:	df00      	svc	0
 8011798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801179a:	bf00      	nop
 801179c:	e000ed08 	.word	0xe000ed08

080117a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80117a6:	4b44      	ldr	r3, [pc, #272]	; (80118b8 <xPortStartScheduler+0x118>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4a44      	ldr	r2, [pc, #272]	; (80118bc <xPortStartScheduler+0x11c>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d109      	bne.n	80117c4 <xPortStartScheduler+0x24>
 80117b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b4:	f383 8811 	msr	BASEPRI, r3
 80117b8:	f3bf 8f6f 	isb	sy
 80117bc:	f3bf 8f4f 	dsb	sy
 80117c0:	613b      	str	r3, [r7, #16]
 80117c2:	e7fe      	b.n	80117c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80117c4:	4b3c      	ldr	r3, [pc, #240]	; (80118b8 <xPortStartScheduler+0x118>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	4a3d      	ldr	r2, [pc, #244]	; (80118c0 <xPortStartScheduler+0x120>)
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d109      	bne.n	80117e2 <xPortStartScheduler+0x42>
 80117ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d2:	f383 8811 	msr	BASEPRI, r3
 80117d6:	f3bf 8f6f 	isb	sy
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	e7fe      	b.n	80117e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80117e2:	4b38      	ldr	r3, [pc, #224]	; (80118c4 <xPortStartScheduler+0x124>)
 80117e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	22ff      	movs	r2, #255	; 0xff
 80117f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80117fc:	78fb      	ldrb	r3, [r7, #3]
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011804:	b2da      	uxtb	r2, r3
 8011806:	4b30      	ldr	r3, [pc, #192]	; (80118c8 <xPortStartScheduler+0x128>)
 8011808:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801180a:	4b30      	ldr	r3, [pc, #192]	; (80118cc <xPortStartScheduler+0x12c>)
 801180c:	2207      	movs	r2, #7
 801180e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011810:	e009      	b.n	8011826 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011812:	4b2e      	ldr	r3, [pc, #184]	; (80118cc <xPortStartScheduler+0x12c>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	3b01      	subs	r3, #1
 8011818:	4a2c      	ldr	r2, [pc, #176]	; (80118cc <xPortStartScheduler+0x12c>)
 801181a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	005b      	lsls	r3, r3, #1
 8011822:	b2db      	uxtb	r3, r3
 8011824:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011826:	78fb      	ldrb	r3, [r7, #3]
 8011828:	b2db      	uxtb	r3, r3
 801182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801182e:	2b80      	cmp	r3, #128	; 0x80
 8011830:	d0ef      	beq.n	8011812 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011832:	4b26      	ldr	r3, [pc, #152]	; (80118cc <xPortStartScheduler+0x12c>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f1c3 0307 	rsb	r3, r3, #7
 801183a:	2b04      	cmp	r3, #4
 801183c:	d009      	beq.n	8011852 <xPortStartScheduler+0xb2>
 801183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011842:	f383 8811 	msr	BASEPRI, r3
 8011846:	f3bf 8f6f 	isb	sy
 801184a:	f3bf 8f4f 	dsb	sy
 801184e:	60bb      	str	r3, [r7, #8]
 8011850:	e7fe      	b.n	8011850 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011852:	4b1e      	ldr	r3, [pc, #120]	; (80118cc <xPortStartScheduler+0x12c>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	021b      	lsls	r3, r3, #8
 8011858:	4a1c      	ldr	r2, [pc, #112]	; (80118cc <xPortStartScheduler+0x12c>)
 801185a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801185c:	4b1b      	ldr	r3, [pc, #108]	; (80118cc <xPortStartScheduler+0x12c>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011864:	4a19      	ldr	r2, [pc, #100]	; (80118cc <xPortStartScheduler+0x12c>)
 8011866:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	b2da      	uxtb	r2, r3
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011870:	4b17      	ldr	r3, [pc, #92]	; (80118d0 <xPortStartScheduler+0x130>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a16      	ldr	r2, [pc, #88]	; (80118d0 <xPortStartScheduler+0x130>)
 8011876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801187a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801187c:	4b14      	ldr	r3, [pc, #80]	; (80118d0 <xPortStartScheduler+0x130>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	4a13      	ldr	r2, [pc, #76]	; (80118d0 <xPortStartScheduler+0x130>)
 8011882:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011886:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011888:	f000 f8d6 	bl	8011a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801188c:	4b11      	ldr	r3, [pc, #68]	; (80118d4 <xPortStartScheduler+0x134>)
 801188e:	2200      	movs	r2, #0
 8011890:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011892:	f000 f8f5 	bl	8011a80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011896:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <xPortStartScheduler+0x138>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4a0f      	ldr	r2, [pc, #60]	; (80118d8 <xPortStartScheduler+0x138>)
 801189c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80118a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80118a2:	f7ff ff69 	bl	8011778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80118a6:	f7ff fa43 	bl	8010d30 <vTaskSwitchContext>
	prvTaskExitError();
 80118aa:	f7ff ff23 	bl	80116f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80118ae:	2300      	movs	r3, #0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3718      	adds	r7, #24
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	e000ed00 	.word	0xe000ed00
 80118bc:	410fc271 	.word	0x410fc271
 80118c0:	410fc270 	.word	0x410fc270
 80118c4:	e000e400 	.word	0xe000e400
 80118c8:	20000660 	.word	0x20000660
 80118cc:	20000664 	.word	0x20000664
 80118d0:	e000ed20 	.word	0xe000ed20
 80118d4:	2000005c 	.word	0x2000005c
 80118d8:	e000ef34 	.word	0xe000ef34

080118dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e6:	f383 8811 	msr	BASEPRI, r3
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80118f4:	4b0e      	ldr	r3, [pc, #56]	; (8011930 <vPortEnterCritical+0x54>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3301      	adds	r3, #1
 80118fa:	4a0d      	ldr	r2, [pc, #52]	; (8011930 <vPortEnterCritical+0x54>)
 80118fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80118fe:	4b0c      	ldr	r3, [pc, #48]	; (8011930 <vPortEnterCritical+0x54>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d10e      	bne.n	8011924 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011906:	4b0b      	ldr	r3, [pc, #44]	; (8011934 <vPortEnterCritical+0x58>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	b2db      	uxtb	r3, r3
 801190c:	2b00      	cmp	r3, #0
 801190e:	d009      	beq.n	8011924 <vPortEnterCritical+0x48>
 8011910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011914:	f383 8811 	msr	BASEPRI, r3
 8011918:	f3bf 8f6f 	isb	sy
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	603b      	str	r3, [r7, #0]
 8011922:	e7fe      	b.n	8011922 <vPortEnterCritical+0x46>
	}
}
 8011924:	bf00      	nop
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	2000005c 	.word	0x2000005c
 8011934:	e000ed04 	.word	0xe000ed04

08011938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801193e:	4b11      	ldr	r3, [pc, #68]	; (8011984 <vPortExitCritical+0x4c>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d109      	bne.n	801195a <vPortExitCritical+0x22>
 8011946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	607b      	str	r3, [r7, #4]
 8011958:	e7fe      	b.n	8011958 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801195a:	4b0a      	ldr	r3, [pc, #40]	; (8011984 <vPortExitCritical+0x4c>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	3b01      	subs	r3, #1
 8011960:	4a08      	ldr	r2, [pc, #32]	; (8011984 <vPortExitCritical+0x4c>)
 8011962:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011964:	4b07      	ldr	r3, [pc, #28]	; (8011984 <vPortExitCritical+0x4c>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d104      	bne.n	8011976 <vPortExitCritical+0x3e>
 801196c:	2300      	movs	r3, #0
 801196e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011976:	bf00      	nop
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	2000005c 	.word	0x2000005c
	...

08011990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011990:	f3ef 8009 	mrs	r0, PSP
 8011994:	f3bf 8f6f 	isb	sy
 8011998:	4b15      	ldr	r3, [pc, #84]	; (80119f0 <pxCurrentTCBConst>)
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	f01e 0f10 	tst.w	lr, #16
 80119a0:	bf08      	it	eq
 80119a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119aa:	6010      	str	r0, [r2, #0]
 80119ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80119b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80119b4:	f380 8811 	msr	BASEPRI, r0
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	f3bf 8f6f 	isb	sy
 80119c0:	f7ff f9b6 	bl	8010d30 <vTaskSwitchContext>
 80119c4:	f04f 0000 	mov.w	r0, #0
 80119c8:	f380 8811 	msr	BASEPRI, r0
 80119cc:	bc09      	pop	{r0, r3}
 80119ce:	6819      	ldr	r1, [r3, #0]
 80119d0:	6808      	ldr	r0, [r1, #0]
 80119d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d6:	f01e 0f10 	tst.w	lr, #16
 80119da:	bf08      	it	eq
 80119dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80119e0:	f380 8809 	msr	PSP, r0
 80119e4:	f3bf 8f6f 	isb	sy
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	f3af 8000 	nop.w

080119f0 <pxCurrentTCBConst>:
 80119f0:	20000534 	.word	0x20000534
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80119f4:	bf00      	nop
 80119f6:	bf00      	nop

080119f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
	__asm volatile
 80119fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a02:	f383 8811 	msr	BASEPRI, r3
 8011a06:	f3bf 8f6f 	isb	sy
 8011a0a:	f3bf 8f4f 	dsb	sy
 8011a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011a10:	f7ff f894 	bl	8010b3c <xTaskIncrementTick>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d003      	beq.n	8011a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a1a:	4b06      	ldr	r3, [pc, #24]	; (8011a34 <SysTick_Handler+0x3c>)
 8011a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	2300      	movs	r3, #0
 8011a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011a2c:	bf00      	nop
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}
 8011a34:	e000ed04 	.word	0xe000ed04

08011a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a38:	b480      	push	{r7}
 8011a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a3c:	4b0b      	ldr	r3, [pc, #44]	; (8011a6c <vPortSetupTimerInterrupt+0x34>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a42:	4b0b      	ldr	r3, [pc, #44]	; (8011a70 <vPortSetupTimerInterrupt+0x38>)
 8011a44:	2200      	movs	r2, #0
 8011a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a48:	4b0a      	ldr	r3, [pc, #40]	; (8011a74 <vPortSetupTimerInterrupt+0x3c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	4a0a      	ldr	r2, [pc, #40]	; (8011a78 <vPortSetupTimerInterrupt+0x40>)
 8011a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a52:	099b      	lsrs	r3, r3, #6
 8011a54:	4a09      	ldr	r2, [pc, #36]	; (8011a7c <vPortSetupTimerInterrupt+0x44>)
 8011a56:	3b01      	subs	r3, #1
 8011a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a5a:	4b04      	ldr	r3, [pc, #16]	; (8011a6c <vPortSetupTimerInterrupt+0x34>)
 8011a5c:	2207      	movs	r2, #7
 8011a5e:	601a      	str	r2, [r3, #0]
}
 8011a60:	bf00      	nop
 8011a62:	46bd      	mov	sp, r7
 8011a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop
 8011a6c:	e000e010 	.word	0xe000e010
 8011a70:	e000e018 	.word	0xe000e018
 8011a74:	20000000 	.word	0x20000000
 8011a78:	10624dd3 	.word	0x10624dd3
 8011a7c:	e000e014 	.word	0xe000e014

08011a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011a90 <vPortEnableVFP+0x10>
 8011a84:	6801      	ldr	r1, [r0, #0]
 8011a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011a8a:	6001      	str	r1, [r0, #0]
 8011a8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011a8e:	bf00      	nop
 8011a90:	e000ed88 	.word	0xe000ed88

08011a94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011a94:	b480      	push	{r7}
 8011a96:	b085      	sub	sp, #20
 8011a98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011a9a:	f3ef 8305 	mrs	r3, IPSR
 8011a9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b0f      	cmp	r3, #15
 8011aa4:	d913      	bls.n	8011ace <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011aa6:	4a16      	ldr	r2, [pc, #88]	; (8011b00 <vPortValidateInterruptPriority+0x6c>)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	4413      	add	r3, r2
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ab0:	4b14      	ldr	r3, [pc, #80]	; (8011b04 <vPortValidateInterruptPriority+0x70>)
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	7afa      	ldrb	r2, [r7, #11]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d209      	bcs.n	8011ace <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011abe:	f383 8811 	msr	BASEPRI, r3
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	f3bf 8f4f 	dsb	sy
 8011aca:	607b      	str	r3, [r7, #4]
 8011acc:	e7fe      	b.n	8011acc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011ace:	4b0e      	ldr	r3, [pc, #56]	; (8011b08 <vPortValidateInterruptPriority+0x74>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011ad6:	4b0d      	ldr	r3, [pc, #52]	; (8011b0c <vPortValidateInterruptPriority+0x78>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d909      	bls.n	8011af2 <vPortValidateInterruptPriority+0x5e>
 8011ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae2:	f383 8811 	msr	BASEPRI, r3
 8011ae6:	f3bf 8f6f 	isb	sy
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	603b      	str	r3, [r7, #0]
 8011af0:	e7fe      	b.n	8011af0 <vPortValidateInterruptPriority+0x5c>
	}
 8011af2:	bf00      	nop
 8011af4:	3714      	adds	r7, #20
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	e000e3f0 	.word	0xe000e3f0
 8011b04:	20000660 	.word	0x20000660
 8011b08:	e000ed0c 	.word	0xe000ed0c
 8011b0c:	20000664 	.word	0x20000664

08011b10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b08a      	sub	sp, #40	; 0x28
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011b1c:	f7fe ff64 	bl	80109e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011b20:	4b59      	ldr	r3, [pc, #356]	; (8011c88 <pvPortMalloc+0x178>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d101      	bne.n	8011b2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011b28:	f000 f910 	bl	8011d4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b2c:	4b57      	ldr	r3, [pc, #348]	; (8011c8c <pvPortMalloc+0x17c>)
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4013      	ands	r3, r2
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f040 808c 	bne.w	8011c52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d01c      	beq.n	8011b7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011b40:	2208      	movs	r2, #8
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4413      	add	r3, r2
 8011b46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f003 0307 	and.w	r3, r3, #7
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d013      	beq.n	8011b7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f023 0307 	bic.w	r3, r3, #7
 8011b58:	3308      	adds	r3, #8
 8011b5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f003 0307 	and.w	r3, r3, #7
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d009      	beq.n	8011b7a <pvPortMalloc+0x6a>
 8011b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6a:	f383 8811 	msr	BASEPRI, r3
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	617b      	str	r3, [r7, #20]
 8011b78:	e7fe      	b.n	8011b78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d068      	beq.n	8011c52 <pvPortMalloc+0x142>
 8011b80:	4b43      	ldr	r3, [pc, #268]	; (8011c90 <pvPortMalloc+0x180>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d863      	bhi.n	8011c52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011b8a:	4b42      	ldr	r3, [pc, #264]	; (8011c94 <pvPortMalloc+0x184>)
 8011b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011b8e:	4b41      	ldr	r3, [pc, #260]	; (8011c94 <pvPortMalloc+0x184>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b94:	e004      	b.n	8011ba0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d903      	bls.n	8011bb2 <pvPortMalloc+0xa2>
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1f1      	bne.n	8011b96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011bb2:	4b35      	ldr	r3, [pc, #212]	; (8011c88 <pvPortMalloc+0x178>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d04a      	beq.n	8011c52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2208      	movs	r2, #8
 8011bc2:	4413      	add	r3, r2
 8011bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	6a3b      	ldr	r3, [r7, #32]
 8011bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd0:	685a      	ldr	r2, [r3, #4]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	1ad2      	subs	r2, r2, r3
 8011bd6:	2308      	movs	r3, #8
 8011bd8:	005b      	lsls	r3, r3, #1
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d91e      	bls.n	8011c1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	4413      	add	r3, r2
 8011be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	f003 0307 	and.w	r3, r3, #7
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d009      	beq.n	8011c04 <pvPortMalloc+0xf4>
 8011bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf4:	f383 8811 	msr	BASEPRI, r3
 8011bf8:	f3bf 8f6f 	isb	sy
 8011bfc:	f3bf 8f4f 	dsb	sy
 8011c00:	613b      	str	r3, [r7, #16]
 8011c02:	e7fe      	b.n	8011c02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	685a      	ldr	r2, [r3, #4]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	1ad2      	subs	r2, r2, r3
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011c16:	69b8      	ldr	r0, [r7, #24]
 8011c18:	f000 f8fa 	bl	8011e10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011c1c:	4b1c      	ldr	r3, [pc, #112]	; (8011c90 <pvPortMalloc+0x180>)
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	1ad3      	subs	r3, r2, r3
 8011c26:	4a1a      	ldr	r2, [pc, #104]	; (8011c90 <pvPortMalloc+0x180>)
 8011c28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011c2a:	4b19      	ldr	r3, [pc, #100]	; (8011c90 <pvPortMalloc+0x180>)
 8011c2c:	681a      	ldr	r2, [r3, #0]
 8011c2e:	4b1a      	ldr	r3, [pc, #104]	; (8011c98 <pvPortMalloc+0x188>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d203      	bcs.n	8011c3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011c36:	4b16      	ldr	r3, [pc, #88]	; (8011c90 <pvPortMalloc+0x180>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4a17      	ldr	r2, [pc, #92]	; (8011c98 <pvPortMalloc+0x188>)
 8011c3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c40:	685a      	ldr	r2, [r3, #4]
 8011c42:	4b12      	ldr	r3, [pc, #72]	; (8011c8c <pvPortMalloc+0x17c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	431a      	orrs	r2, r3
 8011c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4e:	2200      	movs	r2, #0
 8011c50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011c52:	f7fe fed7 	bl	8010a04 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d101      	bne.n	8011c60 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011c5c:	f7fd fb97 	bl	800f38e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	f003 0307 	and.w	r3, r3, #7
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d009      	beq.n	8011c7e <pvPortMalloc+0x16e>
 8011c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6e:	f383 8811 	msr	BASEPRI, r3
 8011c72:	f3bf 8f6f 	isb	sy
 8011c76:	f3bf 8f4f 	dsb	sy
 8011c7a:	60fb      	str	r3, [r7, #12]
 8011c7c:	e7fe      	b.n	8011c7c <pvPortMalloc+0x16c>
	return pvReturn;
 8011c7e:	69fb      	ldr	r3, [r7, #28]
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3728      	adds	r7, #40	; 0x28
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	20008670 	.word	0x20008670
 8011c8c:	2000867c 	.word	0x2000867c
 8011c90:	20008674 	.word	0x20008674
 8011c94:	20008668 	.word	0x20008668
 8011c98:	20008678 	.word	0x20008678

08011c9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d046      	beq.n	8011d3c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011cae:	2308      	movs	r3, #8
 8011cb0:	425b      	negs	r3, r3
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	4b20      	ldr	r3, [pc, #128]	; (8011d44 <vPortFree+0xa8>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d109      	bne.n	8011cde <vPortFree+0x42>
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	f383 8811 	msr	BASEPRI, r3
 8011cd2:	f3bf 8f6f 	isb	sy
 8011cd6:	f3bf 8f4f 	dsb	sy
 8011cda:	60fb      	str	r3, [r7, #12]
 8011cdc:	e7fe      	b.n	8011cdc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d009      	beq.n	8011cfa <vPortFree+0x5e>
 8011ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cea:	f383 8811 	msr	BASEPRI, r3
 8011cee:	f3bf 8f6f 	isb	sy
 8011cf2:	f3bf 8f4f 	dsb	sy
 8011cf6:	60bb      	str	r3, [r7, #8]
 8011cf8:	e7fe      	b.n	8011cf8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	685a      	ldr	r2, [r3, #4]
 8011cfe:	4b11      	ldr	r3, [pc, #68]	; (8011d44 <vPortFree+0xa8>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	4013      	ands	r3, r2
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d019      	beq.n	8011d3c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d115      	bne.n	8011d3c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	685a      	ldr	r2, [r3, #4]
 8011d14:	4b0b      	ldr	r3, [pc, #44]	; (8011d44 <vPortFree+0xa8>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	43db      	mvns	r3, r3
 8011d1a:	401a      	ands	r2, r3
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011d20:	f7fe fe62 	bl	80109e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	685a      	ldr	r2, [r3, #4]
 8011d28:	4b07      	ldr	r3, [pc, #28]	; (8011d48 <vPortFree+0xac>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4413      	add	r3, r2
 8011d2e:	4a06      	ldr	r2, [pc, #24]	; (8011d48 <vPortFree+0xac>)
 8011d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d32:	6938      	ldr	r0, [r7, #16]
 8011d34:	f000 f86c 	bl	8011e10 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011d38:	f7fe fe64 	bl	8010a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011d3c:	bf00      	nop
 8011d3e:	3718      	adds	r7, #24
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	2000867c 	.word	0x2000867c
 8011d48:	20008674 	.word	0x20008674

08011d4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b085      	sub	sp, #20
 8011d50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011d58:	4b27      	ldr	r3, [pc, #156]	; (8011df8 <prvHeapInit+0xac>)
 8011d5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f003 0307 	and.w	r3, r3, #7
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00c      	beq.n	8011d80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	3307      	adds	r3, #7
 8011d6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f023 0307 	bic.w	r3, r3, #7
 8011d72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011d74:	68ba      	ldr	r2, [r7, #8]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	4a1f      	ldr	r2, [pc, #124]	; (8011df8 <prvHeapInit+0xac>)
 8011d7c:	4413      	add	r3, r2
 8011d7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011d84:	4a1d      	ldr	r2, [pc, #116]	; (8011dfc <prvHeapInit+0xb0>)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011d8a:	4b1c      	ldr	r3, [pc, #112]	; (8011dfc <prvHeapInit+0xb0>)
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	68ba      	ldr	r2, [r7, #8]
 8011d94:	4413      	add	r3, r2
 8011d96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011d98:	2208      	movs	r2, #8
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	1a9b      	subs	r3, r3, r2
 8011d9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f023 0307 	bic.w	r3, r3, #7
 8011da6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	4a15      	ldr	r2, [pc, #84]	; (8011e00 <prvHeapInit+0xb4>)
 8011dac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011dae:	4b14      	ldr	r3, [pc, #80]	; (8011e00 <prvHeapInit+0xb4>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2200      	movs	r2, #0
 8011db4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011db6:	4b12      	ldr	r3, [pc, #72]	; (8011e00 <prvHeapInit+0xb4>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	1ad2      	subs	r2, r2, r3
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011dcc:	4b0c      	ldr	r3, [pc, #48]	; (8011e00 <prvHeapInit+0xb4>)
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	4a0a      	ldr	r2, [pc, #40]	; (8011e04 <prvHeapInit+0xb8>)
 8011dda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	4a09      	ldr	r2, [pc, #36]	; (8011e08 <prvHeapInit+0xbc>)
 8011de2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011de4:	4b09      	ldr	r3, [pc, #36]	; (8011e0c <prvHeapInit+0xc0>)
 8011de6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011dea:	601a      	str	r2, [r3, #0]
}
 8011dec:	bf00      	nop
 8011dee:	3714      	adds	r7, #20
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	20000668 	.word	0x20000668
 8011dfc:	20008668 	.word	0x20008668
 8011e00:	20008670 	.word	0x20008670
 8011e04:	20008678 	.word	0x20008678
 8011e08:	20008674 	.word	0x20008674
 8011e0c:	2000867c 	.word	0x2000867c

08011e10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011e10:	b480      	push	{r7}
 8011e12:	b085      	sub	sp, #20
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011e18:	4b28      	ldr	r3, [pc, #160]	; (8011ebc <prvInsertBlockIntoFreeList+0xac>)
 8011e1a:	60fb      	str	r3, [r7, #12]
 8011e1c:	e002      	b.n	8011e24 <prvInsertBlockIntoFreeList+0x14>
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	60fb      	str	r3, [r7, #12]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d8f7      	bhi.n	8011e1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	4413      	add	r3, r2
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d108      	bne.n	8011e52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	685a      	ldr	r2, [r3, #4]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	441a      	add	r2, r3
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	68ba      	ldr	r2, [r7, #8]
 8011e5c:	441a      	add	r2, r3
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d118      	bne.n	8011e98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	4b15      	ldr	r3, [pc, #84]	; (8011ec0 <prvInsertBlockIntoFreeList+0xb0>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d00d      	beq.n	8011e8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	685a      	ldr	r2, [r3, #4]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	441a      	add	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	601a      	str	r2, [r3, #0]
 8011e8c:	e008      	b.n	8011ea0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011e8e:	4b0c      	ldr	r3, [pc, #48]	; (8011ec0 <prvInsertBlockIntoFreeList+0xb0>)
 8011e90:	681a      	ldr	r2, [r3, #0]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	601a      	str	r2, [r3, #0]
 8011e96:	e003      	b.n	8011ea0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ea0:	68fa      	ldr	r2, [r7, #12]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d002      	beq.n	8011eae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011eae:	bf00      	nop
 8011eb0:	3714      	adds	r7, #20
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	20008668 	.word	0x20008668
 8011ec0:	20008670 	.word	0x20008670

08011ec4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
    {
 8011ecc:	4a04      	ldr	r2, [pc, #16]	; (8011ee0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	601a      	str	r2, [r3, #0]
    }
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	370c      	adds	r7, #12
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	08021d58 	.word	0x08021d58

08011ee4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
    }
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7ff ffe9 	bl	8011ec4 <_ZN8touchgfx12FontProviderD1Ev>
 8011ef2:	2104      	movs	r1, #4
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f00d fc0a 	bl	801f70e <_ZdlPvj>
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	4618      	mov	r0, r3
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8011f10:	887b      	ldrh	r3, [r7, #2]
 8011f12:	2b04      	cmp	r3, #4
 8011f14:	d825      	bhi.n	8011f62 <_ZN23ApplicationFontProvider7getFontEt+0x5e>
 8011f16:	a201      	add	r2, pc, #4	; (adr r2, 8011f1c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8011f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f1c:	08011f31 	.word	0x08011f31
 8011f20:	08011f3b 	.word	0x08011f3b
 8011f24:	08011f45 	.word	0x08011f45
 8011f28:	08011f4f 	.word	0x08011f4f
 8011f2c:	08011f59 	.word	0x08011f59
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8011f30:	f002 fe1e 	bl	8014b70 <_ZN17TypedTextDatabase8getFontsEv>
 8011f34:	4603      	mov	r3, r0
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	e014      	b.n	8011f64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8011f3a:	f002 fe19 	bl	8014b70 <_ZN17TypedTextDatabase8getFontsEv>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	e00f      	b.n	8011f64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::SMALL:
        // verdana_13_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8011f44:	f002 fe14 	bl	8014b70 <_ZN17TypedTextDatabase8getFontsEv>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	689b      	ldr	r3, [r3, #8]
 8011f4c:	e00a      	b.n	8011f64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_00:
        // verdana_69_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8011f4e:	f002 fe0f 	bl	8014b70 <_ZN17TypedTextDatabase8getFontsEv>
 8011f52:	4603      	mov	r3, r0
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	e005      	b.n	8011f64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_01:
        // verdana_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8011f58:	f002 fe0a 	bl	8014b70 <_ZN17TypedTextDatabase8getFontsEv>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	691b      	ldr	r3, [r3, #16]
 8011f60:	e000      	b.n	8011f64 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    default:
        return 0;
 8011f62:	2300      	movs	r3, #0
    }
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_69_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdana_18_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	4a05      	ldr	r2, [pc, #20]	; (8011f8c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7ff ffa1 	bl	8011ec4 <_ZN8touchgfx12FontProviderD1Ev>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4618      	mov	r0, r3
 8011f86:	3708      	adds	r7, #8
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	08021d44 	.word	0x08021d44

08011f90 <_ZN23ApplicationFontProviderD0Ev>:
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7ff ffe7 	bl	8011f6c <_ZN23ApplicationFontProviderD1Ev>
 8011f9e:	2104      	movs	r1, #4
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f00d fbb4 	bl	801f70e <_ZdlPvj>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	4a04      	ldr	r2, [pc, #16]	; (8011fcc <_ZN8touchgfx4FontD1Ev+0x1c>)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	370c      	adds	r7, #12
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr
 8011fcc:	08023418 	.word	0x08023418

08011fd0 <_ZN8touchgfx4FontD0Ev>:
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7ff ffe9 	bl	8011fb0 <_ZN8touchgfx4FontD1Ev>
 8011fde:	2110      	movs	r1, #16
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f00d fb94 	bl	801f70e <_ZdlPvj>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3708      	adds	r7, #8
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b087      	sub	sp, #28
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8012000:	2300      	movs	r3, #0
 8012002:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	3308      	adds	r3, #8
 801200a:	681c      	ldr	r4, [r3, #0]
 801200c:	f107 030f 	add.w	r3, r7, #15
 8012010:	f107 0210 	add.w	r2, r7, #16
 8012014:	8879      	ldrh	r1, [r7, #2]
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	47a0      	blx	r4
 801201a:	6178      	str	r0, [r7, #20]
        return glyph;
 801201c:	697b      	ldr	r3, [r7, #20]
    }
 801201e:	4618      	mov	r0, r3
 8012020:	371c      	adds	r7, #28
 8012022:	46bd      	mov	sp, r7
 8012024:	bd90      	pop	{r4, r7, pc}

08012026 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8012026:	b480      	push	{r7}
 8012028:	b083      	sub	sp, #12
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	895b      	ldrh	r3, [r3, #10]
    }
 8012032:	4618      	mov	r0, r3
 8012034:	370c      	adds	r7, #12
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr

0801203e <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801203e:	b480      	push	{r7}
 8012040:	b083      	sub	sp, #12
 8012042:	af00      	add	r7, sp, #0
 8012044:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	899b      	ldrh	r3, [r3, #12]
    }
 801204a:	4618      	mov	r0, r3
 801204c:	370c      	adds	r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr

08012056 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8012056:	b480      	push	{r7}
 8012058:	b083      	sub	sp, #12
 801205a:	af00      	add	r7, sp, #0
 801205c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	889b      	ldrh	r3, [r3, #4]
    }
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr

0801206e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801206e:	b480      	push	{r7}
 8012070:	b083      	sub	sp, #12
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	889a      	ldrh	r2, [r3, #4]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	799b      	ldrb	r3, [r3, #6]
 801207e:	b29b      	uxth	r3, r3
 8012080:	4413      	add	r3, r2
 8012082:	b29b      	uxth	r3, r3
    }
 8012084:	4618      	mov	r0, r3
 8012086:	370c      	adds	r7, #12
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr

08012090 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	79db      	ldrb	r3, [r3, #7]
 801209c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80120a0:	b2db      	uxtb	r3, r3
    }
 80120a2:	4618      	mov	r0, r3
 80120a4:	370c      	adds	r7, #12
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr

080120ae <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 80120ae:	b480      	push	{r7}
 80120b0:	b083      	sub	sp, #12
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
    {
        return a4;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	79db      	ldrb	r3, [r3, #7]
 80120ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80120be:	b2db      	uxtb	r3, r3
    }
 80120c0:	4618      	mov	r0, r3
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6a1b      	ldr	r3, [r3, #32]
    }
 80120d8:	4618      	mov	r0, r3
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	4a05      	ldr	r2, [pc, #20]	; (8012104 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	601a      	str	r2, [r3, #0]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7ff ff5b 	bl	8011fb0 <_ZN8touchgfx4FontD1Ev>
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	4618      	mov	r0, r3
 80120fe:	3708      	adds	r7, #8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	080234d4 	.word	0x080234d4

08012108 <_ZN8touchgfx9ConstFontD0Ev>:
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff ffe7 	bl	80120e4 <_ZN8touchgfx9ConstFontD1Ev>
 8012116:	2118      	movs	r1, #24
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f00d faf8 	bl	801f70e <_ZdlPvj>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4618      	mov	r0, r3
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	4a05      	ldr	r2, [pc, #20]	; (8012148 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	601a      	str	r2, [r3, #0]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4618      	mov	r0, r3
 801213a:	f7ff ffd3 	bl	80120e4 <_ZN8touchgfx9ConstFontD1Ev>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	08021d6c 	.word	0x08021d6c

0801214c <_ZN8touchgfx13GeneratedFontD0Ev>:
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff ffe7 	bl	8012128 <_ZN8touchgfx13GeneratedFontD1Ev>
 801215a:	2124      	movs	r1, #36	; 0x24
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f00d fad6 	bl	801f70e <_ZdlPvj>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	4618      	mov	r0, r3
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	7b5b      	ldrb	r3, [r3, #13]
 8012178:	021b      	lsls	r3, r3, #8
 801217a:	b21b      	sxth	r3, r3
 801217c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012180:	b21a      	sxth	r2, r3
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	7adb      	ldrb	r3, [r3, #11]
 8012186:	b21b      	sxth	r3, r3
 8012188:	4313      	orrs	r3, r2
 801218a:	b21b      	sxth	r3, r3
 801218c:	b29b      	uxth	r3, r3
    }
 801218e:	4618      	mov	r0, r3
 8012190:	370c      	adds	r7, #12
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr
	...

0801219c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 801219c:	b580      	push	{r7, lr}
 801219e:	b08c      	sub	sp, #48	; 0x30
 80121a0:	af08      	add	r7, sp, #32
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	4611      	mov	r1, r2
 80121a8:	461a      	mov	r2, r3
 80121aa:	460b      	mov	r3, r1
 80121ac:	80fb      	strh	r3, [r7, #6]
 80121ae:	4613      	mov	r3, r2
 80121b0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	88b9      	ldrh	r1, [r7, #4]
 80121b6:	88fa      	ldrh	r2, [r7, #6]
 80121b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80121ba:	9306      	str	r3, [sp, #24]
 80121bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80121be:	9305      	str	r3, [sp, #20]
 80121c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80121c4:	9304      	str	r3, [sp, #16]
 80121c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80121ca:	9303      	str	r3, [sp, #12]
 80121cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80121d0:	9302      	str	r3, [sp, #8]
 80121d2:	7f3b      	ldrb	r3, [r7, #28]
 80121d4:	9301      	str	r3, [sp, #4]
 80121d6:	7e3b      	ldrb	r3, [r7, #24]
 80121d8:	9300      	str	r3, [sp, #0]
 80121da:	460b      	mov	r3, r1
 80121dc:	68b9      	ldr	r1, [r7, #8]
 80121de:	f008 f91b 	bl	801a418 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80121e2:	4a08      	ldr	r2, [pc, #32]	; (8012204 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	601a      	str	r2, [r3, #0]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ec:	619a      	str	r2, [r3, #24]
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121f2:	61da      	str	r2, [r3, #28]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121f8:	621a      	str	r2, [r3, #32]
{
}
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	4618      	mov	r0, r3
 80121fe:	3710      	adds	r7, #16
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	08021d6c 	.word	0x08021d6c

08012208 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8012208:	b480      	push	{r7}
 801220a:	b085      	sub	sp, #20
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	699b      	ldr	r3, [r3, #24]
 8012216:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	889b      	ldrh	r3, [r3, #4]
 801221c:	0adb      	lsrs	r3, r3, #11
 801221e:	b29b      	uxth	r3, r3
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	4413      	add	r3, r2
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4413      	add	r3, r2
}
 801222e:	4618      	mov	r0, r3
 8012230:	3714      	adds	r7, #20
 8012232:	46bd      	mov	sp, r7
 8012234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012238:	4770      	bx	lr

0801223a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b086      	sub	sp, #24
 801223e:	af00      	add	r7, sp, #0
 8012240:	60f8      	str	r0, [r7, #12]
 8012242:	460b      	mov	r3, r1
 8012244:	607a      	str	r2, [r7, #4]
 8012246:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d003      	beq.n	8012256 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	7b1b      	ldrb	r3, [r3, #12]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d101      	bne.n	801225a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8012256:	2300      	movs	r3, #0
 8012258:	e023      	b.n	80122a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f7ff ff86 	bl	801216c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8012260:	4603      	mov	r3, r0
 8012262:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8012264:	8abb      	ldrh	r3, [r7, #20]
 8012266:	82fb      	strh	r3, [r7, #22]
 8012268:	8afa      	ldrh	r2, [r7, #22]
 801226a:	8abb      	ldrh	r3, [r7, #20]
 801226c:	6879      	ldr	r1, [r7, #4]
 801226e:	7b09      	ldrb	r1, [r1, #12]
 8012270:	440b      	add	r3, r1
 8012272:	429a      	cmp	r2, r3
 8012274:	da14      	bge.n	80122a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	69da      	ldr	r2, [r3, #28]
 801227a:	8afb      	ldrh	r3, [r7, #22]
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	4413      	add	r3, r2
 8012280:	881b      	ldrh	r3, [r3, #0]
 8012282:	897a      	ldrh	r2, [r7, #10]
 8012284:	429a      	cmp	r2, r3
 8012286:	d107      	bne.n	8012298 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	69da      	ldr	r2, [r3, #28]
 801228c:	8afb      	ldrh	r3, [r7, #22]
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	4413      	add	r3, r2
 8012292:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8012296:	e004      	b.n	80122a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8012298:	8afb      	ldrh	r3, [r7, #22]
 801229a:	3301      	adds	r3, #1
 801229c:	82fb      	strh	r3, [r7, #22]
 801229e:	e7e3      	b.n	8012268 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 80122a0:	2300      	movs	r3, #0
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
	...

080122ac <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_13_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_13_4bpp();

touchgfx::GeneratedFont& getFont_verdana_13_4bpp()
{
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 17, 13, 0, 4, 1, 0, 0, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 0, 0, 0);
 80122ac:	b580      	push	{r7, lr}
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	4801      	ldr	r0, [pc, #4]	; (80122b8 <__tcf_0+0xc>)
 80122b2:	f7ff ff39 	bl	8012128 <_ZN8touchgfx13GeneratedFontD1Ev>
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20008680 	.word	0x20008680

080122bc <_Z23getFont_verdana_13_4bppv>:
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b08a      	sub	sp, #40	; 0x28
 80122c0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 17, 13, 0, 4, 1, 0, 0, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 0, 0, 0);
 80122c2:	4b15      	ldr	r3, [pc, #84]	; (8012318 <_Z23getFont_verdana_13_4bppv+0x5c>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f003 0301 	and.w	r3, r3, #1
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d11f      	bne.n	801230e <_Z23getFont_verdana_13_4bppv+0x52>
 80122ce:	2300      	movs	r3, #0
 80122d0:	9309      	str	r3, [sp, #36]	; 0x24
 80122d2:	2300      	movs	r3, #0
 80122d4:	9308      	str	r3, [sp, #32]
 80122d6:	2300      	movs	r3, #0
 80122d8:	9307      	str	r3, [sp, #28]
 80122da:	4b10      	ldr	r3, [pc, #64]	; (801231c <_Z23getFont_verdana_13_4bppv+0x60>)
 80122dc:	9306      	str	r3, [sp, #24]
 80122de:	4b10      	ldr	r3, [pc, #64]	; (8012320 <_Z23getFont_verdana_13_4bppv+0x64>)
 80122e0:	9305      	str	r3, [sp, #20]
 80122e2:	2300      	movs	r3, #0
 80122e4:	9304      	str	r3, [sp, #16]
 80122e6:	2300      	movs	r3, #0
 80122e8:	9303      	str	r3, [sp, #12]
 80122ea:	2301      	movs	r3, #1
 80122ec:	9302      	str	r3, [sp, #8]
 80122ee:	2304      	movs	r3, #4
 80122f0:	9301      	str	r3, [sp, #4]
 80122f2:	2300      	movs	r3, #0
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	230d      	movs	r3, #13
 80122f8:	2211      	movs	r2, #17
 80122fa:	490a      	ldr	r1, [pc, #40]	; (8012324 <_Z23getFont_verdana_13_4bppv+0x68>)
 80122fc:	480a      	ldr	r0, [pc, #40]	; (8012328 <_Z23getFont_verdana_13_4bppv+0x6c>)
 80122fe:	f7ff ff4d 	bl	801219c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8012302:	4b05      	ldr	r3, [pc, #20]	; (8012318 <_Z23getFont_verdana_13_4bppv+0x5c>)
 8012304:	2201      	movs	r2, #1
 8012306:	601a      	str	r2, [r3, #0]
 8012308:	4808      	ldr	r0, [pc, #32]	; (801232c <_Z23getFont_verdana_13_4bppv+0x70>)
 801230a:	f00d fa3b 	bl	801f784 <atexit>
    return verdana_13_4bpp;
 801230e:	4b06      	ldr	r3, [pc, #24]	; (8012328 <_Z23getFont_verdana_13_4bppv+0x6c>)
}
 8012310:	4618      	mov	r0, r3
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	200086a4 	.word	0x200086a4
 801231c:	08025d98 	.word	0x08025d98
 8012320:	08021db8 	.word	0x08021db8
 8012324:	08025dac 	.word	0x08025dac
 8012328:	20008680 	.word	0x20008680
 801232c:	080122ad 	.word	0x080122ad

08012330 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_18_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 5, 18, 0, 4, 1, 0, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 8012330:	b580      	push	{r7, lr}
 8012332:	af00      	add	r7, sp, #0
 8012334:	4801      	ldr	r0, [pc, #4]	; (801233c <__tcf_0+0xc>)
 8012336:	f7ff fef7 	bl	8012128 <_ZN8touchgfx13GeneratedFontD1Ev>
 801233a:	bd80      	pop	{r7, pc}
 801233c:	200086a8 	.word	0x200086a8

08012340 <_Z23getFont_verdana_18_4bppv>:
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b08a      	sub	sp, #40	; 0x28
 8012344:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 5, 18, 0, 4, 1, 0, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 8012346:	4b15      	ldr	r3, [pc, #84]	; (801239c <_Z23getFont_verdana_18_4bppv+0x5c>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	d11f      	bne.n	8012392 <_Z23getFont_verdana_18_4bppv+0x52>
 8012352:	2300      	movs	r3, #0
 8012354:	9309      	str	r3, [sp, #36]	; 0x24
 8012356:	2300      	movs	r3, #0
 8012358:	9308      	str	r3, [sp, #32]
 801235a:	233f      	movs	r3, #63	; 0x3f
 801235c:	9307      	str	r3, [sp, #28]
 801235e:	4b10      	ldr	r3, [pc, #64]	; (80123a0 <_Z23getFont_verdana_18_4bppv+0x60>)
 8012360:	9306      	str	r3, [sp, #24]
 8012362:	4b10      	ldr	r3, [pc, #64]	; (80123a4 <_Z23getFont_verdana_18_4bppv+0x64>)
 8012364:	9305      	str	r3, [sp, #20]
 8012366:	2301      	movs	r3, #1
 8012368:	9304      	str	r3, [sp, #16]
 801236a:	2300      	movs	r3, #0
 801236c:	9303      	str	r3, [sp, #12]
 801236e:	2301      	movs	r3, #1
 8012370:	9302      	str	r3, [sp, #8]
 8012372:	2304      	movs	r3, #4
 8012374:	9301      	str	r3, [sp, #4]
 8012376:	2300      	movs	r3, #0
 8012378:	9300      	str	r3, [sp, #0]
 801237a:	2312      	movs	r3, #18
 801237c:	2205      	movs	r2, #5
 801237e:	490a      	ldr	r1, [pc, #40]	; (80123a8 <_Z23getFont_verdana_18_4bppv+0x68>)
 8012380:	480a      	ldr	r0, [pc, #40]	; (80123ac <_Z23getFont_verdana_18_4bppv+0x6c>)
 8012382:	f7ff ff0b 	bl	801219c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8012386:	4b05      	ldr	r3, [pc, #20]	; (801239c <_Z23getFont_verdana_18_4bppv+0x5c>)
 8012388:	2201      	movs	r2, #1
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	4808      	ldr	r0, [pc, #32]	; (80123b0 <_Z23getFont_verdana_18_4bppv+0x70>)
 801238e:	f00d f9f9 	bl	801f784 <atexit>
    return verdana_18_4bpp;
 8012392:	4b06      	ldr	r3, [pc, #24]	; (80123ac <_Z23getFont_verdana_18_4bppv+0x6c>)
}
 8012394:	4618      	mov	r0, r3
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	200086cc 	.word	0x200086cc
 80123a0:	08025d9c 	.word	0x08025d9c
 80123a4:	08021dbc 	.word	0x08021dbc
 80123a8:	08025e9c 	.word	0x08025e9c
 80123ac:	200086a8 	.word	0x200086a8
 80123b0:	08012331 	.word	0x08012331

080123b4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 29, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80123b4:	b580      	push	{r7, lr}
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	4801      	ldr	r0, [pc, #4]	; (80123c0 <__tcf_0+0xc>)
 80123ba:	f7ff feb5 	bl	8012128 <_ZN8touchgfx13GeneratedFontD1Ev>
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	200086d0 	.word	0x200086d0

080123c4 <_Z23getFont_verdana_20_4bppv>:
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b08a      	sub	sp, #40	; 0x28
 80123c8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 29, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80123ca:	4b15      	ldr	r3, [pc, #84]	; (8012420 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f003 0301 	and.w	r3, r3, #1
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d11f      	bne.n	8012416 <_Z23getFont_verdana_20_4bppv+0x52>
 80123d6:	2300      	movs	r3, #0
 80123d8:	9309      	str	r3, [sp, #36]	; 0x24
 80123da:	2300      	movs	r3, #0
 80123dc:	9308      	str	r3, [sp, #32]
 80123de:	233f      	movs	r3, #63	; 0x3f
 80123e0:	9307      	str	r3, [sp, #28]
 80123e2:	4b10      	ldr	r3, [pc, #64]	; (8012424 <_Z23getFont_verdana_20_4bppv+0x60>)
 80123e4:	9306      	str	r3, [sp, #24]
 80123e6:	4b10      	ldr	r3, [pc, #64]	; (8012428 <_Z23getFont_verdana_20_4bppv+0x64>)
 80123e8:	9305      	str	r3, [sp, #20]
 80123ea:	2300      	movs	r3, #0
 80123ec:	9304      	str	r3, [sp, #16]
 80123ee:	2300      	movs	r3, #0
 80123f0:	9303      	str	r3, [sp, #12]
 80123f2:	2301      	movs	r3, #1
 80123f4:	9302      	str	r3, [sp, #8]
 80123f6:	2304      	movs	r3, #4
 80123f8:	9301      	str	r3, [sp, #4]
 80123fa:	2304      	movs	r3, #4
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	2314      	movs	r3, #20
 8012400:	221d      	movs	r2, #29
 8012402:	490a      	ldr	r1, [pc, #40]	; (801242c <_Z23getFont_verdana_20_4bppv+0x68>)
 8012404:	480a      	ldr	r0, [pc, #40]	; (8012430 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8012406:	f7ff fec9 	bl	801219c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801240a:	4b05      	ldr	r3, [pc, #20]	; (8012420 <_Z23getFont_verdana_20_4bppv+0x5c>)
 801240c:	2201      	movs	r2, #1
 801240e:	601a      	str	r2, [r3, #0]
 8012410:	4808      	ldr	r0, [pc, #32]	; (8012434 <_Z23getFont_verdana_20_4bppv+0x70>)
 8012412:	f00d f9b7 	bl	801f784 <atexit>
    return verdana_20_4bpp;
 8012416:	4b06      	ldr	r3, [pc, #24]	; (8012430 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 8012418:	4618      	mov	r0, r3
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	200086f4 	.word	0x200086f4
 8012424:	08025da0 	.word	0x08025da0
 8012428:	08021dc0 	.word	0x08021dc0
 801242c:	08025ee4 	.word	0x08025ee4
 8012430:	200086d0 	.word	0x200086d0
 8012434:	080123b5 	.word	0x080123b5

08012438 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0, 0);
 8012438:	b580      	push	{r7, lr}
 801243a:	af00      	add	r7, sp, #0
 801243c:	4801      	ldr	r0, [pc, #4]	; (8012444 <__tcf_0+0xc>)
 801243e:	f7ff fe73 	bl	8012128 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012442:	bd80      	pop	{r7, pc}
 8012444:	200086f8 	.word	0x200086f8

08012448 <_Z23getFont_verdana_40_4bppv>:
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b08a      	sub	sp, #40	; 0x28
 801244c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0, 0);
 801244e:	4b15      	ldr	r3, [pc, #84]	; (80124a4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f003 0301 	and.w	r3, r3, #1
 8012456:	2b00      	cmp	r3, #0
 8012458:	d11f      	bne.n	801249a <_Z23getFont_verdana_40_4bppv+0x52>
 801245a:	2300      	movs	r3, #0
 801245c:	9309      	str	r3, [sp, #36]	; 0x24
 801245e:	2300      	movs	r3, #0
 8012460:	9308      	str	r3, [sp, #32]
 8012462:	2300      	movs	r3, #0
 8012464:	9307      	str	r3, [sp, #28]
 8012466:	4b10      	ldr	r3, [pc, #64]	; (80124a8 <_Z23getFont_verdana_40_4bppv+0x60>)
 8012468:	9306      	str	r3, [sp, #24]
 801246a:	4b10      	ldr	r3, [pc, #64]	; (80124ac <_Z23getFont_verdana_40_4bppv+0x64>)
 801246c:	9305      	str	r3, [sp, #20]
 801246e:	2300      	movs	r3, #0
 8012470:	9304      	str	r3, [sp, #16]
 8012472:	2300      	movs	r3, #0
 8012474:	9303      	str	r3, [sp, #12]
 8012476:	2301      	movs	r3, #1
 8012478:	9302      	str	r3, [sp, #8]
 801247a:	2304      	movs	r3, #4
 801247c:	9301      	str	r3, [sp, #4]
 801247e:	2300      	movs	r3, #0
 8012480:	9300      	str	r3, [sp, #0]
 8012482:	2328      	movs	r3, #40	; 0x28
 8012484:	2200      	movs	r2, #0
 8012486:	490a      	ldr	r1, [pc, #40]	; (80124b0 <_Z23getFont_verdana_40_4bppv+0x68>)
 8012488:	480a      	ldr	r0, [pc, #40]	; (80124b4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 801248a:	f7ff fe87 	bl	801219c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801248e:	4b05      	ldr	r3, [pc, #20]	; (80124a4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8012490:	2201      	movs	r2, #1
 8012492:	601a      	str	r2, [r3, #0]
 8012494:	4808      	ldr	r0, [pc, #32]	; (80124b8 <_Z23getFont_verdana_40_4bppv+0x70>)
 8012496:	f00d f975 	bl	801f784 <atexit>
    return verdana_40_4bpp;
 801249a:	4b06      	ldr	r3, [pc, #24]	; (80124b4 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 801249c:	4618      	mov	r0, r3
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	2000871c 	.word	0x2000871c
 80124a8:	08025da4 	.word	0x08025da4
 80124ac:	08021dd0 	.word	0x08021dd0
 80124b0:	0802607c 	.word	0x0802607c
 80124b4:	200086f8 	.word	0x200086f8
 80124b8:	08012439 	.word	0x08012439

080124bc <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_69_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_69_4bpp();

touchgfx::GeneratedFont& getFont_verdana_69_4bpp()
{
    static touchgfx::GeneratedFont verdana_69_4bpp(glyphs_verdana_69_4bpp, 3, 69, 1, 4, 1, 0, 0, unicodes_verdana_69_4bpp, kerning_verdana_69_4bpp, 63, 0, 0);
 80124bc:	b580      	push	{r7, lr}
 80124be:	af00      	add	r7, sp, #0
 80124c0:	4801      	ldr	r0, [pc, #4]	; (80124c8 <__tcf_0+0xc>)
 80124c2:	f7ff fe31 	bl	8012128 <_ZN8touchgfx13GeneratedFontD1Ev>
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	20008720 	.word	0x20008720

080124cc <_Z23getFont_verdana_69_4bppv>:
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b08a      	sub	sp, #40	; 0x28
 80124d0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_69_4bpp(glyphs_verdana_69_4bpp, 3, 69, 1, 4, 1, 0, 0, unicodes_verdana_69_4bpp, kerning_verdana_69_4bpp, 63, 0, 0);
 80124d2:	4b15      	ldr	r3, [pc, #84]	; (8012528 <_Z23getFont_verdana_69_4bppv+0x5c>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f003 0301 	and.w	r3, r3, #1
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d11f      	bne.n	801251e <_Z23getFont_verdana_69_4bppv+0x52>
 80124de:	2300      	movs	r3, #0
 80124e0:	9309      	str	r3, [sp, #36]	; 0x24
 80124e2:	2300      	movs	r3, #0
 80124e4:	9308      	str	r3, [sp, #32]
 80124e6:	233f      	movs	r3, #63	; 0x3f
 80124e8:	9307      	str	r3, [sp, #28]
 80124ea:	4b10      	ldr	r3, [pc, #64]	; (801252c <_Z23getFont_verdana_69_4bppv+0x60>)
 80124ec:	9306      	str	r3, [sp, #24]
 80124ee:	4b10      	ldr	r3, [pc, #64]	; (8012530 <_Z23getFont_verdana_69_4bppv+0x64>)
 80124f0:	9305      	str	r3, [sp, #20]
 80124f2:	2300      	movs	r3, #0
 80124f4:	9304      	str	r3, [sp, #16]
 80124f6:	2300      	movs	r3, #0
 80124f8:	9303      	str	r3, [sp, #12]
 80124fa:	2301      	movs	r3, #1
 80124fc:	9302      	str	r3, [sp, #8]
 80124fe:	2304      	movs	r3, #4
 8012500:	9301      	str	r3, [sp, #4]
 8012502:	2301      	movs	r3, #1
 8012504:	9300      	str	r3, [sp, #0]
 8012506:	2345      	movs	r3, #69	; 0x45
 8012508:	2203      	movs	r2, #3
 801250a:	490a      	ldr	r1, [pc, #40]	; (8012534 <_Z23getFont_verdana_69_4bppv+0x68>)
 801250c:	480a      	ldr	r0, [pc, #40]	; (8012538 <_Z23getFont_verdana_69_4bppv+0x6c>)
 801250e:	f7ff fe45 	bl	801219c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8012512:	4b05      	ldr	r3, [pc, #20]	; (8012528 <_Z23getFont_verdana_69_4bppv+0x5c>)
 8012514:	2201      	movs	r2, #1
 8012516:	601a      	str	r2, [r3, #0]
 8012518:	4808      	ldr	r0, [pc, #32]	; (801253c <_Z23getFont_verdana_69_4bppv+0x70>)
 801251a:	f00d f933 	bl	801f784 <atexit>
    return verdana_69_4bpp;
 801251e:	4b06      	ldr	r3, [pc, #24]	; (8012538 <_Z23getFont_verdana_69_4bppv+0x6c>)
}
 8012520:	4618      	mov	r0, r3
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20008744 	.word	0x20008744
 801252c:	08025da8 	.word	0x08025da8
 8012530:	08021dd4 	.word	0x08021dd4
 8012534:	0802608c 	.word	0x0802608c
 8012538:	20008720 	.word	0x20008720
 801253c:	080124bd 	.word	0x080124bd

08012540 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	4618      	mov	r0, r3
 801254e:	370c      	adds	r7, #12
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr

08012558 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012558:	b480      	push	{r7}
 801255a:	b083      	sub	sp, #12
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
    {
    }
 8012562:	bf00      	nop
 8012564:	370c      	adds	r7, #12
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr

0801256e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801256e:	b480      	push	{r7}
 8012570:	b083      	sub	sp, #12
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
 8012576:	6039      	str	r1, [r7, #0]
    {
    }
 8012578:	bf00      	nop
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8012584:	b480      	push	{r7}
 8012586:	b083      	sub	sp, #12
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
    {
    }
 801258e:	bf00      	nop
 8012590:	370c      	adds	r7, #12
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr

0801259a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801259a:	b480      	push	{r7}
 801259c:	b083      	sub	sp, #12
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
 80125a2:	460b      	mov	r3, r1
 80125a4:	70fb      	strb	r3, [r7, #3]
    {
    }
 80125a6:	bf00      	nop
 80125a8:	370c      	adds	r7, #12
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr

080125b2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80125b2:	b480      	push	{r7}
 80125b4:	b083      	sub	sp, #12
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
    {
    }
 80125ba:	bf00      	nop
 80125bc:	370c      	adds	r7, #12
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr

080125c6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 80125c6:	b480      	push	{r7}
 80125c8:	b083      	sub	sp, #12
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	6078      	str	r0, [r7, #4]
    {
    }
 80125ce:	bf00      	nop
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr
	...

080125dc <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 80125dc:	b480      	push	{r7}
 80125de:	b083      	sub	sp, #12
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
    {
 80125e4:	4a04      	ldr	r2, [pc, #16]	; (80125f8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	601a      	str	r2, [r3, #0]
    }
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	370c      	adds	r7, #12
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr
 80125f8:	08021f08 	.word	0x08021f08

080125fc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
    }
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f7ff ffe9 	bl	80125dc <_ZN8touchgfx15UIEventListenerD1Ev>
 801260a:	2104      	movs	r1, #4
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f00d f87e 	bl	801f70e <_ZdlPvj>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8012624:	4a07      	ldr	r2, [pc, #28]	; (8012644 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	601a      	str	r2, [r3, #0]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	605a      	str	r2, [r3, #4]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2200      	movs	r2, #0
 8012634:	721a      	strb	r2, [r3, #8]
    {
    }
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4618      	mov	r0, r3
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	08021ee8 	.word	0x08021ee8

08012648 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
    {
 8012650:	4a04      	ldr	r2, [pc, #16]	; (8012664 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	601a      	str	r2, [r3, #0]
    }
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	4618      	mov	r0, r3
 801265a:	370c      	adds	r7, #12
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	08021ee8 	.word	0x08021ee8

08012668 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
    }
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f7ff ffe9 	bl	8012648 <_ZN8touchgfx10TransitionD1Ev>
 8012676:	210c      	movs	r1, #12
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f00d f848 	bl	801f70e <_ZdlPvj>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	4618      	mov	r0, r3
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr

0801269c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801269c:	b480      	push	{r7}
 801269e:	b083      	sub	sp, #12
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	bf00      	nop
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	bf00      	nop
 80126ba:	370c      	adds	r7, #12
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr

080126c4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	683a      	ldr	r2, [r7, #0]
 80126d2:	605a      	str	r2, [r3, #4]
    }
 80126d4:	bf00      	nop
 80126d6:	370c      	adds	r7, #12
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr

080126e0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	460b      	mov	r3, r1
 80126ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 80126ec:	bf00      	nop
 80126ee:	370c      	adds	r7, #12
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr

080126f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
    {
 8012700:	4a04      	ldr	r2, [pc, #16]	; (8012714 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	601a      	str	r2, [r3, #0]
    }
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4618      	mov	r0, r3
 801270a:	370c      	adds	r7, #12
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr
 8012714:	08021ed0 	.word	0x08021ed0

08012718 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
    }
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7ff ffe9 	bl	80126f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8012726:	2104      	movs	r1, #4
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f00c fff0 	bl	801f70e <_ZdlPvj>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4618      	mov	r0, r3
 8012732:	3708      	adds	r7, #8
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	4a05      	ldr	r2, [pc, #20]	; (8012758 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4618      	mov	r0, r3
 801274a:	f7ff ff47 	bl	80125dc <_ZN8touchgfx15UIEventListenerD1Ev>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4618      	mov	r0, r3
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	08023330 	.word	0x08023330

0801275c <_ZN8touchgfx11ApplicationD0Ev>:
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff ffe7 	bl	8012738 <_ZN8touchgfx11ApplicationD1Ev>
 801276a:	f44f 7198 	mov.w	r1, #304	; 0x130
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f00c ffcd 	bl	801f70e <_ZdlPvj>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
	...

08012780 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	4618      	mov	r0, r3
 801278c:	f007 f948 	bl	8019a20 <_ZN8touchgfx11ApplicationC1Ev>
 8012790:	4a09      	ldr	r2, [pc, #36]	; (80127b8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	601a      	str	r2, [r3, #0]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2200      	movs	r2, #0
 801279a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2200      	movs	r2, #0
 80127a2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4a04      	ldr	r2, [pc, #16]	; (80127bc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80127aa:	6013      	str	r3, [r2, #0]
    }
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	4618      	mov	r0, r3
 80127b0:	3708      	adds	r7, #8
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	08021e94 	.word	0x08021e94
 80127bc:	20009b20 	.word	0x20009b20

080127c0 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	4a05      	ldr	r2, [pc, #20]	; (80127e0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	601a      	str	r2, [r3, #0]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff ffb1 	bl	8012738 <_ZN8touchgfx11ApplicationD1Ev>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4618      	mov	r0, r3
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	08021e94 	.word	0x08021e94

080127e4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7ff ffe7 	bl	80127c0 <_ZN8touchgfx14MVPApplicationD1Ev>
 80127f2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f00c ff89 	bl	801f70e <_ZdlPvj>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	4618      	mov	r0, r3
 8012800:	3708      	adds	r7, #8
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}

08012806 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8012806:	b580      	push	{r7, lr}
 8012808:	b082      	sub	sp, #8
 801280a:	af00      	add	r7, sp, #0
 801280c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f804 	bl	801281c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8012814:	bf00      	nop
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00f      	beq.n	801284e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	330c      	adds	r3, #12
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4610      	mov	r0, r2
 8012842:	4798      	blx	r3
 8012844:	4603      	mov	r3, r0
 8012846:	2b00      	cmp	r3, #0
 8012848:	d001      	beq.n	801284e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801284a:	2301      	movs	r3, #1
 801284c:	e000      	b.n	8012850 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 801284e:	2300      	movs	r3, #0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00e      	beq.n	8012872 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	3308      	adds	r3, #8
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4610      	mov	r0, r2
 8012868:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2200      	movs	r2, #0
 801286e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8012872:	bf00      	nop
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b084      	sub	sp, #16
 801287e:	af00      	add	r7, sp, #0
 8012880:	60f8      	str	r0, [r7, #12]
 8012882:	60b9      	str	r1, [r7, #8]
 8012884:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8012886:	f007 f8ab 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 801288a:	4603      	mov	r3, r0
 801288c:	4618      	mov	r0, r3
 801288e:	f007 f8ad 	bl	80199ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d008      	beq.n	80128ac <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	330c      	adds	r3, #12
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4610      	mov	r0, r2
 80128aa:	4798      	blx	r3
    }
    if (*currentTrans)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d007      	beq.n	80128c4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4610      	mov	r0, r2
 80128c2:	4798      	blx	r3
    }
    if (*currentScreen)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d008      	beq.n	80128de <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	3314      	adds	r3, #20
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	4610      	mov	r0, r2
 80128dc:	4798      	blx	r3
    }
    if (*currentPresenter)
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d008      	beq.n	80128f8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	3304      	adds	r3, #4
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4610      	mov	r0, r2
 80128f6:	4798      	blx	r3
    }
    if (*currentScreen)
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d007      	beq.n	8012910 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	681a      	ldr	r2, [r3, #0]
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	4610      	mov	r0, r2
 801290e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d008      	beq.n	801292a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	681a      	ldr	r2, [r3, #0]
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	3308      	adds	r3, #8
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	4610      	mov	r0, r2
 8012928:	4798      	blx	r3
    }
}
 801292a:	bf00      	nop
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8012932:	b580      	push	{r7, lr}
 8012934:	b084      	sub	sp, #16
 8012936:	af00      	add	r7, sp, #0
 8012938:	60f8      	str	r0, [r7, #12]
 801293a:	60b9      	str	r1, [r7, #8]
 801293c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	330c      	adds	r3, #12
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	4798      	blx	r3
    newPresenter->activate();
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	68b8      	ldr	r0, [r7, #8]
 8012952:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012954:	6879      	ldr	r1, [r7, #4]
 8012956:	68f8      	ldr	r0, [r7, #12]
 8012958:	f008 f90e 	bl	801ab78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	3310      	adds	r3, #16
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	4798      	blx	r3

    Application::getInstance()->draw();
 8012968:	f007 f83a 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 801296c:	4602      	mov	r2, r0
 801296e:	6813      	ldr	r3, [r2, #0]
 8012970:	3328      	adds	r3, #40	; 0x28
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4610      	mov	r0, r2
 8012976:	4798      	blx	r3
}
 8012978:	bf00      	nop
 801297a:	3710      	adds	r7, #16
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	683a      	ldr	r2, [r7, #0]
 801298e:	601a      	str	r2, [r3, #0]
    }
 8012990:	bf00      	nop
 8012992:	370c      	adds	r7, #12
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	4a08      	ldr	r2, [pc, #32]	; (80129c8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	601a      	str	r2, [r3, #0]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80129b0:	4618      	mov	r0, r3
 80129b2:	f000 fde1 	bl	8013578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7ff ff01 	bl	80127c0 <_ZN8touchgfx14MVPApplicationD1Ev>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4618      	mov	r0, r3
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	08021e40 	.word	0x08021e40

080129cc <_ZN23FrontendApplicationBaseD0Ev>:
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f7ff ffe1 	bl	801299c <_ZN23FrontendApplicationBaseD1Ev>
 80129da:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f00c fe95 	bl	801f70e <_ZdlPvj>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	4618      	mov	r0, r3
 80129e8:	3708      	adds	r7, #8
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
	...

080129f0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7ff fe0e 	bl	801261c <_ZN8touchgfx10TransitionC1Ev>
 8012a00:	4a03      	ldr	r2, [pc, #12]	; (8012a10 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	601a      	str	r2, [r3, #0]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}
 8012a10:	08021e20 	.word	0x08021e20

08012a14 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	4a05      	ldr	r2, [pc, #20]	; (8012a34 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7ff fe0f 	bl	8012648 <_ZN8touchgfx10TransitionD1Ev>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	08021e20 	.word	0x08021e20

08012a38 <_ZN8touchgfx12NoTransitionD0Ev>:
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff ffe7 	bl	8012a14 <_ZN8touchgfx12NoTransitionD1Ev>
 8012a46:	210c      	movs	r1, #12
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f00c fe60 	bl	801f70e <_ZdlPvj>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	4618      	mov	r0, r3
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2201      	movs	r2, #1
 8012a64:	721a      	strb	r2, [r3, #8]
    }
 8012a66:	bf00      	nop
 8012a68:	370c      	adds	r7, #12
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr

08012a72 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8012a72:	b480      	push	{r7}
 8012a74:	b083      	sub	sp, #12
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
 8012a7a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	683a      	ldr	r2, [r7, #0]
 8012a80:	605a      	str	r2, [r3, #4]
    }
 8012a82:	bf00      	nop
 8012a84:	370c      	adds	r7, #12
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr
	...

08012a90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen3_screen/Screen3Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7ff fe6e 	bl	8012780 <_ZN8touchgfx14MVPApplicationC1Ev>
 8012aa4:	4a10      	ldr	r2, [pc, #64]	; (8012ae8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	601a      	str	r2, [r3, #0]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 f925 	bl	8012d00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	687a      	ldr	r2, [r7, #4]
 8012aba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	68ba      	ldr	r2, [r7, #8]
 8012ac2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8012ac6:	f7f9 fc9b 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 8012aca:	4602      	mov	r2, r0
 8012acc:	6813      	ldr	r3, [r2, #0]
 8012ace:	3308      	adds	r3, #8
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2101      	movs	r1, #1
 8012ad4:	4610      	mov	r0, r2
 8012ad6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8012ad8:	2000      	movs	r0, #0
 8012ada:	f001 ffd1 	bl	8014a80 <_ZN8touchgfx5Texts11setLanguageEt>
}
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3710      	adds	r7, #16
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	08021e40 	.word	0x08021e40

08012aec <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4618      	mov	r0, r3
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	683a      	ldr	r2, [r7, #0]
 8012b12:	4611      	mov	r1, r2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7ff ffe9 	bl	8012aec <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	685a      	ldr	r2, [r3, #4]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	605a      	str	r2, [r3, #4]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	683a      	ldr	r2, [r7, #0]
 8012b26:	3308      	adds	r3, #8
 8012b28:	3208      	adds	r2, #8
 8012b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8012b3c:	b590      	push	{r4, r7, lr}
 8012b3e:	b089      	sub	sp, #36	; 0x24
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8012b4a:	4b10      	ldr	r3, [pc, #64]	; (8012b8c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8012b4c:	61bb      	str	r3, [r7, #24]
 8012b4e:	2300      	movs	r3, #0
 8012b50:	61fb      	str	r3, [r7, #28]
 8012b52:	f107 0008 	add.w	r0, r7, #8
 8012b56:	f107 0318 	add.w	r3, r7, #24
 8012b5a:	cb0c      	ldmia	r3, {r2, r3}
 8012b5c:	6879      	ldr	r1, [r7, #4]
 8012b5e:	f000 f8eb 	bl	8012d38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012b62:	f107 0308 	add.w	r3, r7, #8
 8012b66:	4619      	mov	r1, r3
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f7ff ffcb 	bl	8012b04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012b6e:	f107 0308 	add.w	r3, r7, #8
 8012b72:	4618      	mov	r0, r3
 8012b74:	f000 fd00 	bl	8013578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8012b84:	bf00      	nop
 8012b86:	3724      	adds	r7, #36	; 0x24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd90      	pop	{r4, r7, pc}
 8012b8c:	08012b91 	.word	0x08012b91

08012b90 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af02      	add	r7, sp, #8
 8012b96:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	4b04      	ldr	r3, [pc, #16]	; (8012bc0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8012bb0:	4804      	ldr	r0, [pc, #16]	; (8012bc4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8012bb2:	f000 f8e1 	bl	8012d78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012bb6:	bf00      	nop
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20009b1c 	.word	0x20009b1c
 8012bc4:	20009b18 	.word	0x20009b18

08012bc8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
 8012bc8:	b590      	push	{r4, r7, lr}
 8012bca:	b089      	sub	sp, #36	; 0x24
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8012bd6:	4b10      	ldr	r3, [pc, #64]	; (8012c18 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x50>)
 8012bd8:	61bb      	str	r3, [r7, #24]
 8012bda:	2300      	movs	r3, #0
 8012bdc:	61fb      	str	r3, [r7, #28]
 8012bde:	f107 0008 	add.w	r0, r7, #8
 8012be2:	f107 0318 	add.w	r3, r7, #24
 8012be6:	cb0c      	ldmia	r3, {r2, r3}
 8012be8:	6879      	ldr	r1, [r7, #4]
 8012bea:	f000 f8a5 	bl	8012d38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012bee:	f107 0308 	add.w	r3, r7, #8
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f7ff ff85 	bl	8012b04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012bfa:	f107 0308 	add.w	r3, r7, #8
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f000 fcba 	bl	8013578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8012c10:	bf00      	nop
 8012c12:	3724      	adds	r7, #36	; 0x24
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd90      	pop	{r4, r7, pc}
 8012c18:	08012c1d 	.word	0x08012c1d

08012c1c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b084      	sub	sp, #16
 8012c20:	af02      	add	r7, sp, #8
 8012c22:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8012c30:	461a      	mov	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	4b04      	ldr	r3, [pc, #16]	; (8012c4c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x30>)
 8012c3c:	4804      	ldr	r0, [pc, #16]	; (8012c50 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x34>)
 8012c3e:	f000 f955 	bl	8012eec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012c42:	bf00      	nop
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	20009b1c 	.word	0x20009b1c
 8012c50:	20009b18 	.word	0x20009b18

08012c54 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 8012c54:	b590      	push	{r4, r7, lr}
 8012c56:	b089      	sub	sp, #36	; 0x24
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8012c62:	4b10      	ldr	r3, [pc, #64]	; (8012ca4 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x50>)
 8012c64:	61bb      	str	r3, [r7, #24]
 8012c66:	2300      	movs	r3, #0
 8012c68:	61fb      	str	r3, [r7, #28]
 8012c6a:	f107 0008 	add.w	r0, r7, #8
 8012c6e:	f107 0318 	add.w	r3, r7, #24
 8012c72:	cb0c      	ldmia	r3, {r2, r3}
 8012c74:	6879      	ldr	r1, [r7, #4]
 8012c76:	f000 f85f 	bl	8012d38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012c7a:	f107 0308 	add.w	r3, r7, #8
 8012c7e:	4619      	mov	r1, r3
 8012c80:	4620      	mov	r0, r4
 8012c82:	f7ff ff3f 	bl	8012b04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012c86:	f107 0308 	add.w	r3, r7, #8
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f000 fc74 	bl	8013578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8012c9c:	bf00      	nop
 8012c9e:	3724      	adds	r7, #36	; 0x24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd90      	pop	{r4, r7, pc}
 8012ca4:	08012ca9 	.word	0x08012ca9

08012ca8 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b084      	sub	sp, #16
 8012cac:	af02      	add	r7, sp, #8
 8012cae:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012cc4:	9300      	str	r3, [sp, #0]
 8012cc6:	4b04      	ldr	r3, [pc, #16]	; (8012cd8 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x30>)
 8012cc8:	4804      	ldr	r0, [pc, #16]	; (8012cdc <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x34>)
 8012cca:	f000 f9c9 	bl	8013060 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012cce:	bf00      	nop
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	20009b1c 	.word	0x20009b1c
 8012cdc:	20009b18 	.word	0x20009b18

08012ce0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	4a04      	ldr	r2, [pc, #16]	; (8012cfc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	601a      	str	r2, [r3, #0]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr
 8012cfc:	08021ed0 	.word	0x08021ed0

08012d00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7ff ffe8 	bl	8012ce0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012d10:	4a08      	ldr	r2, [pc, #32]	; (8012d34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	601a      	str	r2, [r3, #0]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	605a      	str	r2, [r3, #4]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	609a      	str	r2, [r3, #8]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2200      	movs	r2, #0
 8012d26:	60da      	str	r2, [r3, #12]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3708      	adds	r7, #8
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop
 8012d34:	08021e7c 	.word	0x08021e7c

08012d38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	4639      	mov	r1, r7
 8012d44:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ff ffc8 	bl	8012ce0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012d50:	4a08      	ldr	r2, [pc, #32]	; (8012d74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	3308      	adds	r3, #8
 8012d60:	463a      	mov	r2, r7
 8012d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d66:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3710      	adds	r7, #16
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	08021e7c 	.word	0x08021e7c

08012d78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012d78:	b590      	push	{r4, r7, lr}
 8012d7a:	b089      	sub	sp, #36	; 0x24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	689a      	ldr	r2, [r3, #8]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	689b      	ldr	r3, [r3, #8]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	3320      	adds	r3, #32
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4610      	mov	r0, r2
 8012d96:	4798      	blx	r3
 8012d98:	4603      	mov	r3, r0
 8012d9a:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8012d9e:	d205      	bcs.n	8012dac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8012da0:	4b4d      	ldr	r3, [pc, #308]	; (8012ed8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8012da2:	4a4e      	ldr	r2, [pc, #312]	; (8012edc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8012da4:	21c2      	movs	r1, #194	; 0xc2
 8012da6:	484e      	ldr	r0, [pc, #312]	; (8012ee0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8012da8:	f00c fcce 	bl	801f748 <__assert_func>
 8012dac:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	685a      	ldr	r2, [r3, #4]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	3320      	adds	r3, #32
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	4610      	mov	r0, r2
 8012dbe:	4798      	blx	r3
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b0f      	cmp	r3, #15
 8012dc4:	d805      	bhi.n	8012dd2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8012dc6:	4b47      	ldr	r3, [pc, #284]	; (8012ee4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8012dc8:	4a44      	ldr	r2, [pc, #272]	; (8012edc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8012dca:	21c3      	movs	r1, #195	; 0xc3
 8012dcc:	4844      	ldr	r0, [pc, #272]	; (8012ee0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8012dce:	f00c fcbb 	bl	801f748 <__assert_func>
 8012dd2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	68da      	ldr	r2, [r3, #12]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	68db      	ldr	r3, [r3, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	3320      	adds	r3, #32
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	4610      	mov	r0, r2
 8012de4:	4798      	blx	r3
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b0b      	cmp	r3, #11
 8012dea:	d805      	bhi.n	8012df8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8012dec:	4b3e      	ldr	r3, [pc, #248]	; (8012ee8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8012dee:	4a3b      	ldr	r2, [pc, #236]	; (8012edc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8012df0:	21c4      	movs	r1, #196	; 0xc4
 8012df2:	483b      	ldr	r0, [pc, #236]	; (8012ee0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8012df4:	f00c fca8 	bl	801f748 <__assert_func>
 8012df8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8012dfa:	683a      	ldr	r2, [r7, #0]
 8012dfc:	68b9      	ldr	r1, [r7, #8]
 8012dfe:	68f8      	ldr	r0, [r7, #12]
 8012e00:	f7ff fd3b 	bl	801287a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	2100      	movs	r1, #0
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 f9e2 	bl	80131d4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012e10:	4603      	mov	r3, r0
 8012e12:	4619      	mov	r1, r3
 8012e14:	200c      	movs	r0, #12
 8012e16:	f7ff fb93 	bl	8012540 <_ZnwjPv>
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	2c00      	cmp	r4, #0
 8012e1e:	d004      	beq.n	8012e2a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8012e20:	4620      	mov	r0, r4
 8012e22:	f7ff fde5 	bl	80129f0 <_ZN8touchgfx12NoTransitionC1Ev>
 8012e26:	4623      	mov	r3, r4
 8012e28:	e000      	b.n	8012e2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8012e2a:	4623      	mov	r3, r4
 8012e2c:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	689b      	ldr	r3, [r3, #8]
 8012e32:	2100      	movs	r1, #0
 8012e34:	4618      	mov	r0, r3
 8012e36:	f000 f9e0 	bl	80131fa <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8012e42:	f7ff fb7d 	bl	8012540 <_ZnwjPv>
 8012e46:	4604      	mov	r4, r0
 8012e48:	2c00      	cmp	r4, #0
 8012e4a:	d004      	beq.n	8012e56 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f002 f879 	bl	8014f44 <_ZN11Screen1ViewC1Ev>
 8012e52:	4623      	mov	r3, r4
 8012e54:	e000      	b.n	8012e58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8012e56:	4623      	mov	r3, r4
 8012e58:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	2100      	movs	r1, #0
 8012e60:	4618      	mov	r0, r3
 8012e62:	f000 f9dd 	bl	8013220 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8012e66:	4603      	mov	r3, r0
 8012e68:	4619      	mov	r1, r3
 8012e6a:	2010      	movs	r0, #16
 8012e6c:	f7ff fb68 	bl	8012540 <_ZnwjPv>
 8012e70:	4604      	mov	r4, r0
 8012e72:	2c00      	cmp	r4, #0
 8012e74:	d005      	beq.n	8012e82 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8012e76:	69b9      	ldr	r1, [r7, #24]
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f001 fff7 	bl	8014e6c <_ZN16Screen1PresenterC1ER11Screen1View>
 8012e7e:	4623      	mov	r3, r4
 8012e80:	e000      	b.n	8012e84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8012e82:	4623      	mov	r3, r4
 8012e84:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	69fa      	ldr	r2, [r7, #28]
 8012e8a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	697a      	ldr	r2, [r7, #20]
 8012e90:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	69ba      	ldr	r2, [r7, #24]
 8012e96:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d002      	beq.n	8012ea4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	3304      	adds	r3, #4
 8012ea2:	e000      	b.n	8012ea6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eaa:	f7ff fd69 	bl	8012980 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	3304      	adds	r3, #4
 8012eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7ff fddc 	bl	8012a72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8012eba:	69bb      	ldr	r3, [r7, #24]
 8012ebc:	6979      	ldr	r1, [r7, #20]
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f000 f9c1 	bl	8013246 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8012ec4:	69fa      	ldr	r2, [r7, #28]
 8012ec6:	6979      	ldr	r1, [r7, #20]
 8012ec8:	69b8      	ldr	r0, [r7, #24]
 8012eca:	f7ff fd32 	bl	8012932 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8012ece:	697b      	ldr	r3, [r7, #20]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3724      	adds	r7, #36	; 0x24
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd90      	pop	{r4, r7, pc}
 8012ed8:	08020f20 	.word	0x08020f20
 8012edc:	08021f28 	.word	0x08021f28
 8012ee0:	08020fb0 	.word	0x08020fb0
 8012ee4:	08021000 	.word	0x08021000
 8012ee8:	080210a4 	.word	0x080210a4

08012eec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012eec:	b590      	push	{r4, r7, lr}
 8012eee:	b089      	sub	sp, #36	; 0x24
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	607a      	str	r2, [r7, #4]
 8012ef8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	689a      	ldr	r2, [r3, #8]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	3320      	adds	r3, #32
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4610      	mov	r0, r2
 8012f0a:	4798      	blx	r3
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2be3      	cmp	r3, #227	; 0xe3
 8012f10:	d805      	bhi.n	8012f1e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8012f12:	4b4e      	ldr	r3, [pc, #312]	; (801304c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8012f14:	4a4e      	ldr	r2, [pc, #312]	; (8013050 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8012f16:	21c2      	movs	r1, #194	; 0xc2
 8012f18:	484e      	ldr	r0, [pc, #312]	; (8013054 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8012f1a:	f00c fc15 	bl	801f748 <__assert_func>
 8012f1e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	685a      	ldr	r2, [r3, #4]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	3320      	adds	r3, #32
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4610      	mov	r0, r2
 8012f30:	4798      	blx	r3
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b0f      	cmp	r3, #15
 8012f36:	d805      	bhi.n	8012f44 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8012f38:	4b47      	ldr	r3, [pc, #284]	; (8013058 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8012f3a:	4a45      	ldr	r2, [pc, #276]	; (8013050 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8012f3c:	21c3      	movs	r1, #195	; 0xc3
 8012f3e:	4845      	ldr	r0, [pc, #276]	; (8013054 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8012f40:	f00c fc02 	bl	801f748 <__assert_func>
 8012f44:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	68da      	ldr	r2, [r3, #12]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	68db      	ldr	r3, [r3, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	3320      	adds	r3, #32
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4610      	mov	r0, r2
 8012f56:	4798      	blx	r3
 8012f58:	4603      	mov	r3, r0
 8012f5a:	2b53      	cmp	r3, #83	; 0x53
 8012f5c:	d805      	bhi.n	8012f6a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8012f5e:	4b3f      	ldr	r3, [pc, #252]	; (801305c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8012f60:	4a3b      	ldr	r2, [pc, #236]	; (8013050 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8012f62:	21c4      	movs	r1, #196	; 0xc4
 8012f64:	483b      	ldr	r0, [pc, #236]	; (8013054 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8012f66:	f00c fbef 	bl	801f748 <__assert_func>
 8012f6a:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8012f6c:	683a      	ldr	r2, [r7, #0]
 8012f6e:	68b9      	ldr	r1, [r7, #8]
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	f7ff fc82 	bl	801287a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f000 f970 	bl	8013262 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8012f82:	4603      	mov	r3, r0
 8012f84:	4619      	mov	r1, r3
 8012f86:	2054      	movs	r0, #84	; 0x54
 8012f88:	f7ff fada 	bl	8012540 <_ZnwjPv>
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	2c00      	cmp	r4, #0
 8012f90:	d005      	beq.n	8012f9e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8012f92:	2114      	movs	r1, #20
 8012f94:	4620      	mov	r0, r4
 8012f96:	f000 f999 	bl	80132cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8012f9a:	4623      	mov	r3, r4
 8012f9c:	e000      	b.n	8012fa0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8012f9e:	4623      	mov	r3, r4
 8012fa0:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	689b      	ldr	r3, [r3, #8]
 8012fa6:	2100      	movs	r1, #0
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f000 fa23 	bl	80133f4 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	20e4      	movs	r0, #228	; 0xe4
 8012fb4:	f7ff fac4 	bl	8012540 <_ZnwjPv>
 8012fb8:	4604      	mov	r4, r0
 8012fba:	2c00      	cmp	r4, #0
 8012fbc:	d004      	beq.n	8012fc8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f002 f894 	bl	80150ec <_ZN11Screen2ViewC1Ev>
 8012fc4:	4623      	mov	r3, r4
 8012fc6:	e000      	b.n	8012fca <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8012fc8:	4623      	mov	r3, r4
 8012fca:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f000 fa21 	bl	801341a <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	4619      	mov	r1, r3
 8012fdc:	2010      	movs	r0, #16
 8012fde:	f7ff faaf 	bl	8012540 <_ZnwjPv>
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	2c00      	cmp	r4, #0
 8012fe6:	d005      	beq.n	8012ff4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 8012fe8:	69b9      	ldr	r1, [r7, #24]
 8012fea:	4620      	mov	r0, r4
 8012fec:	f002 f828 	bl	8015040 <_ZN16Screen2PresenterC1ER11Screen2View>
 8012ff0:	4623      	mov	r3, r4
 8012ff2:	e000      	b.n	8012ff6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8012ff4:	4623      	mov	r3, r4
 8012ff6:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	69fa      	ldr	r2, [r7, #28]
 8012ffc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	697a      	ldr	r2, [r7, #20]
 8013002:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	69ba      	ldr	r2, [r7, #24]
 8013008:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d002      	beq.n	8013016 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	3304      	adds	r3, #4
 8013014:	e000      	b.n	8013018 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8013016:	2300      	movs	r3, #0
 8013018:	4619      	mov	r1, r3
 801301a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801301c:	f7ff fcb0 	bl	8012980 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	3304      	adds	r3, #4
 8013024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013026:	4618      	mov	r0, r3
 8013028:	f7ff fd23 	bl	8012a72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	6979      	ldr	r1, [r7, #20]
 8013030:	4618      	mov	r0, r3
 8013032:	f000 fa05 	bl	8013440 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8013036:	69fa      	ldr	r2, [r7, #28]
 8013038:	6979      	ldr	r1, [r7, #20]
 801303a:	69b8      	ldr	r0, [r7, #24]
 801303c:	f7ff fc79 	bl	8012932 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8013040:	697b      	ldr	r3, [r7, #20]
}
 8013042:	4618      	mov	r0, r3
 8013044:	3724      	adds	r7, #36	; 0x24
 8013046:	46bd      	mov	sp, r7
 8013048:	bd90      	pop	{r4, r7, pc}
 801304a:	bf00      	nop
 801304c:	08020f20 	.word	0x08020f20
 8013050:	0802202c 	.word	0x0802202c
 8013054:	08020fb0 	.word	0x08020fb0
 8013058:	08021000 	.word	0x08021000
 801305c:	080210a4 	.word	0x080210a4

08013060 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8013060:	b590      	push	{r4, r7, lr}
 8013062:	b089      	sub	sp, #36	; 0x24
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	607a      	str	r2, [r7, #4]
 801306c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	689a      	ldr	r2, [r3, #8]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	689b      	ldr	r3, [r3, #8]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	3320      	adds	r3, #32
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4610      	mov	r0, r2
 801307e:	4798      	blx	r3
 8013080:	4603      	mov	r3, r0
 8013082:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8013086:	d205      	bcs.n	8013094 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8013088:	4b4d      	ldr	r3, [pc, #308]	; (80131c0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 801308a:	4a4e      	ldr	r2, [pc, #312]	; (80131c4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801308c:	21c2      	movs	r1, #194	; 0xc2
 801308e:	484e      	ldr	r0, [pc, #312]	; (80131c8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8013090:	f00c fb5a 	bl	801f748 <__assert_func>
 8013094:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	685a      	ldr	r2, [r3, #4]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	3320      	adds	r3, #32
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	4610      	mov	r0, r2
 80130a6:	4798      	blx	r3
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b0f      	cmp	r3, #15
 80130ac:	d805      	bhi.n	80130ba <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80130ae:	4b47      	ldr	r3, [pc, #284]	; (80131cc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80130b0:	4a44      	ldr	r2, [pc, #272]	; (80131c4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80130b2:	21c3      	movs	r1, #195	; 0xc3
 80130b4:	4844      	ldr	r0, [pc, #272]	; (80131c8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80130b6:	f00c fb47 	bl	801f748 <__assert_func>
 80130ba:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	68da      	ldr	r2, [r3, #12]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	3320      	adds	r3, #32
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	4610      	mov	r0, r2
 80130cc:	4798      	blx	r3
 80130ce:	4603      	mov	r3, r0
 80130d0:	2b0b      	cmp	r3, #11
 80130d2:	d805      	bhi.n	80130e0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80130d4:	4b3e      	ldr	r3, [pc, #248]	; (80131d0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80130d6:	4a3b      	ldr	r2, [pc, #236]	; (80131c4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80130d8:	21c4      	movs	r1, #196	; 0xc4
 80130da:	483b      	ldr	r0, [pc, #236]	; (80131c8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80130dc:	f00c fb34 	bl	801f748 <__assert_func>
 80130e0:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	68b9      	ldr	r1, [r7, #8]
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f7ff fbc7 	bl	801287a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	2100      	movs	r1, #0
 80130f2:	4618      	mov	r0, r3
 80130f4:	f000 f86e 	bl	80131d4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80130f8:	4603      	mov	r3, r0
 80130fa:	4619      	mov	r1, r3
 80130fc:	200c      	movs	r0, #12
 80130fe:	f7ff fa1f 	bl	8012540 <_ZnwjPv>
 8013102:	4604      	mov	r4, r0
 8013104:	2c00      	cmp	r4, #0
 8013106:	d004      	beq.n	8013112 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8013108:	4620      	mov	r0, r4
 801310a:	f7ff fc71 	bl	80129f0 <_ZN8touchgfx12NoTransitionC1Ev>
 801310e:	4623      	mov	r3, r4
 8013110:	e000      	b.n	8013114 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8013112:	4623      	mov	r3, r4
 8013114:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	2100      	movs	r1, #0
 801311c:	4618      	mov	r0, r3
 801311e:	f000 f99d 	bl	801345c <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 8013122:	4603      	mov	r3, r0
 8013124:	4619      	mov	r1, r3
 8013126:	f44f 7047 	mov.w	r0, #796	; 0x31c
 801312a:	f7ff fa09 	bl	8012540 <_ZnwjPv>
 801312e:	4604      	mov	r4, r0
 8013130:	2c00      	cmp	r4, #0
 8013132:	d004      	beq.n	801313e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8013134:	4620      	mov	r0, r4
 8013136:	f002 f88f 	bl	8015258 <_ZN11Screen3ViewC1Ev>
 801313a:	4623      	mov	r3, r4
 801313c:	e000      	b.n	8013140 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801313e:	4623      	mov	r3, r4
 8013140:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	2100      	movs	r1, #0
 8013148:	4618      	mov	r0, r3
 801314a:	f000 f99a 	bl	8013482 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 801314e:	4603      	mov	r3, r0
 8013150:	4619      	mov	r1, r3
 8013152:	2010      	movs	r0, #16
 8013154:	f7ff f9f4 	bl	8012540 <_ZnwjPv>
 8013158:	4604      	mov	r4, r0
 801315a:	2c00      	cmp	r4, #0
 801315c:	d005      	beq.n	801316a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 801315e:	69b9      	ldr	r1, [r7, #24]
 8013160:	4620      	mov	r0, r4
 8013162:	f002 f821 	bl	80151a8 <_ZN16Screen3PresenterC1ER11Screen3View>
 8013166:	4623      	mov	r3, r4
 8013168:	e000      	b.n	801316c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801316a:	4623      	mov	r3, r4
 801316c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	69fa      	ldr	r2, [r7, #28]
 8013172:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	69ba      	ldr	r2, [r7, #24]
 801317e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d002      	beq.n	801318c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	3304      	adds	r3, #4
 801318a:	e000      	b.n	801318e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801318c:	2300      	movs	r3, #0
 801318e:	4619      	mov	r1, r3
 8013190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013192:	f7ff fbf5 	bl	8012980 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	3304      	adds	r3, #4
 801319a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801319c:	4618      	mov	r0, r3
 801319e:	f7ff fc68 	bl	8012a72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	6979      	ldr	r1, [r7, #20]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 f97e 	bl	80134a8 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80131ac:	69fa      	ldr	r2, [r7, #28]
 80131ae:	6979      	ldr	r1, [r7, #20]
 80131b0:	69b8      	ldr	r0, [r7, #24]
 80131b2:	f7ff fbbe 	bl	8012932 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80131b6:	697b      	ldr	r3, [r7, #20]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3724      	adds	r7, #36	; 0x24
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd90      	pop	{r4, r7, pc}
 80131c0:	08020f20 	.word	0x08020f20
 80131c4:	0802214c 	.word	0x0802214c
 80131c8:	08020fb0 	.word	0x08020fb0
 80131cc:	08021000 	.word	0x08021000
 80131d0:	080210a4 	.word	0x080210a4

080131d4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	460b      	mov	r3, r1
 80131de:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	3324      	adds	r3, #36	; 0x24
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	887a      	ldrh	r2, [r7, #2]
 80131ea:	4611      	mov	r1, r2
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	4798      	blx	r3
 80131f0:	4603      	mov	r3, r0
    }
 80131f2:	4618      	mov	r0, r3
 80131f4:	3708      	adds	r7, #8
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b082      	sub	sp, #8
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
 8013202:	460b      	mov	r3, r1
 8013204:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	3324      	adds	r3, #36	; 0x24
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	887a      	ldrh	r2, [r7, #2]
 8013210:	4611      	mov	r1, r2
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	4798      	blx	r3
 8013216:	4603      	mov	r3, r0
    }
 8013218:	4618      	mov	r0, r3
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	460b      	mov	r3, r1
 801322a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	3324      	adds	r3, #36	; 0x24
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	887a      	ldrh	r2, [r7, #2]
 8013236:	4611      	mov	r1, r2
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	4798      	blx	r3
 801323c:	4603      	mov	r3, r0
    }
 801323e:	4618      	mov	r0, r3
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8013246:	b480      	push	{r7}
 8013248:	b083      	sub	sp, #12
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
 801324e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	683a      	ldr	r2, [r7, #0]
 8013254:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013256:	bf00      	nop
 8013258:	370c      	adds	r7, #12
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr

08013262 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8013262:	b580      	push	{r7, lr}
 8013264:	b082      	sub	sp, #8
 8013266:	af00      	add	r7, sp, #0
 8013268:	6078      	str	r0, [r7, #4]
 801326a:	460b      	mov	r3, r1
 801326c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	3324      	adds	r3, #36	; 0x24
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	887a      	ldrh	r2, [r7, #2]
 8013278:	4611      	mov	r1, r2
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	4798      	blx	r3
 801327e:	4603      	mov	r3, r0
    }
 8013280:	4618      	mov	r0, r3
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	4a05      	ldr	r2, [pc, #20]	; (80132a8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	601a      	str	r2, [r3, #0]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	4618      	mov	r0, r3
 801329a:	f7f9 fdbd 	bl	800ce18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	4618      	mov	r0, r3
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	08021e08 	.word	0x08021e08

080132ac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7ff ffe7 	bl	8013288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80132ba:	2110      	movs	r1, #16
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f00c fa26 	bl	801f70e <_ZdlPvj>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	4618      	mov	r0, r3
 80132c6:	3708      	adds	r7, #8
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}

080132cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80132cc:	b590      	push	{r4, r7, lr}
 80132ce:	b087      	sub	sp, #28
 80132d0:	af02      	add	r7, sp, #8
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	460b      	mov	r3, r1
 80132d6:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	4618      	mov	r0, r3
 80132dc:	f7ff f99e 	bl	801261c <_ZN8touchgfx10TransitionC1Ev>
 80132e0:	4a3f      	ldr	r2, [pc, #252]	; (80133e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	601a      	str	r2, [r3, #0]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	330c      	adds	r3, #12
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fb fc46 	bl	800eb7c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f103 020c 	add.w	r2, r3, #12
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	639a      	str	r2, [r3, #56]	; 0x38
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8013300:	4a38      	ldr	r2, [pc, #224]	; (80133e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 8013302:	f107 0308 	add.w	r3, r7, #8
 8013306:	e892 0003 	ldmia.w	r2, {r0, r1}
 801330a:	e883 0003 	stmia.w	r3, {r0, r1}
 801330e:	f107 0308 	add.w	r3, r7, #8
 8013312:	cb0c      	ldmia	r3, {r2, r3}
 8013314:	6879      	ldr	r1, [r7, #4]
 8013316:	4620      	mov	r0, r4
 8013318:	f000 f90e 	bl	8013538 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2202      	movs	r2, #2
 8013320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	78fa      	ldrb	r2, [r7, #3]
 8013328:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2200      	movs	r2, #0
 8013330:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 801333c:	4b2a      	ldr	r3, [pc, #168]	; (80133e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d047      	beq.n	80133d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f103 000c 	add.w	r0, r3, #12
 801334a:	4b28      	ldr	r3, [pc, #160]	; (80133ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801334c:	881b      	ldrh	r3, [r3, #0]
 801334e:	b21a      	sxth	r2, r3
 8013350:	4b27      	ldr	r3, [pc, #156]	; (80133f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8013352:	881b      	ldrh	r3, [r3, #0]
 8013354:	b21b      	sxth	r3, r3
 8013356:	9300      	str	r3, [sp, #0]
 8013358:	4613      	mov	r3, r2
 801335a:	2200      	movs	r2, #0
 801335c:	2100      	movs	r1, #0
 801335e:	f7f8 fe7f 	bl	800c060 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	330c      	adds	r3, #12
 8013366:	4618      	mov	r0, r3
 8013368:	f7fb fccb 	bl	800ed02 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013372:	2b03      	cmp	r3, #3
 8013374:	d82a      	bhi.n	80133cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 8013376:	a201      	add	r2, pc, #4	; (adr r2, 801337c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8013378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801337c:	080133ad 	.word	0x080133ad
 8013380:	080133bb 	.word	0x080133bb
 8013384:	0801338d 	.word	0x0801338d
 8013388:	0801339f 	.word	0x0801339f
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 801338c:	4b17      	ldr	r3, [pc, #92]	; (80133ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801338e:	881b      	ldrh	r3, [r3, #0]
 8013390:	425b      	negs	r3, r3
 8013392:	b29b      	uxth	r3, r3
 8013394:	b21a      	sxth	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801339c:	e01a      	b.n	80133d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 801339e:	4b13      	ldr	r3, [pc, #76]	; (80133ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80133a0:	881b      	ldrh	r3, [r3, #0]
 80133a2:	b21a      	sxth	r2, r3
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80133aa:	e013      	b.n	80133d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 80133ac:	4b10      	ldr	r3, [pc, #64]	; (80133f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80133ae:	881b      	ldrh	r3, [r3, #0]
 80133b0:	b21a      	sxth	r2, r3
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80133b8:	e00c      	b.n	80133d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 80133ba:	4b0d      	ldr	r3, [pc, #52]	; (80133f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80133bc:	881b      	ldrh	r3, [r3, #0]
 80133be:	425b      	negs	r3, r3
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	b21a      	sxth	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80133ca:	e003      	b.n	80133d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2201      	movs	r2, #1
 80133d0:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 80133d2:	bf00      	nop
            }
        }
    }
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	4618      	mov	r0, r3
 80133d8:	3714      	adds	r7, #20
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd90      	pop	{r4, r7, pc}
 80133de:	bf00      	nop
 80133e0:	08021de0 	.word	0x08021de0
 80133e4:	08021148 	.word	0x08021148
 80133e8:	20009abd 	.word	0x20009abd
 80133ec:	20009ab2 	.word	0x20009ab2
 80133f0:	20009ab4 	.word	0x20009ab4

080133f4 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	460b      	mov	r3, r1
 80133fe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	3324      	adds	r3, #36	; 0x24
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	887a      	ldrh	r2, [r7, #2]
 801340a:	4611      	mov	r1, r2
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	4798      	blx	r3
 8013410:	4603      	mov	r3, r0
    }
 8013412:	4618      	mov	r0, r3
 8013414:	3708      	adds	r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 801341a:	b580      	push	{r7, lr}
 801341c:	b082      	sub	sp, #8
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	460b      	mov	r3, r1
 8013424:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	3324      	adds	r3, #36	; 0x24
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	887a      	ldrh	r2, [r7, #2]
 8013430:	4611      	mov	r1, r2
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	4798      	blx	r3
 8013436:	4603      	mov	r3, r0
    }
 8013438:	4618      	mov	r0, r3
 801343a:	3708      	adds	r7, #8
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 8013440:	b480      	push	{r7}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	683a      	ldr	r2, [r7, #0]
 801344e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013450:	bf00      	nop
 8013452:	370c      	adds	r7, #12
 8013454:	46bd      	mov	sp, r7
 8013456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345a:	4770      	bx	lr

0801345c <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	460b      	mov	r3, r1
 8013466:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	3324      	adds	r3, #36	; 0x24
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	887a      	ldrh	r2, [r7, #2]
 8013472:	4611      	mov	r1, r2
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	4798      	blx	r3
 8013478:	4603      	mov	r3, r0
    }
 801347a:	4618      	mov	r0, r3
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 8013482:	b580      	push	{r7, lr}
 8013484:	b082      	sub	sp, #8
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
 801348a:	460b      	mov	r3, r1
 801348c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	3324      	adds	r3, #36	; 0x24
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	887a      	ldrh	r2, [r7, #2]
 8013498:	4611      	mov	r1, r2
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	4798      	blx	r3
 801349e:	4603      	mov	r3, r0
    }
 80134a0:	4618      	mov	r0, r3
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}

080134a8 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& presenter)
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	683a      	ldr	r2, [r7, #0]
 80134b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80134b8:	bf00      	nop
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr

080134c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134d2:	683a      	ldr	r2, [r7, #0]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d02a      	beq.n	801352e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80134de:	2b03      	cmp	r3, #3
 80134e0:	d820      	bhi.n	8013524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 80134e2:	a201      	add	r2, pc, #4	; (adr r2, 80134e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 80134e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e8:	0801350f 	.word	0x0801350f
 80134ec:	0801350f 	.word	0x0801350f
 80134f0:	080134f9 	.word	0x080134f9
 80134f4:	080134f9 	.word	0x080134f9
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	3354      	adds	r3, #84	; 0x54
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8013506:	2200      	movs	r2, #0
 8013508:	6838      	ldr	r0, [r7, #0]
 801350a:	4798      	blx	r3
            break;
 801350c:	e010      	b.n	8013530 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	3354      	adds	r3, #84	; 0x54
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 801351c:	2100      	movs	r1, #0
 801351e:	6838      	ldr	r0, [r7, #0]
 8013520:	4798      	blx	r3
            break;
 8013522:	e005      	b.n	8013530 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2201      	movs	r2, #1
 8013528:	721a      	strb	r2, [r3, #8]
            break;
 801352a:	bf00      	nop
 801352c:	e000      	b.n	8013530 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 801352e:	bf00      	nop
        }
    }
 8013530:	3708      	adds	r7, #8
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop

08013538 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	4639      	mov	r1, r7
 8013544:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	4618      	mov	r0, r3
 801354c:	f7f9 fc54 	bl	800cdf8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8013550:	4a08      	ldr	r2, [pc, #32]	; (8013574 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	68ba      	ldr	r2, [r7, #8]
 801355a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	3308      	adds	r3, #8
 8013560:	463a      	mov	r2, r7
 8013562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013566:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	4618      	mov	r0, r3
 801356e:	3710      	adds	r7, #16
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}
 8013574:	08021e08 	.word	0x08021e08

08013578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	4a05      	ldr	r2, [pc, #20]	; (8013598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	601a      	str	r2, [r3, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff f8b5 	bl	80126f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	4618      	mov	r0, r3
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	08021e7c 	.word	0x08021e7c

0801359c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f7ff ffe7 	bl	8013578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80135aa:	2110      	movs	r1, #16
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f00c f8ae 	bl	801f70e <_ZdlPvj>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4618      	mov	r0, r3
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
    }
 80135c4:	4a0a      	ldr	r2, [pc, #40]	; (80135f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	601a      	str	r2, [r3, #0]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	333c      	adds	r3, #60	; 0x3c
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ff fe5a 	bl	8013288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	330c      	adds	r3, #12
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fb fae9 	bl	800ebb0 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7ff f831 	bl	8012648 <_ZN8touchgfx10TransitionD1Ev>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	4618      	mov	r0, r3
 80135ea:	3708      	adds	r7, #8
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	08021de0 	.word	0x08021de0

080135f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
    }
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f7ff ffdd 	bl	80135bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8013602:	2154      	movs	r1, #84	; 0x54
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f00c f882 	bl	801f70e <_ZdlPvj>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4618      	mov	r0, r3
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 801361c:	4b59      	ldr	r3, [pc, #356]	; (8013784 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	f083 0301 	eor.w	r3, r3, #1
 8013624:	b2db      	uxtb	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	d003      	beq.n	8013632 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2201      	movs	r2, #1
 801362e:	721a      	strb	r2, [r3, #8]
            return;
 8013630:	e0a5      	b.n	801377e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4618      	mov	r0, r3
 8013636:	f7ff f827 	bl	8012688 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013640:	3301      	adds	r3, #1
 8013642:	b2da      	uxtb	r2, r3
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8013656:	429a      	cmp	r2, r3
 8013658:	d82f      	bhi.n	80136ba <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013660:	b298      	uxth	r0, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801366e:	b29b      	uxth	r3, r3
 8013670:	2100      	movs	r1, #0
 8013672:	f007 fa9b 	bl	801abac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013676:	4603      	mov	r3, r0
 8013678:	461a      	mov	r2, r3
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8013686:	b29b      	uxth	r3, r3
 8013688:	f003 0301 	and.w	r3, r3, #1
 801368c:	b29b      	uxth	r3, r3
 801368e:	2b00      	cmp	r3, #0
 8013690:	d01b      	beq.n	80136ca <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8013698:	b29b      	uxth	r3, r3
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 80136a0:	2a00      	cmp	r2, #0
 80136a2:	dd01      	ble.n	80136a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 80136a4:	2201      	movs	r2, #1
 80136a6:	e001      	b.n	80136ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 80136a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136ac:	4413      	add	r3, r2
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	b21a      	sxth	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80136b8:	e007      	b.n	80136ca <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2201      	movs	r2, #1
 80136be:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2200      	movs	r2, #0
 80136c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 80136c8:	e059      	b.n	801377e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80136d0:	2b03      	cmp	r3, #3
 80136d2:	d845      	bhi.n	8013760 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 80136d4:	a201      	add	r2, pc, #4	; (adr r2, 80136dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 80136d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136da:	bf00      	nop
 80136dc:	08013727 	.word	0x08013727
 80136e0:	08013727 	.word	0x08013727
 80136e4:	080136ed 	.word	0x080136ed
 80136e8:	080136ed 	.word	0x080136ed
            calculatedValue -= snapshot.getX();
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	330c      	adds	r3, #12
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f9 f898 	bl	800c826 <_ZNK8touchgfx8Drawable4getXEv>
 80136f6:	4603      	mov	r3, r0
 80136f8:	4619      	mov	r1, r3
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8013700:	b29a      	uxth	r2, r3
 8013702:	b28b      	uxth	r3, r1
 8013704:	1ad3      	subs	r3, r2, r3
 8013706:	b29b      	uxth	r3, r3
 8013708:	b21a      	sxth	r2, r3
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f103 000c 	add.w	r0, r3, #12
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801371c:	2200      	movs	r2, #0
 801371e:	4619      	mov	r1, r3
 8013720:	f006 fdef 	bl	801a302 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8013724:	e020      	b.n	8013768 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	330c      	adds	r3, #12
 801372a:	4618      	mov	r0, r3
 801372c:	f7f9 f888 	bl	800c840 <_ZNK8touchgfx8Drawable4getYEv>
 8013730:	4603      	mov	r3, r0
 8013732:	4619      	mov	r1, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801373a:	b29a      	uxth	r2, r3
 801373c:	b28b      	uxth	r3, r1
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	b29b      	uxth	r3, r3
 8013742:	b21a      	sxth	r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f103 000c 	add.w	r0, r3, #12
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8013756:	461a      	mov	r2, r3
 8013758:	2100      	movs	r1, #0
 801375a:	f006 fdd2 	bl	801a302 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801375e:	e003      	b.n	8013768 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2201      	movs	r2, #1
 8013764:	721a      	strb	r2, [r3, #8]
            break;
 8013766:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6858      	ldr	r0, [r3, #4]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	337c      	adds	r3, #124	; 0x7c
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	687a      	ldr	r2, [r7, #4]
 8013778:	323c      	adds	r2, #60	; 0x3c
 801377a:	4611      	mov	r1, r2
 801377c:	4798      	blx	r3
    }
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	20009abd 	.word	0x20009abd

08013788 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8013790:	4b0b      	ldr	r3, [pc, #44]	; (80137c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d00e      	beq.n	80137b6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00a      	beq.n	80137b6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6858      	ldr	r0, [r3, #4]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	3368      	adds	r3, #104	; 0x68
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	320c      	adds	r2, #12
 80137b2:	4611      	mov	r1, r2
 80137b4:	4798      	blx	r3
    }
 80137b6:	bf00      	nop
 80137b8:	3708      	adds	r7, #8
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	20009abd 	.word	0x20009abd

080137c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b088      	sub	sp, #32
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80137cc:	4b1a      	ldr	r3, [pc, #104]	; (8013838 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d02d      	beq.n	8013830 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7fe ff6a 	bl	80126b0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80137dc:	4a17      	ldr	r2, [pc, #92]	; (801383c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80137de:	f107 0318 	add.w	r3, r7, #24
 80137e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80137ea:	f107 0008 	add.w	r0, r7, #8
 80137ee:	f107 0318 	add.w	r3, r7, #24
 80137f2:	cb0c      	ldmia	r3, {r2, r3}
 80137f4:	6879      	ldr	r1, [r7, #4]
 80137f6:	f7ff fe9f 	bl	8013538 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	685a      	ldr	r2, [r3, #4]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	337c      	adds	r3, #124	; 0x7c
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f107 0108 	add.w	r1, r7, #8
 801380c:	4610      	mov	r0, r2
 801380e:	4798      	blx	r3
            screenContainer->add(snapshot);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6858      	ldr	r0, [r3, #4]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	3364      	adds	r3, #100	; 0x64
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	320c      	adds	r2, #12
 8013822:	4611      	mov	r1, r2
 8013824:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8013826:	f107 0308 	add.w	r3, r7, #8
 801382a:	4618      	mov	r0, r3
 801382c:	f7ff fd2c 	bl	8013288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8013830:	bf00      	nop
 8013832:	3720      	adds	r7, #32
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}
 8013838:	20009abd 	.word	0x20009abd
 801383c:	08021150 	.word	0x08021150

08013840 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	6039      	str	r1, [r7, #0]
        switch (direction)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013850:	2b03      	cmp	r3, #3
 8013852:	d83b      	bhi.n	80138cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8013854:	a201      	add	r2, pc, #4	; (adr r2, 801385c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8013856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801385a:	bf00      	nop
 801385c:	0801389d 	.word	0x0801389d
 8013860:	080138b7 	.word	0x080138b7
 8013864:	0801386d 	.word	0x0801386d
 8013868:	08013883 	.word	0x08013883
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	3354      	adds	r3, #84	; 0x54
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	4a18      	ldr	r2, [pc, #96]	; (80138d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8013876:	8812      	ldrh	r2, [r2, #0]
 8013878:	b211      	sxth	r1, r2
 801387a:	2200      	movs	r2, #0
 801387c:	6838      	ldr	r0, [r7, #0]
 801387e:	4798      	blx	r3
            break;
 8013880:	e025      	b.n	80138ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	3354      	adds	r3, #84	; 0x54
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	4a13      	ldr	r2, [pc, #76]	; (80138d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801388c:	8812      	ldrh	r2, [r2, #0]
 801388e:	4252      	negs	r2, r2
 8013890:	b292      	uxth	r2, r2
 8013892:	b211      	sxth	r1, r2
 8013894:	2200      	movs	r2, #0
 8013896:	6838      	ldr	r0, [r7, #0]
 8013898:	4798      	blx	r3
            break;
 801389a:	e018      	b.n	80138ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	3354      	adds	r3, #84	; 0x54
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	4a0d      	ldr	r2, [pc, #52]	; (80138dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80138a6:	8812      	ldrh	r2, [r2, #0]
 80138a8:	4252      	negs	r2, r2
 80138aa:	b292      	uxth	r2, r2
 80138ac:	b212      	sxth	r2, r2
 80138ae:	2100      	movs	r1, #0
 80138b0:	6838      	ldr	r0, [r7, #0]
 80138b2:	4798      	blx	r3
            break;
 80138b4:	e00b      	b.n	80138ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	3354      	adds	r3, #84	; 0x54
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	4a07      	ldr	r2, [pc, #28]	; (80138dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80138c0:	8812      	ldrh	r2, [r2, #0]
 80138c2:	b212      	sxth	r2, r2
 80138c4:	2100      	movs	r1, #0
 80138c6:	6838      	ldr	r0, [r7, #0]
 80138c8:	4798      	blx	r3
            break;
 80138ca:	e000      	b.n	80138ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80138cc:	bf00      	nop
    }
 80138ce:	bf00      	nop
 80138d0:	3708      	adds	r7, #8
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	20009ab2 	.word	0x20009ab2
 80138dc:	20009ab4 	.word	0x20009ab4

080138e0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	68d2      	ldr	r2, [r2, #12]
 80138f2:	1052      	asrs	r2, r2, #1
 80138f4:	1898      	adds	r0, r3, r2
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	f003 0301 	and.w	r3, r3, #1
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d102      	bne.n	8013908 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	689b      	ldr	r3, [r3, #8]
 8013906:	e00a      	b.n	801391e <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	68d2      	ldr	r2, [r2, #12]
 8013910:	1052      	asrs	r2, r2, #1
 8013912:	4413      	add	r3, r2
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	6892      	ldr	r2, [r2, #8]
 801391a:	4413      	add	r3, r2
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	6839      	ldr	r1, [r7, #0]
 8013920:	4798      	blx	r3
    }
 8013922:	bf00      	nop
 8013924:	3708      	adds	r7, #8
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}

0801392a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801392a:	b480      	push	{r7}
 801392c:	b083      	sub	sp, #12
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d010      	beq.n	801395c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d107      	bne.n	8013952 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	68db      	ldr	r3, [r3, #12]
 8013946:	f003 0301 	and.w	r3, r3, #1
 801394a:	2b00      	cmp	r3, #0
 801394c:	d101      	bne.n	8013952 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801394e:	2301      	movs	r3, #1
 8013950:	e000      	b.n	8013954 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8013952:	2300      	movs	r3, #0
 8013954:	2b01      	cmp	r3, #1
 8013956:	d001      	beq.n	801395c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8013958:	2301      	movs	r3, #1
 801395a:	e000      	b.n	801395e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 801395c:	2300      	movs	r3, #0
    }
 801395e:	4618      	mov	r0, r3
 8013960:	370c      	adds	r7, #12
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr

0801396a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801396a:	b580      	push	{r7, lr}
 801396c:	b082      	sub	sp, #8
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	68d2      	ldr	r2, [r2, #12]
 801397a:	1052      	asrs	r2, r2, #1
 801397c:	1899      	adds	r1, r3, r2
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	f003 0301 	and.w	r3, r3, #1
 8013986:	2b00      	cmp	r3, #0
 8013988:	d102      	bne.n	8013990 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	689b      	ldr	r3, [r3, #8]
 801398e:	e00a      	b.n	80139a6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	68d2      	ldr	r2, [r2, #12]
 8013998:	1052      	asrs	r2, r2, #1
 801399a:	4413      	add	r3, r2
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	6892      	ldr	r2, [r2, #8]
 80139a2:	4413      	add	r3, r2
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	4608      	mov	r0, r1
 80139a8:	4798      	blx	r3
    }
 80139aa:	bf00      	nop
 80139ac:	3708      	adds	r7, #8
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}

080139b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80139b2:	b480      	push	{r7}
 80139b4:	b083      	sub	sp, #12
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d010      	beq.n	80139e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d107      	bne.n	80139da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	68db      	ldr	r3, [r3, #12]
 80139ce:	f003 0301 	and.w	r3, r3, #1
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d101      	bne.n	80139da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80139d6:	2301      	movs	r3, #1
 80139d8:	e000      	b.n	80139dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80139da:	2300      	movs	r3, #0
 80139dc:	2b01      	cmp	r3, #1
 80139de:	d001      	beq.n	80139e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80139e0:	2301      	movs	r3, #1
 80139e2:	e000      	b.n	80139e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80139e4:	2300      	movs	r3, #0
    }
 80139e6:	4618      	mov	r0, r3
 80139e8:	370c      	adds	r7, #12
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr
	...

080139f4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	4a06      	ldr	r2, [pc, #24]	; (8013a18 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	601a      	str	r2, [r3, #0]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	3304      	adds	r3, #4
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7f8 fcaa 	bl	800c360 <_ZN8touchgfx9ContainerD1Ev>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3708      	adds	r7, #8
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}
 8013a16:	bf00      	nop
 8013a18:	0802353c 	.word	0x0802353c

08013a1c <_ZN8touchgfx6ScreenD0Ev>:
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f7ff ffe5 	bl	80139f4 <_ZN8touchgfx6ScreenD1Ev>
 8013a2a:	213c      	movs	r1, #60	; 0x3c
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f00b fe6e 	bl	801f70e <_ZdlPvj>
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	4618      	mov	r0, r3
 8013a36:	3708      	adds	r7, #8
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8013a3c:	b480      	push	{r7}
 8013a3e:	b083      	sub	sp, #12
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	bf00      	nop
 8013a46:	370c      	adds	r7, #12
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr

08013a50 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8013a50:	b480      	push	{r7}
 8013a52:	b083      	sub	sp, #12
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	bf00      	nop
 8013a5a:	370c      	adds	r7, #12
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a62:	4770      	bx	lr

08013a64 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8013a64:	b480      	push	{r7}
 8013a66:	b083      	sub	sp, #12
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	bf00      	nop
 8013a6e:	370c      	adds	r7, #12
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr

08013a78 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8013a78:	b480      	push	{r7}
 8013a7a:	b083      	sub	sp, #12
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
    {
    }
 8013a80:	bf00      	nop
 8013a82:	370c      	adds	r7, #12
 8013a84:	46bd      	mov	sp, r7
 8013a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8a:	4770      	bx	lr

08013a8c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	460b      	mov	r3, r1
 8013a96:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013a98:	bf00      	nop
 8013a9a:	370c      	adds	r7, #12
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr

08013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	3304      	adds	r3, #4
 8013ab2:	6839      	ldr	r1, [r7, #0]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7f8 fef3 	bl	800c8a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8013aba:	bf00      	nop
 8013abc:	3708      	adds	r7, #8
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}

08013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>:
    inline void setLinespacing(int16_t space)
 8013ac2:	b480      	push	{r7}
 8013ac4:	b083      	sub	sp, #12
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
 8013aca:	460b      	mov	r3, r1
 8013acc:	807b      	strh	r3, [r7, #2]
        linespace = space;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	887a      	ldrh	r2, [r7, #2]
 8013ad2:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8013ad4:	bf00      	nop
 8013ad6:	370c      	adds	r7, #12
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr

08013ae0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	4a05      	ldr	r2, [pc, #20]	; (8013b00 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	601a      	str	r2, [r3, #0]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7ff ff7f 	bl	80139f4 <_ZN8touchgfx6ScreenD1Ev>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	4618      	mov	r0, r3
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	080222a4 	.word	0x080222a4

08013b04 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7ff ffe7 	bl	8013ae0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8013b12:	2140      	movs	r1, #64	; 0x40
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f00b fdfa 	bl	801f70e <_ZdlPvj>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	4a15      	ldr	r2, [pc, #84]	; (8013b84 <_ZN15Screen1ViewBaseD1Ev+0x60>)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	601a      	str	r2, [r3, #0]
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f000 f9df 	bl	8013efc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fa fcaf 	bl	800e4a8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	33d4      	adds	r3, #212	; 0xd4
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7fa fb70 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	33a0      	adds	r3, #160	; 0xa0
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7fa fb6b 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	336c      	adds	r3, #108	; 0x6c
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f9 fb68 	bl	800d238 <_ZN8touchgfx6ButtonD1Ev>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	3340      	adds	r3, #64	; 0x40
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7f8 fc25 	bl	800c3bc <_ZN8touchgfx5ImageD1Ev>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7ff ffb3 	bl	8013ae0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3708      	adds	r7, #8
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	08022258 	.word	0x08022258

08013b88 <_ZN15Screen1ViewBaseD0Ev>:
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7ff ffc7 	bl	8013b24 <_ZN15Screen1ViewBaseD1Ev>
 8013b96:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f00b fdb7 	bl	801f70e <_ZdlPvj>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3708      	adds	r7, #8
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}

08013baa <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013baa:	b580      	push	{r7, lr}
 8013bac:	b082      	sub	sp, #8
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013bb2:	f005 ff15 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 8013bb6:	4603      	mov	r3, r0
    }
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3708      	adds	r7, #8
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8013bc0:	b590      	push	{r4, r7, lr}
 8013bc2:	b08d      	sub	sp, #52	; 0x34
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f000 f960 	bl	8013e90 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8013bd0:	4a9c      	ldr	r2, [pc, #624]	; (8013e44 <_ZN15Screen1ViewBaseC1Ev+0x284>)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	601a      	str	r2, [r3, #0]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013bdc:	f107 0308 	add.w	r3, r7, #8
 8013be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7f8 fa0a 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8013bea:	f107 0308 	add.w	r3, r7, #8
 8013bee:	4619      	mov	r1, r3
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f7f9 f9a7 	bl	800cf44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	336c      	adds	r3, #108	; 0x6c
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7f9 faf8 	bl	800d1f0 <_ZN8touchgfx6ButtonC1Ev>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	33a0      	adds	r3, #160	; 0xa0
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7fa fa67 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	33d4      	adds	r3, #212	; 0xd4
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fa fa62 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7fa fb60 	bl	800e2e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8013c26:	4b88      	ldr	r3, [pc, #544]	; (8013e48 <_ZN15Screen1ViewBaseC1Ev+0x288>)
 8013c28:	60fb      	str	r3, [r7, #12]
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	613b      	str	r3, [r7, #16]
 8013c2e:	f107 030c 	add.w	r3, r7, #12
 8013c32:	cb0c      	ldmia	r3, {r2, r3}
 8013c34:	6879      	ldr	r1, [r7, #4]
 8013c36:	f000 f941 	bl	8013ebc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    image1.setXY(-182, -48);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	3340      	adds	r3, #64	; 0x40
 8013c3e:	f06f 022f 	mvn.w	r2, #47	; 0x2f
 8013c42:	f06f 01b5 	mvn.w	r1, #181	; 0xb5
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f8 fa55 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BLACK_BACKGROUND_ID));
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013c52:	f107 0314 	add.w	r3, r7, #20
 8013c56:	2100      	movs	r1, #0
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7f8 f9d0 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8013c5e:	f107 0314 	add.w	r3, r7, #20
 8013c62:	4619      	mov	r1, r3
 8013c64:	4620      	mov	r0, r4
 8013c66:	f7fa fedf 	bl	800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    button1.setXY(32, 37);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	336c      	adds	r3, #108	; 0x6c
 8013c6e:	2225      	movs	r2, #37	; 0x25
 8013c70:	2120      	movs	r1, #32
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f8 fa3f 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013c7e:	f107 0318 	add.w	r3, r7, #24
 8013c82:	2101      	movs	r1, #1
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7f8 f9ba 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8013c8a:	f107 031c 	add.w	r3, r7, #28
 8013c8e:	2102      	movs	r1, #2
 8013c90:	4618      	mov	r0, r3
 8013c92:	f7f8 f9b4 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8013c96:	f107 021c 	add.w	r2, r7, #28
 8013c9a:	f107 0318 	add.w	r3, r7, #24
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	f7fa fd15 	bl	800e6d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	f7f9 fa6b 	bl	800d190 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    btn_1.setXY(74, 49);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	33a0      	adds	r3, #160	; 0xa0
 8013cbe:	2231      	movs	r2, #49	; 0x31
 8013cc0:	214a      	movs	r1, #74	; 0x4a
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7f8 fa17 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    btn_1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8013cce:	2200      	movs	r2, #0
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	2000      	movs	r0, #0
 8013cd4:	f7f9 f958 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	4619      	mov	r1, r3
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f7fa fa3e 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    btn_1.setLinespacing(0);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	33a0      	adds	r3, #160	; 0xa0
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff feea 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    btn_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8013cf4:	f107 0320 	add.w	r3, r7, #32
 8013cf8:	2100      	movs	r1, #0
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fa f93c 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 8013d00:	8c39      	ldrh	r1, [r7, #32]
 8013d02:	4620      	mov	r0, r4
 8013d04:	f7fb f8f9 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    btn_2.setXY(13, 135);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	33d4      	adds	r3, #212	; 0xd4
 8013d0c:	2287      	movs	r2, #135	; 0x87
 8013d0e:	210d      	movs	r1, #13
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7f8 f9f0 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    btn_2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	2100      	movs	r1, #0
 8013d20:	2000      	movs	r0, #0
 8013d22:	f7f9 f931 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d26:	4603      	mov	r3, r0
 8013d28:	4619      	mov	r1, r3
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f7fa fa17 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    btn_2.setLinespacing(0);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	33d4      	adds	r3, #212	; 0xd4
 8013d34:	2100      	movs	r1, #0
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7ff fec3 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    btn_2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8013d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013d46:	2101      	movs	r1, #1
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fa f915 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 8013d4e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8013d50:	4620      	mov	r0, r4
 8013d52:	f7fb f8d2 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea1.setXY(41, 223);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013d5c:	22df      	movs	r2, #223	; 0xdf
 8013d5e:	2129      	movs	r1, #41	; 0x29
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7f8 f9c8 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8013d6c:	22ff      	movs	r2, #255	; 0xff
 8013d6e:	21ff      	movs	r1, #255	; 0xff
 8013d70:	20ff      	movs	r0, #255	; 0xff
 8013d72:	f7f9 f909 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d76:	4603      	mov	r3, r0
 8013d78:	4619      	mov	r1, r3
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	f7fa f9ef 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013d86:	2100      	movs	r1, #0
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7ff fe9a 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID5).getText());
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d98:	2104      	movs	r1, #4
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7fa f8ec 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 8013da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7fa f90b 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 8013daa:	4603      	mov	r3, r0
 8013dac:	4a27      	ldr	r2, [pc, #156]	; (8013e4c <_ZN15Screen1ViewBaseC1Ev+0x28c>)
 8013dae:	210a      	movs	r1, #10
 8013db0:	4620      	mov	r0, r4
 8013db2:	f007 febd 	bl	801bb30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.setWildcard(textArea1Buffer);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	4610      	mov	r0, r2
 8013dc6:	f7fa fb28 	bl	800e41a <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.resizeToCurrentText();
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7fb f8b4 	bl	800ef3e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8013ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013de0:	2103      	movs	r1, #3
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fa f8c8 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 8013de8:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013dea:	4620      	mov	r0, r4
 8013dec:	f7fb f885 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(image1);
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	3340      	adds	r3, #64	; 0x40
 8013df6:	4619      	mov	r1, r3
 8013df8:	4610      	mov	r0, r2
 8013dfa:	f7ff fe53 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	336c      	adds	r3, #108	; 0x6c
 8013e04:	4619      	mov	r1, r3
 8013e06:	4610      	mov	r0, r2
 8013e08:	f7ff fe4c 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btn_1);
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	33a0      	adds	r3, #160	; 0xa0
 8013e12:	4619      	mov	r1, r3
 8013e14:	4610      	mov	r0, r2
 8013e16:	f7ff fe45 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btn_2);
 8013e1a:	687a      	ldr	r2, [r7, #4]
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	33d4      	adds	r3, #212	; 0xd4
 8013e20:	4619      	mov	r1, r3
 8013e22:	4610      	mov	r0, r2
 8013e24:	f7ff fe3e 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8013e28:	687a      	ldr	r2, [r7, #4]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013e30:	4619      	mov	r1, r3
 8013e32:	4610      	mov	r0, r2
 8013e34:	f7ff fe36 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3734      	adds	r7, #52	; 0x34
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd90      	pop	{r4, r7, pc}
 8013e42:	bf00      	nop
 8013e44:	08022258 	.word	0x08022258
 8013e48:	08013e65 	.word	0x08013e65
 8013e4c:	080212d0 	.word	0x080212d0

08013e50 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]

}
 8013e58:	bf00      	nop
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr

08013e64 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	336c      	adds	r3, #108	; 0x6c
 8013e72:	683a      	ldr	r2, [r7, #0]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d106      	bne.n	8013e86 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7ff fe96 	bl	8013baa <_ZN15Screen1ViewBase11applicationEv>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7fe fea1 	bl	8012bc8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
}
 8013e86:	bf00      	nop
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
	...

08013e90 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f006 fcee 	bl	801a87c <_ZN8touchgfx6ScreenC1Ev>
 8013ea0:	4a05      	ldr	r2, [pc, #20]	; (8013eb8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	601a      	str	r2, [r3, #0]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	080222a4 	.word	0x080222a4

08013ebc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	60b9      	str	r1, [r7, #8]
 8013ec6:	4639      	mov	r1, r7
 8013ec8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7f9 f9d4 	bl	800d27c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013ed4:	4a08      	ldr	r2, [pc, #32]	; (8013ef8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	3308      	adds	r3, #8
 8013ee4:	463a      	mov	r2, r7
 8013ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013eea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3710      	adds	r7, #16
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	0802228c 	.word	0x0802228c

08013efc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	4a05      	ldr	r2, [pc, #20]	; (8013f1c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	601a      	str	r2, [r3, #0]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7f9 f9c5 	bl	800d29c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	4618      	mov	r0, r3
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	0802228c 	.word	0x0802228c

08013f20 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f7ff ffe7 	bl	8013efc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013f2e:	2110      	movs	r1, #16
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f00b fbec 	bl	801f70e <_ZdlPvj>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	68d2      	ldr	r2, [r2, #12]
 8013f52:	1052      	asrs	r2, r2, #1
 8013f54:	1898      	adds	r0, r3, r2
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	f003 0301 	and.w	r3, r3, #1
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d102      	bne.n	8013f68 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	e00a      	b.n	8013f7e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	68d2      	ldr	r2, [r2, #12]
 8013f70:	1052      	asrs	r2, r2, #1
 8013f72:	4413      	add	r3, r2
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	6892      	ldr	r2, [r2, #8]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	6839      	ldr	r1, [r7, #0]
 8013f80:	4798      	blx	r3
    }
 8013f82:	bf00      	nop
 8013f84:	3708      	adds	r7, #8
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8013f8a:	b480      	push	{r7}
 8013f8c:	b083      	sub	sp, #12
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d010      	beq.n	8013fbc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	689b      	ldr	r3, [r3, #8]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d107      	bne.n	8013fb2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	f003 0301 	and.w	r3, r3, #1
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d101      	bne.n	8013fb2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013fae:	2301      	movs	r3, #1
 8013fb0:	e000      	b.n	8013fb4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d001      	beq.n	8013fbc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013fb8:	2301      	movs	r3, #1
 8013fba:	e000      	b.n	8013fbe <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013fbc:	2300      	movs	r3, #0
    }
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	370c      	adds	r7, #12
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr
	...

08013fcc <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	4a05      	ldr	r2, [pc, #20]	; (8013fec <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7ff fd09 	bl	80139f4 <_ZN8touchgfx6ScreenD1Ev>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3708      	adds	r7, #8
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}
 8013fec:	08022324 	.word	0x08022324

08013ff0 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f7ff ffe7 	bl	8013fcc <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8013ffe:	2140      	movs	r1, #64	; 0x40
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f00b fb84 	bl	801f70e <_ZdlPvj>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4618      	mov	r0, r3
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	4a0f      	ldr	r2, [pc, #60]	; (8014058 <_ZN15Screen2ViewBaseD1Ev+0x48>)
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	601a      	str	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	33d4      	adds	r3, #212	; 0xd4
 8014022:	4618      	mov	r0, r3
 8014024:	f000 f942 	bl	80142ac <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	33a0      	adds	r3, #160	; 0xa0
 801402c:	4618      	mov	r0, r3
 801402e:	f7fa f901 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	336c      	adds	r3, #108	; 0x6c
 8014036:	4618      	mov	r0, r3
 8014038:	f7f9 f8fe 	bl	800d238 <_ZN8touchgfx6ButtonD1Ev>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	3340      	adds	r3, #64	; 0x40
 8014040:	4618      	mov	r0, r3
 8014042:	f7f8 f9bb 	bl	800c3bc <_ZN8touchgfx5ImageD1Ev>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	4618      	mov	r0, r3
 801404a:	f7ff ffbf 	bl	8013fcc <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	4618      	mov	r0, r3
 8014052:	3708      	adds	r7, #8
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	080222d8 	.word	0x080222d8

0801405c <_ZN15Screen2ViewBaseD0Ev>:
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f7ff ffd3 	bl	8014010 <_ZN15Screen2ViewBaseD1Ev>
 801406a:	21e4      	movs	r1, #228	; 0xe4
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f00b fb4e 	bl	801f70e <_ZdlPvj>
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	4618      	mov	r0, r3
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8014084:	f005 fcac 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 8014088:	4603      	mov	r3, r0
    }
 801408a:	4618      	mov	r0, r3
 801408c:	3708      	adds	r7, #8
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}
	...

08014094 <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen2ViewBase::Screen2ViewBase() :
 8014094:	b590      	push	{r4, r7, lr}
 8014096:	b08b      	sub	sp, #44	; 0x2c
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	4618      	mov	r0, r3
 80140a0:	f000 f8ce 	bl	8014240 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 80140a4:	4a54      	ldr	r2, [pc, #336]	; (80141f8 <_ZN15Screen2ViewBaseC1Ev+0x164>)
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	601a      	str	r2, [r3, #0]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80140b0:	f107 030c 	add.w	r3, r7, #12
 80140b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7f7 ffa0 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80140be:	f107 030c 	add.w	r3, r7, #12
 80140c2:	4619      	mov	r1, r3
 80140c4:	4620      	mov	r0, r4
 80140c6:	f7f8 ff3d 	bl	800cf44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	336c      	adds	r3, #108	; 0x6c
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7f9 f88e 	bl	800d1f0 <_ZN8touchgfx6ButtonC1Ev>
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	33a0      	adds	r3, #160	; 0xa0
 80140d8:	4618      	mov	r0, r3
 80140da:	f7f9 fffd 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 80140e4:	4b45      	ldr	r3, [pc, #276]	; (80141fc <_ZN15Screen2ViewBaseC1Ev+0x168>)
 80140e6:	613b      	str	r3, [r7, #16]
 80140e8:	2300      	movs	r3, #0
 80140ea:	617b      	str	r3, [r7, #20]
 80140ec:	f107 0310 	add.w	r3, r7, #16
 80140f0:	cb0c      	ldmia	r3, {r2, r3}
 80140f2:	6879      	ldr	r1, [r7, #4]
 80140f4:	f000 f8ba 	bl	801426c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    image1.setXY(-171, -15);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	3340      	adds	r3, #64	; 0x40
 80140fc:	f06f 020e 	mvn.w	r2, #14
 8014100:	f06f 01aa 	mvn.w	r1, #170	; 0xaa
 8014104:	4618      	mov	r0, r3
 8014106:	f7f7 fff6 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BLACK_BACKGROUND_ID));
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014110:	f107 0318 	add.w	r3, r7, #24
 8014114:	2100      	movs	r1, #0
 8014116:	4618      	mov	r0, r3
 8014118:	f7f7 ff71 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 801411c:	f107 0318 	add.w	r3, r7, #24
 8014120:	4619      	mov	r1, r3
 8014122:	4620      	mov	r0, r4
 8014124:	f7fa fc80 	bl	800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    button1.setXY(41, 31);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	336c      	adds	r3, #108	; 0x6c
 801412c:	221f      	movs	r2, #31
 801412e:	2129      	movs	r1, #41	; 0x29
 8014130:	4618      	mov	r0, r3
 8014132:	f7f7 ffe0 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801413c:	f107 031c 	add.w	r3, r7, #28
 8014140:	2101      	movs	r1, #1
 8014142:	4618      	mov	r0, r3
 8014144:	f7f7 ff5b 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014148:	f107 0320 	add.w	r3, r7, #32
 801414c:	2102      	movs	r1, #2
 801414e:	4618      	mov	r0, r3
 8014150:	f7f7 ff55 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014154:	f107 0220 	add.w	r2, r7, #32
 8014158:	f107 031c 	add.w	r3, r7, #28
 801415c:	4619      	mov	r1, r3
 801415e:	4620      	mov	r0, r4
 8014160:	f7fa fab6 	bl	800e6d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	33d4      	adds	r3, #212	; 0xd4
 801416e:	4619      	mov	r1, r3
 8014170:	4610      	mov	r0, r2
 8014172:	f7f9 f80d 	bl	800d190 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    btn_1.setXY(74, 49);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	33a0      	adds	r3, #160	; 0xa0
 801417a:	2231      	movs	r2, #49	; 0x31
 801417c:	214a      	movs	r1, #74	; 0x4a
 801417e:	4618      	mov	r0, r3
 8014180:	f7f7 ffb9 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    btn_1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 801418a:	2200      	movs	r2, #0
 801418c:	2100      	movs	r1, #0
 801418e:	2000      	movs	r0, #0
 8014190:	f7f8 fefa 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014194:	4603      	mov	r3, r0
 8014196:	4619      	mov	r1, r3
 8014198:	4620      	mov	r0, r4
 801419a:	f7f9 ffe0 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    btn_1.setLinespacing(0);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	33a0      	adds	r3, #160	; 0xa0
 80141a2:	2100      	movs	r1, #0
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7ff fc8c 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    btn_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80141b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80141b4:	2102      	movs	r1, #2
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7f9 fede 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 80141bc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80141be:	4620      	mov	r0, r4
 80141c0:	f7fa fe9b 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(image1);
 80141c4:	687a      	ldr	r2, [r7, #4]
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	3340      	adds	r3, #64	; 0x40
 80141ca:	4619      	mov	r1, r3
 80141cc:	4610      	mov	r0, r2
 80141ce:	f7ff fc69 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	336c      	adds	r3, #108	; 0x6c
 80141d8:	4619      	mov	r1, r3
 80141da:	4610      	mov	r0, r2
 80141dc:	f7ff fc62 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btn_1);
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	33a0      	adds	r3, #160	; 0xa0
 80141e6:	4619      	mov	r1, r3
 80141e8:	4610      	mov	r0, r2
 80141ea:	f7ff fc5b 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4618      	mov	r0, r3
 80141f2:	372c      	adds	r7, #44	; 0x2c
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd90      	pop	{r4, r7, pc}
 80141f8:	080222d8 	.word	0x080222d8
 80141fc:	08014215 	.word	0x08014215

08014200 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8014200:	b480      	push	{r7}
 8014202:	b083      	sub	sp, #12
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]

}
 8014208:	bf00      	nop
 801420a:	370c      	adds	r7, #12
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr

08014214 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	336c      	adds	r3, #108	; 0x6c
 8014222:	683a      	ldr	r2, [r7, #0]
 8014224:	429a      	cmp	r2, r3
 8014226:	d106      	bne.n	8014236 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f7ff ff27 	bl	801407c <_ZN15Screen2ViewBase11applicationEv>
 801422e:	4603      	mov	r3, r0
 8014230:	4618      	mov	r0, r3
 8014232:	f7fe fd0f 	bl	8012c54 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
    }
}
 8014236:	bf00      	nop
 8014238:	3708      	adds	r7, #8
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
	...

08014240 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View() : presenter(0)
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	4618      	mov	r0, r3
 801424c:	f006 fb16 	bl	801a87c <_ZN8touchgfx6ScreenC1Ev>
 8014250:	4a05      	ldr	r2, [pc, #20]	; (8014268 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	601a      	str	r2, [r3, #0]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2200      	movs	r2, #0
 801425a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	4618      	mov	r0, r3
 8014260:	3708      	adds	r7, #8
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	08022324 	.word	0x08022324

0801426c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	60f8      	str	r0, [r7, #12]
 8014274:	60b9      	str	r1, [r7, #8]
 8014276:	4639      	mov	r1, r7
 8014278:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	4618      	mov	r0, r3
 8014280:	f7f8 fffc 	bl	800d27c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8014284:	4a08      	ldr	r2, [pc, #32]	; (80142a8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	68ba      	ldr	r2, [r7, #8]
 801428e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	3308      	adds	r3, #8
 8014294:	463a      	mov	r2, r7
 8014296:	e892 0003 	ldmia.w	r2, {r0, r1}
 801429a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	4618      	mov	r0, r3
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	0802230c 	.word	0x0802230c

080142ac <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	4a05      	ldr	r2, [pc, #20]	; (80142cc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	601a      	str	r2, [r3, #0]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	4618      	mov	r0, r3
 80142be:	f7f8 ffed 	bl	800d29c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	4618      	mov	r0, r3
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	0802230c 	.word	0x0802230c

080142d0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f7ff ffe7 	bl	80142ac <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80142de:	2110      	movs	r1, #16
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f00b fa14 	bl	801f70e <_ZdlPvj>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	4618      	mov	r0, r3
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	68d2      	ldr	r2, [r2, #12]
 8014302:	1052      	asrs	r2, r2, #1
 8014304:	1898      	adds	r0, r3, r2
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	f003 0301 	and.w	r3, r3, #1
 801430e:	2b00      	cmp	r3, #0
 8014310:	d102      	bne.n	8014318 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	689b      	ldr	r3, [r3, #8]
 8014316:	e00a      	b.n	801432e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	68d2      	ldr	r2, [r2, #12]
 8014320:	1052      	asrs	r2, r2, #1
 8014322:	4413      	add	r3, r2
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	687a      	ldr	r2, [r7, #4]
 8014328:	6892      	ldr	r2, [r2, #8]
 801432a:	4413      	add	r3, r2
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	6839      	ldr	r1, [r7, #0]
 8014330:	4798      	blx	r3
    }
 8014332:	bf00      	nop
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801433a:	b480      	push	{r7}
 801433c:	b083      	sub	sp, #12
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d010      	beq.n	801436c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d107      	bne.n	8014362 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	68db      	ldr	r3, [r3, #12]
 8014356:	f003 0301 	and.w	r3, r3, #1
 801435a:	2b00      	cmp	r3, #0
 801435c:	d101      	bne.n	8014362 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801435e:	2301      	movs	r3, #1
 8014360:	e000      	b.n	8014364 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8014362:	2300      	movs	r3, #0
 8014364:	2b01      	cmp	r3, #1
 8014366:	d001      	beq.n	801436c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014368:	2301      	movs	r3, #1
 801436a:	e000      	b.n	801436e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801436c:	2300      	movs	r3, #0
    }
 801436e:	4618      	mov	r0, r3
 8014370:	370c      	adds	r7, #12
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr

0801437a <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
    void setIconX(int16_t x)
 801437a:	b480      	push	{r7}
 801437c:	b083      	sub	sp, #12
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
 8014382:	460b      	mov	r3, r1
 8014384:	807b      	strh	r3, [r7, #2]
        iconX = x;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	887a      	ldrh	r2, [r7, #2]
 801438a:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
    void setIconY(int16_t y)
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	460b      	mov	r3, r1
 80143a2:	807b      	strh	r3, [r7, #2]
        iconY = y;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	887a      	ldrh	r2, [r7, #2]
 80143a8:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 80143aa:	bf00      	nop
 80143ac:	370c      	adds	r7, #12
 80143ae:	46bd      	mov	sp, r7
 80143b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b4:	4770      	bx	lr

080143b6 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
    void setIconXY(int16_t x, int16_t y)
 80143b6:	b580      	push	{r7, lr}
 80143b8:	b082      	sub	sp, #8
 80143ba:	af00      	add	r7, sp, #0
 80143bc:	6078      	str	r0, [r7, #4]
 80143be:	460b      	mov	r3, r1
 80143c0:	807b      	strh	r3, [r7, #2]
 80143c2:	4613      	mov	r3, r2
 80143c4:	803b      	strh	r3, [r7, #0]
        setIconX(x);
 80143c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143ca:	4619      	mov	r1, r3
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7ff ffd4 	bl	801437a <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 80143d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80143d6:	4619      	mov	r1, r3
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f7ff ffdd 	bl	8014398 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 80143de:	bf00      	nop
 80143e0:	3708      	adds	r7, #8
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
	...

080143e8 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	4a05      	ldr	r2, [pc, #20]	; (8014408 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	601a      	str	r2, [r3, #0]
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7ff fafb 	bl	80139f4 <_ZN8touchgfx6ScreenD1Ev>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	4618      	mov	r0, r3
 8014402:	3708      	adds	r7, #8
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	0802238c 	.word	0x0802238c

0801440c <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f7ff ffe7 	bl	80143e8 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 801441a:	2140      	movs	r1, #64	; 0x40
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f00b f976 	bl	801f70e <_ZdlPvj>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	4618      	mov	r0, r3
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	4a22      	ldr	r2, [pc, #136]	; (80144c0 <_ZN15Screen3ViewBaseD1Ev+0x94>)
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8014440:	4618      	mov	r0, r3
 8014442:	f7fa fab5 	bl	800e9b0 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 801444c:	4618      	mov	r0, r3
 801444e:	f7fa faaf 	bl	800e9b0 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8014458:	4618      	mov	r0, r3
 801445a:	f7f9 feeb 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8014464:	4618      	mov	r0, r3
 8014466:	f7f9 fee5 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014470:	4618      	mov	r0, r3
 8014472:	f7f9 fedf 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801447c:	4618      	mov	r0, r3
 801447e:	f7f9 fed9 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8014488:	4618      	mov	r0, r3
 801448a:	f7fa f80d 	bl	800e4a8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014494:	4618      	mov	r0, r3
 8014496:	f7f9 fecd 	bl	800e234 <_ZN8touchgfx8TextAreaD1Ev>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	336c      	adds	r3, #108	; 0x6c
 801449e:	4618      	mov	r0, r3
 80144a0:	f7f8 ffee 	bl	800d480 <_ZN8touchgfx6SliderD1Ev>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	3340      	adds	r3, #64	; 0x40
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7f7 ff87 	bl	800c3bc <_ZN8touchgfx5ImageD1Ev>
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7ff ff99 	bl	80143e8 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	4618      	mov	r0, r3
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	08022358 	.word	0x08022358

080144c4 <_ZN15Screen3ViewBaseD0Ev>:
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f7ff ffad 	bl	801442c <_ZN15Screen3ViewBaseD1Ev>
 80144d2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f00b f919 	bl	801f70e <_ZdlPvj>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	4618      	mov	r0, r3
 80144e0:	3708      	adds	r7, #8
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
	...

080144e8 <_ZN15Screen3ViewBaseC1Ev>:
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen3ViewBase::Screen3ViewBase()
 80144e8:	b590      	push	{r4, r7, lr}
 80144ea:	b099      	sub	sp, #100	; 0x64
 80144ec:	af02      	add	r7, sp, #8
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	4618      	mov	r0, r3
 80144f4:	f000 fa80 	bl	80149f8 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 80144f8:	4ae1      	ldr	r2, [pc, #900]	; (8014880 <_ZN15Screen3ViewBaseC1Ev+0x398>)
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014504:	f107 0308 	add.w	r3, r7, #8
 8014508:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801450c:	4618      	mov	r0, r3
 801450e:	f7f7 fd76 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014512:	f107 0308 	add.w	r3, r7, #8
 8014516:	4619      	mov	r1, r3
 8014518:	4620      	mov	r0, r4
 801451a:	f7f8 fd13 	bl	800cf44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	336c      	adds	r3, #108	; 0x6c
 8014522:	4618      	mov	r0, r3
 8014524:	f7f8 ff1c 	bl	800d360 <_ZN8touchgfx6SliderC1Ev>
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801452e:	4618      	mov	r0, r3
 8014530:	f7f9 fdd2 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801453a:	4618      	mov	r0, r3
 801453c:	f7f9 fed0 	bl	800e2e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8014546:	4618      	mov	r0, r3
 8014548:	f7f9 fdc6 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014552:	4618      	mov	r0, r3
 8014554:	f7f9 fdc0 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 801455e:	4618      	mov	r0, r3
 8014560:	f7f9 fdba 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f503 731c 	add.w	r3, r3, #624	; 0x270
 801456a:	4618      	mov	r0, r3
 801456c:	f7f9 fdb4 	bl	800e0d8 <_ZN8touchgfx8TextAreaC1Ev>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8014576:	4618      	mov	r0, r3
 8014578:	f7fa f90c 	bl	800e794 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8014582:	4618      	mov	r0, r3
 8014584:	f7fa f906 	bl	800e794 <_ZN8touchgfx14ButtonWithIconC1Ev>
{
    image1.setXY(-222, -28);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	3340      	adds	r3, #64	; 0x40
 801458c:	f06f 021b 	mvn.w	r2, #27
 8014590:	f06f 01dd 	mvn.w	r1, #221	; 0xdd
 8014594:	4618      	mov	r0, r3
 8014596:	f7f7 fdae 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BLACK_BACKGROUND_ID));
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80145a0:	f107 030c 	add.w	r3, r7, #12
 80145a4:	2100      	movs	r1, #0
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7f7 fd29 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80145ac:	f107 030c 	add.w	r3, r7, #12
 80145b0:	4619      	mov	r1, r3
 80145b2:	4620      	mov	r0, r4
 80145b4:	f7fa fa38 	bl	800ea28 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    slider1.setXY(26, 44);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	336c      	adds	r3, #108	; 0x6c
 80145bc:	222c      	movs	r2, #44	; 0x2c
 80145be:	211a      	movs	r1, #26
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7f7 fd98 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_DARK_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80145cc:	f107 0310 	add.w	r3, r7, #16
 80145d0:	2108      	movs	r1, #8
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7f7 fd13 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80145d8:	f107 0314 	add.w	r3, r7, #20
 80145dc:	2108      	movs	r1, #8
 80145de:	4618      	mov	r0, r3
 80145e0:	f7f7 fd0d 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80145e4:	f107 0318 	add.w	r3, r7, #24
 80145e8:	2105      	movs	r1, #5
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7f7 fd07 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80145f0:	f107 0318 	add.w	r3, r7, #24
 80145f4:	f107 0214 	add.w	r2, r7, #20
 80145f8:	f107 0110 	add.w	r1, r7, #16
 80145fc:	4620      	mov	r0, r4
 80145fe:	f7f8 ff75 	bl	800d4ec <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupVerticalSlider(0, 0, 3, 0, 135);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8014608:	2387      	movs	r3, #135	; 0x87
 801460a:	9301      	str	r3, [sp, #4]
 801460c:	2300      	movs	r3, #0
 801460e:	9300      	str	r3, [sp, #0]
 8014610:	2303      	movs	r3, #3
 8014612:	2200      	movs	r2, #0
 8014614:	2100      	movs	r1, #0
 8014616:	f7f9 f86f 	bl	800d6f8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    slider1.setValueRange(0, 135);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	336c      	adds	r3, #108	; 0x6c
 801461e:	2287      	movs	r2, #135	; 0x87
 8014620:	2100      	movs	r1, #0
 8014622:	4618      	mov	r0, r3
 8014624:	f7f9 fc08 	bl	800de38 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(0);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	336c      	adds	r3, #108	; 0x6c
 801462c:	2100      	movs	r1, #0
 801462e:	4618      	mov	r0, r3
 8014630:	f7f9 f906 	bl	800d840 <_ZN8touchgfx6Slider8setValueEi>

    textArea1.setXY(83, 58);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801463a:	223a      	movs	r2, #58	; 0x3a
 801463c:	2153      	movs	r1, #83	; 0x53
 801463e:	4618      	mov	r0, r3
 8014640:	f7f7 fd59 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 801464a:	22ff      	movs	r2, #255	; 0xff
 801464c:	21ff      	movs	r1, #255	; 0xff
 801464e:	20ff      	movs	r0, #255	; 0xff
 8014650:	f7f8 fc9a 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014654:	4603      	mov	r3, r0
 8014656:	4619      	mov	r1, r3
 8014658:	4620      	mov	r0, r4
 801465a:	f7f9 fd80 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014664:	2100      	movs	r1, #0
 8014666:	4618      	mov	r0, r3
 8014668:	f7ff fa2b 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8014672:	f107 031c 	add.w	r3, r7, #28
 8014676:	2105      	movs	r1, #5
 8014678:	4618      	mov	r0, r3
 801467a:	f7f9 fc7d 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 801467e:	8bb9      	ldrh	r1, [r7, #28]
 8014680:	4620      	mov	r0, r4
 8014682:	f7fa fc3a 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea2.setXY(85, 83);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801468c:	2253      	movs	r2, #83	; 0x53
 801468e:	2155      	movs	r1, #85	; 0x55
 8014690:	4618      	mov	r0, r3
 8014692:	f7f7 fd30 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(19, 175, 4));
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 801469c:	2204      	movs	r2, #4
 801469e:	21af      	movs	r1, #175	; 0xaf
 80146a0:	2013      	movs	r0, #19
 80146a2:	f7f8 fc71 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146a6:	4603      	mov	r3, r0
 80146a8:	4619      	mov	r1, r3
 80146aa:	4620      	mov	r0, r4
 80146ac:	f7f9 fd57 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80146b6:	2100      	movs	r1, #0
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7ff fa02 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea2.setWildcard(touchgfx::TypedText(T_SINGLEUSEID8).getText());
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 80146c4:	f107 0320 	add.w	r3, r7, #32
 80146c8:	2107      	movs	r1, #7
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7f9 fc54 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 80146d0:	f107 0320 	add.w	r3, r7, #32
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7f9 fc73 	bl	800dfc0 <_ZNK8touchgfx9TypedText7getTextEv>
 80146da:	4603      	mov	r3, r0
 80146dc:	4619      	mov	r1, r3
 80146de:	4620      	mov	r0, r4
 80146e0:	f7f9 fe9b 	bl	800e41a <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2.resizeToCurrentText();
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fa fc27 	bl	800ef3e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 80146f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146fa:	2106      	movs	r1, #6
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7f9 fc3b 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 8014702:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8014704:	4620      	mov	r0, r4
 8014706:	f7fa fbf8 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea3.setXY(176, 110);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8014710:	226e      	movs	r2, #110	; 0x6e
 8014712:	21b0      	movs	r1, #176	; 0xb0
 8014714:	4618      	mov	r0, r3
 8014716:	f7f7 fcee 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea3.setColor(touchgfx::Color::getColorFrom24BitRGB(19, 175, 4));
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f503 74ea 	add.w	r4, r3, #468	; 0x1d4
 8014720:	2204      	movs	r2, #4
 8014722:	21af      	movs	r1, #175	; 0xaf
 8014724:	2013      	movs	r0, #19
 8014726:	f7f8 fc2f 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801472a:	4603      	mov	r3, r0
 801472c:	4619      	mov	r1, r3
 801472e:	4620      	mov	r0, r4
 8014730:	f7f9 fd15 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea3.setLinespacing(0);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801473a:	2100      	movs	r1, #0
 801473c:	4618      	mov	r0, r3
 801473e:	f7ff f9c0 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f503 74ea 	add.w	r4, r3, #468	; 0x1d4
 8014748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801474c:	2108      	movs	r1, #8
 801474e:	4618      	mov	r0, r3
 8014750:	f7f9 fc12 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 8014754:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8014756:	4620      	mov	r0, r4
 8014758:	f7fa fbcf 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea4.setXY(85, 177);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014762:	22b1      	movs	r2, #177	; 0xb1
 8014764:	2155      	movs	r1, #85	; 0x55
 8014766:	4618      	mov	r0, r3
 8014768:	f7f7 fcc5 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea4.setColor(touchgfx::Color::getColorFrom24BitRGB(208, 208, 208));
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f503 7402 	add.w	r4, r3, #520	; 0x208
 8014772:	22d0      	movs	r2, #208	; 0xd0
 8014774:	21d0      	movs	r1, #208	; 0xd0
 8014776:	20d0      	movs	r0, #208	; 0xd0
 8014778:	f7f8 fc06 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801477c:	4603      	mov	r3, r0
 801477e:	4619      	mov	r1, r3
 8014780:	4620      	mov	r0, r4
 8014782:	f7f9 fcec 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea4.setLinespacing(0);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801478c:	2100      	movs	r1, #0
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff f997 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f503 7402 	add.w	r4, r3, #520	; 0x208
 801479a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801479e:	2109      	movs	r1, #9
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7f9 fbe9 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 80147a6:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80147a8:	4620      	mov	r0, r4
 80147aa:	f7fa fba6 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea5.setXY(129, 171);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80147b4:	22ab      	movs	r2, #171	; 0xab
 80147b6:	2181      	movs	r1, #129	; 0x81
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f7 fc9c 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea5.setColor(touchgfx::Color::getColorFrom24BitRGB(19, 175, 4));
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f503 740f 	add.w	r4, r3, #572	; 0x23c
 80147c4:	2204      	movs	r2, #4
 80147c6:	21af      	movs	r1, #175	; 0xaf
 80147c8:	2013      	movs	r0, #19
 80147ca:	f7f8 fbdd 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80147ce:	4603      	mov	r3, r0
 80147d0:	4619      	mov	r1, r3
 80147d2:	4620      	mov	r0, r4
 80147d4:	f7f9 fcc3 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea5.setLinespacing(0);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80147de:	2100      	movs	r1, #0
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7ff f96e 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f503 740f 	add.w	r4, r3, #572	; 0x23c
 80147ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80147f0:	210a      	movs	r1, #10
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7f9 fbc0 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 80147f8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80147fa:	4620      	mov	r0, r4
 80147fc:	f7fa fb7d 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea6.setXY(85, 195);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8014806:	22c3      	movs	r2, #195	; 0xc3
 8014808:	2155      	movs	r1, #85	; 0x55
 801480a:	4618      	mov	r0, r3
 801480c:	f7f7 fc73 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea6.setColor(touchgfx::Color::getColorFrom24BitRGB(208, 208, 208));
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f503 741c 	add.w	r4, r3, #624	; 0x270
 8014816:	22d0      	movs	r2, #208	; 0xd0
 8014818:	21d0      	movs	r1, #208	; 0xd0
 801481a:	20d0      	movs	r0, #208	; 0xd0
 801481c:	f7f8 fbb4 	bl	800cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014820:	4603      	mov	r3, r0
 8014822:	4619      	mov	r1, r3
 8014824:	4620      	mov	r0, r4
 8014826:	f7f9 fc9a 	bl	800e15e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea6.setLinespacing(0);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8014830:	2100      	movs	r1, #0
 8014832:	4618      	mov	r0, r3
 8014834:	f7ff f945 	bl	8013ac2 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f503 741c 	add.w	r4, r3, #624	; 0x270
 801483e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014842:	210b      	movs	r1, #11
 8014844:	4618      	mov	r0, r3
 8014846:	f7f9 fb97 	bl	800df78 <_ZN8touchgfx9TypedTextC1Et>
 801484a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 801484c:	4620      	mov	r0, r4
 801484e:	f7fa fb54 	bl	800eefa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonWithIcon1.setXY(0, 260);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8014858:	f44f 7282 	mov.w	r2, #260	; 0x104
 801485c:	2100      	movs	r1, #0
 801485e:	4618      	mov	r0, r3
 8014860:	f7f7 fc49 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithIcon1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f503 7429 	add.w	r4, r3, #676	; 0x2a4
 801486a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801486e:	2106      	movs	r1, #6
 8014870:	4618      	mov	r0, r3
 8014872:	f7f7 fbc4 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014876:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801487a:	2107      	movs	r1, #7
 801487c:	4618      	mov	r0, r3
 801487e:	e001      	b.n	8014884 <_ZN15Screen3ViewBaseC1Ev+0x39c>
 8014880:	08022358 	.word	0x08022358
 8014884:	f7f7 fbbb 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014888:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801488c:	2103      	movs	r1, #3
 801488e:	4618      	mov	r0, r3
 8014890:	f7f7 fbb5 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014894:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014898:	2103      	movs	r1, #3
 801489a:	4618      	mov	r0, r3
 801489c:	f7f7 fbaf 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80148a0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80148a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80148a8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80148ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80148b0:	9300      	str	r3, [sp, #0]
 80148b2:	4603      	mov	r3, r0
 80148b4:	4620      	mov	r0, r4
 80148b6:	f7f9 ff93 	bl	800e7e0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWithIcon1.setIconXY(15, 16);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80148c0:	2210      	movs	r2, #16
 80148c2:	210f      	movs	r1, #15
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7ff fd76 	bl	80143b6 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>

    buttonWithIcon2.setXY(180, 260);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80148d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80148d4:	21b4      	movs	r1, #180	; 0xb4
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7f7 fc0d 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithIcon2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID));
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 80148e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80148e6:	2106      	movs	r1, #6
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7f7 fb88 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80148ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80148f2:	2107      	movs	r1, #7
 80148f4:	4618      	mov	r0, r3
 80148f6:	f7f7 fb82 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 80148fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80148fe:	2104      	movs	r1, #4
 8014900:	4618      	mov	r0, r3
 8014902:	f7f7 fb7c 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014906:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801490a:	2104      	movs	r1, #4
 801490c:	4618      	mov	r0, r3
 801490e:	f7f7 fb76 	bl	800bffe <_ZN8touchgfx6BitmapC1Et>
 8014912:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8014916:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801491a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801491e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014922:	9300      	str	r3, [sp, #0]
 8014924:	4603      	mov	r3, r0
 8014926:	4620      	mov	r0, r4
 8014928:	f7f9 ff5a 	bl	800e7e0 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWithIcon2.setIconXY(20, 15);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8014932:	220f      	movs	r2, #15
 8014934:	2114      	movs	r1, #20
 8014936:	4618      	mov	r0, r3
 8014938:	f7ff fd3d 	bl	80143b6 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>

    add(image1);
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	3340      	adds	r3, #64	; 0x40
 8014942:	4619      	mov	r1, r3
 8014944:	4610      	mov	r0, r2
 8014946:	f7ff f8ad 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(slider1);
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	336c      	adds	r3, #108	; 0x6c
 8014950:	4619      	mov	r1, r3
 8014952:	4610      	mov	r0, r2
 8014954:	f7ff f8a6 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8014958:	687a      	ldr	r2, [r7, #4]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014960:	4619      	mov	r1, r3
 8014962:	4610      	mov	r0, r2
 8014964:	f7ff f89e 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8014970:	4619      	mov	r1, r3
 8014972:	4610      	mov	r0, r2
 8014974:	f7ff f896 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea3);
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8014980:	4619      	mov	r1, r3
 8014982:	4610      	mov	r0, r2
 8014984:	f7ff f88e 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea4);
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014990:	4619      	mov	r1, r3
 8014992:	4610      	mov	r0, r2
 8014994:	f7ff f886 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea5);
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80149a0:	4619      	mov	r1, r3
 80149a2:	4610      	mov	r0, r2
 80149a4:	f7ff f87e 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea6);
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80149b0:	4619      	mov	r1, r3
 80149b2:	4610      	mov	r0, r2
 80149b4:	f7ff f876 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithIcon1);
 80149b8:	687a      	ldr	r2, [r7, #4]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80149c0:	4619      	mov	r1, r3
 80149c2:	4610      	mov	r0, r2
 80149c4:	f7ff f86e 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithIcon2);
 80149c8:	687a      	ldr	r2, [r7, #4]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80149d0:	4619      	mov	r1, r3
 80149d2:	4610      	mov	r0, r2
 80149d4:	f7ff f866 	bl	8013aa4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	4618      	mov	r0, r3
 80149dc:	375c      	adds	r7, #92	; 0x5c
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd90      	pop	{r4, r7, pc}
 80149e2:	bf00      	nop

080149e4 <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 80149e4:	b480      	push	{r7}
 80149e6:	b083      	sub	sp, #12
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]

}
 80149ec:	bf00      	nop
 80149ee:	370c      	adds	r7, #12
 80149f0:	46bd      	mov	sp, r7
 80149f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f6:	4770      	bx	lr

080149f8 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View() : presenter(0)
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	4618      	mov	r0, r3
 8014a04:	f005 ff3a 	bl	801a87c <_ZN8touchgfx6ScreenC1Ev>
 8014a08:	4a05      	ldr	r2, [pc, #20]	; (8014a20 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	601a      	str	r2, [r3, #0]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	2200      	movs	r2, #0
 8014a12:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	4618      	mov	r0, r3
 8014a18:	3708      	adds	r7, #8
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	0802238c 	.word	0x0802238c

08014a24 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014a24:	b480      	push	{r7}
 8014a26:	af00      	add	r7, sp, #0
    return bitmap_database;
 8014a28:	4b02      	ldr	r3, [pc, #8]	; (8014a34 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr
 8014a34:	080223b8 	.word	0x080223b8

08014a38 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 8014a38:	b480      	push	{r7}
 8014a3a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014a3c:	2309      	movs	r3, #9
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr

08014a48 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014a48:	b480      	push	{r7}
 8014a4a:	b085      	sub	sp, #20
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	4613      	mov	r3, r2
 8014a54:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8014a56:	4a07      	ldr	r2, [pc, #28]	; (8014a74 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014a5c:	4a06      	ldr	r2, [pc, #24]	; (8014a78 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8014a62:	4a06      	ldr	r2, [pc, #24]	; (8014a7c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014a64:	88fb      	ldrh	r3, [r7, #6]
 8014a66:	8013      	strh	r3, [r2, #0]
    }
 8014a68:	bf00      	nop
 8014a6a:	3714      	adds	r7, #20
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr
 8014a74:	20009b24 	.word	0x20009b24
 8014a78:	20009b2c 	.word	0x20009b2c
 8014a7c:	20009b28 	.word	0x20009b28

08014a80 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014a80:	b590      	push	{r4, r7, lr}
 8014a82:	b085      	sub	sp, #20
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	4603      	mov	r3, r0
 8014a88:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014a8e:	88fb      	ldrh	r3, [r7, #6]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d127      	bne.n	8014ae4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014a94:	88fb      	ldrh	r3, [r7, #6]
 8014a96:	4a1e      	ldr	r2, [pc, #120]	; (8014b10 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d016      	beq.n	8014ace <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014aa0:	88fb      	ldrh	r3, [r7, #6]
 8014aa2:	4a1b      	ldr	r2, [pc, #108]	; (8014b10 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014aa8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	68ba      	ldr	r2, [r7, #8]
 8014ab0:	4413      	add	r3, r2
 8014ab2:	4a18      	ldr	r2, [pc, #96]	; (8014b14 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014ab4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	68ba      	ldr	r2, [r7, #8]
 8014abc:	4413      	add	r3, r2
 8014abe:	4a16      	ldr	r2, [pc, #88]	; (8014b18 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014ac0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	689b      	ldr	r3, [r3, #8]
 8014ac6:	68ba      	ldr	r2, [r7, #8]
 8014ac8:	4413      	add	r3, r2
 8014aca:	60fb      	str	r3, [r7, #12]
 8014acc:	e00a      	b.n	8014ae4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014ace:	4b11      	ldr	r3, [pc, #68]	; (8014b14 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014ad0:	4a12      	ldr	r2, [pc, #72]	; (8014b1c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014ad2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014ad4:	4a12      	ldr	r2, [pc, #72]	; (8014b20 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8014ad6:	4b10      	ldr	r3, [pc, #64]	; (8014b18 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014ad8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8014ada:	88fb      	ldrh	r3, [r7, #6]
 8014adc:	4a11      	ldr	r2, [pc, #68]	; (8014b24 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ae2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d00d      	beq.n	8014b06 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8014aea:	4a0f      	ldr	r2, [pc, #60]	; (8014b28 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014aec:	88fb      	ldrh	r3, [r7, #6]
 8014aee:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014af0:	f000 f83e 	bl	8014b70 <_ZN17TypedTextDatabase8getFontsEv>
 8014af4:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8014af6:	f000 f833 	bl	8014b60 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8014afa:	4603      	mov	r3, r0
 8014afc:	461a      	mov	r2, r3
 8014afe:	4621      	mov	r1, r4
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f7ff ffa1 	bl	8014a48 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8014b06:	bf00      	nop
 8014b08:	3714      	adds	r7, #20
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd90      	pop	{r4, r7, pc}
 8014b0e:	bf00      	nop
 8014b10:	20008758 	.word	0x20008758
 8014b14:	20008760 	.word	0x20008760
 8014b18:	20008764 	.word	0x20008764
 8014b1c:	080ce960 	.word	0x080ce960
 8014b20:	080ce930 	.word	0x080ce930
 8014b24:	080cea1c 	.word	0x080cea1c
 8014b28:	2000875c 	.word	0x2000875c

08014b2c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b083      	sub	sp, #12
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	460b      	mov	r3, r1
 8014b36:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014b38:	4b07      	ldr	r3, [pc, #28]	; (8014b58 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8014b3a:	681a      	ldr	r2, [r3, #0]
 8014b3c:	4b07      	ldr	r3, [pc, #28]	; (8014b5c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8014b3e:	6819      	ldr	r1, [r3, #0]
 8014b40:	887b      	ldrh	r3, [r7, #2]
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	440b      	add	r3, r1
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	005b      	lsls	r3, r3, #1
 8014b4a:	4413      	add	r3, r2
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	370c      	adds	r7, #12
 8014b50:	46bd      	mov	sp, r7
 8014b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b56:	4770      	bx	lr
 8014b58:	20008760 	.word	0x20008760
 8014b5c:	20008764 	.word	0x20008764

08014b60 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014b60:	b480      	push	{r7}
 8014b62:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014b64:	230c      	movs	r3, #12
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr

08014b70 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014b70:	b480      	push	{r7}
 8014b72:	af00      	add	r7, sp, #0
    return _fonts;
 8014b74:	4b02      	ldr	r3, [pc, #8]	; (8014b80 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7e:	4770      	bx	lr
 8014b80:	20008768 	.word	0x20008768

08014b84 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        _fonts[4] = &(getFont_verdana_18_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	6039      	str	r1, [r7, #0]
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d11d      	bne.n	8014bd0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	d118      	bne.n	8014bd0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 8014b9e:	f7fd fc11 	bl	80123c4 <_Z23getFont_verdana_20_4bppv>
 8014ba2:	4602      	mov	r2, r0
};
 8014ba4:	4b0c      	ldr	r3, [pc, #48]	; (8014bd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8014ba6:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8014ba8:	f7fd fc4e 	bl	8012448 <_Z23getFont_verdana_40_4bppv>
 8014bac:	4602      	mov	r2, r0
};
 8014bae:	4b0a      	ldr	r3, [pc, #40]	; (8014bd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8014bb0:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_13_4bpp()),
 8014bb2:	f7fd fb83 	bl	80122bc <_Z23getFont_verdana_13_4bppv>
 8014bb6:	4602      	mov	r2, r0
};
 8014bb8:	4b07      	ldr	r3, [pc, #28]	; (8014bd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8014bba:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_69_4bpp()),
 8014bbc:	f7fd fc86 	bl	80124cc <_Z23getFont_verdana_69_4bppv>
 8014bc0:	4602      	mov	r2, r0
};
 8014bc2:	4b05      	ldr	r3, [pc, #20]	; (8014bd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8014bc4:	60da      	str	r2, [r3, #12]
    &(getFont_verdana_18_4bpp())
 8014bc6:	f7fd fbbb 	bl	8012340 <_Z23getFont_verdana_18_4bppv>
 8014bca:	4602      	mov	r2, r0
};
 8014bcc:	4b02      	ldr	r3, [pc, #8]	; (8014bd8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8014bce:	611a      	str	r2, [r3, #16]
}  // namespace TypedTextDatabase
 8014bd0:	bf00      	nop
 8014bd2:	3708      	adds	r7, #8
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	20008768 	.word	0x20008768

08014bdc <_GLOBAL__sub_I__fonts>:
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014be4:	2001      	movs	r0, #1
 8014be6:	f7ff ffcd 	bl	8014b84 <_Z41__static_initialization_and_destruction_0ii>
 8014bea:	bd80      	pop	{r7, pc}

08014bec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	4a05      	ldr	r2, [pc, #20]	; (8014c0c <_ZN19FrontendApplicationD1Ev+0x20>)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	601a      	str	r2, [r3, #0]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7fd fecd 	bl	801299c <_ZN23FrontendApplicationBaseD1Ev>
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	4618      	mov	r0, r3
 8014c06:	3708      	adds	r7, #8
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	08022474 	.word	0x08022474

08014c10 <_ZN19FrontendApplicationD0Ev>:
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f7ff ffe7 	bl	8014bec <_ZN19FrontendApplicationD1Ev>
 8014c1e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f00a fd73 	bl	801f70e <_ZdlPvj>
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3708      	adds	r7, #8
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}

08014c32 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014c32:	b580      	push	{r7, lr}
 8014c34:	b082      	sub	sp, #8
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014c40:	4618      	mov	r0, r3
 8014c42:	f000 f835 	bl	8014cb0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f004 fe03 	bl	8019854 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014c4e:	bf00      	nop
 8014c50:	3708      	adds	r7, #8
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
	...

08014c58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	687a      	ldr	r2, [r7, #4]
 8014c68:	68b9      	ldr	r1, [r7, #8]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fd ff10 	bl	8012a90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014c70:	4a03      	ldr	r2, [pc, #12]	; (8014c80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	601a      	str	r2, [r3, #0]
{
}
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3710      	adds	r7, #16
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	08022474 	.word	0x08022474

08014c84 <_ZN5ModelC1Ev>:
extern "C"
{
	xQueueHandle messageQ;
}

Model::Model() : modelListener(0)
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	2200      	movs	r2, #0
 8014c90:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, 1, 0);
 8014c92:	2200      	movs	r2, #0
 8014c94:	2101      	movs	r1, #1
 8014c96:	2001      	movs	r0, #1
 8014c98:	f7fa fe86 	bl	800f9a8 <xQueueGenericCreate>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	4b03      	ldr	r3, [pc, #12]	; (8014cac <_ZN5ModelC1Ev+0x28>)
 8014ca0:	601a      	str	r2, [r3, #0]
}
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3708      	adds	r7, #8
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	20008780 	.word	0x20008780

08014cb0 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
	if (xQueueReceive(messageQ, &counter, 0) == pdTRUE)
 8014cb8:	4b0e      	ldr	r3, [pc, #56]	; (8014cf4 <_ZN5Model4tickEv+0x44>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	490e      	ldr	r1, [pc, #56]	; (8014cf8 <_ZN5Model4tickEv+0x48>)
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7fb f8e5 	bl	800fe90 <xQueueReceive>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	bf0c      	ite	eq
 8014ccc:	2301      	moveq	r3, #1
 8014cce:	2300      	movne	r3, #0
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00a      	beq.n	8014cec <_ZN5Model4tickEv+0x3c>
	{
		modelListener->setNewValue(counter);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6818      	ldr	r0, [r3, #0]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	3308      	adds	r3, #8
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	4a04      	ldr	r2, [pc, #16]	; (8014cf8 <_ZN5Model4tickEv+0x48>)
 8014ce6:	6812      	ldr	r2, [r2, #0]
 8014ce8:	4611      	mov	r1, r2
 8014cea:	4798      	blx	r3
	}
}
 8014cec:	bf00      	nop
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	20008780 	.word	0x20008780
 8014cf8:	2000877c 	.word	0x2000877c

08014cfc <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
    {
    }
 8014d04:	bf00      	nop
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr

08014d10 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
    {
    }
 8014d18:	bf00      	nop
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
    {
 8014d2c:	4a04      	ldr	r2, [pc, #16]	; (8014d40 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	601a      	str	r2, [r3, #0]
    }
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	4618      	mov	r0, r3
 8014d36:	370c      	adds	r7, #12
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr
 8014d40:	080224f4 	.word	0x080224f4

08014d44 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
    }
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f7ff ffe9 	bl	8014d24 <_ZN8touchgfx9PresenterD1Ev>
 8014d52:	2104      	movs	r1, #4
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f00a fcda 	bl	801f70e <_ZdlPvj>
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3708      	adds	r7, #8
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
    {
 8014d6c:	4a04      	ldr	r2, [pc, #16]	; (8014d80 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	601a      	str	r2, [r3, #0]
    }
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	4618      	mov	r0, r3
 8014d76:	370c      	adds	r7, #12
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr
 8014d80:	080224f4 	.word	0x080224f4

08014d84 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014d84:	b480      	push	{r7}
 8014d86:	b083      	sub	sp, #12
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	4a06      	ldr	r2, [pc, #24]	; (8014da8 <_ZN13ModelListenerC1Ev+0x24>)
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	601a      	str	r2, [r3, #0]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2200      	movs	r2, #0
 8014d96:	605a      	str	r2, [r3, #4]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	370c      	adds	r7, #12
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da4:	4770      	bx	lr
 8014da6:	bf00      	nop
 8014da8:	080224e0 	.word	0x080224e0

08014dac <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014dac:	b480      	push	{r7}
 8014dae:	b083      	sub	sp, #12
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	4a04      	ldr	r2, [pc, #16]	; (8014dc8 <_ZN13ModelListenerD1Ev+0x1c>)
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	601a      	str	r2, [r3, #0]
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	370c      	adds	r7, #12
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc6:	4770      	bx	lr
 8014dc8:	080224e0 	.word	0x080224e0

08014dcc <_ZN13ModelListenerD0Ev>:
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f7ff ffe9 	bl	8014dac <_ZN13ModelListenerD1Ev>
 8014dda:	2108      	movs	r1, #8
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f00a fc96 	bl	801f70e <_ZdlPvj>
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	4618      	mov	r0, r3
 8014de6:	3708      	adds	r7, #8
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <_ZN13ModelListener11setNewValueEj>:

    virtual void setNewValue (unsigned int value){}
 8014dec:	b480      	push	{r7}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	6039      	str	r1, [r7, #0]
 8014df6:	bf00      	nop
 8014df8:	370c      	adds	r7, #12
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
	...

08014e04 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	4a09      	ldr	r2, [pc, #36]	; (8014e34 <_ZN16Screen1PresenterD1Ev+0x30>)
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	601a      	str	r2, [r3, #0]
 8014e12:	4a09      	ldr	r2, [pc, #36]	; (8014e38 <_ZN16Screen1PresenterD1Ev+0x34>)
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	605a      	str	r2, [r3, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	3304      	adds	r3, #4
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7ff ffc5 	bl	8014dac <_ZN13ModelListenerD1Ev>
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	4618      	mov	r0, r3
 8014e26:	f7ff ff7d 	bl	8014d24 <_ZN8touchgfx9PresenterD1Ev>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	080224b0 	.word	0x080224b0
 8014e38:	080224cc 	.word	0x080224cc

08014e3c <_ZThn4_N16Screen1PresenterD1Ev>:
 8014e3c:	f1a0 0004 	sub.w	r0, r0, #4
 8014e40:	e7e0      	b.n	8014e04 <_ZN16Screen1PresenterD1Ev>
 8014e42:	bf00      	nop

08014e44 <_ZN16Screen1PresenterD0Ev>:
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b082      	sub	sp, #8
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f7ff ffd9 	bl	8014e04 <_ZN16Screen1PresenterD1Ev>
 8014e52:	2110      	movs	r1, #16
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f00a fc5a 	bl	801f70e <_ZdlPvj>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3708      	adds	r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <_ZThn4_N16Screen1PresenterD0Ev>:
 8014e64:	f1a0 0004 	sub.w	r0, r0, #4
 8014e68:	e7ec      	b.n	8014e44 <_ZN16Screen1PresenterD0Ev>
	...

08014e6c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
    : view(v)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7ff ff73 	bl	8014d64 <_ZN8touchgfx9PresenterC1Ev>
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	3304      	adds	r3, #4
 8014e82:	4618      	mov	r0, r3
 8014e84:	f7ff ff7e 	bl	8014d84 <_ZN13ModelListenerC1Ev>
 8014e88:	4a06      	ldr	r2, [pc, #24]	; (8014ea4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	601a      	str	r2, [r3, #0]
 8014e8e:	4a06      	ldr	r2, [pc, #24]	; (8014ea8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	605a      	str	r2, [r3, #4]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	683a      	ldr	r2, [r7, #0]
 8014e98:	60da      	str	r2, [r3, #12]
{
}
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	080224b0 	.word	0x080224b0
 8014ea8:	080224cc 	.word	0x080224cc

08014eac <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8014eac:	b480      	push	{r7}
 8014eae:	b083      	sub	sp, #12
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]

}
 8014eb4:	bf00      	nop
 8014eb6:	370c      	adds	r7, #12
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebe:	4770      	bx	lr

08014ec0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b083      	sub	sp, #12
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]

}
 8014ec8:	bf00      	nop
 8014eca:	370c      	adds	r7, #12
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed2:	4770      	bx	lr

08014ed4 <_ZN16Screen1Presenter11setNewValueEj>:

void Screen1Presenter::setNewValue (unsigned int value)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
	view.updateVal(value);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f000 f857 	bl	8014f98 <_ZN11Screen1View9updateValEj>
}
 8014eea:	bf00      	nop
 8014eec:	3708      	adds	r7, #8
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}

08014ef2 <_ZThn4_N16Screen1Presenter11setNewValueEj>:

    void setNewValue (unsigned int value);
 8014ef2:	f1a0 0004 	sub.w	r0, r0, #4
 8014ef6:	f7ff bfed 	b.w	8014ed4 <_ZN16Screen1Presenter11setNewValueEj>
	...

08014efc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	4a05      	ldr	r2, [pc, #20]	; (8014f1c <_ZN11Screen1ViewD1Ev+0x20>)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	601a      	str	r2, [r3, #0]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7fe fe09 	bl	8013b24 <_ZN15Screen1ViewBaseD1Ev>
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	4618      	mov	r0, r3
 8014f16:	3708      	adds	r7, #8
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	0802250c 	.word	0x0802250c

08014f20 <_ZN11Screen1ViewD0Ev>:
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7ff ffe7 	bl	8014efc <_ZN11Screen1ViewD1Ev>
 8014f2e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f00a fbeb 	bl	801f70e <_ZdlPvj>
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3708      	adds	r7, #8
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
	...

08014f44 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7fe fe36 	bl	8013bc0 <_ZN15Screen1ViewBaseC1Ev>
 8014f54:	4a03      	ldr	r2, [pc, #12]	; (8014f64 <_ZN11Screen1ViewC1Ev+0x20>)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	601a      	str	r2, [r3, #0]
{

}
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	0802250c 	.word	0x0802250c

08014f68 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7fe ff6c 	bl	8013e50 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7fe fd6a 	bl	8013a64 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014f90:	bf00      	nop
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <_ZN11Screen1View9updateValEj>:

void Screen1View::updateVal(unsigned int newValue)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", newValue);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	4a0a      	ldr	r2, [pc, #40]	; (8014fd4 <_ZN11Screen1View9updateValEj+0x3c>)
 8014fac:	210a      	movs	r1, #10
 8014fae:	f006 fdbf 	bl	801bb30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.resizeToCurrentText();
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7f9 ffc0 	bl	800ef3e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	textArea1.invalidate();
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f005 f96a 	bl	801a29e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8014fca:	bf00      	nop
 8014fcc:	3708      	adds	r7, #8
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	080213bc 	.word	0x080213bc

08014fd8 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	4a09      	ldr	r2, [pc, #36]	; (8015008 <_ZN16Screen2PresenterD1Ev+0x30>)
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	601a      	str	r2, [r3, #0]
 8014fe6:	4a09      	ldr	r2, [pc, #36]	; (801500c <_ZN16Screen2PresenterD1Ev+0x34>)
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	605a      	str	r2, [r3, #4]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	3304      	adds	r3, #4
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f7ff fedb 	bl	8014dac <_ZN13ModelListenerD1Ev>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7ff fe93 	bl	8014d24 <_ZN8touchgfx9PresenterD1Ev>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4618      	mov	r0, r3
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	08022540 	.word	0x08022540
 801500c:	08022558 	.word	0x08022558

08015010 <_ZThn4_N16Screen2PresenterD1Ev>:
 8015010:	f1a0 0004 	sub.w	r0, r0, #4
 8015014:	e7e0      	b.n	8014fd8 <_ZN16Screen2PresenterD1Ev>
 8015016:	bf00      	nop

08015018 <_ZN16Screen2PresenterD0Ev>:
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7ff ffd9 	bl	8014fd8 <_ZN16Screen2PresenterD1Ev>
 8015026:	2110      	movs	r1, #16
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f00a fb70 	bl	801f70e <_ZdlPvj>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	4618      	mov	r0, r3
 8015032:	3708      	adds	r7, #8
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}

08015038 <_ZThn4_N16Screen2PresenterD0Ev>:
 8015038:	f1a0 0004 	sub.w	r0, r0, #4
 801503c:	e7ec      	b.n	8015018 <_ZN16Screen2PresenterD0Ev>
	...

08015040 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
    : view(v)
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	4618      	mov	r0, r3
 801504e:	f7ff fe89 	bl	8014d64 <_ZN8touchgfx9PresenterC1Ev>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	3304      	adds	r3, #4
 8015056:	4618      	mov	r0, r3
 8015058:	f7ff fe94 	bl	8014d84 <_ZN13ModelListenerC1Ev>
 801505c:	4a06      	ldr	r2, [pc, #24]	; (8015078 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	601a      	str	r2, [r3, #0]
 8015062:	4a06      	ldr	r2, [pc, #24]	; (801507c <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	605a      	str	r2, [r3, #4]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	683a      	ldr	r2, [r7, #0]
 801506c:	60da      	str	r2, [r3, #12]
{
}
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}
 8015078:	08022540 	.word	0x08022540
 801507c:	08022558 	.word	0x08022558

08015080 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]

}
 8015088:	bf00      	nop
 801508a:	370c      	adds	r7, #12
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr

08015094 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8015094:	b480      	push	{r7}
 8015096:	b083      	sub	sp, #12
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]

}
 801509c:	bf00      	nop
 801509e:	370c      	adds	r7, #12
 80150a0:	46bd      	mov	sp, r7
 80150a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a6:	4770      	bx	lr

080150a8 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	4a05      	ldr	r2, [pc, #20]	; (80150c8 <_ZN11Screen2ViewD1Ev+0x20>)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	601a      	str	r2, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7fe ffa9 	bl	8014010 <_ZN15Screen2ViewBaseD1Ev>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	4618      	mov	r0, r3
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	0802256c 	.word	0x0802256c

080150cc <_ZN11Screen2ViewD0Ev>:
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f7ff ffe7 	bl	80150a8 <_ZN11Screen2ViewD1Ev>
 80150da:	21e4      	movs	r1, #228	; 0xe4
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f00a fb16 	bl	801f70e <_ZdlPvj>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	4618      	mov	r0, r3
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7fe ffcc 	bl	8014094 <_ZN15Screen2ViewBaseC1Ev>
 80150fc:	4a03      	ldr	r2, [pc, #12]	; (801510c <_ZN11Screen2ViewC1Ev+0x20>)
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	601a      	str	r2, [r3, #0]
{

}
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	4618      	mov	r0, r3
 8015106:	3708      	adds	r7, #8
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	0802256c 	.word	0x0802256c

08015110 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	4618      	mov	r0, r3
 801511c:	f7ff f870 	bl	8014200 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8015120:	bf00      	nop
 8015122:	3708      	adds	r7, #8
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	4618      	mov	r0, r3
 8015134:	f7fe fc96 	bl	8013a64 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015138:	bf00      	nop
 801513a:	3708      	adds	r7, #8
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 8015140:	b580      	push	{r7, lr}
 8015142:	b082      	sub	sp, #8
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	4a09      	ldr	r2, [pc, #36]	; (8015170 <_ZN16Screen3PresenterD1Ev+0x30>)
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	601a      	str	r2, [r3, #0]
 801514e:	4a09      	ldr	r2, [pc, #36]	; (8015174 <_ZN16Screen3PresenterD1Ev+0x34>)
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	605a      	str	r2, [r3, #4]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	3304      	adds	r3, #4
 8015158:	4618      	mov	r0, r3
 801515a:	f7ff fe27 	bl	8014dac <_ZN13ModelListenerD1Ev>
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	4618      	mov	r0, r3
 8015162:	f7ff fddf 	bl	8014d24 <_ZN8touchgfx9PresenterD1Ev>
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	4618      	mov	r0, r3
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	080225a0 	.word	0x080225a0
 8015174:	080225b8 	.word	0x080225b8

08015178 <_ZThn4_N16Screen3PresenterD1Ev>:
 8015178:	f1a0 0004 	sub.w	r0, r0, #4
 801517c:	e7e0      	b.n	8015140 <_ZN16Screen3PresenterD1Ev>
 801517e:	bf00      	nop

08015180 <_ZN16Screen3PresenterD0Ev>:
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7ff ffd9 	bl	8015140 <_ZN16Screen3PresenterD1Ev>
 801518e:	2110      	movs	r1, #16
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f00a fabc 	bl	801f70e <_ZdlPvj>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	4618      	mov	r0, r3
 801519a:	3708      	adds	r7, #8
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <_ZThn4_N16Screen3PresenterD0Ev>:
 80151a0:	f1a0 0004 	sub.w	r0, r0, #4
 80151a4:	e7ec      	b.n	8015180 <_ZN16Screen3PresenterD0Ev>
	...

080151a8 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
 80151b0:	6039      	str	r1, [r7, #0]
    : view(v)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7ff fdd5 	bl	8014d64 <_ZN8touchgfx9PresenterC1Ev>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	3304      	adds	r3, #4
 80151be:	4618      	mov	r0, r3
 80151c0:	f7ff fde0 	bl	8014d84 <_ZN13ModelListenerC1Ev>
 80151c4:	4a06      	ldr	r2, [pc, #24]	; (80151e0 <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	601a      	str	r2, [r3, #0]
 80151ca:	4a06      	ldr	r2, [pc, #24]	; (80151e4 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	605a      	str	r2, [r3, #4]
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	683a      	ldr	r2, [r7, #0]
 80151d4:	60da      	str	r2, [r3, #12]
{
}
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4618      	mov	r0, r3
 80151da:	3708      	adds	r7, #8
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	080225a0 	.word	0x080225a0
 80151e4:	080225b8 	.word	0x080225b8

080151e8 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 80151e8:	b480      	push	{r7}
 80151ea:	b083      	sub	sp, #12
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]

}
 80151f0:	bf00      	nop
 80151f2:	370c      	adds	r7, #12
 80151f4:	46bd      	mov	sp, r7
 80151f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fa:	4770      	bx	lr

080151fc <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 80151fc:	b480      	push	{r7}
 80151fe:	b083      	sub	sp, #12
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]

}
 8015204:	bf00      	nop
 8015206:	370c      	adds	r7, #12
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	4a05      	ldr	r2, [pc, #20]	; (8015230 <_ZN11Screen3ViewD1Ev+0x20>)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	4618      	mov	r0, r3
 8015222:	f7ff f903 	bl	801442c <_ZN15Screen3ViewBaseD1Ev>
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	4618      	mov	r0, r3
 801522a:	3708      	adds	r7, #8
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}
 8015230:	080225cc 	.word	0x080225cc

08015234 <_ZN11Screen3ViewD0Ev>:
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f7ff ffe7 	bl	8015210 <_ZN11Screen3ViewD1Ev>
 8015242:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	f00a fa61 	bl	801f70e <_ZdlPvj>
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	4618      	mov	r0, r3
 8015250:	3708      	adds	r7, #8
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
	...

08015258 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	4618      	mov	r0, r3
 8015264:	f7ff f940 	bl	80144e8 <_ZN15Screen3ViewBaseC1Ev>
 8015268:	4a03      	ldr	r2, [pc, #12]	; (8015278 <_ZN11Screen3ViewC1Ev+0x20>)
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	601a      	str	r2, [r3, #0]
{

}
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	4618      	mov	r0, r3
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	080225cc 	.word	0x080225cc

0801527c <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	4618      	mov	r0, r3
 8015288:	f7ff fbac 	bl	80149e4 <_ZN15Screen3ViewBase11setupScreenEv>
}
 801528c:	bf00      	nop
 801528e:	3708      	adds	r7, #8
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}

08015294 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b082      	sub	sp, #8
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	4618      	mov	r0, r3
 80152a0:	f7fe fbe0 	bl	8013a64 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80152a4:	bf00      	nop
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80152ac:	b480      	push	{r7}
 80152ae:	b083      	sub	sp, #12
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	801a      	strh	r2, [r3, #0]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2200      	movs	r2, #0
 80152be:	805a      	strh	r2, [r3, #2]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2200      	movs	r2, #0
 80152c4:	809a      	strh	r2, [r3, #4]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2200      	movs	r2, #0
 80152ca:	80da      	strh	r2, [r3, #6]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2200      	movs	r2, #0
 80152d0:	811a      	strh	r2, [r3, #8]
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2200      	movs	r2, #0
 80152d6:	815a      	strh	r2, [r3, #10]
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	819a      	strh	r2, [r3, #12]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2200      	movs	r2, #0
 80152e2:	739a      	strb	r2, [r3, #14]
        {
        }
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	4618      	mov	r0, r3
 80152e8:	370c      	adds	r7, #12
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b082      	sub	sp, #8
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7ff ffd5 	bl	80152ac <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2200      	movs	r2, #0
 8015306:	611a      	str	r2, [r3, #16]
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2200      	movs	r2, #0
 801530c:	829a      	strh	r2, [r3, #20]
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	4618      	mov	r0, r3
 8015312:	3708      	adds	r7, #8
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD()
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
    {
 8015320:	4a04      	ldr	r2, [pc, #16]	; (8015334 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	601a      	str	r2, [r3, #0]
    }
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	4618      	mov	r0, r3
 801532a:	370c      	adds	r7, #12
 801532c:	46bd      	mov	sp, r7
 801532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015332:	4770      	bx	lr
 8015334:	080226fc 	.word	0x080226fc

08015338 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
    }
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f7ff ffe9 	bl	8015318 <_ZN8touchgfx3LCDD1Ev>
 8015346:	2104      	movs	r1, #4
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f00a f9e0 	bl	801f70e <_ZdlPvj>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	4618      	mov	r0, r3
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <_ZN8touchgfx3LCD4initEv>:
    virtual void init()
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
    }
 8015360:	bf00      	nop
 8015362:	370c      	adds	r7, #12
 8015364:	46bd      	mov	sp, r7
 8015366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536a:	4770      	bx	lr

0801536c <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 801536c:	b480      	push	{r7}
 801536e:	b083      	sub	sp, #12
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 8015374:	4a07      	ldr	r2, [pc, #28]	; (8015394 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	601a      	str	r2, [r3, #0]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	2200      	movs	r2, #0
 801537e:	605a      	str	r2, [r3, #4]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2200      	movs	r2, #0
 8015384:	609a      	str	r2, [r3, #8]
    {
    }
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	4618      	mov	r0, r3
 801538a:	370c      	adds	r7, #12
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr
 8015394:	080226d4 	.word	0x080226d4

08015398 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	4a04      	ldr	r2, [pc, #16]	; (80153b4 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	601a      	str	r2, [r3, #0]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	4618      	mov	r0, r3
 80153aa:	370c      	adds	r7, #12
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr
 80153b4:	080226d4 	.word	0x080226d4

080153b8 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7ff ffe9 	bl	8015398 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80153c6:	210c      	movs	r1, #12
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f00a f9a0 	bl	801f70e <_ZdlPvj>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	4618      	mov	r0, r3
 80153d2:	3708      	adds	r7, #8
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	460b      	mov	r3, r1
 80153e2:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 80153e4:	78fb      	ldrb	r3, [r7, #3]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d011      	beq.n	801540e <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	3310      	adds	r3, #16
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	4798      	blx	r3
 80153f6:	4602      	mov	r2, r0
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	689b      	ldr	r3, [r3, #8]
 80153fc:	1ad3      	subs	r3, r2, r3
 80153fe:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	685a      	ldr	r2, [r3, #4]
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	441a      	add	r2, r3
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 801540c:	e008      	b.n	8015420 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	3310      	adds	r3, #16
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	4798      	blx	r3
 801541a:	4602      	mov	r2, r0
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	609a      	str	r2, [r3, #8]
    }
 8015420:	bf00      	nop
 8015422:	3710      	adds	r7, #16
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	685b      	ldr	r3, [r3, #4]
    }
 8015434:	4618      	mov	r0, r3
 8015436:	370c      	adds	r7, #12
 8015438:	46bd      	mov	sp, r7
 801543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543e:	4770      	bx	lr

08015440 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8015440:	b480      	push	{r7}
 8015442:	b083      	sub	sp, #12
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	683a      	ldr	r2, [r7, #0]
 801544e:	605a      	str	r2, [r3, #4]
    }
 8015450:	bf00      	nop
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr

0801545c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	60f8      	str	r0, [r7, #12]
 8015464:	60b9      	str	r1, [r7, #8]
 8015466:	607a      	str	r2, [r7, #4]
 8015468:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801546a:	4a44      	ldr	r2, [pc, #272]	; (801557c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	601a      	str	r2, [r3, #0]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	68ba      	ldr	r2, [r7, #8]
 8015474:	605a      	str	r2, [r3, #4]
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	687a      	ldr	r2, [r7, #4]
 801547a:	609a      	str	r2, [r3, #8]
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	683a      	ldr	r2, [r7, #0]
 8015480:	60da      	str	r2, [r3, #12]
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2200      	movs	r2, #0
 8015486:	611a      	str	r2, [r3, #16]
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2200      	movs	r2, #0
 801548c:	615a      	str	r2, [r3, #20]
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2200      	movs	r2, #0
 8015492:	619a      	str	r2, [r3, #24]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	331c      	adds	r3, #28
 8015498:	4618      	mov	r0, r3
 801549a:	f7ff ff2a 	bl	80152f2 <_ZN8touchgfx8GesturesC1Ev>
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2200      	movs	r2, #0
 80154a2:	639a      	str	r2, [r3, #56]	; 0x38
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	2200      	movs	r2, #0
 80154a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2200      	movs	r2, #0
 80154ae:	641a      	str	r2, [r3, #64]	; 0x40
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	2200      	movs	r2, #0
 80154b4:	645a      	str	r2, [r3, #68]	; 0x44
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2200      	movs	r2, #0
 80154ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2201      	movs	r2, #1
 80154c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2201      	movs	r2, #1
 80154ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2200      	movs	r2, #0
 80154d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	3350      	adds	r3, #80	; 0x50
 80154d8:	4618      	mov	r0, r3
 80154da:	f7f6 fd79 	bl	800bfd0 <_ZN8touchgfx4RectC1Ev>
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2201      	movs	r2, #1
 80154e2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2200      	movs	r2, #0
 80154ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	2200      	movs	r2, #0
 80154f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	2200      	movs	r2, #0
 8015502:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	2200      	movs	r2, #0
 801550a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	2200      	movs	r2, #0
 8015512:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2200      	movs	r2, #0
 801551a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2200      	movs	r2, #0
 8015522:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	2200      	movs	r2, #0
 801552a:	671a      	str	r2, [r3, #112]	; 0x70
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	2200      	movs	r2, #0
 8015530:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8015534:	4a12      	ldr	r2, [pc, #72]	; (8015580 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801553a:	4a12      	ldr	r2, [pc, #72]	; (8015584 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801553c:	8b3b      	ldrh	r3, [r7, #24]
 801553e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8015540:	4a11      	ldr	r2, [pc, #68]	; (8015588 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8015542:	8bbb      	ldrh	r3, [r7, #28]
 8015544:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8015546:	4b11      	ldr	r3, [pc, #68]	; (801558c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8015548:	2200      	movs	r2, #0
 801554a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801554c:	4b0d      	ldr	r3, [pc, #52]	; (8015584 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801554e:	881a      	ldrh	r2, [r3, #0]
 8015550:	4b0f      	ldr	r3, [pc, #60]	; (8015590 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8015552:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015554:	4b0c      	ldr	r3, [pc, #48]	; (8015588 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8015556:	881a      	ldrh	r2, [r3, #0]
 8015558:	4b0e      	ldr	r3, [pc, #56]	; (8015594 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801555a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801555c:	8b3a      	ldrh	r2, [r7, #24]
 801555e:	8bbb      	ldrh	r3, [r7, #28]
 8015560:	429a      	cmp	r2, r3
 8015562:	d301      	bcc.n	8015568 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8015564:	2200      	movs	r2, #0
 8015566:	e000      	b.n	801556a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8015568:	2201      	movs	r2, #1
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	4618      	mov	r0, r3
 8015574:	3710      	adds	r7, #16
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop
 801557c:	08022d30 	.word	0x08022d30
 8015580:	20009ac0 	.word	0x20009ac0
 8015584:	20009ab2 	.word	0x20009ab2
 8015588:	20009ab4 	.word	0x20009ab4
 801558c:	20009ab6 	.word	0x20009ab6
 8015590:	20009ab8 	.word	0x20009ab8
 8015594:	20009aba 	.word	0x20009aba

08015598 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 8015598:	b480      	push	{r7}
 801559a:	b083      	sub	sp, #12
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	4a04      	ldr	r2, [pc, #16]	; (80155b4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	601a      	str	r2, [r3, #0]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	4618      	mov	r0, r3
 80155aa:	370c      	adds	r7, #12
 80155ac:	46bd      	mov	sp, r7
 80155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b2:	4770      	bx	lr
 80155b4:	08022d30 	.word	0x08022d30

080155b8 <_ZN8touchgfx3HALD0Ev>:
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f7ff ffe9 	bl	8015598 <_ZN8touchgfx3HALD1Ev>
 80155c6:	2178      	movs	r1, #120	; 0x78
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f00a f8a0 	bl	801f70e <_ZdlPvj>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	4618      	mov	r0, r3
 80155d2:	3708      	adds	r7, #8
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 80155d8:	b480      	push	{r7}
 80155da:	b083      	sub	sp, #12
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	460b      	mov	r3, r1
 80155e2:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	78fa      	ldrb	r2, [r7, #3]
 80155e8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80155ec:	bf00      	nop
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr

080155f8 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 80155f8:	b480      	push	{r7}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	460b      	mov	r3, r1
 8015602:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	78fa      	ldrb	r2, [r7, #3]
 8015608:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    };
 801560c:	bf00      	nop
 801560e:	370c      	adds	r7, #12
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr

08015618 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 8015618:	b480      	push	{r7}
 801561a:	b083      	sub	sp, #12
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	460b      	mov	r3, r1
 8015622:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 8015624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015628:	2b00      	cmp	r3, #0
 801562a:	dd03      	ble.n	8015634 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	78fa      	ldrb	r2, [r7, #3]
 8015630:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }
    }
 8015634:	bf00      	nop
 8015636:	370c      	adds	r7, #12
 8015638:	46bd      	mov	sp, r7
 801563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563e:	4770      	bx	lr

08015640 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8015640:	b480      	push	{r7}
 8015642:	b083      	sub	sp, #12
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	683a      	ldr	r2, [r7, #0]
 801564e:	611a      	str	r2, [r3, #16]
    }
 8015650:	bf00      	nop
 8015652:	370c      	adds	r7, #12
 8015654:	46bd      	mov	sp, r7
 8015656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565a:	4770      	bx	lr

0801565c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 801565c:	b480      	push	{r7}
 801565e:	b083      	sub	sp, #12
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	460b      	mov	r3, r1
 8015666:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	78fa      	ldrb	r2, [r7, #3]
 801566c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 8015670:	bf00      	nop
 8015672:	370c      	adds	r7, #12
 8015674:	46bd      	mov	sp, r7
 8015676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567a:	4770      	bx	lr

0801567c <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 801567c:	b480      	push	{r7}
 801567e:	b083      	sub	sp, #12
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	460b      	mov	r3, r1
 8015686:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	78fa      	ldrb	r2, [r7, #3]
 801568c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
 8015690:	bf00      	nop
 8015692:	370c      	adds	r7, #12
 8015694:	46bd      	mov	sp, r7
 8015696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569a:	4770      	bx	lr

0801569c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801569c:	b480      	push	{r7}
 801569e:	b083      	sub	sp, #12
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
        texts = t;
 80156a4:	4a04      	ldr	r2, [pc, #16]	; (80156b8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6013      	str	r3, [r2, #0]
    }
 80156aa:	bf00      	nop
 80156ac:	370c      	adds	r7, #12
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	20009b30 	.word	0x20009b30

080156bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80156bc:	b480      	push	{r7}
 80156be:	b085      	sub	sp, #20
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
 80156c8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80156ca:	4a0b      	ldr	r2, [pc, #44]	; (80156f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	601a      	str	r2, [r3, #0]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	68ba      	ldr	r2, [r7, #8]
 80156d4:	605a      	str	r2, [r3, #4]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	687a      	ldr	r2, [r7, #4]
 80156da:	609a      	str	r2, [r3, #8]
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	683a      	ldr	r2, [r7, #0]
 80156e0:	60da      	str	r2, [r3, #12]
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	69ba      	ldr	r2, [r7, #24]
 80156e6:	611a      	str	r2, [r3, #16]
    {
    }
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	4618      	mov	r0, r3
 80156ec:	3714      	adds	r7, #20
 80156ee:	46bd      	mov	sp, r7
 80156f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f4:	4770      	bx	lr
 80156f6:	bf00      	nop
 80156f8:	080226c4 	.word	0x080226c4

080156fc <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
    {
 8015704:	4a04      	ldr	r2, [pc, #16]	; (8015718 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	601a      	str	r2, [r3, #0]
    }
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4618      	mov	r0, r3
 801570e:	370c      	adds	r7, #12
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr
 8015718:	080226c4 	.word	0x080226c4

0801571c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
    }
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f7ff ffe9 	bl	80156fc <_ZN8touchgfx7MVPHeapD1Ev>
 801572a:	2114      	movs	r1, #20
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f009 ffee 	bl	801f70e <_ZdlPvj>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	4618      	mov	r0, r3
 8015736:	3708      	adds	r7, #8
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}

0801573c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801573c:	b580      	push	{r7, lr}
 801573e:	b082      	sub	sp, #8
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
 8015744:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	4618      	mov	r0, r3
 801574a:	f7fd f9f7 	bl	8012b3c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801574e:	bf00      	nop
 8015750:	3708      	adds	r7, #8
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
	...

08015758 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015758:	b580      	push	{r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af02      	add	r7, sp, #8
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
 8015764:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015766:	68f8      	ldr	r0, [r7, #12]
 8015768:	69bb      	ldr	r3, [r7, #24]
 801576a:	9300      	str	r3, [sp, #0]
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	687a      	ldr	r2, [r7, #4]
 8015770:	68b9      	ldr	r1, [r7, #8]
 8015772:	f7ff ffa3 	bl	80156bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015776:	4a04      	ldr	r2, [pc, #16]	; (8015788 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	601a      	str	r2, [r3, #0]
    {

    }
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	4618      	mov	r0, r3
 8015780:	3710      	adds	r7, #16
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	080226b0 	.word	0x080226b0

0801578c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801578c:	b580      	push	{r7, lr}
 801578e:	af00      	add	r7, sp, #0
 8015790:	4801      	ldr	r0, [pc, #4]	; (8015798 <__tcf_0+0xc>)
 8015792:	f000 fa99 	bl	8015cc8 <_ZN12FrontendHeapD1Ev>
 8015796:	bd80      	pop	{r7, pc}
 8015798:	20008784 	.word	0x20008784

0801579c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801579c:	b580      	push	{r7, lr}
 801579e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80157a0:	4b08      	ldr	r3, [pc, #32]	; (80157c4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f003 0301 	and.w	r3, r3, #1
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d108      	bne.n	80157be <_ZN12FrontendHeap11getInstanceEv+0x22>
 80157ac:	4806      	ldr	r0, [pc, #24]	; (80157c8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80157ae:	f000 f831 	bl	8015814 <_ZN12FrontendHeapC1Ev>
 80157b2:	4b04      	ldr	r3, [pc, #16]	; (80157c4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80157b4:	2201      	movs	r2, #1
 80157b6:	601a      	str	r2, [r3, #0]
 80157b8:	4804      	ldr	r0, [pc, #16]	; (80157cc <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80157ba:	f009 ffe3 	bl	801f784 <atexit>
        return instance;
 80157be:	4b02      	ldr	r3, [pc, #8]	; (80157c8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80157c0:	4618      	mov	r0, r3
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	20008c84 	.word	0x20008c84
 80157c8:	20008784 	.word	0x20008784
 80157cc:	0801578d 	.word	0x0801578d

080157d0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	4a05      	ldr	r2, [pc, #20]	; (80157f0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	601a      	str	r2, [r3, #0]
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7ff ff8b 	bl	80156fc <_ZN8touchgfx7MVPHeapD1Ev>
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	4618      	mov	r0, r3
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	080226b0 	.word	0x080226b0

080157f4 <_ZN16FrontendHeapBaseD0Ev>:
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7ff ffe7 	bl	80157d0 <_ZN16FrontendHeapBaseD1Ev>
 8015802:	2114      	movs	r1, #20
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f009 ff82 	bl	801f70e <_ZdlPvj>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	4618      	mov	r0, r3
 801580e:	3708      	adds	r7, #8
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015814:	b590      	push	{r4, r7, lr}
 8015816:	b085      	sub	sp, #20
 8015818:	af02      	add	r7, sp, #8
 801581a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f103 0114 	add.w	r1, r3, #20
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8015836:	9300      	str	r3, [sp, #0]
 8015838:	4623      	mov	r3, r4
 801583a:	f7ff ff8d 	bl	8015758 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801583e:	4a18      	ldr	r2, [pc, #96]	; (80158a0 <_ZN12FrontendHeapC1Ev+0x8c>)
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	601a      	str	r2, [r3, #0]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	3314      	adds	r3, #20
 8015848:	4618      	mov	r0, r3
 801584a:	f000 f909 	bl	8015a60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	332c      	adds	r3, #44	; 0x2c
 8015852:	4618      	mov	r0, r3
 8015854:	f000 f938 	bl	8015ac8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801585e:	4618      	mov	r0, r3
 8015860:	f000 f968 	bl	8015b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	4619      	mov	r1, r3
 8015874:	f7ff f9f0 	bl	8014c58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801587e:	4618      	mov	r0, r3
 8015880:	f7ff fa00 	bl	8014c84 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8015884:	687a      	ldr	r2, [r7, #4]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 801588c:	4619      	mov	r1, r3
 801588e:	4610      	mov	r0, r2
 8015890:	f7ff ff54 	bl	801573c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4618      	mov	r0, r3
 8015898:	370c      	adds	r7, #12
 801589a:	46bd      	mov	sp, r7
 801589c:	bd90      	pop	{r4, r7, pc}
 801589e:	bf00      	nop
 80158a0:	08022600 	.word	0x08022600

080158a4 <_ZN8touchgfx8LCD16bppD1Ev>:
 * @see LCD
 */
class LCD16bpp : public LCD
{
public:
    virtual ~LCD16bpp()
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
    {
 80158ac:	4a05      	ldr	r2, [pc, #20]	; (80158c4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	601a      	str	r2, [r3, #0]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7ff fd2f 	bl	8015318 <_ZN8touchgfx3LCDD1Ev>
    }
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4618      	mov	r0, r3
 80158be:	3708      	adds	r7, #8
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	08024398 	.word	0x08024398

080158c8 <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b082      	sub	sp, #8
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
    }
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f7ff ffe7 	bl	80158a4 <_ZN8touchgfx8LCD16bppD1Ev>
 80158d6:	2104      	movs	r1, #4
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f009 ff18 	bl	801f70e <_ZdlPvj>
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	4618      	mov	r0, r3
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}

080158e8 <_ZN10STM32F4HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F4HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b086      	sub	sp, #24
 80158ec:	af02      	add	r7, sp, #8
 80158ee:	60f8      	str	r0, [r7, #12]
 80158f0:	60b9      	str	r1, [r7, #8]
 80158f2:	607a      	str	r2, [r7, #4]
 80158f4:	603b      	str	r3, [r7, #0]
 80158f6:	68f8      	ldr	r0, [r7, #12]
 80158f8:	8bbb      	ldrh	r3, [r7, #28]
 80158fa:	9301      	str	r3, [sp, #4]
 80158fc:	8b3b      	ldrh	r3, [r7, #24]
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	687a      	ldr	r2, [r7, #4]
 8015904:	68b9      	ldr	r1, [r7, #8]
 8015906:	f7ff fda9 	bl	801545c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801590a:	4a04      	ldr	r2, [pc, #16]	; (801591c <_ZN10STM32F4HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	601a      	str	r2, [r3, #0]
    {
    }
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	4618      	mov	r0, r3
 8015914:	3710      	adds	r7, #16
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	080227bc 	.word	0x080227bc

08015920 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b082      	sub	sp, #8
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f7ec fef7 	bl	800271c <HAL_Delay>
}
 801592e:	bf00      	nop
 8015930:	3708      	adds	r7, #8
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}

08015936 <LCD_GetXSize>:

uint32_t LCD_GetXSize(void)
{
 8015936:	b480      	push	{r7}
 8015938:	af00      	add	r7, sp, #0
  return 240;
 801593a:	23f0      	movs	r3, #240	; 0xf0
}
 801593c:	4618      	mov	r0, r3
 801593e:	46bd      	mov	sp, r7
 8015940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015944:	4770      	bx	lr

08015946 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 8015946:	b480      	push	{r7}
 8015948:	af00      	add	r7, sp, #0
  return 320;
 801594a:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 801594e:	4618      	mov	r0, r3
 8015950:	46bd      	mov	sp, r7
 8015952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015956:	4770      	bx	lr

08015958 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 8015958:	b580      	push	{r7, lr}
 801595a:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801595c:	f000 fbbc 	bl	80160d8 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 8015960:	f000 fc10 	bl	8016184 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 8015964:	f000 fb2a 	bl	8015fbc <_Z11MX_LCD_Initv>
    GPIO::init();
 8015968:	f001 fefb 	bl	8017762 <_ZN8touchgfx4GPIO4initEv>

}
 801596c:	bf00      	nop
 801596e:	bd80      	pop	{r7, pc}

08015970 <_ZN8touchgfx22STM32F4InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F4Instrumentation: public MCUInstrumentation
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	4618      	mov	r0, r3
 801597c:	f7ff fcf6 	bl	801536c <_ZN8touchgfx18MCUInstrumentationC1Ev>
 8015980:	4a03      	ldr	r2, [pc, #12]	; (8015990 <_ZN8touchgfx22STM32F4InstrumentationC1Ev+0x20>)
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	601a      	str	r2, [r3, #0]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	4618      	mov	r0, r3
 801598a:	3708      	adds	r7, #8
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}
 8015990:	08022920 	.word	0x08022920

08015994 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 8015994:	b590      	push	{r4, r7, lr}
 8015996:	b087      	sub	sp, #28
 8015998:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 240;
 801599a:	23f0      	movs	r3, #240	; 0xf0
 801599c:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 320;  
 801599e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80159a2:	80bb      	strh	r3, [r7, #4]
  
  HAL& hal = touchgfx_generic_init<STM32F4HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0); 
 80159a4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80159a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80159ac:	2200      	movs	r2, #0
 80159ae:	9203      	str	r2, [sp, #12]
 80159b0:	2200      	movs	r2, #0
 80159b2:	9202      	str	r2, [sp, #8]
 80159b4:	2200      	movs	r2, #0
 80159b6:	9201      	str	r2, [sp, #4]
 80159b8:	9300      	str	r3, [sp, #0]
 80159ba:	460b      	mov	r3, r1
 80159bc:	4a19      	ldr	r2, [pc, #100]	; (8015a24 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 80159be:	491a      	ldr	r1, [pc, #104]	; (8015a28 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 80159c0:	481a      	ldr	r0, [pc, #104]	; (8015a2c <_ZN8touchgfx13touchgfx_initEv+0x98>)
 80159c2:	f000 f8eb 	bl	8015b9c <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 80159c6:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	337c      	adds	r3, #124	; 0x7c
 80159ce:	681c      	ldr	r4, [r3, #0]
 80159d0:	4b17      	ldr	r3, [pc, #92]	; (8015a30 <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	4619      	mov	r1, r3
 80159d6:	4b17      	ldr	r3, [pc, #92]	; (8015a34 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 80159d8:	881a      	ldrh	r2, [r3, #0]
 80159da:	2301      	movs	r3, #1
 80159dc:	9300      	str	r3, [sp, #0]
 80159de:	2301      	movs	r3, #1
 80159e0:	6838      	ldr	r0, [r7, #0]
 80159e2:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 80159e4:	2102      	movs	r1, #2
 80159e6:	6838      	ldr	r0, [r7, #0]
 80159e8:	f7ff fe16 	bl	8015618 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 80159ec:	2101      	movs	r1, #1
 80159ee:	6838      	ldr	r0, [r7, #0]
 80159f0:	f7ff fe44 	bl	801567c <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 80159f4:	2100      	movs	r1, #0
 80159f6:	6838      	ldr	r0, [r7, #0]
 80159f8:	f7ff fdfe 	bl	80155f8 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 80159fc:	2100      	movs	r1, #0
 80159fe:	6838      	ldr	r0, [r7, #0]
 8015a00:	f7ff fdea 	bl	80155d8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 8015a04:	480c      	ldr	r0, [pc, #48]	; (8015a38 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8015a06:	f001 fd97 	bl	8017538 <_ZN8touchgfx22STM32F4Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 8015a0a:	490b      	ldr	r1, [pc, #44]	; (8015a38 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8015a0c:	6838      	ldr	r0, [r7, #0]
 8015a0e:	f7ff fe17 	bl	8015640 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 8015a12:	2101      	movs	r1, #1
 8015a14:	6838      	ldr	r0, [r7, #0]
 8015a16:	f7ff fe21 	bl	801565c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8015a1a:	bf00      	nop
 8015a1c:	370c      	adds	r7, #12
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd90      	pop	{r4, r7, pc}
 8015a22:	bf00      	nop
 8015a24:	20000078 	.word	0x20000078
 8015a28:	2000007c 	.word	0x2000007c
 8015a2c:	20008c8c 	.word	0x20008c8c
 8015a30:	20000074 	.word	0x20000074
 8015a34:	20000080 	.word	0x20000080
 8015a38:	200098ac 	.word	0x200098ac

08015a3c <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 8015a40:	f7ff ffa8 	bl	8015994 <_ZN8touchgfx13touchgfx_initEv>
}
 8015a44:	bf00      	nop
 8015a46:	bd80      	pop	{r7, pc}

08015a48 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 8015a4c:	f7f6 fcd8 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 8015a50:	4602      	mov	r2, r0
 8015a52:	6813      	ldr	r3, [r2, #0]
 8015a54:	330c      	adds	r3, #12
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	4610      	mov	r0, r2
 8015a5a:	4798      	blx	r3
}
 8015a5c:	bf00      	nop
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f002 fa32 	bl	8017ed4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015a70:	4a03      	ldr	r2, [pc, #12]	; (8015a80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	601a      	str	r2, [r3, #0]
    {
    }
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	0802267c 	.word	0x0802267c

08015a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
    {
    }
 8015a8c:	4a05      	ldr	r2, [pc, #20]	; (8015aa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	601a      	str	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f002 fa1b 	bl	8017ed0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	0802267c 	.word	0x0802267c

08015aa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
    }
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f7ff ffe7 	bl	8015a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015ab6:	2118      	movs	r1, #24
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f009 fe28 	bl	801f70e <_ZdlPvj>
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3708      	adds	r7, #8
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f002 f9fe 	bl	8017ed4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015ad8:	4a03      	ldr	r2, [pc, #12]	; (8015ae8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	601a      	str	r2, [r3, #0]
    }
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3708      	adds	r7, #8
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}
 8015ae8:	08022648 	.word	0x08022648

08015aec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
    }
 8015af4:	4a05      	ldr	r2, [pc, #20]	; (8015b0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	601a      	str	r2, [r3, #0]
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	4618      	mov	r0, r3
 8015afe:	f002 f9e7 	bl	8017ed0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	4618      	mov	r0, r3
 8015b06:	3708      	adds	r7, #8
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}
 8015b0c:	08022648 	.word	0x08022648

08015b10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
    }
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f7ff ffe7 	bl	8015aec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015b1e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f009 fdf3 	bl	801f70e <_ZdlPvj>
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
	...

08015b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b082      	sub	sp, #8
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f002 f9c8 	bl	8017ed4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015b44:	4a03      	ldr	r2, [pc, #12]	; (8015b54 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	601a      	str	r2, [r3, #0]
    }
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3708      	adds	r7, #8
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	08022614 	.word	0x08022614

08015b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
    }
 8015b60:	4a05      	ldr	r2, [pc, #20]	; (8015b78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	601a      	str	r2, [r3, #0]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f002 f9b1 	bl	8017ed0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	4618      	mov	r0, r3
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}
 8015b78:	08022614 	.word	0x08022614

08015b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
    }
 8015b84:	6878      	ldr	r0, [r7, #4]
 8015b86:	f7ff ffe7 	bl	8015b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015b8a:	215c      	movs	r1, #92	; 0x5c
 8015b8c:	6878      	ldr	r0, [r7, #4]
 8015b8e:	f009 fdbe 	bl	801f70e <_ZdlPvj>
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	4618      	mov	r0, r3
 8015b96:	3708      	adds	r7, #8
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8015b9c:	b590      	push	{r4, r7, lr}
 8015b9e:	b089      	sub	sp, #36	; 0x24
 8015ba0:	af02      	add	r7, sp, #8
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	60b9      	str	r1, [r7, #8]
 8015ba6:	607a      	str	r2, [r7, #4]
 8015ba8:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 8015baa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015bae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8015bb2:	9300      	str	r3, [sp, #0]
 8015bb4:	4613      	mov	r3, r2
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	68b9      	ldr	r1, [r7, #8]
 8015bba:	68f8      	ldr	r0, [r7, #12]
 8015bbc:	f000 f85c 	bl	8015c78 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 8015bc0:	6178      	str	r0, [r7, #20]
    hal.initialize();
 8015bc2:	6978      	ldr	r0, [r7, #20]
 8015bc4:	f002 fc94 	bl	80184f0 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 8015bc8:	f7fe ff2c 	bl	8014a24 <_ZN14BitmapDatabase11getInstanceEv>
 8015bcc:	4604      	mov	r4, r0
 8015bce:	f7fe ff33 	bl	8014a38 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bde:	4620      	mov	r0, r4
 8015be0:	f006 f866 	bl	801bcb0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 8015be4:	480d      	ldr	r0, [pc, #52]	; (8015c1c <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 8015be6:	f7ff fd59 	bl	801569c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8015bea:	2000      	movs	r0, #0
 8015bec:	f7fe ff48 	bl	8014a80 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8015bf0:	480b      	ldr	r0, [pc, #44]	; (8015c20 <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 8015bf2:	f005 ffab 	bl	801bb4c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8015bf6:	f7ff fdd1 	bl	801579c <_ZN12FrontendHeap11getInstanceEv>
 8015bfa:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	3358      	adds	r3, #88	; 0x58
 8015c02:	681c      	ldr	r4, [r3, #0]
 8015c04:	f003 feec 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	6978      	ldr	r0, [r7, #20]
 8015c0e:	47a0      	blx	r4

    return hal;
 8015c10:	697b      	ldr	r3, [r7, #20]
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	371c      	adds	r7, #28
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd90      	pop	{r4, r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	20008c88 	.word	0x20008c88
 8015c20:	20000070 	.word	0x20000070

08015c24 <_ZN10STM32F4HALD1Ev>:
class STM32F4HAL : public touchgfx::HAL
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b082      	sub	sp, #8
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	4a05      	ldr	r2, [pc, #20]	; (8015c44 <_ZN10STM32F4HALD1Ev+0x20>)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	601a      	str	r2, [r3, #0]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7ff fcaf 	bl	8015598 <_ZN8touchgfx3HALD1Ev>
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3708      	adds	r7, #8
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}
 8015c44:	080227bc 	.word	0x080227bc

08015c48 <_ZN10STM32F4HALD0Ev>:
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f7ff ffe7 	bl	8015c24 <_ZN10STM32F4HALD1Ev>
 8015c56:	2178      	movs	r1, #120	; 0x78
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f009 fd58 	bl	801f70e <_ZdlPvj>
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	4618      	mov	r0, r3
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	4801      	ldr	r0, [pc, #4]	; (8015c74 <__tcf_1+0xc>)
 8015c6e:	f7ff ffd9 	bl	8015c24 <_ZN10STM32F4HALD1Ev>
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	200098bc 	.word	0x200098bc

08015c78 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af02      	add	r7, sp, #8
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	607a      	str	r2, [r7, #4]
 8015c84:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 8015c86:	4b0d      	ldr	r3, [pc, #52]	; (8015cbc <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	f003 0301 	and.w	r3, r3, #1
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d10f      	bne.n	8015cb2 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 8015c92:	887b      	ldrh	r3, [r7, #2]
 8015c94:	8b3a      	ldrh	r2, [r7, #24]
 8015c96:	9201      	str	r2, [sp, #4]
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	68ba      	ldr	r2, [r7, #8]
 8015c9e:	68f9      	ldr	r1, [r7, #12]
 8015ca0:	4807      	ldr	r0, [pc, #28]	; (8015cc0 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 8015ca2:	f7ff fe21 	bl	80158e8 <_ZN10STM32F4HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015ca6:	4b05      	ldr	r3, [pc, #20]	; (8015cbc <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8015ca8:	2201      	movs	r2, #1
 8015caa:	601a      	str	r2, [r3, #0]
 8015cac:	4805      	ldr	r0, [pc, #20]	; (8015cc4 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 8015cae:	f009 fd69 	bl	801f784 <atexit>
    return hal;
 8015cb2:	4b03      	ldr	r3, [pc, #12]	; (8015cc0 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3710      	adds	r7, #16
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	20009934 	.word	0x20009934
 8015cc0:	200098bc 	.word	0x200098bc
 8015cc4:	08015c69 	.word	0x08015c69

08015cc8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	4a10      	ldr	r2, [pc, #64]	; (8015d14 <_ZN12FrontendHeapD1Ev+0x4c>)
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	601a      	str	r2, [r3, #0]
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7fe ff85 	bl	8014bec <_ZN19FrontendApplicationD1Ev>
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7ff ff35 	bl	8015b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	332c      	adds	r3, #44	; 0x2c
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7ff fefa 	bl	8015aec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	3314      	adds	r3, #20
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7ff fec1 	bl	8015a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7ff fd63 	bl	80157d0 <_ZN16FrontendHeapBaseD1Ev>
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	3708      	adds	r7, #8
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}
 8015d14:	08022600 	.word	0x08022600

08015d18 <_ZN12FrontendHeapD0Ev>:
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f7ff ffd1 	bl	8015cc8 <_ZN12FrontendHeapD1Ev>
 8015d26:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f009 fcef 	bl	801f70e <_ZdlPvj>
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	4618      	mov	r0, r3
 8015d34:	3708      	adds	r7, #8
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
	...

08015d3c <_ZN8touchgfx22STM32F4InstrumentationD1Ev>:
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	4a05      	ldr	r2, [pc, #20]	; (8015d5c <_ZN8touchgfx22STM32F4InstrumentationD1Ev+0x20>)
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	601a      	str	r2, [r3, #0]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7ff fb23 	bl	8015398 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	4618      	mov	r0, r3
 8015d56:	3708      	adds	r7, #8
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	08022920 	.word	0x08022920

08015d60 <_ZN8touchgfx22STM32F4InstrumentationD0Ev>:
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	f7ff ffe7 	bl	8015d3c <_ZN8touchgfx22STM32F4InstrumentationD1Ev>
 8015d6e:	2110      	movs	r1, #16
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f009 fccc 	bl	801f70e <_ZdlPvj>
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3708      	adds	r7, #8
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <_Z41__static_initialization_and_destruction_0ii>:
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	6039      	str	r1, [r7, #0]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	d10a      	bne.n	8015da6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d105      	bne.n	8015da6 <_Z41__static_initialization_and_destruction_0ii+0x26>
STM32F4DMA dma;
 8015d9a:	4810      	ldr	r0, [pc, #64]	; (8015ddc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8015d9c:	f000 fdc2 	bl	8016924 <_ZN10STM32F4DMAC1Ev>
STM32F4Instrumentation mcuInstr;
 8015da0:	480f      	ldr	r0, [pc, #60]	; (8015de0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8015da2:	f7ff fde5 	bl	8015970 <_ZN8touchgfx22STM32F4InstrumentationC1Ev>
static LCD16bpp display;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d113      	bne.n	8015dd4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015db2:	4293      	cmp	r3, r2
 8015db4:	d10e      	bne.n	8015dd4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8015db6:	480b      	ldr	r0, [pc, #44]	; (8015de4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8015db8:	f7ff fd74 	bl	80158a4 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F4Instrumentation mcuInstr;
 8015dbc:	4808      	ldr	r0, [pc, #32]	; (8015de0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8015dbe:	f7ff ffbd 	bl	8015d3c <_ZN8touchgfx22STM32F4InstrumentationD1Ev>
STM32F4TouchController tc;
 8015dc2:	4809      	ldr	r0, [pc, #36]	; (8015de8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015dc4:	f000 f814 	bl	8015df0 <_ZN8touchgfx22STM32F4TouchControllerD1Ev>
STM32F4DMA dma;
 8015dc8:	4804      	ldr	r0, [pc, #16]	; (8015ddc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8015dca:	f000 fdd5 	bl	8016978 <_ZN10STM32F4DMAD1Ev>
static ApplicationFontProvider fontProvider;
 8015dce:	4807      	ldr	r0, [pc, #28]	; (8015dec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8015dd0:	f7fc f8cc 	bl	8011f6c <_ZN23ApplicationFontProviderD1Ev>
}
 8015dd4:	bf00      	nop
 8015dd6:	3708      	adds	r7, #8
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}
 8015ddc:	20008c8c 	.word	0x20008c8c
 8015de0:	200098ac 	.word	0x200098ac
 8015de4:	2000007c 	.word	0x2000007c
 8015de8:	20000078 	.word	0x20000078
 8015dec:	20000070 	.word	0x20000070

08015df0 <_ZN8touchgfx22STM32F4TouchControllerD1Ev>:
#include <platform/driver/touch/TouchController.hpp>
#include <main.h>
                 
namespace touchgfx
{
class STM32F4TouchController: public TouchController
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b082      	sub	sp, #8
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
 8015df8:	4a05      	ldr	r2, [pc, #20]	; (8015e10 <_ZN8touchgfx22STM32F4TouchControllerD1Ev+0x20>)
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	601a      	str	r2, [r3, #0]
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7f6 f8c5 	bl	800bf90 <_ZN8touchgfx15TouchControllerD1Ev>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3708      	adds	r7, #8
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	08022948 	.word	0x08022948

08015e14 <_ZN8touchgfx22STM32F4TouchControllerD0Ev>:
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7ff ffe7 	bl	8015df0 <_ZN8touchgfx22STM32F4TouchControllerD1Ev>
 8015e22:	2104      	movs	r1, #4
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f009 fc72 	bl	801f70e <_ZdlPvj>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8015e34:	b480      	push	{r7}
 8015e36:	b083      	sub	sp, #12
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015e3c:	2301      	movs	r3, #1
    }
 8015e3e:	4618      	mov	r0, r3
 8015e40:	370c      	adds	r7, #12
 8015e42:	46bd      	mov	sp, r7
 8015e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e48:	4770      	bx	lr

08015e4a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8015e4a:	b480      	push	{r7}
 8015e4c:	b083      	sub	sp, #12
 8015e4e:	af00      	add	r7, sp, #0
 8015e50:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015e52:	2354      	movs	r3, #84	; 0x54
    }
 8015e54:	4618      	mov	r0, r3
 8015e56:	370c      	adds	r7, #12
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5e:	4770      	bx	lr

08015e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8015e60:	b480      	push	{r7}
 8015e62:	b083      	sub	sp, #12
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	460b      	mov	r3, r1
 8015e6a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015e6c:	887b      	ldrh	r3, [r7, #2]
 8015e6e:	2254      	movs	r2, #84	; 0x54
 8015e70:	fb02 f303 	mul.w	r3, r2, r3
 8015e74:	3308      	adds	r3, #8
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	4413      	add	r3, r2
    }
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	370c      	adds	r7, #12
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e84:	4770      	bx	lr

08015e86 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8015e86:	b480      	push	{r7}
 8015e88:	b083      	sub	sp, #12
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	6078      	str	r0, [r7, #4]
 8015e8e:	460b      	mov	r3, r1
 8015e90:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015e92:	887b      	ldrh	r3, [r7, #2]
 8015e94:	2254      	movs	r2, #84	; 0x54
 8015e96:	fb02 f303 	mul.w	r3, r2, r3
 8015e9a:	3308      	adds	r3, #8
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	4413      	add	r3, r2
    }
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	370c      	adds	r7, #12
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eaa:	4770      	bx	lr

08015eac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015eac:	b480      	push	{r7}
 8015eae:	b083      	sub	sp, #12
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015eb4:	2301      	movs	r3, #1
    }
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	370c      	adds	r7, #12
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr

08015ec2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015ec2:	b480      	push	{r7}
 8015ec4:	b083      	sub	sp, #12
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015eca:	f44f 7347 	mov.w	r3, #796	; 0x31c
    }
 8015ece:	4618      	mov	r0, r3
 8015ed0:	370c      	adds	r7, #12
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed8:	4770      	bx	lr

08015eda <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015eda:	b480      	push	{r7}
 8015edc:	b083      	sub	sp, #12
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
 8015ee2:	460b      	mov	r3, r1
 8015ee4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015ee6:	887b      	ldrh	r3, [r7, #2]
 8015ee8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015eec:	fb02 f303 	mul.w	r3, r2, r3
 8015ef0:	3308      	adds	r3, #8
 8015ef2:	687a      	ldr	r2, [r7, #4]
 8015ef4:	4413      	add	r3, r2
    }
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	370c      	adds	r7, #12
 8015efa:	46bd      	mov	sp, r7
 8015efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f00:	4770      	bx	lr

08015f02 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015f02:	b480      	push	{r7}
 8015f04:	b083      	sub	sp, #12
 8015f06:	af00      	add	r7, sp, #0
 8015f08:	6078      	str	r0, [r7, #4]
 8015f0a:	460b      	mov	r3, r1
 8015f0c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015f0e:	887b      	ldrh	r3, [r7, #2]
 8015f10:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015f14:	fb02 f303 	mul.w	r3, r2, r3
 8015f18:	3308      	adds	r3, #8
 8015f1a:	687a      	ldr	r2, [r7, #4]
 8015f1c:	4413      	add	r3, r2
    }
 8015f1e:	4618      	mov	r0, r3
 8015f20:	370c      	adds	r7, #12
 8015f22:	46bd      	mov	sp, r7
 8015f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f28:	4770      	bx	lr

08015f2a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015f2a:	b480      	push	{r7}
 8015f2c:	b083      	sub	sp, #12
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015f32:	2301      	movs	r3, #1
    }
 8015f34:	4618      	mov	r0, r3
 8015f36:	370c      	adds	r7, #12
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr

08015f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015f40:	b480      	push	{r7}
 8015f42:	b083      	sub	sp, #12
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015f48:	2310      	movs	r3, #16
    }
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	370c      	adds	r7, #12
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f54:	4770      	bx	lr

08015f56 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015f56:	b480      	push	{r7}
 8015f58:	b083      	sub	sp, #12
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
 8015f5e:	460b      	mov	r3, r1
 8015f60:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015f62:	887b      	ldrh	r3, [r7, #2]
 8015f64:	011b      	lsls	r3, r3, #4
 8015f66:	3308      	adds	r3, #8
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	4413      	add	r3, r2
    }
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	370c      	adds	r7, #12
 8015f70:	46bd      	mov	sp, r7
 8015f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f76:	4770      	bx	lr

08015f78 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015f78:	b480      	push	{r7}
 8015f7a:	b083      	sub	sp, #12
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	460b      	mov	r3, r1
 8015f82:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015f84:	887b      	ldrh	r3, [r7, #2]
 8015f86:	011b      	lsls	r3, r3, #4
 8015f88:	3308      	adds	r3, #8
 8015f8a:	687a      	ldr	r2, [r7, #4]
 8015f8c:	4413      	add	r3, r2
    }
 8015f8e:	4618      	mov	r0, r3
 8015f90:	370c      	adds	r7, #12
 8015f92:	46bd      	mov	sp, r7
 8015f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f98:	4770      	bx	lr

08015f9a <_GLOBAL__sub_I_LCD_Delay>:
 8015f9a:	b580      	push	{r7, lr}
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015fa2:	2001      	movs	r0, #1
 8015fa4:	f7ff feec 	bl	8015d80 <_Z41__static_initialization_and_destruction_0ii>
 8015fa8:	bd80      	pop	{r7, pc}

08015faa <_GLOBAL__sub_D_LCD_Delay>:
 8015faa:	b580      	push	{r7, lr}
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	f7ff fee4 	bl	8015d80 <_Z41__static_initialization_and_destruction_0ii>
 8015fb8:	bd80      	pop	{r7, pc}
	...

08015fbc <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b08e      	sub	sp, #56	; 0x38
 8015fc0:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;
 ili9341_Init();
 8015fc2:	f7eb fb7c 	bl	80016be <ili9341_Init>

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8015fc6:	4842      	ldr	r0, [pc, #264]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015fc8:	f7f0 f96c 	bl	80062a4 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8015fcc:	4b40      	ldr	r3, [pc, #256]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015fce:	4a41      	ldr	r2, [pc, #260]	; (80160d4 <_Z11MX_LCD_Initv+0x118>)
 8015fd0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8015fd2:	4b3f      	ldr	r3, [pc, #252]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8015fd8:	4b3d      	ldr	r3, [pc, #244]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015fda:	2200      	movs	r2, #0
 8015fdc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8015fde:	4b3c      	ldr	r3, [pc, #240]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8015fe4:	4b3a      	ldr	r3, [pc, #232]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8015fea:	4b39      	ldr	r3, [pc, #228]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015fec:	2209      	movs	r2, #9
 8015fee:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8015ff0:	4b37      	ldr	r3, [pc, #220]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8015ff6:	4b36      	ldr	r3, [pc, #216]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015ff8:	221d      	movs	r2, #29
 8015ffa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8015ffc:	4b34      	ldr	r3, [pc, #208]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8015ffe:	2203      	movs	r2, #3
 8016000:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8016002:	4b33      	ldr	r3, [pc, #204]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8016004:	f240 120d 	movw	r2, #269	; 0x10d
 8016008:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 801600a:	4b31      	ldr	r3, [pc, #196]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 801600c:	f240 1243 	movw	r2, #323	; 0x143
 8016010:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8016012:	4b2f      	ldr	r3, [pc, #188]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8016014:	f240 1217 	movw	r2, #279	; 0x117
 8016018:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 801601a:	4b2d      	ldr	r3, [pc, #180]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 801601c:	f240 1247 	movw	r2, #327	; 0x147
 8016020:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8016022:	4b2b      	ldr	r3, [pc, #172]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8016024:	2200      	movs	r2, #0
 8016026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801602a:	4b29      	ldr	r3, [pc, #164]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 801602c:	2200      	movs	r2, #0
 801602e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8016032:	4b27      	ldr	r3, [pc, #156]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 8016034:	2200      	movs	r2, #0
 8016036:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801603a:	4825      	ldr	r0, [pc, #148]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 801603c:	f7f0 f862 	bl	8006104 <HAL_LTDC_Init>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	bf14      	ite	ne
 8016046:	2301      	movne	r3, #1
 8016048:	2300      	moveq	r3, #0
 801604a:	b2db      	uxtb	r3, r3
 801604c:	2b00      	cmp	r3, #0
 801604e:	d001      	beq.n	8016054 <_Z11MX_LCD_Initv+0x98>
  {
    Error_Handler( );
 8016050:	f7ea fe08 	bl	8000c64 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8016054:	2300      	movs	r3, #0
 8016056:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8016058:	23f0      	movs	r3, #240	; 0xf0
 801605a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801605c:	2300      	movs	r3, #0
 801605e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8016060:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8016064:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8016066:	2302      	movs	r3, #2
 8016068:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801606a:	23ff      	movs	r3, #255	; 0xff
 801606c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 801606e:	2300      	movs	r3, #0
 8016070:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8016072:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8016076:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8016078:	2307      	movs	r3, #7
 801607a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 801607c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8016080:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8016082:	23f0      	movs	r3, #240	; 0xf0
 8016084:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8016086:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801608a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 801608c:	2300      	movs	r3, #0
 801608e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8016092:	2300      	movs	r3, #0
 8016094:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8016098:	2300      	movs	r3, #0
 801609a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801609e:	1d3b      	adds	r3, r7, #4
 80160a0:	2200      	movs	r2, #0
 80160a2:	4619      	mov	r1, r3
 80160a4:	480a      	ldr	r0, [pc, #40]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 80160a6:	f7f0 f9cd 	bl	8006444 <HAL_LTDC_ConfigLayer>
 80160aa:	4603      	mov	r3, r0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	bf14      	ite	ne
 80160b0:	2301      	movne	r3, #1
 80160b2:	2300      	moveq	r3, #0
 80160b4:	b2db      	uxtb	r3, r3
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d001      	beq.n	80160be <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 80160ba:	f7ea fdd3 	bl	8000c64 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 240, 0);
 80160be:	2200      	movs	r2, #0
 80160c0:	21f0      	movs	r1, #240	; 0xf0
 80160c2:	4803      	ldr	r0, [pc, #12]	; (80160d0 <_Z11MX_LCD_Initv+0x114>)
 80160c4:	f7f0 f9fc 	bl	80064c0 <HAL_LTDC_SetPitch>

}
 80160c8:	bf00      	nop
 80160ca:	3738      	adds	r7, #56	; 0x38
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}
 80160d0:	20009938 	.word	0x20009938
 80160d4:	40016800 	.word	0x40016800

080160d8 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 80160d8:	b580      	push	{r7, lr}
 80160da:	b088      	sub	sp, #32
 80160dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80160de:	1d3b      	adds	r3, r7, #4
 80160e0:	2200      	movs	r2, #0
 80160e2:	601a      	str	r2, [r3, #0]
 80160e4:	605a      	str	r2, [r3, #4]
 80160e6:	609a      	str	r2, [r3, #8]
 80160e8:	60da      	str	r2, [r3, #12]
 80160ea:	611a      	str	r2, [r3, #16]
 80160ec:	615a      	str	r2, [r3, #20]
 80160ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80160f0:	4b22      	ldr	r3, [pc, #136]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 80160f2:	4a23      	ldr	r2, [pc, #140]	; (8016180 <_Z11MX_FMC_Initv+0xa8>)
 80160f4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80160f6:	4b21      	ldr	r3, [pc, #132]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 80160f8:	2201      	movs	r2, #1
 80160fa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80160fc:	4b1f      	ldr	r3, [pc, #124]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 80160fe:	2200      	movs	r2, #0
 8016100:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8016102:	4b1e      	ldr	r3, [pc, #120]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 8016104:	2204      	movs	r2, #4
 8016106:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8016108:	4b1c      	ldr	r3, [pc, #112]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 801610a:	2210      	movs	r2, #16
 801610c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801610e:	4b1b      	ldr	r3, [pc, #108]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 8016110:	2240      	movs	r2, #64	; 0x40
 8016112:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8016114:	4b19      	ldr	r3, [pc, #100]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 8016116:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801611a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801611c:	4b17      	ldr	r3, [pc, #92]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 801611e:	2200      	movs	r2, #0
 8016120:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8016122:	4b16      	ldr	r3, [pc, #88]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 8016124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016128:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 801612a:	4b14      	ldr	r3, [pc, #80]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 801612c:	2200      	movs	r2, #0
 801612e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8016130:	4b12      	ldr	r3, [pc, #72]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 8016132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016136:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8016138:	2302      	movs	r3, #2
 801613a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 801613c:	2307      	movs	r3, #7
 801613e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8016140:	2304      	movs	r3, #4
 8016142:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8016144:	2307      	movs	r3, #7
 8016146:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8016148:	2303      	movs	r3, #3
 801614a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 801614c:	2302      	movs	r3, #2
 801614e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8016150:	2302      	movs	r3, #2
 8016152:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8016154:	1d3b      	adds	r3, r7, #4
 8016156:	4619      	mov	r1, r3
 8016158:	4808      	ldr	r0, [pc, #32]	; (801617c <_Z11MX_FMC_Initv+0xa4>)
 801615a:	f7f1 fa0d 	bl	8007578 <HAL_SDRAM_Init>
 801615e:	4603      	mov	r3, r0
 8016160:	2b00      	cmp	r3, #0
 8016162:	bf14      	ite	ne
 8016164:	2301      	movne	r3, #1
 8016166:	2300      	moveq	r3, #0
 8016168:	b2db      	uxtb	r3, r3
 801616a:	2b00      	cmp	r3, #0
 801616c:	d001      	beq.n	8016172 <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 801616e:	f7ea fd79 	bl	8000c64 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8016172:	bf00      	nop
 8016174:	3720      	adds	r7, #32
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}
 801617a:	bf00      	nop
 801617c:	20009a20 	.word	0x20009a20
 8016180:	a0000140 	.word	0xa0000140

08016184 <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 801618a:	2300      	movs	r3, #0
 801618c:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 801618e:	4b2b      	ldr	r3, [pc, #172]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 8016190:	2201      	movs	r2, #1
 8016192:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK2;
 8016194:	4b29      	ldr	r3, [pc, #164]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 8016196:	2208      	movs	r2, #8
 8016198:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801619a:	4b28      	ldr	r3, [pc, #160]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 801619c:	2201      	movs	r2, #1
 801619e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80161a0:	4b26      	ldr	r3, [pc, #152]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161a2:	2200      	movs	r2, #0
 80161a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80161a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161aa:	4924      	ldr	r1, [pc, #144]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161ac:	4824      	ldr	r0, [pc, #144]	; (8016240 <_Z15MX_SDRAM_InitExv+0xbc>)
 80161ae:	f7f1 fa17 	bl	80075e0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80161b2:	2001      	movs	r0, #1
 80161b4:	f7ec fab2 	bl	800271c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80161b8:	4b20      	ldr	r3, [pc, #128]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161ba:	2202      	movs	r2, #2
 80161bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 80161be:	4b1f      	ldr	r3, [pc, #124]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161c0:	2208      	movs	r2, #8
 80161c2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80161c4:	4b1d      	ldr	r3, [pc, #116]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161c6:	2201      	movs	r2, #1
 80161c8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80161ca:	4b1c      	ldr	r3, [pc, #112]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161cc:	2200      	movs	r2, #0
 80161ce:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 80161d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161d4:	4919      	ldr	r1, [pc, #100]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161d6:	481a      	ldr	r0, [pc, #104]	; (8016240 <_Z15MX_SDRAM_InitExv+0xbc>)
 80161d8:	f7f1 fa02 	bl	80075e0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80161dc:	4b17      	ldr	r3, [pc, #92]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161de:	2203      	movs	r2, #3
 80161e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 80161e2:	4b16      	ldr	r3, [pc, #88]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161e4:	2208      	movs	r2, #8
 80161e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 4;
 80161e8:	4b14      	ldr	r3, [pc, #80]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161ea:	2204      	movs	r2, #4
 80161ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80161ee:	4b13      	ldr	r3, [pc, #76]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161f0:	2200      	movs	r2, #0
 80161f2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80161f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161f8:	4910      	ldr	r1, [pc, #64]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 80161fa:	4811      	ldr	r0, [pc, #68]	; (8016240 <_Z15MX_SDRAM_InitExv+0xbc>)
 80161fc:	f7f1 f9f0 	bl	80075e0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8016200:	f44f 730c 	mov.w	r3, #560	; 0x230
 8016204:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8016206:	4b0d      	ldr	r3, [pc, #52]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 8016208:	2204      	movs	r2, #4
 801620a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 801620c:	4b0b      	ldr	r3, [pc, #44]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 801620e:	2208      	movs	r2, #8
 8016210:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8016212:	4b0a      	ldr	r3, [pc, #40]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 8016214:	2201      	movs	r2, #1
 8016216:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	4a08      	ldr	r2, [pc, #32]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 801621c:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801621e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016222:	4906      	ldr	r1, [pc, #24]	; (801623c <_Z15MX_SDRAM_InitExv+0xb8>)
 8016224:	4806      	ldr	r0, [pc, #24]	; (8016240 <_Z15MX_SDRAM_InitExv+0xbc>)
 8016226:	f7f1 f9db 	bl	80075e0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 801622a:	f240 516a 	movw	r1, #1386	; 0x56a
 801622e:	4804      	ldr	r0, [pc, #16]	; (8016240 <_Z15MX_SDRAM_InitExv+0xbc>)
 8016230:	f7f1 fa01 	bl	8007636 <HAL_SDRAM_ProgramRefreshRate>
}
 8016234:	bf00      	nop
 8016236:	3708      	adds	r7, #8
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	20009a54 	.word	0x20009a54
 8016240:	20009a20 	.word	0x20009a20

08016244 <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b08e      	sub	sp, #56	; 0x38
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801624c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016250:	2200      	movs	r2, #0
 8016252:	601a      	str	r2, [r3, #0]
 8016254:	605a      	str	r2, [r3, #4]
 8016256:	609a      	str	r2, [r3, #8]
 8016258:	60da      	str	r2, [r3, #12]
 801625a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4a7b      	ldr	r2, [pc, #492]	; (8016450 <HAL_LTDC_MspInit+0x20c>)
 8016262:	4293      	cmp	r3, r2
 8016264:	f040 80f0 	bne.w	8016448 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8016268:	2300      	movs	r3, #0
 801626a:	623b      	str	r3, [r7, #32]
 801626c:	4b79      	ldr	r3, [pc, #484]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 801626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016270:	4a78      	ldr	r2, [pc, #480]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 8016272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016276:	6453      	str	r3, [r2, #68]	; 0x44
 8016278:	4b76      	ldr	r3, [pc, #472]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 801627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801627c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016280:	623b      	str	r3, [r7, #32]
 8016282:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8016284:	2300      	movs	r3, #0
 8016286:	61fb      	str	r3, [r7, #28]
 8016288:	4b72      	ldr	r3, [pc, #456]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 801628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801628c:	4a71      	ldr	r2, [pc, #452]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 801628e:	f043 0320 	orr.w	r3, r3, #32
 8016292:	6313      	str	r3, [r2, #48]	; 0x30
 8016294:	4b6f      	ldr	r3, [pc, #444]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 8016296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016298:	f003 0320 	and.w	r3, r3, #32
 801629c:	61fb      	str	r3, [r7, #28]
 801629e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80162a0:	2300      	movs	r3, #0
 80162a2:	61bb      	str	r3, [r7, #24]
 80162a4:	4b6b      	ldr	r3, [pc, #428]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162a8:	4a6a      	ldr	r2, [pc, #424]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162aa:	f043 0301 	orr.w	r3, r3, #1
 80162ae:	6313      	str	r3, [r2, #48]	; 0x30
 80162b0:	4b68      	ldr	r3, [pc, #416]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162b4:	f003 0301 	and.w	r3, r3, #1
 80162b8:	61bb      	str	r3, [r7, #24]
 80162ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80162bc:	2300      	movs	r3, #0
 80162be:	617b      	str	r3, [r7, #20]
 80162c0:	4b64      	ldr	r3, [pc, #400]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162c4:	4a63      	ldr	r2, [pc, #396]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162c6:	f043 0302 	orr.w	r3, r3, #2
 80162ca:	6313      	str	r3, [r2, #48]	; 0x30
 80162cc:	4b61      	ldr	r3, [pc, #388]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162d0:	f003 0302 	and.w	r3, r3, #2
 80162d4:	617b      	str	r3, [r7, #20]
 80162d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80162d8:	2300      	movs	r3, #0
 80162da:	613b      	str	r3, [r7, #16]
 80162dc:	4b5d      	ldr	r3, [pc, #372]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162e0:	4a5c      	ldr	r2, [pc, #368]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162e6:	6313      	str	r3, [r2, #48]	; 0x30
 80162e8:	4b5a      	ldr	r3, [pc, #360]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80162f0:	613b      	str	r3, [r7, #16]
 80162f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80162f4:	2300      	movs	r3, #0
 80162f6:	60fb      	str	r3, [r7, #12]
 80162f8:	4b56      	ldr	r3, [pc, #344]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162fc:	4a55      	ldr	r2, [pc, #340]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 80162fe:	f043 0304 	orr.w	r3, r3, #4
 8016302:	6313      	str	r3, [r2, #48]	; 0x30
 8016304:	4b53      	ldr	r3, [pc, #332]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 8016306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016308:	f003 0304 	and.w	r3, r3, #4
 801630c:	60fb      	str	r3, [r7, #12]
 801630e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016310:	2300      	movs	r3, #0
 8016312:	60bb      	str	r3, [r7, #8]
 8016314:	4b4f      	ldr	r3, [pc, #316]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 8016316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016318:	4a4e      	ldr	r2, [pc, #312]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 801631a:	f043 0308 	orr.w	r3, r3, #8
 801631e:	6313      	str	r3, [r2, #48]	; 0x30
 8016320:	4b4c      	ldr	r3, [pc, #304]	; (8016454 <HAL_LTDC_MspInit+0x210>)
 8016322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016324:	f003 0308 	and.w	r3, r3, #8
 8016328:	60bb      	str	r3, [r7, #8]
 801632a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 801632c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016332:	2302      	movs	r3, #2
 8016334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016336:	2300      	movs	r3, #0
 8016338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801633a:	2300      	movs	r3, #0
 801633c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801633e:	230e      	movs	r3, #14
 8016340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016346:	4619      	mov	r1, r3
 8016348:	4843      	ldr	r0, [pc, #268]	; (8016458 <HAL_LTDC_MspInit+0x214>)
 801634a:	f7ec ff53 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 801634e:	f641 0358 	movw	r3, #6232	; 0x1858
 8016352:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016354:	2302      	movs	r3, #2
 8016356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016358:	2300      	movs	r3, #0
 801635a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801635c:	2300      	movs	r3, #0
 801635e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8016360:	230e      	movs	r3, #14
 8016362:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016368:	4619      	mov	r1, r3
 801636a:	483c      	ldr	r0, [pc, #240]	; (801645c <HAL_LTDC_MspInit+0x218>)
 801636c:	f7ec ff42 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8016370:	2303      	movs	r3, #3
 8016372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016374:	2302      	movs	r3, #2
 8016376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016378:	2300      	movs	r3, #0
 801637a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801637c:	2300      	movs	r3, #0
 801637e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8016380:	2309      	movs	r3, #9
 8016382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016388:	4619      	mov	r1, r3
 801638a:	4835      	ldr	r0, [pc, #212]	; (8016460 <HAL_LTDC_MspInit+0x21c>)
 801638c:	f7ec ff32 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8016390:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8016394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016396:	2302      	movs	r3, #2
 8016398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801639a:	2300      	movs	r3, #0
 801639c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801639e:	2300      	movs	r3, #0
 80163a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80163a2:	230e      	movs	r3, #14
 80163a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80163a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163aa:	4619      	mov	r1, r3
 80163ac:	482c      	ldr	r0, [pc, #176]	; (8016460 <HAL_LTDC_MspInit+0x21c>)
 80163ae:	f7ec ff21 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80163b2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80163b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80163b8:	2302      	movs	r3, #2
 80163ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163bc:	2300      	movs	r3, #0
 80163be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80163c0:	2300      	movs	r3, #0
 80163c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80163c4:	230e      	movs	r3, #14
 80163c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80163c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163cc:	4619      	mov	r1, r3
 80163ce:	4825      	ldr	r0, [pc, #148]	; (8016464 <HAL_LTDC_MspInit+0x220>)
 80163d0:	f7ec ff10 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80163d4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80163d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80163da:	2302      	movs	r3, #2
 80163dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163de:	2300      	movs	r3, #0
 80163e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80163e2:	2300      	movs	r3, #0
 80163e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80163e6:	230e      	movs	r3, #14
 80163e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80163ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163ee:	4619      	mov	r1, r3
 80163f0:	481d      	ldr	r0, [pc, #116]	; (8016468 <HAL_LTDC_MspInit+0x224>)
 80163f2:	f7ec feff 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80163f6:	2348      	movs	r3, #72	; 0x48
 80163f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80163fa:	2302      	movs	r3, #2
 80163fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163fe:	2300      	movs	r3, #0
 8016400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016402:	2300      	movs	r3, #0
 8016404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8016406:	230e      	movs	r3, #14
 8016408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801640e:	4619      	mov	r1, r3
 8016410:	4816      	ldr	r0, [pc, #88]	; (801646c <HAL_LTDC_MspInit+0x228>)
 8016412:	f7ec feef 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8016416:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801641a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801641c:	2302      	movs	r3, #2
 801641e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016420:	2300      	movs	r3, #0
 8016422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016424:	2300      	movs	r3, #0
 8016426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8016428:	2309      	movs	r3, #9
 801642a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801642c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016430:	4619      	mov	r1, r3
 8016432:	480c      	ldr	r0, [pc, #48]	; (8016464 <HAL_LTDC_MspInit+0x220>)
 8016434:	f7ec fede 	bl	80031f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8016438:	2200      	movs	r2, #0
 801643a:	2105      	movs	r1, #5
 801643c:	2058      	movs	r0, #88	; 0x58
 801643e:	f7ec fa69 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8016442:	2058      	movs	r0, #88	; 0x58
 8016444:	f7ec fa82 	bl	800294c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8016448:	bf00      	nop
 801644a:	3738      	adds	r7, #56	; 0x38
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}
 8016450:	40016800 	.word	0x40016800
 8016454:	40023800 	.word	0x40023800
 8016458:	40021400 	.word	0x40021400
 801645c:	40020000 	.word	0x40020000
 8016460:	40020400 	.word	0x40020400
 8016464:	40021800 	.word	0x40021800
 8016468:	40020800 	.word	0x40020800
 801646c:	40020c00 	.word	0x40020c00

08016470 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	4a16      	ldr	r2, [pc, #88]	; (80164d8 <HAL_LTDC_MspDeInit+0x68>)
 801647e:	4293      	cmp	r3, r2
 8016480:	d125      	bne.n	80164ce <HAL_LTDC_MspDeInit+0x5e>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8016482:	4b16      	ldr	r3, [pc, #88]	; (80164dc <HAL_LTDC_MspDeInit+0x6c>)
 8016484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016486:	4a15      	ldr	r2, [pc, #84]	; (80164dc <HAL_LTDC_MspDeInit+0x6c>)
 8016488:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801648c:	6453      	str	r3, [r2, #68]	; 0x44
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    HAL_GPIO_DeInit(ENABLE_GPIO_Port, ENABLE_Pin);
 801648e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016492:	4813      	ldr	r0, [pc, #76]	; (80164e0 <HAL_LTDC_MspDeInit+0x70>)
 8016494:	f7ed f858 	bl	8003548 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8016498:	f641 0158 	movw	r1, #6232	; 0x1858
 801649c:	4811      	ldr	r0, [pc, #68]	; (80164e4 <HAL_LTDC_MspDeInit+0x74>)
 801649e:	f7ed f853 	bl	8003548 <HAL_GPIO_DeInit>
                          |R5_Pin);

    HAL_GPIO_DeInit(GPIOB, R3_Pin|R6_Pin|G4_Pin|G5_Pin 
 80164a2:	f640 7103 	movw	r1, #3843	; 0xf03
 80164a6:	4810      	ldr	r0, [pc, #64]	; (80164e8 <HAL_LTDC_MspDeInit+0x78>)
 80164a8:	f7ed f84e 	bl	8003548 <HAL_GPIO_DeInit>
                          |B6_Pin|B7_Pin);

    HAL_GPIO_DeInit(GPIOG, R7_Pin|DOTCLK_Pin|G3_Pin|B3_Pin 
 80164ac:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 80164b0:	480e      	ldr	r0, [pc, #56]	; (80164ec <HAL_LTDC_MspDeInit+0x7c>)
 80164b2:	f7ed f849 	bl	8003548 <HAL_GPIO_DeInit>
                          |B4_Pin);

    HAL_GPIO_DeInit(GPIOC, HSYNC_Pin|G6_Pin|R2_Pin);
 80164b6:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80164ba:	480d      	ldr	r0, [pc, #52]	; (80164f0 <HAL_LTDC_MspDeInit+0x80>)
 80164bc:	f7ed f844 	bl	8003548 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, G7_Pin|B2_Pin);
 80164c0:	2148      	movs	r1, #72	; 0x48
 80164c2:	480c      	ldr	r0, [pc, #48]	; (80164f4 <HAL_LTDC_MspDeInit+0x84>)
 80164c4:	f7ed f840 	bl	8003548 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 80164c8:	2058      	movs	r0, #88	; 0x58
 80164ca:	f7ec fa4d 	bl	8002968 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 80164ce:	bf00      	nop
 80164d0:	3708      	adds	r7, #8
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop
 80164d8:	40016800 	.word	0x40016800
 80164dc:	40023800 	.word	0x40023800
 80164e0:	40021400 	.word	0x40021400
 80164e4:	40020000 	.word	0x40020000
 80164e8:	40020400 	.word	0x40020400
 80164ec:	40021800 	.word	0x40021800
 80164f0:	40020800 	.word	0x40020800
 80164f4:	40020c00 	.word	0x40020c00

080164f8 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b086      	sub	sp, #24
 80164fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80164fe:	1d3b      	adds	r3, r7, #4
 8016500:	2200      	movs	r2, #0
 8016502:	601a      	str	r2, [r3, #0]
 8016504:	605a      	str	r2, [r3, #4]
 8016506:	609a      	str	r2, [r3, #8]
 8016508:	60da      	str	r2, [r3, #12]
 801650a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 801650c:	4b3b      	ldr	r3, [pc, #236]	; (80165fc <_ZL15HAL_FMC_MspInitv+0x104>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d16f      	bne.n	80165f4 <_ZL15HAL_FMC_MspInitv+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8016514:	4b39      	ldr	r3, [pc, #228]	; (80165fc <_ZL15HAL_FMC_MspInitv+0x104>)
 8016516:	2201      	movs	r2, #1
 8016518:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801651a:	2300      	movs	r3, #0
 801651c:	603b      	str	r3, [r7, #0]
 801651e:	4b38      	ldr	r3, [pc, #224]	; (8016600 <_ZL15HAL_FMC_MspInitv+0x108>)
 8016520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016522:	4a37      	ldr	r2, [pc, #220]	; (8016600 <_ZL15HAL_FMC_MspInitv+0x108>)
 8016524:	f043 0301 	orr.w	r3, r3, #1
 8016528:	6393      	str	r3, [r2, #56]	; 0x38
 801652a:	4b35      	ldr	r3, [pc, #212]	; (8016600 <_ZL15HAL_FMC_MspInitv+0x108>)
 801652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801652e:	f003 0301 	and.w	r3, r3, #1
 8016532:	603b      	str	r3, [r7, #0]
 8016534:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8016536:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801653a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801653c:	2302      	movs	r3, #2
 801653e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016540:	2300      	movs	r3, #0
 8016542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016544:	2303      	movs	r3, #3
 8016546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8016548:	230c      	movs	r3, #12
 801654a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801654c:	1d3b      	adds	r3, r7, #4
 801654e:	4619      	mov	r1, r3
 8016550:	482c      	ldr	r0, [pc, #176]	; (8016604 <_ZL15HAL_FMC_MspInitv+0x10c>)
 8016552:	f7ec fe4f 	bl	80031f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8016556:	2301      	movs	r3, #1
 8016558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801655a:	2302      	movs	r3, #2
 801655c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801655e:	2300      	movs	r3, #0
 8016560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016562:	2303      	movs	r3, #3
 8016564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8016566:	230c      	movs	r3, #12
 8016568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 801656a:	1d3b      	adds	r3, r7, #4
 801656c:	4619      	mov	r1, r3
 801656e:	4826      	ldr	r0, [pc, #152]	; (8016608 <_ZL15HAL_FMC_MspInitv+0x110>)
 8016570:	f7ec fe40 	bl	80031f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8016574:	f248 1333 	movw	r3, #33075	; 0x8133
 8016578:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801657a:	2302      	movs	r3, #2
 801657c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801657e:	2300      	movs	r3, #0
 8016580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016582:	2303      	movs	r3, #3
 8016584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8016586:	230c      	movs	r3, #12
 8016588:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801658a:	1d3b      	adds	r3, r7, #4
 801658c:	4619      	mov	r1, r3
 801658e:	481f      	ldr	r0, [pc, #124]	; (801660c <_ZL15HAL_FMC_MspInitv+0x114>)
 8016590:	f7ec fe30 	bl	80031f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8016594:	f64f 7383 	movw	r3, #65411	; 0xff83
 8016598:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801659a:	2302      	movs	r3, #2
 801659c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801659e:	2300      	movs	r3, #0
 80165a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165a2:	2303      	movs	r3, #3
 80165a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80165a6:	230c      	movs	r3, #12
 80165a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80165aa:	1d3b      	adds	r3, r7, #4
 80165ac:	4619      	mov	r1, r3
 80165ae:	4818      	ldr	r0, [pc, #96]	; (8016610 <_ZL15HAL_FMC_MspInitv+0x118>)
 80165b0:	f7ec fe20 	bl	80031f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80165b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80165b8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165ba:	2302      	movs	r3, #2
 80165bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165be:	2300      	movs	r3, #0
 80165c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165c2:	2303      	movs	r3, #3
 80165c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80165c6:	230c      	movs	r3, #12
 80165c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80165ca:	1d3b      	adds	r3, r7, #4
 80165cc:	4619      	mov	r1, r3
 80165ce:	4811      	ldr	r0, [pc, #68]	; (8016614 <_ZL15HAL_FMC_MspInitv+0x11c>)
 80165d0:	f7ec fe10 	bl	80031f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80165d4:	2360      	movs	r3, #96	; 0x60
 80165d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165d8:	2302      	movs	r3, #2
 80165da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165dc:	2300      	movs	r3, #0
 80165de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165e0:	2303      	movs	r3, #3
 80165e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80165e4:	230c      	movs	r3, #12
 80165e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80165e8:	1d3b      	adds	r3, r7, #4
 80165ea:	4619      	mov	r1, r3
 80165ec:	480a      	ldr	r0, [pc, #40]	; (8016618 <_ZL15HAL_FMC_MspInitv+0x120>)
 80165ee:	f7ec fe01 	bl	80031f4 <HAL_GPIO_Init>
 80165f2:	e000      	b.n	80165f6 <_ZL15HAL_FMC_MspInitv+0xfe>
    return;
 80165f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80165f6:	3718      	adds	r7, #24
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	20009a64 	.word	0x20009a64
 8016600:	40023800 	.word	0x40023800
 8016604:	40021400 	.word	0x40021400
 8016608:	40020800 	.word	0x40020800
 801660c:	40021800 	.word	0x40021800
 8016610:	40021000 	.word	0x40021000
 8016614:	40020c00 	.word	0x40020c00
 8016618:	40020400 	.word	0x40020400

0801661c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8016624:	f7ff ff68 	bl	80164f8 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8016628:	bf00      	nop
 801662a:	3708      	adds	r7, #8
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	4a0e      	ldr	r2, [pc, #56]	; (8016678 <HAL_DMA2D_MspInit+0x48>)
 801663e:	4293      	cmp	r3, r2
 8016640:	d115      	bne.n	801666e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8016642:	2300      	movs	r3, #0
 8016644:	60fb      	str	r3, [r7, #12]
 8016646:	4b0d      	ldr	r3, [pc, #52]	; (801667c <HAL_DMA2D_MspInit+0x4c>)
 8016648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801664a:	4a0c      	ldr	r2, [pc, #48]	; (801667c <HAL_DMA2D_MspInit+0x4c>)
 801664c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016650:	6313      	str	r3, [r2, #48]	; 0x30
 8016652:	4b0a      	ldr	r3, [pc, #40]	; (801667c <HAL_DMA2D_MspInit+0x4c>)
 8016654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801665a:	60fb      	str	r3, [r7, #12]
 801665c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801665e:	2200      	movs	r2, #0
 8016660:	2105      	movs	r1, #5
 8016662:	205a      	movs	r0, #90	; 0x5a
 8016664:	f7ec f956 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8016668:	205a      	movs	r0, #90	; 0x5a
 801666a:	f7ec f96f 	bl	800294c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 801666e:	bf00      	nop
 8016670:	3710      	adds	r7, #16
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	4002b000 	.word	0x4002b000
 801667c:	40023800 	.word	0x40023800

08016680 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	4a07      	ldr	r2, [pc, #28]	; (80166ac <HAL_DMA2D_MspDeInit+0x2c>)
 801668e:	4293      	cmp	r3, r2
 8016690:	d108      	bne.n	80166a4 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8016692:	4b07      	ldr	r3, [pc, #28]	; (80166b0 <HAL_DMA2D_MspDeInit+0x30>)
 8016694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016696:	4a06      	ldr	r2, [pc, #24]	; (80166b0 <HAL_DMA2D_MspDeInit+0x30>)
 8016698:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801669c:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 801669e:	205a      	movs	r0, #90	; 0x5a
 80166a0:	f7ec f962 	bl	8002968 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 80166a4:	bf00      	nop
 80166a6:	3708      	adds	r7, #8
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	4002b000 	.word	0x4002b000
 80166b0:	40023800 	.word	0x40023800

080166b4 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 80166b4:	b480      	push	{r7}
 80166b6:	b083      	sub	sp, #12
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
        return color;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
    }
 80166c0:	4618      	mov	r0, r3
 80166c2:	370c      	adds	r7, #12
 80166c4:	46bd      	mov	sp, r7
 80166c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ca:	4770      	bx	lr

080166cc <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80166cc:	b480      	push	{r7}
 80166ce:	b083      	sub	sp, #12
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
    {
 80166d4:	4a04      	ldr	r2, [pc, #16]	; (80166e8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	601a      	str	r2, [r3, #0]
    }
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	4618      	mov	r0, r3
 80166de:	370c      	adds	r7, #12
 80166e0:	46bd      	mov	sp, r7
 80166e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e6:	4770      	bx	lr
 80166e8:	08022798 	.word	0x08022798

080166ec <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
    }
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f7ff ffe9 	bl	80166cc <_ZN8touchgfx9DMA_QueueD1Ev>
 80166fa:	2104      	movs	r1, #4
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f009 f806 	bl	801f70e <_ZdlPvj>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4618      	mov	r0, r3
 8016706:	3708      	adds	r7, #8
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}

0801670c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 801670c:	b580      	push	{r7, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	3344      	adds	r3, #68	; 0x44
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	4798      	blx	r3
    }
 8016720:	bf00      	nop
 8016722:	3708      	adds	r7, #8
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8016728:	b480      	push	{r7}
 801672a:	b083      	sub	sp, #12
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016730:	2300      	movs	r3, #0
    }
 8016732:	4618      	mov	r0, r3
 8016734:	370c      	adds	r7, #12
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr
	...

08016740 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8016740:	b480      	push	{r7}
 8016742:	b083      	sub	sp, #12
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
    {
 8016748:	4a04      	ldr	r2, [pc, #16]	; (801675c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	601a      	str	r2, [r3, #0]
    }
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	4618      	mov	r0, r3
 8016752:	370c      	adds	r7, #12
 8016754:	46bd      	mov	sp, r7
 8016756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675a:	4770      	bx	lr
 801675c:	08023180 	.word	0x08023180

08016760 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
    }
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f7ff ffe9 	bl	8016740 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801676e:	210c      	movs	r1, #12
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f008 ffcc 	bl	801f70e <_ZdlPvj>
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	4618      	mov	r0, r3
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016780:	b480      	push	{r7}
 8016782:	b083      	sub	sp, #12
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801678a:	4a09      	ldr	r2, [pc, #36]	; (80167b0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	601a      	str	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	683a      	ldr	r2, [r7, #0]
 8016794:	605a      	str	r2, [r3, #4]
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2200      	movs	r2, #0
 801679a:	721a      	strb	r2, [r3, #8]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2200      	movs	r2, #0
 80167a0:	725a      	strb	r2, [r3, #9]
    {
    }
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	4618      	mov	r0, r3
 80167a6:	370c      	adds	r7, #12
 80167a8:	46bd      	mov	sp, r7
 80167aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ae:	4770      	bx	lr
 80167b0:	08023180 	.word	0x08023180

080167b4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b082      	sub	sp, #8
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	685a      	ldr	r2, [r3, #4]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	3314      	adds	r3, #20
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	4610      	mov	r0, r2
 80167cc:	4798      	blx	r3
    }
 80167ce:	bf00      	nop
 80167d0:	3708      	adds	r7, #8
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}

080167d6 <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80167d6:	b580      	push	{r7, lr}
 80167d8:	b082      	sub	sp, #8
 80167da:	af00      	add	r7, sp, #0
 80167dc:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	3328      	adds	r3, #40	; 0x28
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4610      	mov	r0, r2
 80167ea:	4798      	blx	r3
    }
 80167ec:	bf00      	nop
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <__NVIC_EnableIRQ>:
{
 80167f4:	b480      	push	{r7}
 80167f6:	b083      	sub	sp, #12
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	4603      	mov	r3, r0
 80167fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80167fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016802:	2b00      	cmp	r3, #0
 8016804:	db0d      	blt.n	8016822 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801680a:	b2db      	uxtb	r3, r3
 801680c:	f003 021f 	and.w	r2, r3, #31
 8016810:	4907      	ldr	r1, [pc, #28]	; (8016830 <__NVIC_EnableIRQ+0x3c>)
 8016812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016816:	095b      	lsrs	r3, r3, #5
 8016818:	2001      	movs	r0, #1
 801681a:	fa00 f202 	lsl.w	r2, r0, r2
 801681e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016822:	bf00      	nop
 8016824:	370c      	adds	r7, #12
 8016826:	46bd      	mov	sp, r7
 8016828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	e000e100 	.word	0xe000e100

08016834 <__NVIC_DisableIRQ>:
{
 8016834:	b480      	push	{r7}
 8016836:	b083      	sub	sp, #12
 8016838:	af00      	add	r7, sp, #0
 801683a:	4603      	mov	r3, r0
 801683c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801683e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016842:	2b00      	cmp	r3, #0
 8016844:	db12      	blt.n	801686c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801684a:	b2db      	uxtb	r3, r3
 801684c:	f003 021f 	and.w	r2, r3, #31
 8016850:	4909      	ldr	r1, [pc, #36]	; (8016878 <__NVIC_DisableIRQ+0x44>)
 8016852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016856:	095b      	lsrs	r3, r3, #5
 8016858:	2001      	movs	r0, #1
 801685a:	fa00 f202 	lsl.w	r2, r0, r2
 801685e:	3320      	adds	r3, #32
 8016860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016868:	f3bf 8f6f 	isb	sy
}
 801686c:	bf00      	nop
 801686e:	370c      	adds	r7, #12
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr
 8016878:	e000e100 	.word	0xe000e100

0801687c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 801687c:	b480      	push	{r7}
 801687e:	b085      	sub	sp, #20
 8016880:	af00      	add	r7, sp, #0
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	60b9      	str	r1, [r7, #8]
 8016886:	607a      	str	r2, [r7, #4]
 8016888:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016894:	68ba      	ldr	r2, [r7, #8]
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	430a      	orrs	r2, r1
 801689c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168a4:	f023 0107 	bic.w	r1, r3, #7
 80168a8:	687a      	ldr	r2, [r7, #4]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	430a      	orrs	r2, r1
 80168b0:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80168bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80168c0:	6839      	ldr	r1, [r7, #0]
 80168c2:	68fa      	ldr	r2, [r7, #12]
 80168c4:	6812      	ldr	r2, [r2, #0]
 80168c6:	430b      	orrs	r3, r1
 80168c8:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80168ca:	2300      	movs	r3, #0
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3714      	adds	r7, #20
 80168d0:	46bd      	mov	sp, r7
 80168d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d6:	4770      	bx	lr

080168d8 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* hdma2d)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80168e0:	f7f5 fd8e 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 80168e4:	4603      	mov	r3, r0
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7ff ff64 	bl	80167b4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80168ec:	bf00      	nop
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* hdma2d)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 80168fc:	bf00      	nop
 80168fe:	370c      	adds	r7, #12
 8016900:	46bd      	mov	sp, r7
 8016902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016906:	4770      	bx	lr

08016908 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	3318      	adds	r3, #24
 8016914:	4618      	mov	r0, r3
 8016916:	f7f7 faf1 	bl	800defc <_ZN8touchgfx9colortypeC1Ev>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4618      	mov	r0, r3
 801691e:	3708      	adds	r7, #8
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}

08016924 <_ZN10STM32F4DMAC1Ev>:

}

STM32F4DMA::STM32F4DMA()
 8016924:	b5b0      	push	{r4, r5, r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	330c      	adds	r3, #12
 8016932:	4619      	mov	r1, r3
 8016934:	4610      	mov	r0, r2
 8016936:	f7ff ff23 	bl	8016780 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801693a:	4a0e      	ldr	r2, [pc, #56]	; (8016974 <_ZN10STM32F4DMAC1Ev+0x50>)
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	601a      	str	r2, [r3, #0]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f103 000c 	add.w	r0, r3, #12
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	3320      	adds	r3, #32
 801694a:	2260      	movs	r2, #96	; 0x60
 801694c:	4619      	mov	r1, r3
 801694e:	f002 f995 	bl	8018c7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	3320      	adds	r3, #32
 8016956:	245f      	movs	r4, #95	; 0x5f
 8016958:	461d      	mov	r5, r3
 801695a:	2c00      	cmp	r4, #0
 801695c:	db05      	blt.n	801696a <_ZN10STM32F4DMAC1Ev+0x46>
 801695e:	4628      	mov	r0, r5
 8016960:	f7ff ffd2 	bl	8016908 <_ZN8touchgfx6BlitOpC1Ev>
 8016964:	3520      	adds	r5, #32
 8016966:	3c01      	subs	r4, #1
 8016968:	e7f7      	b.n	801695a <_ZN10STM32F4DMAC1Ev+0x36>
{}
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	4618      	mov	r0, r3
 801696e:	3708      	adds	r7, #8
 8016970:	46bd      	mov	sp, r7
 8016972:	bdb0      	pop	{r4, r5, r7, pc}
 8016974:	08022748 	.word	0x08022748

08016978 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	4a0b      	ldr	r2, [pc, #44]	; (80169b0 <_ZN10STM32F4DMAD1Ev+0x38>)
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8016986:	480b      	ldr	r0, [pc, #44]	; (80169b4 <_ZN10STM32F4DMAD1Ev+0x3c>)
 8016988:	f7ec f886 	bl	8002a98 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801698c:	205a      	movs	r0, #90	; 0x5a
 801698e:	f7ff ff51 	bl	8016834 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	330c      	adds	r3, #12
 8016996:	4618      	mov	r0, r3
 8016998:	f000 faaa 	bl	8016ef0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	4618      	mov	r0, r3
 80169a0:	f7ff fece 	bl	8016740 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	4618      	mov	r0, r3
 80169a8:	3708      	adds	r7, #8
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}
 80169ae:	bf00      	nop
 80169b0:	08022748 	.word	0x08022748
 80169b4:	200099e0 	.word	0x200099e0

080169b8 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
}
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f7ff ffd9 	bl	8016978 <_ZN10STM32F4DMAD1Ev>
 80169c6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f008 fe9f 	bl	801f70e <_ZdlPvj>
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	4618      	mov	r0, r3
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
	...

080169dc <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b082      	sub	sp, #8
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80169e4:	4b09      	ldr	r3, [pc, #36]	; (8016a0c <_ZN10STM32F4DMA10initializeEv+0x30>)
 80169e6:	4a0a      	ldr	r2, [pc, #40]	; (8016a10 <_ZN10STM32F4DMA10initializeEv+0x34>)
 80169e8:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80169ea:	4808      	ldr	r0, [pc, #32]	; (8016a0c <_ZN10STM32F4DMA10initializeEv+0x30>)
 80169ec:	f7ec f80b 	bl	8002a06 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80169f0:	4b06      	ldr	r3, [pc, #24]	; (8016a0c <_ZN10STM32F4DMA10initializeEv+0x30>)
 80169f2:	4a08      	ldr	r2, [pc, #32]	; (8016a14 <_ZN10STM32F4DMA10initializeEv+0x38>)
 80169f4:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80169f6:	4b05      	ldr	r3, [pc, #20]	; (8016a0c <_ZN10STM32F4DMA10initializeEv+0x30>)
 80169f8:	4a07      	ldr	r2, [pc, #28]	; (8016a18 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 80169fa:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80169fc:	205a      	movs	r0, #90	; 0x5a
 80169fe:	f7ff fef9 	bl	80167f4 <__NVIC_EnableIRQ>
}
 8016a02:	bf00      	nop
 8016a04:	3708      	adds	r7, #8
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	200099e0 	.word	0x200099e0
 8016a10:	4002b000 	.word	0x4002b000
 8016a14:	080168d9 	.word	0x080168d9
 8016a18:	080168f5 	.word	0x080168f5

08016a1c <_ZN10STM32F4DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F4DMA::getBlitCaps()
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 8016a24:	4b07      	ldr	r3, [pc, #28]	; (8016a44 <_ZN10STM32F4DMA11getBlitCapsEv+0x28>)
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	b2db      	uxtb	r3, r3
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d001      	beq.n	8016a32 <_ZN10STM32F4DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 8016a2e:	2300      	movs	r3, #0
 8016a30:	e001      	b.n	8016a36 <_ZN10STM32F4DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 8016a32:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	370c      	adds	r7, #12
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
 8016a42:	bf00      	nop
 8016a44:	20009a68 	.word	0x20009a68

08016a48 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016a48:	b590      	push	{r4, r7, lr}
 8016a4a:	b08d      	sub	sp, #52	; 0x34
 8016a4c:	af02      	add	r7, sp, #8
 8016a4e:	6078      	str	r0, [r7, #4]
 8016a50:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8016a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016a56:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8016a58:	2300      	movs	r3, #0
 8016a5a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016a60:	2b20      	cmp	r3, #32
 8016a62:	d007      	beq.n	8016a74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	2b40      	cmp	r3, #64	; 0x40
 8016a6a:	d003      	beq.n	8016a74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	2b04      	cmp	r3, #4
 8016a72:	d101      	bne.n	8016a78 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8016a74:	2301      	movs	r3, #1
 8016a76:	e000      	b.n	8016a7a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8016a78:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016a7a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016a80:	2b80      	cmp	r3, #128	; 0x80
 8016a82:	d004      	beq.n	8016a8e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a8c:	d101      	bne.n	8016a92 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016a8e:	2301      	movs	r3, #1
 8016a90:	e000      	b.n	8016a94 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016a92:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016a94:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016a96:	f7f5 fcbf 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	6813      	ldr	r3, [r2, #0]
 8016a9e:	3320      	adds	r3, #32
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	4610      	mov	r0, r2
 8016aa4:	4798      	blx	r3
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016aaa:	683b      	ldr	r3, [r7, #0]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b40      	cmp	r3, #64	; 0x40
 8016ab0:	d01d      	beq.n	8016aee <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016ab2:	2b40      	cmp	r3, #64	; 0x40
 8016ab4:	d804      	bhi.n	8016ac0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8016ab6:	2b04      	cmp	r3, #4
 8016ab8:	d00e      	beq.n	8016ad8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8016aba:	2b20      	cmp	r3, #32
 8016abc:	d017      	beq.n	8016aee <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016abe:	e019      	b.n	8016af4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016ac0:	2b80      	cmp	r3, #128	; 0x80
 8016ac2:	d003      	beq.n	8016acc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8016ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ac8:	d003      	beq.n	8016ad2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8016aca:	e013      	b.n	8016af4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016acc:	230a      	movs	r3, #10
 8016ace:	623b      	str	r3, [r7, #32]
        break;
 8016ad0:	e01a      	b.n	8016b08 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016ad2:	2309      	movs	r3, #9
 8016ad4:	623b      	str	r3, [r7, #32]
        break;
 8016ad6:	e017      	b.n	8016b08 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016adc:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016ade:	7f7b      	ldrb	r3, [r7, #29]
 8016ae0:	2b10      	cmp	r3, #16
 8016ae2:	d101      	bne.n	8016ae8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8016ae4:	2302      	movs	r3, #2
 8016ae6:	e000      	b.n	8016aea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8016ae8:	2301      	movs	r3, #1
 8016aea:	623b      	str	r3, [r7, #32]
        break;
 8016aec:	e00c      	b.n	8016b08 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016aee:	2300      	movs	r3, #0
 8016af0:	623b      	str	r3, [r7, #32]
        break;
 8016af2:	e009      	b.n	8016b08 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016af4:	2300      	movs	r3, #0
 8016af6:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016af8:	7f7b      	ldrb	r3, [r7, #29]
 8016afa:	2b10      	cmp	r3, #16
 8016afc:	d101      	bne.n	8016b02 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016afe:	2302      	movs	r3, #2
 8016b00:	e000      	b.n	8016b04 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8016b02:	2301      	movs	r3, #1
 8016b04:	623b      	str	r3, [r7, #32]
        break;
 8016b06:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init! */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016b08:	4a76      	ldr	r2, [pc, #472]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b0c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016b0e:	7f7b      	ldrb	r3, [r7, #29]
 8016b10:	2b10      	cmp	r3, #16
 8016b12:	d101      	bne.n	8016b18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8016b14:	2302      	movs	r3, #2
 8016b16:	e000      	b.n	8016b1a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8016b18:	2301      	movs	r3, #1
 8016b1a:	4a72      	ldr	r2, [pc, #456]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b1c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	8adb      	ldrh	r3, [r3, #22]
 8016b22:	461a      	mov	r2, r3
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	8a1b      	ldrh	r3, [r3, #16]
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	4b6d      	ldr	r3, [pc, #436]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b2e:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016b30:	7f7b      	ldrb	r3, [r7, #29]
 8016b32:	2b10      	cmp	r3, #16
 8016b34:	d101      	bne.n	8016b3a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8016b36:	2202      	movs	r2, #2
 8016b38:	e000      	b.n	8016b3c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8016b3a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	8adb      	ldrh	r3, [r3, #22]
 8016b40:	4619      	mov	r1, r3
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	8a1b      	ldrh	r3, [r3, #16]
 8016b46:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b4a:	4866      	ldr	r0, [pc, #408]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b4c:	f7ff fe96 	bl	801687c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016b50:	4a64      	ldr	r2, [pc, #400]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b52:	6a3b      	ldr	r3, [r7, #32]
 8016b54:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	8a9b      	ldrh	r3, [r3, #20]
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	8a1b      	ldrh	r3, [r3, #16]
 8016b60:	1ad3      	subs	r3, r2, r3
 8016b62:	461a      	mov	r2, r3
 8016b64:	4b5f      	ldr	r3, [pc, #380]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b66:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8016b68:	7ffb      	ldrb	r3, [r7, #31]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d103      	bne.n	8016b76 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8016b6e:	7fbb      	ldrb	r3, [r7, #30]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	f000 8082 	beq.w	8016c7a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	7f1b      	ldrb	r3, [r3, #28]
 8016b7a:	2bff      	cmp	r3, #255	; 0xff
 8016b7c:	d008      	beq.n	8016b90 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8016b7e:	4b59      	ldr	r3, [pc, #356]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b80:	2202      	movs	r2, #2
 8016b82:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	7f1b      	ldrb	r3, [r3, #28]
 8016b88:	461a      	mov	r2, r3
 8016b8a:	4b56      	ldr	r3, [pc, #344]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8016b8e:	e002      	b.n	8016b96 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8016b90:	4b54      	ldr	r3, [pc, #336]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b92:	2200      	movs	r2, #0
 8016b94:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8016b96:	7fbb      	ldrb	r3, [r7, #30]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d059      	beq.n	8016c50 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8016b9c:	7f7b      	ldrb	r3, [r7, #29]
 8016b9e:	2b10      	cmp	r3, #16
 8016ba0:	d14a      	bne.n	8016c38 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	3318      	adds	r3, #24
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7f8 fb19 	bl	800f1de <_ZNK8touchgfx9colortypecvtEv>
 8016bac:	4603      	mov	r3, r0
 8016bae:	12db      	asrs	r3, r3, #11
 8016bb0:	f003 021f 	and.w	r2, r3, #31
 8016bb4:	4613      	mov	r3, r2
 8016bb6:	021b      	lsls	r3, r3, #8
 8016bb8:	1a9b      	subs	r3, r3, r2
 8016bba:	4a4b      	ldr	r2, [pc, #300]	; (8016ce8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8016bc0:	441a      	add	r2, r3
 8016bc2:	1112      	asrs	r2, r2, #4
 8016bc4:	17db      	asrs	r3, r3, #31
 8016bc6:	1ad3      	subs	r3, r2, r3
 8016bc8:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	3318      	adds	r3, #24
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7f8 fb05 	bl	800f1de <_ZNK8touchgfx9colortypecvtEv>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	115b      	asrs	r3, r3, #5
 8016bd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016bdc:	4613      	mov	r3, r2
 8016bde:	021b      	lsls	r3, r3, #8
 8016be0:	1a9b      	subs	r3, r3, r2
 8016be2:	4a42      	ldr	r2, [pc, #264]	; (8016cec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016be4:	fb82 1203 	smull	r1, r2, r2, r3
 8016be8:	441a      	add	r2, r3
 8016bea:	1152      	asrs	r2, r2, #5
 8016bec:	17db      	asrs	r3, r3, #31
 8016bee:	1ad3      	subs	r3, r2, r3
 8016bf0:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	3318      	adds	r3, #24
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f7f8 faf1 	bl	800f1de <_ZNK8touchgfx9colortypecvtEv>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	f003 021f 	and.w	r2, r3, #31
 8016c02:	4613      	mov	r3, r2
 8016c04:	021b      	lsls	r3, r3, #8
 8016c06:	1a9b      	subs	r3, r3, r2
 8016c08:	4a37      	ldr	r2, [pc, #220]	; (8016ce8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8016c0e:	441a      	add	r2, r3
 8016c10:	1112      	asrs	r2, r2, #4
 8016c12:	17db      	asrs	r3, r3, #31
 8016c14:	1ad3      	subs	r3, r2, r3
 8016c16:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	7f1b      	ldrb	r3, [r3, #28]
 8016c1c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	061a      	lsls	r2, r3, #24
 8016c22:	69bb      	ldr	r3, [r7, #24]
 8016c24:	041b      	lsls	r3, r3, #16
 8016c26:	431a      	orrs	r2, r3
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	021b      	lsls	r3, r3, #8
 8016c2c:	431a      	orrs	r2, r3
 8016c2e:	693b      	ldr	r3, [r7, #16]
 8016c30:	4313      	orrs	r3, r2
 8016c32:	4a2c      	ldr	r2, [pc, #176]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016c34:	6353      	str	r3, [r2, #52]	; 0x34
 8016c36:	e00b      	b.n	8016c50 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	3318      	adds	r3, #24
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7ff fd39 	bl	80166b4 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016c42:	4602      	mov	r2, r0
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	7f1b      	ldrb	r3, [r3, #28]
 8016c48:	061b      	lsls	r3, r3, #24
 8016c4a:	4313      	orrs	r3, r2
 8016c4c:	4a25      	ldr	r2, [pc, #148]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016c4e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	8adb      	ldrh	r3, [r3, #22]
 8016c54:	461a      	mov	r2, r3
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	8a1b      	ldrh	r3, [r3, #16]
 8016c5a:	1ad3      	subs	r3, r2, r3
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	4b21      	ldr	r3, [pc, #132]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016c60:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016c62:	7f7b      	ldrb	r3, [r7, #29]
 8016c64:	2b10      	cmp	r3, #16
 8016c66:	d101      	bne.n	8016c6c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8016c68:	2302      	movs	r3, #2
 8016c6a:	e000      	b.n	8016c6e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	4a1d      	ldr	r2, [pc, #116]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016c70:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016c72:	2100      	movs	r1, #0
 8016c74:	481b      	ldr	r0, [pc, #108]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016c76:	f7ec f98f 	bl	8002f98 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016c7a:	2101      	movs	r1, #1
 8016c7c:	4819      	ldr	r0, [pc, #100]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016c7e:	f7ec f98b 	bl	8002f98 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8016c82:	7ffb      	ldrb	r3, [r7, #31]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d102      	bne.n	8016c8e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8016c88:	7fbb      	ldrb	r3, [r7, #30]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d015      	beq.n	8016cba <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016c92:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016c98:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016c9e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016ca4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016caa:	9301      	str	r3, [sp, #4]
 8016cac:	9200      	str	r2, [sp, #0]
 8016cae:	4623      	mov	r3, r4
 8016cb0:	4602      	mov	r2, r0
 8016cb2:	480c      	ldr	r0, [pc, #48]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016cb4:	f7eb ff93 	bl	8002bde <HAL_DMA2D_BlendingStart_IT>
 8016cb8:	e00f      	b.n	8016cda <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016cbe:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016cc4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016cca:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016ccc:	683b      	ldr	r3, [r7, #0]
 8016cce:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016cd0:	9300      	str	r3, [sp, #0]
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	4803      	ldr	r0, [pc, #12]	; (8016ce4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016cd6:	f7eb ff4f 	bl	8002b78 <HAL_DMA2D_Start_IT>
    }
}
 8016cda:	bf00      	nop
 8016cdc:	372c      	adds	r7, #44	; 0x2c
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd90      	pop	{r4, r7, pc}
 8016ce2:	bf00      	nop
 8016ce4:	200099e0 	.word	0x200099e0
 8016ce8:	84210843 	.word	0x84210843
 8016cec:	82082083 	.word	0x82082083

08016cf0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8016cf0:	b590      	push	{r4, r7, lr}
 8016cf2:	b08d      	sub	sp, #52	; 0x34
 8016cf4:	af02      	add	r7, sp, #8
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016cfa:	f7f5 fb8d 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 8016cfe:	4602      	mov	r2, r0
 8016d00:	6813      	ldr	r3, [r2, #0]
 8016d02:	3320      	adds	r3, #32
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4610      	mov	r0, r2
 8016d08:	4798      	blx	r3
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016d0e:	7ffb      	ldrb	r3, [r7, #31]
 8016d10:	2b10      	cmp	r3, #16
 8016d12:	d101      	bne.n	8016d18 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8016d14:	2302      	movs	r3, #2
 8016d16:	e000      	b.n	8016d1a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8016d18:	2301      	movs	r3, #1
 8016d1a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8016d20:	7ffb      	ldrb	r3, [r7, #31]
 8016d22:	2b10      	cmp	r3, #16
 8016d24:	d149      	bne.n	8016dba <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016d26:	683b      	ldr	r3, [r7, #0]
 8016d28:	3318      	adds	r3, #24
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f7f8 fa57 	bl	800f1de <_ZNK8touchgfx9colortypecvtEv>
 8016d30:	4603      	mov	r3, r0
 8016d32:	12db      	asrs	r3, r3, #11
 8016d34:	f003 021f 	and.w	r2, r3, #31
 8016d38:	4613      	mov	r3, r2
 8016d3a:	021b      	lsls	r3, r3, #8
 8016d3c:	1a9b      	subs	r3, r3, r2
 8016d3e:	4a69      	ldr	r2, [pc, #420]	; (8016ee4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016d40:	fb82 1203 	smull	r1, r2, r2, r3
 8016d44:	441a      	add	r2, r3
 8016d46:	1112      	asrs	r2, r2, #4
 8016d48:	17db      	asrs	r3, r3, #31
 8016d4a:	1ad3      	subs	r3, r2, r3
 8016d4c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	3318      	adds	r3, #24
 8016d52:	4618      	mov	r0, r3
 8016d54:	f7f8 fa43 	bl	800f1de <_ZNK8touchgfx9colortypecvtEv>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	115b      	asrs	r3, r3, #5
 8016d5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016d60:	4613      	mov	r3, r2
 8016d62:	021b      	lsls	r3, r3, #8
 8016d64:	1a9b      	subs	r3, r3, r2
 8016d66:	4a60      	ldr	r2, [pc, #384]	; (8016ee8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8016d68:	fb82 1203 	smull	r1, r2, r2, r3
 8016d6c:	441a      	add	r2, r3
 8016d6e:	1152      	asrs	r2, r2, #5
 8016d70:	17db      	asrs	r3, r3, #31
 8016d72:	1ad3      	subs	r3, r2, r3
 8016d74:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	3318      	adds	r3, #24
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f7f8 fa2f 	bl	800f1de <_ZNK8touchgfx9colortypecvtEv>
 8016d80:	4603      	mov	r3, r0
 8016d82:	f003 021f 	and.w	r2, r3, #31
 8016d86:	4613      	mov	r3, r2
 8016d88:	021b      	lsls	r3, r3, #8
 8016d8a:	1a9b      	subs	r3, r3, r2
 8016d8c:	4a55      	ldr	r2, [pc, #340]	; (8016ee4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8016d92:	441a      	add	r2, r3
 8016d94:	1112      	asrs	r2, r2, #4
 8016d96:	17db      	asrs	r3, r3, #31
 8016d98:	1ad3      	subs	r3, r2, r3
 8016d9a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	7f1b      	ldrb	r3, [r3, #28]
 8016da0:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	061a      	lsls	r2, r3, #24
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	041b      	lsls	r3, r3, #16
 8016daa:	431a      	orrs	r2, r3
 8016dac:	693b      	ldr	r3, [r7, #16]
 8016dae:	021b      	lsls	r3, r3, #8
 8016db0:	4313      	orrs	r3, r2
 8016db2:	68fa      	ldr	r2, [r7, #12]
 8016db4:	4313      	orrs	r3, r2
 8016db6:	623b      	str	r3, [r7, #32]
 8016db8:	e00b      	b.n	8016dd2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	7f1b      	ldrb	r3, [r3, #28]
 8016dbe:	061b      	lsls	r3, r3, #24
 8016dc0:	461c      	mov	r4, r3
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	3318      	adds	r3, #24
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f7ff fc74 	bl	80166b4 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	4323      	orrs	r3, r4
 8016dd0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2b08      	cmp	r3, #8
 8016dd8:	d103      	bne.n	8016de2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016de0:	e003      	b.n	8016dea <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8016de2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8016de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016de8:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init! */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016dea:	4a40      	ldr	r2, [pc, #256]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dee:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016df0:	7ffb      	ldrb	r3, [r7, #31]
 8016df2:	2b10      	cmp	r3, #16
 8016df4:	d101      	bne.n	8016dfa <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8016df6:	2302      	movs	r3, #2
 8016df8:	e000      	b.n	8016dfc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	4a3b      	ldr	r2, [pc, #236]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016dfe:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	8adb      	ldrh	r3, [r3, #22]
 8016e04:	461a      	mov	r2, r3
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	8a1b      	ldrh	r3, [r3, #16]
 8016e0a:	1ad3      	subs	r3, r2, r3
 8016e0c:	461a      	mov	r2, r3
 8016e0e:	4b37      	ldr	r3, [pc, #220]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e10:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016e12:	7ffb      	ldrb	r3, [r7, #31]
 8016e14:	2b10      	cmp	r3, #16
 8016e16:	d101      	bne.n	8016e1c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8016e18:	2202      	movs	r2, #2
 8016e1a:	e000      	b.n	8016e1e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8016e1c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	8adb      	ldrh	r3, [r3, #22]
 8016e22:	4619      	mov	r1, r3
 8016e24:	683b      	ldr	r3, [r7, #0]
 8016e26:	8a1b      	ldrh	r3, [r3, #16]
 8016e28:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e2c:	482f      	ldr	r0, [pc, #188]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e2e:	f7ff fd25 	bl	801687c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8016e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016e38:	d11e      	bne.n	8016e78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8016e3a:	4b2c      	ldr	r3, [pc, #176]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e3c:	2201      	movs	r2, #1
 8016e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8016e40:	4a2a      	ldr	r2, [pc, #168]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e42:	6a3b      	ldr	r3, [r7, #32]
 8016e44:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8016e46:	4b29      	ldr	r3, [pc, #164]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e48:	2209      	movs	r2, #9
 8016e4a:	62da      	str	r2, [r3, #44]	; 0x2c

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	8adb      	ldrh	r3, [r3, #22]
 8016e50:	461a      	mov	r2, r3
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	8a1b      	ldrh	r3, [r3, #16]
 8016e56:	1ad3      	subs	r3, r2, r3
 8016e58:	461a      	mov	r2, r3
 8016e5a:	4b24      	ldr	r3, [pc, #144]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e5c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016e5e:	7ffb      	ldrb	r3, [r7, #31]
 8016e60:	2b10      	cmp	r3, #16
 8016e62:	d101      	bne.n	8016e68 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8016e64:	2302      	movs	r3, #2
 8016e66:	e000      	b.n	8016e6a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8016e68:	2301      	movs	r3, #1
 8016e6a:	4a20      	ldr	r2, [pc, #128]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e6c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016e6e:	2100      	movs	r1, #0
 8016e70:	481e      	ldr	r0, [pc, #120]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e72:	f7ec f891 	bl	8002f98 <HAL_DMA2D_ConfigLayer>
 8016e76:	e005      	b.n	8016e84 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016e78:	4a1c      	ldr	r2, [pc, #112]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8016e7e:	4b1b      	ldr	r3, [pc, #108]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e80:	2200      	movs	r2, #0
 8016e82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016e84:	2101      	movs	r1, #1
 8016e86:	4819      	ldr	r0, [pc, #100]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016e88:	f7ec f886 	bl	8002f98 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8016e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016e92:	d115      	bne.n	8016ec0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016e98:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016e9e:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016ea4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016eaa:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016eac:	683b      	ldr	r3, [r7, #0]
 8016eae:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016eb0:	9301      	str	r3, [sp, #4]
 8016eb2:	9200      	str	r2, [sp, #0]
 8016eb4:	4623      	mov	r3, r4
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	480c      	ldr	r0, [pc, #48]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016eba:	f7eb fe90 	bl	8002bde <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8016ebe:	e00d      	b.n	8016edc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	68db      	ldr	r3, [r3, #12]
 8016ec4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016eca:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016ed0:	9300      	str	r3, [sp, #0]
 8016ed2:	460b      	mov	r3, r1
 8016ed4:	6a39      	ldr	r1, [r7, #32]
 8016ed6:	4805      	ldr	r0, [pc, #20]	; (8016eec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016ed8:	f7eb fe4e 	bl	8002b78 <HAL_DMA2D_Start_IT>
}
 8016edc:	bf00      	nop
 8016ede:	372c      	adds	r7, #44	; 0x2c
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	bd90      	pop	{r4, r7, pc}
 8016ee4:	84210843 	.word	0x84210843
 8016ee8:	82082083 	.word	0x82082083
 8016eec:	200099e0 	.word	0x200099e0

08016ef0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	4a05      	ldr	r2, [pc, #20]	; (8016f10 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	601a      	str	r2, [r3, #0]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ff fbe3 	bl	80166cc <_ZN8touchgfx9DMA_QueueD1Ev>
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3708      	adds	r7, #8
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}
 8016f10:	080231d0 	.word	0x080231d0

08016f14 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b082      	sub	sp, #8
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	f7ff ffe7 	bl	8016ef0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016f22:	2114      	movs	r1, #20
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f008 fbf2 	bl	801f70e <_ZdlPvj>
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3708      	adds	r7, #8
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <__NVIC_EnableIRQ>:
{
 8016f34:	b480      	push	{r7}
 8016f36:	b083      	sub	sp, #12
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	db0d      	blt.n	8016f62 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f4a:	b2db      	uxtb	r3, r3
 8016f4c:	f003 021f 	and.w	r2, r3, #31
 8016f50:	4907      	ldr	r1, [pc, #28]	; (8016f70 <__NVIC_EnableIRQ+0x3c>)
 8016f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f56:	095b      	lsrs	r3, r3, #5
 8016f58:	2001      	movs	r0, #1
 8016f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8016f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016f62:	bf00      	nop
 8016f64:	370c      	adds	r7, #12
 8016f66:	46bd      	mov	sp, r7
 8016f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6c:	4770      	bx	lr
 8016f6e:	bf00      	nop
 8016f70:	e000e100 	.word	0xe000e100

08016f74 <__NVIC_DisableIRQ>:
{
 8016f74:	b480      	push	{r7}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	db12      	blt.n	8016fac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f8a:	b2db      	uxtb	r3, r3
 8016f8c:	f003 021f 	and.w	r2, r3, #31
 8016f90:	4909      	ldr	r1, [pc, #36]	; (8016fb8 <__NVIC_DisableIRQ+0x44>)
 8016f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f96:	095b      	lsrs	r3, r3, #5
 8016f98:	2001      	movs	r0, #1
 8016f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8016f9e:	3320      	adds	r3, #32
 8016fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016fa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016fa8:	f3bf 8f6f 	isb	sy
}
 8016fac:	bf00      	nop
 8016fae:	370c      	adds	r7, #12
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr
 8016fb8:	e000e100 	.word	0xe000e100

08016fbc <__NVIC_SetPriority>:
{
 8016fbc:	b480      	push	{r7}
 8016fbe:	b083      	sub	sp, #12
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	6039      	str	r1, [r7, #0]
 8016fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	db0c      	blt.n	8016fea <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	b2db      	uxtb	r3, r3
 8016fd4:	4a0e      	ldr	r2, [pc, #56]	; (8017010 <__NVIC_SetPriority+0x54>)
 8016fd6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8016fda:	4608      	mov	r0, r1
 8016fdc:	011b      	lsls	r3, r3, #4
 8016fde:	b2d9      	uxtb	r1, r3
 8016fe0:	1813      	adds	r3, r2, r0
 8016fe2:	460a      	mov	r2, r1
 8016fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016fe8:	e00c      	b.n	8017004 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	b2da      	uxtb	r2, r3
 8016fee:	4909      	ldr	r1, [pc, #36]	; (8017014 <__NVIC_SetPriority+0x58>)
 8016ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ff4:	b2db      	uxtb	r3, r3
 8016ff6:	f003 030f 	and.w	r3, r3, #15
 8016ffa:	3b04      	subs	r3, #4
 8016ffc:	0112      	lsls	r2, r2, #4
 8016ffe:	b2d2      	uxtb	r2, r2
 8017000:	440b      	add	r3, r1
 8017002:	761a      	strb	r2, [r3, #24]
}
 8017004:	bf00      	nop
 8017006:	370c      	adds	r7, #12
 8017008:	46bd      	mov	sp, r7
 801700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700e:	4770      	bx	lr
 8017010:	e000e100 	.word	0xe000e100
 8017014:	e000ed00 	.word	0xe000ed00

08017018 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8017018:	b480      	push	{r7}
 801701a:	b083      	sub	sp, #12
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	460b      	mov	r3, r1
 8017022:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	78fa      	ldrb	r2, [r7, #3]
 8017028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2201      	movs	r2, #1
 8017030:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8017034:	bf00      	nop
 8017036:	370c      	adds	r7, #12
 8017038:	46bd      	mov	sp, r7
 801703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703e:	4770      	bx	lr

08017040 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	3318      	adds	r3, #24
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	4798      	blx	r3
    }
 8017054:	bf00      	nop
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}

0801705c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 801705c:	b580      	push	{r7, lr}
 801705e:	b082      	sub	sp, #8
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	685a      	ldr	r2, [r3, #4]
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	685b      	ldr	r3, [r3, #4]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	4610      	mov	r0, r2
 8017072:	4798      	blx	r3
 8017074:	4603      	mov	r3, r0
    };
 8017076:	4618      	mov	r0, r3
 8017078:	3708      	adds	r7, #8
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}

0801707e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801707e:	b480      	push	{r7}
 8017080:	b083      	sub	sp, #12
 8017082:	af00      	add	r7, sp, #0
 8017084:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801708c:	3301      	adds	r3, #1
 801708e:	b2da      	uxtb	r2, r3
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    };
 8017096:	bf00      	nop
 8017098:	370c      	adds	r7, #12
 801709a:	46bd      	mov	sp, r7
 801709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a0:	4770      	bx	lr

080170a2 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80170a2:	b580      	push	{r7, lr}
 80170a4:	b082      	sub	sp, #8
 80170a6:	af00      	add	r7, sp, #0
 80170a8:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f001 fca8 	bl	8018a00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	339c      	adds	r3, #156	; 0x9c
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	4798      	blx	r3
    }
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80170c4:	b480      	push	{r7}
 80170c6:	b083      	sub	sp, #12
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
        return false;
 80170ce:	2300      	movs	r3, #0
    }
 80170d0:	4618      	mov	r0, r3
 80170d2:	370c      	adds	r7, #12
 80170d4:	46bd      	mov	sp, r7
 80170d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170da:	4770      	bx	lr

080170dc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80170dc:	b590      	push	{r4, r7, lr}
 80170de:	b08b      	sub	sp, #44	; 0x2c
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	4611      	mov	r1, r2
 80170e8:	461a      	mov	r2, r3
 80170ea:	460b      	mov	r3, r1
 80170ec:	80fb      	strh	r3, [r7, #6]
 80170ee:	4613      	mov	r3, r2
 80170f0:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 80170f2:	f7f5 f991 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 80170f6:	4602      	mov	r2, r0
 80170f8:	6813      	ldr	r3, [r2, #0]
 80170fa:	3328      	adds	r3, #40	; 0x28
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	4610      	mov	r0, r2
 8017100:	4798      	blx	r3
 8017102:	4603      	mov	r3, r0
 8017104:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8017106:	8b7b      	ldrh	r3, [r7, #26]
 8017108:	4a3d      	ldr	r2, [pc, #244]	; (8017200 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 801710a:	8812      	ldrh	r2, [r2, #0]
 801710c:	fb02 f303 	mul.w	r3, r2, r3
 8017110:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8017116:	2300      	movs	r3, #0
 8017118:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 801711a:	2300      	movs	r3, #0
 801711c:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 801711e:	797b      	ldrb	r3, [r7, #5]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d005      	beq.n	8017130 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8017124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	4413      	add	r3, r2
 801712a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 801712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801712e:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8017130:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017134:	2b00      	cmp	r3, #0
 8017136:	d005      	beq.n	8017144 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8017138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	4413      	add	r3, r2
 801713e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8017140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017142:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8017144:	88fb      	ldrh	r3, [r7, #6]
 8017146:	3b01      	subs	r3, #1
 8017148:	2b1f      	cmp	r3, #31
 801714a:	d84d      	bhi.n	80171e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 801714c:	a201      	add	r2, pc, #4	; (adr r2, 8017154 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017152:	bf00      	nop
 8017154:	080171d5 	.word	0x080171d5
 8017158:	080171d5 	.word	0x080171d5
 801715c:	080171e9 	.word	0x080171e9
 8017160:	080171d5 	.word	0x080171d5
 8017164:	080171e9 	.word	0x080171e9
 8017168:	080171e9 	.word	0x080171e9
 801716c:	080171e9 	.word	0x080171e9
 8017170:	080171d5 	.word	0x080171d5
 8017174:	080171e9 	.word	0x080171e9
 8017178:	080171e9 	.word	0x080171e9
 801717c:	080171e9 	.word	0x080171e9
 8017180:	080171e9 	.word	0x080171e9
 8017184:	080171e9 	.word	0x080171e9
 8017188:	080171e9 	.word	0x080171e9
 801718c:	080171e9 	.word	0x080171e9
 8017190:	080171d5 	.word	0x080171d5
 8017194:	080171e9 	.word	0x080171e9
 8017198:	080171e9 	.word	0x080171e9
 801719c:	080171e9 	.word	0x080171e9
 80171a0:	080171e9 	.word	0x080171e9
 80171a4:	080171e9 	.word	0x080171e9
 80171a8:	080171e9 	.word	0x080171e9
 80171ac:	080171e9 	.word	0x080171e9
 80171b0:	080171d5 	.word	0x080171d5
 80171b4:	080171e9 	.word	0x080171e9
 80171b8:	080171e9 	.word	0x080171e9
 80171bc:	080171e9 	.word	0x080171e9
 80171c0:	080171e9 	.word	0x080171e9
 80171c4:	080171e9 	.word	0x080171e9
 80171c8:	080171e9 	.word	0x080171e9
 80171cc:	080171e9 	.word	0x080171e9
 80171d0:	080171d5 	.word	0x080171d5
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	3380      	adds	r3, #128	; 0x80
 80171da:	681c      	ldr	r4, [r3, #0]
 80171dc:	69fb      	ldr	r3, [r7, #28]
 80171de:	6a3a      	ldr	r2, [r7, #32]
 80171e0:	68b9      	ldr	r1, [r7, #8]
 80171e2:	68f8      	ldr	r0, [r7, #12]
 80171e4:	47a0      	blx	r4
            break;
 80171e6:	e006      	b.n	80171f6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 80171e8:	4b06      	ldr	r3, [pc, #24]	; (8017204 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80171ea:	4a07      	ldr	r2, [pc, #28]	; (8017208 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80171ec:	f240 3152 	movw	r1, #850	; 0x352
 80171f0:	4806      	ldr	r0, [pc, #24]	; (801720c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80171f2:	f008 faa9 	bl	801f748 <__assert_func>
    }
 80171f6:	bf00      	nop
 80171f8:	372c      	adds	r7, #44	; 0x2c
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd90      	pop	{r4, r7, pc}
 80171fe:	bf00      	nop
 8017200:	20009aba 	.word	0x20009aba
 8017204:	080213c0 	.word	0x080213c0
 8017208:	080228c4 	.word	0x080228c4
 801720c:	080213e0 	.word	0x080213e0

08017210 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8017210:	b580      	push	{r7, lr}
 8017212:	b084      	sub	sp, #16
 8017214:	af00      	add	r7, sp, #0
 8017216:	60f8      	str	r0, [r7, #12]
 8017218:	60b9      	str	r1, [r7, #8]
 801721a:	607a      	str	r2, [r7, #4]
 801721c:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d106      	bne.n	8017232 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8017224:	4b11      	ldr	r3, [pc, #68]	; (801726c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8017226:	4a12      	ldr	r2, [pc, #72]	; (8017270 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8017228:	f44f 7159 	mov.w	r1, #868	; 0x364
 801722c:	4811      	ldr	r0, [pc, #68]	; (8017274 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801722e:	f008 fa8b 	bl	801f748 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	68ba      	ldr	r2, [r7, #8]
 8017236:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	687a      	ldr	r2, [r7, #4]
 801723c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	683a      	ldr	r2, [r7, #0]
 8017242:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2b00      	cmp	r3, #0
 8017248:	bf14      	ite	ne
 801724a:	2301      	movne	r3, #1
 801724c:	2300      	moveq	r3, #0
 801724e:	b2da      	uxtb	r2, r3
 8017250:	4b09      	ldr	r3, [pc, #36]	; (8017278 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8017252:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	2b00      	cmp	r3, #0
 8017258:	bf14      	ite	ne
 801725a:	2301      	movne	r3, #1
 801725c:	2300      	moveq	r3, #0
 801725e:	b2da      	uxtb	r2, r3
 8017260:	4b06      	ldr	r3, [pc, #24]	; (801727c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8017262:	701a      	strb	r2, [r3, #0]
    }
 8017264:	bf00      	nop
 8017266:	3710      	adds	r7, #16
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}
 801726c:	0802142c 	.word	0x0802142c
 8017270:	08022874 	.word	0x08022874
 8017274:	080213e0 	.word	0x080213e0
 8017278:	20009abc 	.word	0x20009abc
 801727c:	20009abd 	.word	0x20009abd

08017280 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	460b      	mov	r3, r1
 801728a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017290:	2b00      	cmp	r3, #0
 8017292:	d004      	beq.n	801729e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017298:	887a      	ldrh	r2, [r7, #2]
 801729a:	4610      	mov	r0, r2
 801729c:	4798      	blx	r3
        }
    }
 801729e:	bf00      	nop
 80172a0:	3708      	adds	r7, #8
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b082      	sub	sp, #8
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	685a      	ldr	r2, [r3, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	3318      	adds	r3, #24
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	4610      	mov	r0, r2
 80172be:	4798      	blx	r3
 80172c0:	4603      	mov	r3, r0
    }
 80172c2:	4618      	mov	r0, r3
 80172c4:	3708      	adds	r7, #8
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}
	...

080172cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80172cc:	b480      	push	{r7}
 80172ce:	b083      	sub	sp, #12
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80172e0:	429a      	cmp	r2, r3
 80172e2:	d017      	beq.n	8017314 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80172e4:	4b1a      	ldr	r3, [pc, #104]	; (8017350 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d12a      	bne.n	8017342 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80172ec:	4b19      	ldr	r3, [pc, #100]	; (8017354 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80172ee:	881a      	ldrh	r2, [r3, #0]
 80172f0:	4b19      	ldr	r3, [pc, #100]	; (8017358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80172f2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80172f4:	4b19      	ldr	r3, [pc, #100]	; (801735c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80172f6:	881a      	ldrh	r2, [r3, #0]
 80172f8:	4b19      	ldr	r3, [pc, #100]	; (8017360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80172fa:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80172fc:	4b16      	ldr	r3, [pc, #88]	; (8017358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80172fe:	881a      	ldrh	r2, [r3, #0]
 8017300:	4b16      	ldr	r3, [pc, #88]	; (801735c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8017302:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8017304:	4b16      	ldr	r3, [pc, #88]	; (8017360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8017306:	881a      	ldrh	r2, [r3, #0]
 8017308:	4b12      	ldr	r3, [pc, #72]	; (8017354 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801730a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801730c:	4b10      	ldr	r3, [pc, #64]	; (8017350 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801730e:	2201      	movs	r2, #1
 8017310:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8017312:	e016      	b.n	8017342 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8017314:	4b0e      	ldr	r3, [pc, #56]	; (8017350 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d012      	beq.n	8017342 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801731c:	4b0f      	ldr	r3, [pc, #60]	; (801735c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801731e:	881a      	ldrh	r2, [r3, #0]
 8017320:	4b0d      	ldr	r3, [pc, #52]	; (8017358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8017322:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8017324:	4b0b      	ldr	r3, [pc, #44]	; (8017354 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8017326:	881a      	ldrh	r2, [r3, #0]
 8017328:	4b0d      	ldr	r3, [pc, #52]	; (8017360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801732a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801732c:	4b0c      	ldr	r3, [pc, #48]	; (8017360 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801732e:	881a      	ldrh	r2, [r3, #0]
 8017330:	4b0a      	ldr	r3, [pc, #40]	; (801735c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8017332:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8017334:	4b08      	ldr	r3, [pc, #32]	; (8017358 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8017336:	881a      	ldrh	r2, [r3, #0]
 8017338:	4b06      	ldr	r3, [pc, #24]	; (8017354 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801733a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801733c:	4b04      	ldr	r3, [pc, #16]	; (8017350 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801733e:	2200      	movs	r2, #0
 8017340:	701a      	strb	r2, [r3, #0]
    }
 8017342:	bf00      	nop
 8017344:	370c      	adds	r7, #12
 8017346:	46bd      	mov	sp, r7
 8017348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734c:	4770      	bx	lr
 801734e:	bf00      	nop
 8017350:	20009ab6 	.word	0x20009ab6
 8017354:	20009ab2 	.word	0x20009ab2
 8017358:	20009ab8 	.word	0x20009ab8
 801735c:	20009ab4 	.word	0x20009ab4
 8017360:	20009aba 	.word	0x20009aba

08017364 <_ZNK10STM32F4HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F4HAL::getTFTFrameBuffer() const
{
 8017364:	b480      	push	{r7}
 8017366:	b083      	sub	sp, #12
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801736c:	4b03      	ldr	r3, [pc, #12]	; (801737c <_ZNK10STM32F4HAL17getTFTFrameBufferEv+0x18>)
 801736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017370:	4618      	mov	r0, r3
 8017372:	370c      	adds	r7, #12
 8017374:	46bd      	mov	sp, r7
 8017376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737a:	4770      	bx	lr
 801737c:	40016884 	.word	0x40016884

08017380 <_ZN10STM32F4HAL17setTFTFrameBufferEPt>:

void STM32F4HAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017380:	b480      	push	{r7}
 8017382:	b083      	sub	sp, #12
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801738a:	4a06      	ldr	r2, [pc, #24]	; (80173a4 <_ZN10STM32F4HAL17setTFTFrameBufferEPt+0x24>)
 801738c:	683b      	ldr	r3, [r7, #0]
 801738e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017390:	4b05      	ldr	r3, [pc, #20]	; (80173a8 <_ZN10STM32F4HAL17setTFTFrameBufferEPt+0x28>)
 8017392:	2201      	movs	r2, #1
 8017394:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017396:	bf00      	nop
 8017398:	370c      	adds	r7, #12
 801739a:	46bd      	mov	sp, r7
 801739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a0:	4770      	bx	lr
 80173a2:	bf00      	nop
 80173a4:	40016884 	.word	0x40016884
 80173a8:	40016800 	.word	0x40016800

080173ac <_ZN10STM32F4HAL17getTFTCurrentLineEv>:

uint16_t STM32F4HAL::getTFTCurrentLine()
{
 80173ac:	b480      	push	{r7}
 80173ae:	b085      	sub	sp, #20
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80173b4:	4b0d      	ldr	r3, [pc, #52]	; (80173ec <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x40>)
 80173b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173b8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80173ba:	4b0c      	ldr	r3, [pc, #48]	; (80173ec <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x40>)
 80173bc:	68db      	ldr	r3, [r3, #12]
 80173be:	b29b      	uxth	r3, r3
 80173c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	3301      	adds	r3, #1
 80173c8:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80173ca:	89fa      	ldrh	r2, [r7, #14]
 80173cc:	89bb      	ldrh	r3, [r7, #12]
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d201      	bcs.n	80173d6 <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80173d2:	2300      	movs	r3, #0
 80173d4:	e003      	b.n	80173de <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80173d6:	89fa      	ldrh	r2, [r7, #14]
 80173d8:	89bb      	ldrh	r3, [r7, #12]
 80173da:	1ad3      	subs	r3, r2, r3
 80173dc:	b29b      	uxth	r3, r3
    }
}
 80173de:	4618      	mov	r0, r3
 80173e0:	3714      	adds	r7, #20
 80173e2:	46bd      	mov	sp, r7
 80173e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e8:	4770      	bx	lr
 80173ea:	bf00      	nop
 80173ec:	40016800 	.word	0x40016800

080173f0 <_ZN10STM32F4HAL19configureInterruptsEv>:

void STM32F4HAL::configureInterrupts()
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80173f8:	2109      	movs	r1, #9
 80173fa:	205a      	movs	r0, #90	; 0x5a
 80173fc:	f7ff fdde 	bl	8016fbc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017400:	2109      	movs	r1, #9
 8017402:	2058      	movs	r0, #88	; 0x58
 8017404:	f7ff fdda 	bl	8016fbc <__NVIC_SetPriority>
}
 8017408:	bf00      	nop
 801740a:	3708      	adds	r7, #8
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}

08017410 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F4HAL::enableLCDControllerInterrupt()
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017418:	4b12      	ldr	r3, [pc, #72]	; (8017464 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x54>)
 801741a:	68db      	ldr	r3, [r3, #12]
 801741c:	b29b      	uxth	r3, r3
 801741e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017422:	b29b      	uxth	r3, r3
 8017424:	3b01      	subs	r3, #1
 8017426:	b29a      	uxth	r2, r3
 8017428:	4b0f      	ldr	r3, [pc, #60]	; (8017468 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x58>)
 801742a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801742c:	4b0d      	ldr	r3, [pc, #52]	; (8017464 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x54>)
 801742e:	691b      	ldr	r3, [r3, #16]
 8017430:	b29b      	uxth	r3, r3
 8017432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017436:	b29b      	uxth	r3, r3
 8017438:	3b01      	subs	r3, #1
 801743a:	b29a      	uxth	r2, r3
 801743c:	4b0b      	ldr	r3, [pc, #44]	; (801746c <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x5c>)
 801743e:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8017440:	4b09      	ldr	r3, [pc, #36]	; (8017468 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x58>)
 8017442:	881b      	ldrh	r3, [r3, #0]
 8017444:	4619      	mov	r1, r3
 8017446:	480a      	ldr	r0, [pc, #40]	; (8017470 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x60>)
 8017448:	f7ef f8c0 	bl	80065cc <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 801744c:	4b08      	ldr	r3, [pc, #32]	; (8017470 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x60>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017452:	4b07      	ldr	r3, [pc, #28]	; (8017470 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x60>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	f042 0203 	orr.w	r2, r2, #3
 801745a:	635a      	str	r2, [r3, #52]	; 0x34
}
 801745c:	bf00      	nop
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}
 8017464:	40016800 	.word	0x40016800
 8017468:	20009a6a 	.word	0x20009a6a
 801746c:	20009a6c 	.word	0x20009a6c
 8017470:	20009938 	.word	0x20009938

08017474 <_ZN10STM32F4HAL17disableInterruptsEv>:

void STM32F4HAL::disableInterrupts()
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 801747c:	2058      	movs	r0, #88	; 0x58
 801747e:	f7ff fd79 	bl	8016f74 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017482:	205a      	movs	r0, #90	; 0x5a
 8017484:	f7ff fd76 	bl	8016f74 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 8017488:	2059      	movs	r0, #89	; 0x59
 801748a:	f7ff fd73 	bl	8016f74 <__NVIC_DisableIRQ>
}
 801748e:	bf00      	nop
 8017490:	3708      	adds	r7, #8
 8017492:	46bd      	mov	sp, r7
 8017494:	bd80      	pop	{r7, pc}

08017496 <_ZN10STM32F4HAL16enableInterruptsEv>:

void STM32F4HAL::enableInterrupts()
{
 8017496:	b580      	push	{r7, lr}
 8017498:	b082      	sub	sp, #8
 801749a:	af00      	add	r7, sp, #0
 801749c:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 801749e:	2058      	movs	r0, #88	; 0x58
 80174a0:	f7ff fd48 	bl	8016f34 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 80174a4:	205a      	movs	r0, #90	; 0x5a
 80174a6:	f7ff fd45 	bl	8016f34 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 80174aa:	2059      	movs	r0, #89	; 0x59
 80174ac:	f7ff fd42 	bl	8016f34 <__NVIC_EnableIRQ>
}
 80174b0:	bf00      	nop
 80174b2:	3708      	adds	r7, #8
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}

080174b8 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 80174c0:	4b1a      	ldr	r3, [pc, #104]	; (801752c <HAL_LTDC_LineEventCallback+0x74>)
 80174c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174c4:	4a1a      	ldr	r2, [pc, #104]	; (8017530 <HAL_LTDC_LineEventCallback+0x78>)
 80174c6:	8812      	ldrh	r2, [r2, #0]
 80174c8:	4293      	cmp	r3, r2
 80174ca:	bf0c      	ite	eq
 80174cc:	2301      	moveq	r3, #1
 80174ce:	2300      	movne	r3, #0
 80174d0:	b2db      	uxtb	r3, r3
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d017      	beq.n	8017506 <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80174d6:	4b17      	ldr	r3, [pc, #92]	; (8017534 <HAL_LTDC_LineEventCallback+0x7c>)
 80174d8:	881b      	ldrh	r3, [r3, #0]
 80174da:	4619      	mov	r1, r3
 80174dc:	6878      	ldr	r0, [r7, #4]
 80174de:	f7ef f875 	bl	80065cc <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 80174e2:	f7f4 ff8d 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 80174e6:	4603      	mov	r3, r0
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7ff fdc8 	bl	801707e <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 80174ee:	f7f7 feef 	bl	800f2d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 80174f2:	f7f4 ff85 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 80174f6:	4603      	mov	r3, r0
 80174f8:	4618      	mov	r0, r3
 80174fa:	f001 fa81 	bl	8018a00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 80174fe:	2000      	movs	r0, #0
 8017500:	f000 f936 	bl	8017770 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 8017504:	e00e      	b.n	8017524 <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8017506:	4b0a      	ldr	r3, [pc, #40]	; (8017530 <HAL_LTDC_LineEventCallback+0x78>)
 8017508:	881b      	ldrh	r3, [r3, #0]
 801750a:	4619      	mov	r1, r3
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f7ef f85d 	bl	80065cc <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 8017512:	2000      	movs	r0, #0
 8017514:	f000 f937 	bl	8017786 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 8017518:	f7f4 ff72 	bl	800c400 <_ZN8touchgfx3HAL11getInstanceEv>
 801751c:	4603      	mov	r3, r0
 801751e:	4618      	mov	r0, r3
 8017520:	f7ff fd8e 	bl	8017040 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 8017524:	bf00      	nop
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	40016800 	.word	0x40016800
 8017530:	20009a6a 	.word	0x20009a6a
 8017534:	20009a6c 	.word	0x20009a6c

08017538 <_ZN8touchgfx22STM32F4Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F4Instrumentation::init()
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b092      	sub	sp, #72	; 0x48
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8017540:	2300      	movs	r3, #0
 8017542:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t pFLatency;

    __TIM1_CLK_ENABLE();
 8017544:	2300      	movs	r3, #0
 8017546:	60fb      	str	r3, [r7, #12]
 8017548:	4b42      	ldr	r3, [pc, #264]	; (8017654 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 801754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801754c:	4a41      	ldr	r2, [pc, #260]	; (8017654 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 801754e:	f043 0301 	orr.w	r3, r3, #1
 8017552:	6453      	str	r3, [r2, #68]	; 0x44
 8017554:	4b3f      	ldr	r3, [pc, #252]	; (8017654 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 8017556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017558:	f003 0301 	and.w	r3, r3, #1
 801755c:	60fb      	str	r3, [r7, #12]
 801755e:	68fb      	ldr	r3, [r7, #12]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017560:	f107 0318 	add.w	r3, r7, #24
 8017564:	2200      	movs	r2, #0
 8017566:	601a      	str	r2, [r3, #0]
 8017568:	605a      	str	r2, [r3, #4]
 801756a:	609a      	str	r2, [r3, #8]
 801756c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801756e:	f107 0310 	add.w	r3, r7, #16
 8017572:	2200      	movs	r2, #0
 8017574:	601a      	str	r2, [r3, #0]
 8017576:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8017578:	4b37      	ldr	r3, [pc, #220]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 801757a:	4a38      	ldr	r2, [pc, #224]	; (801765c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x124>)
 801757c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 801757e:	4b36      	ldr	r3, [pc, #216]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017580:	2200      	movs	r2, #0
 8017582:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017584:	4b34      	ldr	r3, [pc, #208]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017586:	2200      	movs	r2, #0
 8017588:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 801758a:	4b33      	ldr	r3, [pc, #204]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 801758c:	2200      	movs	r2, #0
 801758e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017590:	4b31      	ldr	r3, [pc, #196]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017592:	2200      	movs	r2, #0
 8017594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017596:	4b30      	ldr	r3, [pc, #192]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017598:	2200      	movs	r2, #0
 801759a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801759c:	4b2e      	ldr	r3, [pc, #184]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 801759e:	2200      	movs	r2, #0
 80175a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80175a2:	482d      	ldr	r0, [pc, #180]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 80175a4:	f7f0 fae2 	bl	8007b6c <HAL_TIM_Base_Init>
 80175a8:	4603      	mov	r3, r0
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	bf14      	ite	ne
 80175ae:	2301      	movne	r3, #1
 80175b0:	2300      	moveq	r3, #0
 80175b2:	b2db      	uxtb	r3, r3
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d001      	beq.n	80175bc <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x84>
  {
    Error_Handler( );
 80175b8:	f7e9 fb54 	bl	8000c64 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80175bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80175c0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80175c2:	f107 0318 	add.w	r3, r7, #24
 80175c6:	4619      	mov	r1, r3
 80175c8:	4823      	ldr	r0, [pc, #140]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 80175ca:	f7f0 fc4a 	bl	8007e62 <HAL_TIM_ConfigClockSource>
 80175ce:	4603      	mov	r3, r0
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	bf14      	ite	ne
 80175d4:	2301      	movne	r3, #1
 80175d6:	2300      	moveq	r3, #0
 80175d8:	b2db      	uxtb	r3, r3
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d001      	beq.n	80175e2 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xaa>
  {
    Error_Handler( );
 80175de:	f7e9 fb41 	bl	8000c64 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80175e2:	2300      	movs	r3, #0
 80175e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80175e6:	2300      	movs	r3, #0
 80175e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80175ea:	f107 0310 	add.w	r3, r7, #16
 80175ee:	4619      	mov	r1, r3
 80175f0:	4819      	ldr	r0, [pc, #100]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 80175f2:	f7f0 fe4f 	bl	8008294 <HAL_TIMEx_MasterConfigSynchronization>
 80175f6:	4603      	mov	r3, r0
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	bf14      	ite	ne
 80175fc:	2301      	movne	r3, #1
 80175fe:	2300      	moveq	r3, #0
 8017600:	b2db      	uxtb	r3, r3
 8017602:	2b00      	cmp	r3, #0
 8017604:	d001      	beq.n	801760a <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xd2>
  {
    Error_Handler( );
 8017606:	f7e9 fb2d 	bl	8000c64 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801760a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801760e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017612:	4611      	mov	r1, r2
 8017614:	4618      	mov	r0, r3
 8017616:	f7ef fdd9 	bl	80071cc <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801761c:	643b      	str	r3, [r7, #64]	; 0x40

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801761e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017620:	2b00      	cmp	r3, #0
 8017622:	d103      	bne.n	801762c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xf4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 8017624:	f7ef fdaa 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8017628:	6478      	str	r0, [r7, #68]	; 0x44
 801762a:	e004      	b.n	8017636 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xfe>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 801762c:	f7ef fda6 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8017630:	4603      	mov	r3, r0
 8017632:	005b      	lsls	r3, r3, #1
 8017634:	647b      	str	r3, [r7, #68]	; 0x44

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8017636:	f7ef fd95 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 801763a:	4602      	mov	r2, r0
 801763c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801763e:	fbb2 f2f3 	udiv	r2, r2, r3
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 8017646:	4804      	ldr	r0, [pc, #16]	; (8017658 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017648:	f7f0 fabb 	bl	8007bc2 <HAL_TIM_Base_Start>
}
 801764c:	bf00      	nop
 801764e:	3748      	adds	r7, #72	; 0x48
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}
 8017654:	40023800 	.word	0x40023800
 8017658:	20009a70 	.word	0x20009a70
 801765c:	40010000 	.word	0x40010000

08017660 <_ZN8touchgfx22STM32F4Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F4Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8017660:	b480      	push	{r7}
 8017662:	b085      	sub	sp, #20
 8017664:	af00      	add	r7, sp, #0
 8017666:	60f8      	str	r0, [r7, #12]
 8017668:	60b9      	str	r1, [r7, #8]
 801766a:	607a      	str	r2, [r7, #4]
 801766c:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	1ad2      	subs	r2, r2, r3
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	085b      	lsrs	r3, r3, #1
 8017678:	441a      	add	r2, r3
 801767a:	683b      	ldr	r3, [r7, #0]
 801767c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017680:	4618      	mov	r0, r3
 8017682:	3714      	adds	r7, #20
 8017684:	46bd      	mov	sp, r7
 8017686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768a:	4770      	bx	lr

0801768c <_ZN8touchgfx22STM32F4Instrumentation12getCPUCyclesEv>:

unsigned int STM32F4Instrumentation::getCPUCycles()
{
 801768c:	b480      	push	{r7}
 801768e:	b083      	sub	sp, #12
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 8017694:	4b06      	ldr	r3, [pc, #24]	; (80176b0 <_ZN8touchgfx22STM32F4Instrumentation12getCPUCyclesEv+0x24>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801769a:	687a      	ldr	r2, [r7, #4]
 801769c:	68d2      	ldr	r2, [r2, #12]
 801769e:	fb02 f303 	mul.w	r3, r2, r3
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	370c      	adds	r7, #12
 80176a6:	46bd      	mov	sp, r7
 80176a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ac:	4770      	bx	lr
 80176ae:	bf00      	nop
 80176b0:	20009a70 	.word	0x20009a70

080176b4 <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb>:

void STM32F4Instrumentation::setMCUActive(bool active)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b082      	sub	sp, #8
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	460b      	mov	r3, r1
 80176be:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 80176c0:	78fb      	ldrb	r3, [r7, #3]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d00f      	beq.n	80176e6 <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	3310      	adds	r3, #16
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	6878      	ldr	r0, [r7, #4]
 80176d0:	4798      	blx	r3
 80176d2:	4602      	mov	r2, r0
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	689b      	ldr	r3, [r3, #8]
 80176d8:	1ad2      	subs	r2, r2, r3
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	441a      	add	r2, r3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80176e4:	e008      	b.n	80176f8 <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	3310      	adds	r3, #16
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	6878      	ldr	r0, [r7, #4]
 80176f0:	4798      	blx	r3
 80176f2:	4602      	mov	r2, r0
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	609a      	str	r2, [r3, #8]
}
 80176f8:	bf00      	nop
 80176fa:	3708      	adds	r7, #8
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}

08017700 <_ZN8touchgfx22STM32F4TouchController4initEv>:
}

using namespace touchgfx;

void STM32F4TouchController::init()
{
 8017700:	b590      	push	{r4, r7, lr}
 8017702:	b083      	sub	sp, #12
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN F4TouchController_init */

    /* Add code for touch controller Initialization*/
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8017708:	f7fe f915 	bl	8015936 <LCD_GetXSize>
 801770c:	4603      	mov	r3, r0
 801770e:	b29c      	uxth	r4, r3
 8017710:	f7fe f919 	bl	8015946 <LCD_GetYSize>
 8017714:	4603      	mov	r3, r0
 8017716:	b29b      	uxth	r3, r3
 8017718:	4619      	mov	r1, r3
 801771a:	4620      	mov	r0, r4
 801771c:	f7ea fed0 	bl	80024c0 <BSP_TS_Init>

  /* USER CODE END  F4TouchController_init  */
}
 8017720:	bf00      	nop
 8017722:	370c      	adds	r7, #12
 8017724:	46bd      	mov	sp, r7
 8017726:	bd90      	pop	{r4, r7, pc}

08017728 <_ZN8touchgfx22STM32F4TouchController11sampleTouchERlS1_>:

bool STM32F4TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b086      	sub	sp, #24
 801772c:	af00      	add	r7, sp, #0
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN  F4TouchController_sampleTouch  */
    
    TS_StateTypeDef state;
    BSP_TS_GetState(&state);
 8017734:	f107 0310 	add.w	r3, r7, #16
 8017738:	4618      	mov	r0, r3
 801773a:	f7ea fefb 	bl	8002534 <BSP_TS_GetState>
    if (state.TouchDetected)
 801773e:	8a3b      	ldrh	r3, [r7, #16]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d009      	beq.n	8017758 <_ZN8touchgfx22STM32F4TouchController11sampleTouchERlS1_+0x30>
    {
        x = state.X;
 8017744:	8a7b      	ldrh	r3, [r7, #18]
 8017746:	461a      	mov	r2, r3
 8017748:	68bb      	ldr	r3, [r7, #8]
 801774a:	601a      	str	r2, [r3, #0]
        y = state.Y;
 801774c:	8abb      	ldrh	r3, [r7, #20]
 801774e:	461a      	mov	r2, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	601a      	str	r2, [r3, #0]
        return true;
 8017754:	2301      	movs	r3, #1
 8017756:	e000      	b.n	801775a <_ZN8touchgfx22STM32F4TouchController11sampleTouchERlS1_+0x32>
    }
    return false;
 8017758:	2300      	movs	r3, #0

 /* USER CODE END F4TouchController_sampleTouch */    
}
 801775a:	4618      	mov	r0, r3
 801775c:	3718      	adds	r7, #24
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}

08017762 <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8017762:	b480      	push	{r7}
 8017764:	af00      	add	r7, sp, #0
  
    /* USER CODE BEGIN GPIO::init */

    /* USER CODE END GPIO::init */
}
 8017766:	bf00      	nop
 8017768:	46bd      	mov	sp, r7
 801776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776e:	4770      	bx	lr

08017770 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO::GPIO_ID id)
{
 8017770:	b480      	push	{r7}
 8017772:	b083      	sub	sp, #12
 8017774:	af00      	add	r7, sp, #0
 8017776:	4603      	mov	r3, r0
 8017778:	71fb      	strb	r3, [r7, #7]
  
    /* USER CODE BEGIN GPIO::set */

    /* USER CODE END GPIO::set */
}
 801777a:	bf00      	nop
 801777c:	370c      	adds	r7, #12
 801777e:	46bd      	mov	sp, r7
 8017780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017784:	4770      	bx	lr

08017786 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO::GPIO_ID id)
{
 8017786:	b480      	push	{r7}
 8017788:	b083      	sub	sp, #12
 801778a:	af00      	add	r7, sp, #0
 801778c:	4603      	mov	r3, r0
 801778e:	71fb      	strb	r3, [r7, #7]

    /* USER CODE BEGIN GPIO::clear */
    
    /* USER CODE END GPIO::clear */
}
 8017790:	bf00      	nop
 8017792:	370c      	adds	r7, #12
 8017794:	46bd      	mov	sp, r7
 8017796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779a:	4770      	bx	lr

0801779c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO::GPIO_ID id)
{
 801779c:	b480      	push	{r7}
 801779e:	b083      	sub	sp, #12
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	4603      	mov	r3, r0
 80177a4:	71fb      	strb	r3, [r7, #7]
   
    /* USER CODE BEGIN GPIO::toggle */

    /* USER CODE END GPIO::toggle */
}
 80177a6:	bf00      	nop
 80177a8:	370c      	adds	r7, #12
 80177aa:	46bd      	mov	sp, r7
 80177ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b0:	4770      	bx	lr
	...

080177b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80177b8:	2200      	movs	r2, #0
 80177ba:	490e      	ldr	r1, [pc, #56]	; (80177f4 <MX_USB_HOST_Init+0x40>)
 80177bc:	480e      	ldr	r0, [pc, #56]	; (80177f8 <MX_USB_HOST_Init+0x44>)
 80177be:	f7f2 ffc5 	bl	800a74c <USBH_Init>
 80177c2:	4603      	mov	r3, r0
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d001      	beq.n	80177cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80177c8:	f7e9 fa4c 	bl	8000c64 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80177cc:	490b      	ldr	r1, [pc, #44]	; (80177fc <MX_USB_HOST_Init+0x48>)
 80177ce:	480a      	ldr	r0, [pc, #40]	; (80177f8 <MX_USB_HOST_Init+0x44>)
 80177d0:	f7f3 f857 	bl	800a882 <USBH_RegisterClass>
 80177d4:	4603      	mov	r3, r0
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d001      	beq.n	80177de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80177da:	f7e9 fa43 	bl	8000c64 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80177de:	4806      	ldr	r0, [pc, #24]	; (80177f8 <MX_USB_HOST_Init+0x44>)
 80177e0:	f7f3 f8dc 	bl	800a99c <USBH_Start>
 80177e4:	4603      	mov	r3, r0
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d001      	beq.n	80177ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80177ea:	f7e9 fa3b 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80177ee:	bf00      	nop
 80177f0:	bd80      	pop	{r7, pc}
 80177f2:	bf00      	nop
 80177f4:	08017801 	.word	0x08017801
 80177f8:	20009c90 	.word	0x20009c90
 80177fc:	20000038 	.word	0x20000038

08017800 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017800:	b480      	push	{r7}
 8017802:	b083      	sub	sp, #12
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
 8017808:	460b      	mov	r3, r1
 801780a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801780c:	78fb      	ldrb	r3, [r7, #3]
 801780e:	3b01      	subs	r3, #1
 8017810:	2b04      	cmp	r3, #4
 8017812:	d819      	bhi.n	8017848 <USBH_UserProcess+0x48>
 8017814:	a201      	add	r2, pc, #4	; (adr r2, 801781c <USBH_UserProcess+0x1c>)
 8017816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801781a:	bf00      	nop
 801781c:	08017849 	.word	0x08017849
 8017820:	08017839 	.word	0x08017839
 8017824:	08017849 	.word	0x08017849
 8017828:	08017841 	.word	0x08017841
 801782c:	08017831 	.word	0x08017831
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017830:	4b09      	ldr	r3, [pc, #36]	; (8017858 <USBH_UserProcess+0x58>)
 8017832:	2203      	movs	r2, #3
 8017834:	701a      	strb	r2, [r3, #0]
  break;
 8017836:	e008      	b.n	801784a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017838:	4b07      	ldr	r3, [pc, #28]	; (8017858 <USBH_UserProcess+0x58>)
 801783a:	2202      	movs	r2, #2
 801783c:	701a      	strb	r2, [r3, #0]
  break;
 801783e:	e004      	b.n	801784a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017840:	4b05      	ldr	r3, [pc, #20]	; (8017858 <USBH_UserProcess+0x58>)
 8017842:	2201      	movs	r2, #1
 8017844:	701a      	strb	r2, [r3, #0]
  break;
 8017846:	e000      	b.n	801784a <USBH_UserProcess+0x4a>

  default:
  break;
 8017848:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801784a:	bf00      	nop
 801784c:	370c      	adds	r7, #12
 801784e:	46bd      	mov	sp, r7
 8017850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	20009ab0 	.word	0x20009ab0

0801785c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b08a      	sub	sp, #40	; 0x28
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017864:	f107 0314 	add.w	r3, r7, #20
 8017868:	2200      	movs	r2, #0
 801786a:	601a      	str	r2, [r3, #0]
 801786c:	605a      	str	r2, [r3, #4]
 801786e:	609a      	str	r2, [r3, #8]
 8017870:	60da      	str	r2, [r3, #12]
 8017872:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	4a24      	ldr	r2, [pc, #144]	; (801790c <HAL_HCD_MspInit+0xb0>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d141      	bne.n	8017902 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801787e:	2300      	movs	r3, #0
 8017880:	613b      	str	r3, [r7, #16]
 8017882:	4b23      	ldr	r3, [pc, #140]	; (8017910 <HAL_HCD_MspInit+0xb4>)
 8017884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017886:	4a22      	ldr	r2, [pc, #136]	; (8017910 <HAL_HCD_MspInit+0xb4>)
 8017888:	f043 0302 	orr.w	r3, r3, #2
 801788c:	6313      	str	r3, [r2, #48]	; 0x30
 801788e:	4b20      	ldr	r3, [pc, #128]	; (8017910 <HAL_HCD_MspInit+0xb4>)
 8017890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017892:	f003 0302 	and.w	r3, r3, #2
 8017896:	613b      	str	r3, [r7, #16]
 8017898:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801789a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801789e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178a0:	2302      	movs	r3, #2
 80178a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178a4:	2300      	movs	r3, #0
 80178a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178a8:	2300      	movs	r3, #0
 80178aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80178ac:	230c      	movs	r3, #12
 80178ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80178b0:	f107 0314 	add.w	r3, r7, #20
 80178b4:	4619      	mov	r1, r3
 80178b6:	4817      	ldr	r0, [pc, #92]	; (8017914 <HAL_HCD_MspInit+0xb8>)
 80178b8:	f7eb fc9c 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80178bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80178c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80178c2:	2300      	movs	r3, #0
 80178c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178c6:	2300      	movs	r3, #0
 80178c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80178ca:	f107 0314 	add.w	r3, r7, #20
 80178ce:	4619      	mov	r1, r3
 80178d0:	4810      	ldr	r0, [pc, #64]	; (8017914 <HAL_HCD_MspInit+0xb8>)
 80178d2:	f7eb fc8f 	bl	80031f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80178d6:	2300      	movs	r3, #0
 80178d8:	60fb      	str	r3, [r7, #12]
 80178da:	4b0d      	ldr	r3, [pc, #52]	; (8017910 <HAL_HCD_MspInit+0xb4>)
 80178dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178de:	4a0c      	ldr	r2, [pc, #48]	; (8017910 <HAL_HCD_MspInit+0xb4>)
 80178e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80178e4:	6313      	str	r3, [r2, #48]	; 0x30
 80178e6:	4b0a      	ldr	r3, [pc, #40]	; (8017910 <HAL_HCD_MspInit+0xb4>)
 80178e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80178ee:	60fb      	str	r3, [r7, #12]
 80178f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80178f2:	2200      	movs	r2, #0
 80178f4:	2105      	movs	r1, #5
 80178f6:	204d      	movs	r0, #77	; 0x4d
 80178f8:	f7eb f80c 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80178fc:	204d      	movs	r0, #77	; 0x4d
 80178fe:	f7eb f825 	bl	800294c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017902:	bf00      	nop
 8017904:	3728      	adds	r7, #40	; 0x28
 8017906:	46bd      	mov	sp, r7
 8017908:	bd80      	pop	{r7, pc}
 801790a:	bf00      	nop
 801790c:	40040000 	.word	0x40040000
 8017910:	40023800 	.word	0x40023800
 8017914:	40020400 	.word	0x40020400

08017918 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b082      	sub	sp, #8
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017926:	4618      	mov	r0, r3
 8017928:	f7f3 fb8b 	bl	800b042 <USBH_LL_IncTimer>
}
 801792c:	bf00      	nop
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}

08017934 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017942:	4618      	mov	r0, r3
 8017944:	f7f3 fbd0 	bl	800b0e8 <USBH_LL_Connect>
}
 8017948:	bf00      	nop
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}

08017950 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b082      	sub	sp, #8
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801795e:	4618      	mov	r0, r3
 8017960:	f7f3 fbf6 	bl	800b150 <USBH_LL_Disconnect>
}
 8017964:	bf00      	nop
 8017966:	3708      	adds	r7, #8
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}

0801796c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b082      	sub	sp, #8
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	460b      	mov	r3, r1
 8017976:	70fb      	strb	r3, [r7, #3]
 8017978:	4613      	mov	r3, r2
 801797a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017982:	4618      	mov	r0, r3
 8017984:	f7f3 fc34 	bl	800b1f0 <USBH_LL_NotifyURBChange>
#endif
}
 8017988:	bf00      	nop
 801798a:	3708      	adds	r7, #8
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}

08017990 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801799e:	4618      	mov	r0, r3
 80179a0:	f7f3 fb79 	bl	800b096 <USBH_LL_PortEnabled>
} 
 80179a4:	bf00      	nop
 80179a6:	3708      	adds	r7, #8
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}

080179ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b082      	sub	sp, #8
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80179ba:	4618      	mov	r0, r3
 80179bc:	f7f3 fb79 	bl	800b0b2 <USBH_LL_PortDisabled>
} 
 80179c0:	bf00      	nop
 80179c2:	3708      	adds	r7, #8
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}

080179c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d132      	bne.n	8017a40 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80179da:	4a1c      	ldr	r2, [pc, #112]	; (8017a4c <USBH_LL_Init+0x84>)
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	4a19      	ldr	r2, [pc, #100]	; (8017a4c <USBH_LL_Init+0x84>)
 80179e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80179ea:	4b18      	ldr	r3, [pc, #96]	; (8017a4c <USBH_LL_Init+0x84>)
 80179ec:	4a18      	ldr	r2, [pc, #96]	; (8017a50 <USBH_LL_Init+0x88>)
 80179ee:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80179f0:	4b16      	ldr	r3, [pc, #88]	; (8017a4c <USBH_LL_Init+0x84>)
 80179f2:	220c      	movs	r2, #12
 80179f4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80179f6:	4b15      	ldr	r3, [pc, #84]	; (8017a4c <USBH_LL_Init+0x84>)
 80179f8:	2201      	movs	r2, #1
 80179fa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80179fc:	4b13      	ldr	r3, [pc, #76]	; (8017a4c <USBH_LL_Init+0x84>)
 80179fe:	2200      	movs	r2, #0
 8017a00:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017a02:	4b12      	ldr	r3, [pc, #72]	; (8017a4c <USBH_LL_Init+0x84>)
 8017a04:	2202      	movs	r2, #2
 8017a06:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017a08:	4b10      	ldr	r3, [pc, #64]	; (8017a4c <USBH_LL_Init+0x84>)
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017a0e:	4b0f      	ldr	r3, [pc, #60]	; (8017a4c <USBH_LL_Init+0x84>)
 8017a10:	2200      	movs	r2, #0
 8017a12:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017a14:	4b0d      	ldr	r3, [pc, #52]	; (8017a4c <USBH_LL_Init+0x84>)
 8017a16:	2200      	movs	r2, #0
 8017a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017a1a:	4b0c      	ldr	r3, [pc, #48]	; (8017a4c <USBH_LL_Init+0x84>)
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8017a20:	480a      	ldr	r0, [pc, #40]	; (8017a4c <USBH_LL_Init+0x84>)
 8017a22:	f7eb fecf 	bl	80037c4 <HAL_HCD_Init>
 8017a26:	4603      	mov	r3, r0
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d001      	beq.n	8017a30 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8017a2c:	f7e9 f91a 	bl	8000c64 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8017a30:	4806      	ldr	r0, [pc, #24]	; (8017a4c <USBH_LL_Init+0x84>)
 8017a32:	f7ec facb 	bl	8003fcc <HAL_HCD_GetCurrentFrame>
 8017a36:	4603      	mov	r3, r0
 8017a38:	4619      	mov	r1, r3
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f7f3 faf2 	bl	800b024 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017a40:	2300      	movs	r3, #0
}
 8017a42:	4618      	mov	r0, r3
 8017a44:	3708      	adds	r7, #8
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	2000a068 	.word	0x2000a068
 8017a50:	40040000 	.word	0x40040000

08017a54 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b084      	sub	sp, #16
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017a60:	2300      	movs	r3, #0
 8017a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7ec fa36 	bl	8003edc <HAL_HCD_Start>
 8017a70:	4603      	mov	r3, r0
 8017a72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017a74:	7bfb      	ldrb	r3, [r7, #15]
 8017a76:	4618      	mov	r0, r3
 8017a78:	f000 f95c 	bl	8017d34 <USBH_Get_USB_Status>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a82:	4618      	mov	r0, r3
 8017a84:	3710      	adds	r7, #16
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd80      	pop	{r7, pc}

08017a8a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017a8a:	b580      	push	{r7, lr}
 8017a8c:	b084      	sub	sp, #16
 8017a8e:	af00      	add	r7, sp, #0
 8017a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a92:	2300      	movs	r3, #0
 8017a94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017a96:	2300      	movs	r3, #0
 8017a98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7ec fa3e 	bl	8003f22 <HAL_HCD_Stop>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017aaa:	7bfb      	ldrb	r3, [r7, #15]
 8017aac:	4618      	mov	r0, r3
 8017aae:	f000 f941 	bl	8017d34 <USBH_Get_USB_Status>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8017ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ab8:	4618      	mov	r0, r3
 8017aba:	3710      	adds	r7, #16
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}

08017ac0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b084      	sub	sp, #16
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017ac8:	2301      	movs	r3, #1
 8017aca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7ec fa88 	bl	8003fe8 <HAL_HCD_GetCurrentSpeed>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	2b01      	cmp	r3, #1
 8017adc:	d007      	beq.n	8017aee <USBH_LL_GetSpeed+0x2e>
 8017ade:	2b01      	cmp	r3, #1
 8017ae0:	d302      	bcc.n	8017ae8 <USBH_LL_GetSpeed+0x28>
 8017ae2:	2b02      	cmp	r3, #2
 8017ae4:	d006      	beq.n	8017af4 <USBH_LL_GetSpeed+0x34>
 8017ae6:	e008      	b.n	8017afa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8017ae8:	2300      	movs	r3, #0
 8017aea:	73fb      	strb	r3, [r7, #15]
    break;
 8017aec:	e008      	b.n	8017b00 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8017aee:	2301      	movs	r3, #1
 8017af0:	73fb      	strb	r3, [r7, #15]
    break;
 8017af2:	e005      	b.n	8017b00 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017af4:	2302      	movs	r3, #2
 8017af6:	73fb      	strb	r3, [r7, #15]
    break;
 8017af8:	e002      	b.n	8017b00 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8017afa:	2301      	movs	r3, #1
 8017afc:	73fb      	strb	r3, [r7, #15]
    break;
 8017afe:	bf00      	nop
  }
  return  speed;
 8017b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}

08017b0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8017b0a:	b580      	push	{r7, lr}
 8017b0c:	b084      	sub	sp, #16
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b12:	2300      	movs	r3, #0
 8017b14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017b16:	2300      	movs	r3, #0
 8017b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017b20:	4618      	mov	r0, r3
 8017b22:	f7ec fa1b 	bl	8003f5c <HAL_HCD_ResetPort>
 8017b26:	4603      	mov	r3, r0
 8017b28:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8017b2a:	7bfb      	ldrb	r3, [r7, #15]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f000 f901 	bl	8017d34 <USBH_Get_USB_Status>
 8017b32:	4603      	mov	r3, r0
 8017b34:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b38:	4618      	mov	r0, r3
 8017b3a:	3710      	adds	r7, #16
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}

08017b40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
 8017b48:	460b      	mov	r3, r1
 8017b4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017b52:	78fa      	ldrb	r2, [r7, #3]
 8017b54:	4611      	mov	r1, r2
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7ec fa23 	bl	8003fa2 <HAL_HCD_HC_GetXferCount>
 8017b5c:	4603      	mov	r3, r0
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3708      	adds	r7, #8
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}

08017b66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017b66:	b590      	push	{r4, r7, lr}
 8017b68:	b089      	sub	sp, #36	; 0x24
 8017b6a:	af04      	add	r7, sp, #16
 8017b6c:	6078      	str	r0, [r7, #4]
 8017b6e:	4608      	mov	r0, r1
 8017b70:	4611      	mov	r1, r2
 8017b72:	461a      	mov	r2, r3
 8017b74:	4603      	mov	r3, r0
 8017b76:	70fb      	strb	r3, [r7, #3]
 8017b78:	460b      	mov	r3, r1
 8017b7a:	70bb      	strb	r3, [r7, #2]
 8017b7c:	4613      	mov	r3, r2
 8017b7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b80:	2300      	movs	r3, #0
 8017b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017b84:	2300      	movs	r3, #0
 8017b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8017b8e:	787c      	ldrb	r4, [r7, #1]
 8017b90:	78ba      	ldrb	r2, [r7, #2]
 8017b92:	78f9      	ldrb	r1, [r7, #3]
 8017b94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017b96:	9302      	str	r3, [sp, #8]
 8017b98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b9c:	9301      	str	r3, [sp, #4]
 8017b9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	4623      	mov	r3, r4
 8017ba6:	f7eb fe6f 	bl	8003888 <HAL_HCD_HC_Init>
 8017baa:	4603      	mov	r3, r0
 8017bac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8017bae:	7bfb      	ldrb	r3, [r7, #15]
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f000 f8bf 	bl	8017d34 <USBH_Get_USB_Status>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3714      	adds	r7, #20
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd90      	pop	{r4, r7, pc}

08017bc4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
 8017bcc:	460b      	mov	r3, r1
 8017bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017bde:	78fa      	ldrb	r2, [r7, #3]
 8017be0:	4611      	mov	r1, r2
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7eb fee8 	bl	80039b8 <HAL_HCD_HC_Halt>
 8017be8:	4603      	mov	r3, r0
 8017bea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017bec:	7bfb      	ldrb	r3, [r7, #15]
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f000 f8a0 	bl	8017d34 <USBH_Get_USB_Status>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3710      	adds	r7, #16
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}

08017c02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8017c02:	b590      	push	{r4, r7, lr}
 8017c04:	b089      	sub	sp, #36	; 0x24
 8017c06:	af04      	add	r7, sp, #16
 8017c08:	6078      	str	r0, [r7, #4]
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	4611      	mov	r1, r2
 8017c0e:	461a      	mov	r2, r3
 8017c10:	4603      	mov	r3, r0
 8017c12:	70fb      	strb	r3, [r7, #3]
 8017c14:	460b      	mov	r3, r1
 8017c16:	70bb      	strb	r3, [r7, #2]
 8017c18:	4613      	mov	r3, r2
 8017c1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017c20:	2300      	movs	r3, #0
 8017c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8017c2a:	787c      	ldrb	r4, [r7, #1]
 8017c2c:	78ba      	ldrb	r2, [r7, #2]
 8017c2e:	78f9      	ldrb	r1, [r7, #3]
 8017c30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017c34:	9303      	str	r3, [sp, #12]
 8017c36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017c38:	9302      	str	r3, [sp, #8]
 8017c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c3c:	9301      	str	r3, [sp, #4]
 8017c3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c42:	9300      	str	r3, [sp, #0]
 8017c44:	4623      	mov	r3, r4
 8017c46:	f7eb fedb 	bl	8003a00 <HAL_HCD_HC_SubmitRequest>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8017c4e:	7bfb      	ldrb	r3, [r7, #15]
 8017c50:	4618      	mov	r0, r3
 8017c52:	f000 f86f 	bl	8017d34 <USBH_Get_USB_Status>
 8017c56:	4603      	mov	r3, r0
 8017c58:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3714      	adds	r7, #20
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd90      	pop	{r4, r7, pc}

08017c64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b082      	sub	sp, #8
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
 8017c6c:	460b      	mov	r3, r1
 8017c6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017c76:	78fa      	ldrb	r2, [r7, #3]
 8017c78:	4611      	mov	r1, r2
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f7ec f97c 	bl	8003f78 <HAL_HCD_HC_GetURBState>
 8017c80:	4603      	mov	r3, r0
}
 8017c82:	4618      	mov	r0, r3
 8017c84:	3708      	adds	r7, #8
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}

08017c8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8017c8a:	b580      	push	{r7, lr}
 8017c8c:	b082      	sub	sp, #8
 8017c8e:	af00      	add	r7, sp, #0
 8017c90:	6078      	str	r0, [r7, #4]
 8017c92:	460b      	mov	r3, r1
 8017c94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d103      	bne.n	8017ca8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8017ca0:	78fb      	ldrb	r3, [r7, #3]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f000 f872 	bl	8017d8c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017ca8:	20c8      	movs	r0, #200	; 0xc8
 8017caa:	f7ea fd37 	bl	800271c <HAL_Delay>
  return USBH_OK;
 8017cae:	2300      	movs	r3, #0
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	3708      	adds	r7, #8
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b085      	sub	sp, #20
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	460b      	mov	r3, r1
 8017cc2:	70fb      	strb	r3, [r7, #3]
 8017cc4:	4613      	mov	r3, r2
 8017cc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017cce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8017cd0:	78fa      	ldrb	r2, [r7, #3]
 8017cd2:	68f9      	ldr	r1, [r7, #12]
 8017cd4:	4613      	mov	r3, r2
 8017cd6:	009b      	lsls	r3, r3, #2
 8017cd8:	4413      	add	r3, r2
 8017cda:	00db      	lsls	r3, r3, #3
 8017cdc:	440b      	add	r3, r1
 8017cde:	333b      	adds	r3, #59	; 0x3b
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d00a      	beq.n	8017cfc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8017ce6:	78fa      	ldrb	r2, [r7, #3]
 8017ce8:	68f9      	ldr	r1, [r7, #12]
 8017cea:	4613      	mov	r3, r2
 8017cec:	009b      	lsls	r3, r3, #2
 8017cee:	4413      	add	r3, r2
 8017cf0:	00db      	lsls	r3, r3, #3
 8017cf2:	440b      	add	r3, r1
 8017cf4:	3350      	adds	r3, #80	; 0x50
 8017cf6:	78ba      	ldrb	r2, [r7, #2]
 8017cf8:	701a      	strb	r2, [r3, #0]
 8017cfa:	e009      	b.n	8017d10 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8017cfc:	78fa      	ldrb	r2, [r7, #3]
 8017cfe:	68f9      	ldr	r1, [r7, #12]
 8017d00:	4613      	mov	r3, r2
 8017d02:	009b      	lsls	r3, r3, #2
 8017d04:	4413      	add	r3, r2
 8017d06:	00db      	lsls	r3, r3, #3
 8017d08:	440b      	add	r3, r1
 8017d0a:	3351      	adds	r3, #81	; 0x51
 8017d0c:	78ba      	ldrb	r2, [r7, #2]
 8017d0e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8017d10:	2300      	movs	r3, #0
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3714      	adds	r7, #20
 8017d16:	46bd      	mov	sp, r7
 8017d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1c:	4770      	bx	lr

08017d1e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8017d1e:	b580      	push	{r7, lr}
 8017d20:	b082      	sub	sp, #8
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	f7ea fcf8 	bl	800271c <HAL_Delay>
}
 8017d2c:	bf00      	nop
 8017d2e:	3708      	adds	r7, #8
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017d34:	b480      	push	{r7}
 8017d36:	b085      	sub	sp, #20
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017d42:	79fb      	ldrb	r3, [r7, #7]
 8017d44:	2b03      	cmp	r3, #3
 8017d46:	d817      	bhi.n	8017d78 <USBH_Get_USB_Status+0x44>
 8017d48:	a201      	add	r2, pc, #4	; (adr r2, 8017d50 <USBH_Get_USB_Status+0x1c>)
 8017d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d4e:	bf00      	nop
 8017d50:	08017d61 	.word	0x08017d61
 8017d54:	08017d67 	.word	0x08017d67
 8017d58:	08017d6d 	.word	0x08017d6d
 8017d5c:	08017d73 	.word	0x08017d73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017d60:	2300      	movs	r3, #0
 8017d62:	73fb      	strb	r3, [r7, #15]
    break;
 8017d64:	e00b      	b.n	8017d7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8017d66:	2302      	movs	r3, #2
 8017d68:	73fb      	strb	r3, [r7, #15]
    break;
 8017d6a:	e008      	b.n	8017d7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8017d70:	e005      	b.n	8017d7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8017d72:	2302      	movs	r3, #2
 8017d74:	73fb      	strb	r3, [r7, #15]
    break;
 8017d76:	e002      	b.n	8017d7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017d78:	2302      	movs	r3, #2
 8017d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8017d7c:	bf00      	nop
  }
  return usb_status;
 8017d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3714      	adds	r7, #20
 8017d84:	46bd      	mov	sp, r7
 8017d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8a:	4770      	bx	lr

08017d8c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{ 
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	4603      	mov	r3, r0
 8017d94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8017d96:	79fb      	ldrb	r3, [r7, #7]
 8017d98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8017d9a:	79fb      	ldrb	r3, [r7, #7]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d102      	bne.n	8017da6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8017da0:	2301      	movs	r3, #1
 8017da2:	73fb      	strb	r3, [r7, #15]
 8017da4:	e001      	b.n	8017daa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8017da6:	2300      	movs	r3, #0
 8017da8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8017daa:	7bfb      	ldrb	r3, [r7, #15]
 8017dac:	461a      	mov	r2, r3
 8017dae:	2110      	movs	r1, #16
 8017db0:	4803      	ldr	r0, [pc, #12]	; (8017dc0 <MX_DriverVbusHS+0x34>)
 8017db2:	f7eb fcd3 	bl	800375c <HAL_GPIO_WritePin>
}
 8017db6:	bf00      	nop
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
 8017dbe:	bf00      	nop
 8017dc0:	40020800 	.word	0x40020800

08017dc4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017dc4:	8880      	ldrh	r0, [r0, #4]
 8017dc6:	4770      	bx	lr

08017dc8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017dc8:	2300      	movs	r3, #0
 8017dca:	8083      	strh	r3, [r0, #4]
 8017dcc:	4770      	bx	lr
	...

08017dd0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dd2:	6803      	ldr	r3, [r0, #0]
 8017dd4:	4604      	mov	r4, r0
 8017dd6:	460e      	mov	r6, r1
 8017dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dda:	2100      	movs	r1, #0
 8017ddc:	4798      	blx	r3
 8017dde:	6823      	ldr	r3, [r4, #0]
 8017de0:	4605      	mov	r5, r0
 8017de2:	6a1b      	ldr	r3, [r3, #32]
 8017de4:	4620      	mov	r0, r4
 8017de6:	4798      	blx	r3
 8017de8:	88a3      	ldrh	r3, [r4, #4]
 8017dea:	1b75      	subs	r5, r6, r5
 8017dec:	b2ad      	uxth	r5, r5
 8017dee:	fbb5 f0f0 	udiv	r0, r5, r0
 8017df2:	4298      	cmp	r0, r3
 8017df4:	b285      	uxth	r5, r0
 8017df6:	db05      	blt.n	8017e04 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 8017df8:	4b0e      	ldr	r3, [pc, #56]	; (8017e34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017dfa:	4a0f      	ldr	r2, [pc, #60]	; (8017e38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017dfc:	211e      	movs	r1, #30
 8017dfe:	480f      	ldr	r0, [pc, #60]	; (8017e3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8017e00:	f007 fca2 	bl	801f748 <__assert_func>
 8017e04:	6823      	ldr	r3, [r4, #0]
 8017e06:	2100      	movs	r1, #0
 8017e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	4798      	blx	r3
 8017e0e:	6823      	ldr	r3, [r4, #0]
 8017e10:	4607      	mov	r7, r0
 8017e12:	6a1b      	ldr	r3, [r3, #32]
 8017e14:	4620      	mov	r0, r4
 8017e16:	4798      	blx	r3
 8017e18:	1bf6      	subs	r6, r6, r7
 8017e1a:	b2b6      	uxth	r6, r6
 8017e1c:	fbb6 f3f0 	udiv	r3, r6, r0
 8017e20:	fb03 6610 	mls	r6, r3, r0, r6
 8017e24:	b11e      	cbz	r6, 8017e2e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 8017e26:	4b06      	ldr	r3, [pc, #24]	; (8017e40 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 8017e28:	4a03      	ldr	r2, [pc, #12]	; (8017e38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017e2a:	211f      	movs	r1, #31
 8017e2c:	e7e7      	b.n	8017dfe <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 8017e2e:	4628      	mov	r0, r5
 8017e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e32:	bf00      	nop
 8017e34:	08022958 	.word	0x08022958
 8017e38:	08022ac6 	.word	0x08022ac6
 8017e3c:	0802296d 	.word	0x0802296d
 8017e40:	0802299b 	.word	0x0802299b

08017e44 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017e44:	b538      	push	{r3, r4, r5, lr}
 8017e46:	6803      	ldr	r3, [r0, #0]
 8017e48:	6a1b      	ldr	r3, [r3, #32]
 8017e4a:	460d      	mov	r5, r1
 8017e4c:	4604      	mov	r4, r0
 8017e4e:	4798      	blx	r3
 8017e50:	4285      	cmp	r5, r0
 8017e52:	d905      	bls.n	8017e60 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017e54:	4b0c      	ldr	r3, [pc, #48]	; (8017e88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017e56:	4a0d      	ldr	r2, [pc, #52]	; (8017e8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017e58:	212f      	movs	r1, #47	; 0x2f
 8017e5a:	480d      	ldr	r0, [pc, #52]	; (8017e90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017e5c:	f007 fc74 	bl	801f748 <__assert_func>
 8017e60:	6823      	ldr	r3, [r4, #0]
 8017e62:	88a5      	ldrh	r5, [r4, #4]
 8017e64:	69db      	ldr	r3, [r3, #28]
 8017e66:	4620      	mov	r0, r4
 8017e68:	4798      	blx	r3
 8017e6a:	4285      	cmp	r5, r0
 8017e6c:	db03      	blt.n	8017e76 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8017e6e:	4b09      	ldr	r3, [pc, #36]	; (8017e94 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8017e70:	4a06      	ldr	r2, [pc, #24]	; (8017e8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017e72:	2130      	movs	r1, #48	; 0x30
 8017e74:	e7f1      	b.n	8017e5a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8017e76:	6823      	ldr	r3, [r4, #0]
 8017e78:	88a1      	ldrh	r1, [r4, #4]
 8017e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	4798      	blx	r3
 8017e80:	88a3      	ldrh	r3, [r4, #4]
 8017e82:	3301      	adds	r3, #1
 8017e84:	80a3      	strh	r3, [r4, #4]
 8017e86:	bd38      	pop	{r3, r4, r5, pc}
 8017e88:	08022a15 	.word	0x08022a15
 8017e8c:	08022b09 	.word	0x08022b09
 8017e90:	0802296d 	.word	0x0802296d
 8017e94:	08022a2c 	.word	0x08022a2c

08017e98 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017e98:	b570      	push	{r4, r5, r6, lr}
 8017e9a:	6803      	ldr	r3, [r0, #0]
 8017e9c:	6a1b      	ldr	r3, [r3, #32]
 8017e9e:	4616      	mov	r6, r2
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	460d      	mov	r5, r1
 8017ea4:	4798      	blx	r3
 8017ea6:	4286      	cmp	r6, r0
 8017ea8:	d905      	bls.n	8017eb6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8017eaa:	4b06      	ldr	r3, [pc, #24]	; (8017ec4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8017eac:	4a06      	ldr	r2, [pc, #24]	; (8017ec8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8017eae:	4807      	ldr	r0, [pc, #28]	; (8017ecc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8017eb0:	2139      	movs	r1, #57	; 0x39
 8017eb2:	f007 fc49 	bl	801f748 <__assert_func>
 8017eb6:	6823      	ldr	r3, [r4, #0]
 8017eb8:	4629      	mov	r1, r5
 8017eba:	4620      	mov	r0, r4
 8017ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ec2:	4718      	bx	r3
 8017ec4:	08022a15 	.word	0x08022a15
 8017ec8:	08022a7c 	.word	0x08022a7c
 8017ecc:	0802296d 	.word	0x0802296d

08017ed0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017ed0:	4770      	bx	lr
	...

08017ed4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017ed4:	4a02      	ldr	r2, [pc, #8]	; (8017ee0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017ed6:	6002      	str	r2, [r0, #0]
 8017ed8:	2200      	movs	r2, #0
 8017eda:	8082      	strh	r2, [r0, #4]
 8017edc:	4770      	bx	lr
 8017ede:	bf00      	nop
 8017ee0:	08022a50 	.word	0x08022a50

08017ee4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8017ee4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017ee8:	4770      	bx	lr

08017eea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017eea:	b513      	push	{r0, r1, r4, lr}
 8017eec:	6803      	ldr	r3, [r0, #0]
 8017eee:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	f8ad 3000 	strh.w	r3, [sp]
 8017ef8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017efc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017f00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f04:	466b      	mov	r3, sp
 8017f06:	47a0      	blx	r4
 8017f08:	b002      	add	sp, #8
 8017f0a:	bd10      	pop	{r4, pc}

08017f0c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017f12:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017f16:	4770      	bx	lr

08017f18 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017f18:	2301      	movs	r3, #1
 8017f1a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017f1e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017f22:	4770      	bx	lr

08017f24 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017f24:	6843      	ldr	r3, [r0, #4]
 8017f26:	2201      	movs	r2, #1
 8017f28:	725a      	strb	r2, [r3, #9]
 8017f2a:	6840      	ldr	r0, [r0, #4]
 8017f2c:	6803      	ldr	r3, [r0, #0]
 8017f2e:	691b      	ldr	r3, [r3, #16]
 8017f30:	4718      	bx	r3

08017f32 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017f32:	6840      	ldr	r0, [r0, #4]
 8017f34:	6803      	ldr	r3, [r0, #0]
 8017f36:	689b      	ldr	r3, [r3, #8]
 8017f38:	4718      	bx	r3

08017f3a <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 8017f3a:	4770      	bx	lr

08017f3c <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 8017f3c:	4608      	mov	r0, r1
 8017f3e:	4770      	bx	lr

08017f40 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 8017f40:	4770      	bx	lr
	...

08017f44 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017f44:	4b04      	ldr	r3, [pc, #16]	; (8017f58 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017f46:	781b      	ldrb	r3, [r3, #0]
 8017f48:	b123      	cbz	r3, 8017f54 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017f4a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017f4e:	f080 0001 	eor.w	r0, r0, #1
 8017f52:	4770      	bx	lr
 8017f54:	2001      	movs	r0, #1
 8017f56:	4770      	bx	lr
 8017f58:	20009abc 	.word	0x20009abc

08017f5c <_ZN8touchgfx3HAL8endFrameEv>:
 8017f5c:	b510      	push	{r4, lr}
 8017f5e:	4604      	mov	r4, r0
 8017f60:	6840      	ldr	r0, [r0, #4]
 8017f62:	6803      	ldr	r3, [r0, #0]
 8017f64:	689b      	ldr	r3, [r3, #8]
 8017f66:	4798      	blx	r3
 8017f68:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017f6c:	b113      	cbz	r3, 8017f74 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017f6e:	2301      	movs	r3, #1
 8017f70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017f74:	bd10      	pop	{r4, pc}

08017f76 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017f76:	b508      	push	{r3, lr}
 8017f78:	6803      	ldr	r3, [r0, #0]
 8017f7a:	4604      	mov	r4, r0
 8017f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017f7e:	4798      	blx	r3
 8017f80:	6823      	ldr	r3, [r4, #0]
 8017f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f84:	4620      	mov	r0, r4
 8017f86:	4798      	blx	r3
 8017f88:	f7f7 f9c8 	bl	800f31c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017f8c:	6823      	ldr	r3, [r4, #0]
 8017f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f90:	e7f8      	b.n	8017f84 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017f94 <_ZN8touchgfx3HAL4tickEv>:
 8017f94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017f96:	6803      	ldr	r3, [r0, #0]
 8017f98:	4d5d      	ldr	r5, [pc, #372]	; (8018110 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	4798      	blx	r3
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	f000 8092 	beq.w	80180cc <_ZN8touchgfx3HAL4tickEv+0x138>
 8017fa8:	2001      	movs	r0, #1
 8017faa:	f7ff fbe1 	bl	8017770 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017fae:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017fb2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017fb6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017fba:	2600      	movs	r6, #0
 8017fbc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017fc0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017fc4:	b133      	cbz	r3, 8017fd4 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017fc6:	6823      	ldr	r3, [r4, #0]
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017fce:	4798      	blx	r3
 8017fd0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017fd4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017fd8:	6862      	ldr	r2, [r4, #4]
 8017fda:	f083 0301 	eor.w	r3, r3, #1
 8017fde:	7253      	strb	r3, [r2, #9]
 8017fe0:	2601      	movs	r6, #1
 8017fe2:	702e      	strb	r6, [r5, #0]
 8017fe4:	f001 fcfc 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 8017fe8:	6803      	ldr	r3, [r0, #0]
 8017fea:	4631      	mov	r1, r6
 8017fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fee:	4798      	blx	r3
 8017ff0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017ff4:	b90b      	cbnz	r3, 8017ffa <_ZN8touchgfx3HAL4tickEv+0x66>
 8017ff6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017ffa:	f001 fcf1 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 8017ffe:	6803      	ldr	r3, [r0, #0]
 8018000:	695b      	ldr	r3, [r3, #20]
 8018002:	4798      	blx	r3
 8018004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018006:	6803      	ldr	r3, [r0, #0]
 8018008:	691b      	ldr	r3, [r3, #16]
 801800a:	4798      	blx	r3
 801800c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018010:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018014:	3b01      	subs	r3, #1
 8018016:	b2db      	uxtb	r3, r3
 8018018:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801801c:	b10a      	cbz	r2, 8018022 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1eb      	bne.n	8017ffa <_ZN8touchgfx3HAL4tickEv+0x66>
 8018022:	4a3c      	ldr	r2, [pc, #240]	; (8018114 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018024:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018028:	7813      	ldrb	r3, [r2, #0]
 801802a:	3301      	adds	r3, #1
 801802c:	b25b      	sxtb	r3, r3
 801802e:	4299      	cmp	r1, r3
 8018030:	7013      	strb	r3, [r2, #0]
 8018032:	dc10      	bgt.n	8018056 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018034:	68e0      	ldr	r0, [r4, #12]
 8018036:	2300      	movs	r3, #0
 8018038:	7013      	strb	r3, [r2, #0]
 801803a:	6803      	ldr	r3, [r0, #0]
 801803c:	aa03      	add	r2, sp, #12
 801803e:	68db      	ldr	r3, [r3, #12]
 8018040:	a902      	add	r1, sp, #8
 8018042:	4798      	blx	r3
 8018044:	6823      	ldr	r3, [r4, #0]
 8018046:	2800      	cmp	r0, #0
 8018048:	d04c      	beq.n	80180e4 <_ZN8touchgfx3HAL4tickEv+0x150>
 801804a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801804e:	9a03      	ldr	r2, [sp, #12]
 8018050:	9902      	ldr	r1, [sp, #8]
 8018052:	4620      	mov	r0, r4
 8018054:	4798      	blx	r3
 8018056:	6960      	ldr	r0, [r4, #20]
 8018058:	2300      	movs	r3, #0
 801805a:	f88d 3007 	strb.w	r3, [sp, #7]
 801805e:	b130      	cbz	r0, 801806e <_ZN8touchgfx3HAL4tickEv+0xda>
 8018060:	6803      	ldr	r3, [r0, #0]
 8018062:	f10d 0107 	add.w	r1, sp, #7
 8018066:	68db      	ldr	r3, [r3, #12]
 8018068:	4798      	blx	r3
 801806a:	2800      	cmp	r0, #0
 801806c:	d149      	bne.n	8018102 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801806e:	f104 001c 	add.w	r0, r4, #28
 8018072:	f007 fa9f 	bl	801f5b4 <_ZN8touchgfx8Gestures4tickEv>
 8018076:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801807a:	b30b      	cbz	r3, 80180c0 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801807c:	6920      	ldr	r0, [r4, #16]
 801807e:	6803      	ldr	r3, [r0, #0]
 8018080:	691b      	ldr	r3, [r3, #16]
 8018082:	4798      	blx	r3
 8018084:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018086:	4606      	mov	r6, r0
 8018088:	b903      	cbnz	r3, 801808c <_ZN8touchgfx3HAL4tickEv+0xf8>
 801808a:	6720      	str	r0, [r4, #112]	; 0x70
 801808c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801808e:	4a22      	ldr	r2, [pc, #136]	; (8018118 <_ZN8touchgfx3HAL4tickEv+0x184>)
 8018090:	1af3      	subs	r3, r6, r3
 8018092:	4293      	cmp	r3, r2
 8018094:	d914      	bls.n	80180c0 <_ZN8touchgfx3HAL4tickEv+0x12c>
 8018096:	6920      	ldr	r0, [r4, #16]
 8018098:	6803      	ldr	r3, [r0, #0]
 801809a:	699b      	ldr	r3, [r3, #24]
 801809c:	4798      	blx	r3
 801809e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80180a0:	2264      	movs	r2, #100	; 0x64
 80180a2:	1af3      	subs	r3, r6, r3
 80180a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80180a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80180ac:	2800      	cmp	r0, #0
 80180ae:	dc1e      	bgt.n	80180ee <_ZN8touchgfx3HAL4tickEv+0x15a>
 80180b0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80180b4:	6920      	ldr	r0, [r4, #16]
 80180b6:	6803      	ldr	r3, [r0, #0]
 80180b8:	2100      	movs	r1, #0
 80180ba:	69db      	ldr	r3, [r3, #28]
 80180bc:	4798      	blx	r3
 80180be:	6726      	str	r6, [r4, #112]	; 0x70
 80180c0:	f001 fc8e 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 80180c4:	6803      	ldr	r3, [r0, #0]
 80180c6:	2100      	movs	r1, #0
 80180c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ca:	4798      	blx	r3
 80180cc:	6823      	ldr	r3, [r4, #0]
 80180ce:	4620      	mov	r0, r4
 80180d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80180d4:	4798      	blx	r3
 80180d6:	2001      	movs	r0, #1
 80180d8:	f7ff fb55 	bl	8017786 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80180dc:	2300      	movs	r3, #0
 80180de:	702b      	strb	r3, [r5, #0]
 80180e0:	b004      	add	sp, #16
 80180e2:	bd70      	pop	{r4, r5, r6, pc}
 80180e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80180e8:	4620      	mov	r0, r4
 80180ea:	4798      	blx	r3
 80180ec:	e7b3      	b.n	8018056 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80180ee:	2863      	cmp	r0, #99	; 0x63
 80180f0:	bfcb      	itete	gt
 80180f2:	2300      	movgt	r3, #0
 80180f4:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80180f8:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80180fc:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018100:	e7d8      	b.n	80180b4 <_ZN8touchgfx3HAL4tickEv+0x120>
 8018102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018104:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018108:	6803      	ldr	r3, [r0, #0]
 801810a:	68db      	ldr	r3, [r3, #12]
 801810c:	4798      	blx	r3
 801810e:	e7ae      	b.n	801806e <_ZN8touchgfx3HAL4tickEv+0xda>
 8018110:	20009ac4 	.word	0x20009ac4
 8018114:	20009ac5 	.word	0x20009ac5
 8018118:	05f5e100 	.word	0x05f5e100

0801811c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801811c:	f7f7 b89e 	b.w	800f25c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018120 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018120:	6581      	str	r1, [r0, #88]	; 0x58
 8018122:	301c      	adds	r0, #28
 8018124:	f007 ba44 	b.w	801f5b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018128 <_ZN8touchgfx3HAL5touchEll>:
 8018128:	b530      	push	{r4, r5, lr}
 801812a:	b085      	sub	sp, #20
 801812c:	4604      	mov	r4, r0
 801812e:	a802      	add	r0, sp, #8
 8018130:	9102      	str	r1, [sp, #8]
 8018132:	9203      	str	r2, [sp, #12]
 8018134:	f001 fa88 	bl	8019648 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018138:	a903      	add	r1, sp, #12
 801813a:	a802      	add	r0, sp, #8
 801813c:	f001 fad2 	bl	80196e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018140:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018144:	9d02      	ldr	r5, [sp, #8]
 8018146:	9b03      	ldr	r3, [sp, #12]
 8018148:	f104 001c 	add.w	r0, r4, #28
 801814c:	b179      	cbz	r1, 801816e <_ZN8touchgfx3HAL5touchEll+0x46>
 801814e:	b29b      	uxth	r3, r3
 8018150:	9300      	str	r3, [sp, #0]
 8018152:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8018156:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801815a:	b2ab      	uxth	r3, r5
 801815c:	f007 fa38 	bl	801f5d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018160:	b118      	cbz	r0, 801816a <_ZN8touchgfx3HAL5touchEll+0x42>
 8018162:	9b02      	ldr	r3, [sp, #8]
 8018164:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018166:	9b03      	ldr	r3, [sp, #12]
 8018168:	6623      	str	r3, [r4, #96]	; 0x60
 801816a:	b005      	add	sp, #20
 801816c:	bd30      	pop	{r4, r5, pc}
 801816e:	b29b      	uxth	r3, r3
 8018170:	b2aa      	uxth	r2, r5
 8018172:	f007 fa71 	bl	801f658 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018176:	2301      	movs	r3, #1
 8018178:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801817c:	e7f1      	b.n	8018162 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801817e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801817e:	b530      	push	{r4, r5, lr}
 8018180:	2b00      	cmp	r3, #0
 8018182:	d04e      	beq.n	8018222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8018184:	ea81 0002 	eor.w	r0, r1, r2
 8018188:	07c0      	lsls	r0, r0, #31
 801818a:	d508      	bpl.n	801819e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801818c:	3a01      	subs	r2, #1
 801818e:	440b      	add	r3, r1
 8018190:	4299      	cmp	r1, r3
 8018192:	d046      	beq.n	8018222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8018194:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018198:	f801 0b01 	strb.w	r0, [r1], #1
 801819c:	e7f8      	b.n	8018190 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801819e:	07d5      	lsls	r5, r2, #31
 80181a0:	bf42      	ittt	mi
 80181a2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80181a6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80181aa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80181ae:	2b01      	cmp	r3, #1
 80181b0:	d915      	bls.n	80181de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80181b2:	ea81 0002 	eor.w	r0, r1, r2
 80181b6:	0784      	lsls	r4, r0, #30
 80181b8:	d01f      	beq.n	80181fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 80181ba:	1e95      	subs	r5, r2, #2
 80181bc:	460c      	mov	r4, r1
 80181be:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 80181c2:	f824 0b02 	strh.w	r0, [r4], #2
 80181c6:	1b18      	subs	r0, r3, r4
 80181c8:	4408      	add	r0, r1
 80181ca:	2801      	cmp	r0, #1
 80181cc:	d8f7      	bhi.n	80181be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 80181ce:	1e98      	subs	r0, r3, #2
 80181d0:	f020 0001 	bic.w	r0, r0, #1
 80181d4:	3002      	adds	r0, #2
 80181d6:	4401      	add	r1, r0
 80181d8:	4402      	add	r2, r0
 80181da:	f003 0301 	and.w	r3, r3, #1
 80181de:	3a01      	subs	r2, #1
 80181e0:	440b      	add	r3, r1
 80181e2:	4299      	cmp	r1, r3
 80181e4:	d01d      	beq.n	8018222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 80181e6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80181ea:	f801 0b01 	strb.w	r0, [r1], #1
 80181ee:	e7f8      	b.n	80181e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 80181f0:	f855 4f04 	ldr.w	r4, [r5, #4]!
 80181f4:	f840 4b04 	str.w	r4, [r0], #4
 80181f8:	e008      	b.n	801820c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80181fa:	0790      	lsls	r0, r2, #30
 80181fc:	d004      	beq.n	8018208 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 80181fe:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018202:	f821 0b02 	strh.w	r0, [r1], #2
 8018206:	3b02      	subs	r3, #2
 8018208:	1f15      	subs	r5, r2, #4
 801820a:	4608      	mov	r0, r1
 801820c:	1a1c      	subs	r4, r3, r0
 801820e:	440c      	add	r4, r1
 8018210:	2c03      	cmp	r4, #3
 8018212:	d8ed      	bhi.n	80181f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 8018214:	f023 0003 	bic.w	r0, r3, #3
 8018218:	4402      	add	r2, r0
 801821a:	4401      	add	r1, r0
 801821c:	f003 0303 	and.w	r3, r3, #3
 8018220:	e7dd      	b.n	80181de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018222:	2001      	movs	r0, #1
 8018224:	bd30      	pop	{r4, r5, pc}

08018226 <_ZN8touchgfx3HAL7noTouchEv>:
 8018226:	b510      	push	{r4, lr}
 8018228:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801822c:	4604      	mov	r4, r0
 801822e:	b153      	cbz	r3, 8018246 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018230:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018234:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018238:	2101      	movs	r1, #1
 801823a:	301c      	adds	r0, #28
 801823c:	f007 fa0c 	bl	801f658 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018240:	2300      	movs	r3, #0
 8018242:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018246:	bd10      	pop	{r4, pc}

08018248 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801824c:	4605      	mov	r5, r0
 801824e:	6980      	ldr	r0, [r0, #24]
 8018250:	b085      	sub	sp, #20
 8018252:	460f      	mov	r7, r1
 8018254:	4690      	mov	r8, r2
 8018256:	4699      	mov	r9, r3
 8018258:	b930      	cbnz	r0, 8018268 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801825a:	4b1f      	ldr	r3, [pc, #124]	; (80182d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801825c:	4a1f      	ldr	r2, [pc, #124]	; (80182dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801825e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8018262:	481f      	ldr	r0, [pc, #124]	; (80182e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8018264:	f007 fa70 	bl	801f748 <__assert_func>
 8018268:	ac04      	add	r4, sp, #16
 801826a:	2600      	movs	r6, #0
 801826c:	f844 6d04 	str.w	r6, [r4, #-4]!
 8018270:	6806      	ldr	r6, [r0, #0]
 8018272:	9401      	str	r4, [sp, #4]
 8018274:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8018278:	9400      	str	r4, [sp, #0]
 801827a:	6834      	ldr	r4, [r6, #0]
 801827c:	47a0      	blx	r4
 801827e:	4c19      	ldr	r4, [pc, #100]	; (80182e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8018280:	4606      	mov	r6, r0
 8018282:	f8a4 9000 	strh.w	r9, [r4]
 8018286:	f7f4 f8c7 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 801828a:	6803      	ldr	r3, [r0, #0]
 801828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801828e:	4798      	blx	r3
 8018290:	280b      	cmp	r0, #11
 8018292:	d80e      	bhi.n	80182b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018294:	e8df f000 	tbb	[pc, r0]
 8018298:	1a1a1106 	.word	0x1a1a1106
 801829c:	1a1a1a1a 	.word	0x1a1a1a1a
 80182a0:	1a1a1a1a 	.word	0x1a1a1a1a
 80182a4:	8823      	ldrh	r3, [r4, #0]
 80182a6:	fb08 7203 	mla	r2, r8, r3, r7
 80182aa:	9b03      	ldr	r3, [sp, #12]
 80182ac:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80182b0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80182b2:	4630      	mov	r0, r6
 80182b4:	b005      	add	sp, #20
 80182b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182ba:	8822      	ldrh	r2, [r4, #0]
 80182bc:	9b03      	ldr	r3, [sp, #12]
 80182be:	fb08 7202 	mla	r2, r8, r2, r7
 80182c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80182c6:	1a9a      	subs	r2, r3, r2
 80182c8:	63ea      	str	r2, [r5, #60]	; 0x3c
 80182ca:	e7f2      	b.n	80182b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80182cc:	4b06      	ldr	r3, [pc, #24]	; (80182e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 80182ce:	4a03      	ldr	r2, [pc, #12]	; (80182dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80182d0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80182d4:	e7c5      	b.n	8018262 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80182d6:	bf00      	nop
 80182d8:	08022bb5 	.word	0x08022bb5
 80182dc:	08022ed2 	.word	0x08022ed2
 80182e0:	08022bfa 	.word	0x08022bfa
 80182e4:	20009ab8 	.word	0x20009ab8
 80182e8:	08022c20 	.word	0x08022c20

080182ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80182ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182f0:	4698      	mov	r8, r3
 80182f2:	6803      	ldr	r3, [r0, #0]
 80182f4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80182f6:	4b10      	ldr	r3, [pc, #64]	; (8018338 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x4c>)
 80182f8:	b087      	sub	sp, #28
 80182fa:	f8b3 9000 	ldrh.w	r9, [r3]
 80182fe:	460e      	mov	r6, r1
 8018300:	4617      	mov	r7, r2
 8018302:	4604      	mov	r4, r0
 8018304:	f7f4 f888 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 8018308:	6803      	ldr	r3, [r0, #0]
 801830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801830c:	4798      	blx	r3
 801830e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018312:	9302      	str	r3, [sp, #8]
 8018314:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018318:	9301      	str	r3, [sp, #4]
 801831a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801831e:	9004      	str	r0, [sp, #16]
 8018320:	9300      	str	r3, [sp, #0]
 8018322:	f8cd 900c 	str.w	r9, [sp, #12]
 8018326:	4643      	mov	r3, r8
 8018328:	463a      	mov	r2, r7
 801832a:	4631      	mov	r1, r6
 801832c:	4620      	mov	r0, r4
 801832e:	47a8      	blx	r5
 8018330:	b007      	add	sp, #28
 8018332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018336:	bf00      	nop
 8018338:	20009ab8 	.word	0x20009ab8

0801833c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018340:	b089      	sub	sp, #36	; 0x24
 8018342:	4606      	mov	r6, r0
 8018344:	4610      	mov	r0, r2
 8018346:	460c      	mov	r4, r1
 8018348:	4691      	mov	r9, r2
 801834a:	9303      	str	r3, [sp, #12]
 801834c:	f003 fc04 	bl	801bb58 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018350:	2800      	cmp	r0, #0
 8018352:	f000 808e 	beq.w	8018472 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x136>
 8018356:	4f4e      	ldr	r7, [pc, #312]	; (8018490 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8018358:	f8df a138 	ldr.w	sl, [pc, #312]	; 8018494 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801835c:	6838      	ldr	r0, [r7, #0]
 801835e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8018498 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8018362:	6802      	ldr	r2, [r0, #0]
 8018364:	6a12      	ldr	r2, [r2, #32]
 8018366:	4790      	blx	r2
 8018368:	6838      	ldr	r0, [r7, #0]
 801836a:	6802      	ldr	r2, [r0, #0]
 801836c:	ad08      	add	r5, sp, #32
 801836e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018370:	4790      	blx	r2
 8018372:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8018376:	f8ba 3000 	ldrh.w	r3, [sl]
 801837a:	9300      	str	r3, [sp, #0]
 801837c:	4628      	mov	r0, r5
 801837e:	f8b8 3000 	ldrh.w	r3, [r8]
 8018382:	9301      	str	r3, [sp, #4]
 8018384:	f003 fca8 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018388:	f8aa 0000 	strh.w	r0, [sl]
 801838c:	4628      	mov	r0, r5
 801838e:	f003 fcdd 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018392:	f8d7 a000 	ldr.w	sl, [r7]
 8018396:	f8a8 0000 	strh.w	r0, [r8]
 801839a:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 801839e:	9302      	str	r3, [sp, #8]
 80183a0:	4648      	mov	r0, r9
 80183a2:	f8da 703c 	ldr.w	r7, [sl, #60]	; 0x3c
 80183a6:	f003 fbd7 	bl	801bb58 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80183aa:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
 80183ae:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 80183b2:	6822      	ldr	r2, [r4, #0]
 80183b4:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80183b8:	f8d2 b034 	ldr.w	fp, [r2, #52]	; 0x34
 80183bc:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80183c0:	2200      	movs	r2, #0
 80183c2:	4611      	mov	r1, r2
 80183c4:	4620      	mov	r0, r4
 80183c6:	47d8      	blx	fp
 80183c8:	2201      	movs	r2, #1
 80183ca:	9b03      	ldr	r3, [sp, #12]
 80183cc:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80183d0:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80183d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80183d8:	1d21      	adds	r1, r4, #4
 80183da:	b11a      	cbz	r2, 80183e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xa8>
 80183dc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80183e0:	2a00      	cmp	r2, #0
 80183e2:	d14b      	bne.n	801847c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 80183e4:	6808      	ldr	r0, [r1, #0]
 80183e6:	6849      	ldr	r1, [r1, #4]
 80183e8:	ab06      	add	r3, sp, #24
 80183ea:	c303      	stmia	r3!, {r0, r1}
 80183ec:	4628      	mov	r0, r5
 80183ee:	f003 fdfd 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 80183f2:	4680      	mov	r8, r0
 80183f4:	f7f4 f810 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 80183f8:	6802      	ldr	r2, [r0, #0]
 80183fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80183fc:	4790      	blx	r2
 80183fe:	4580      	cmp	r8, r0
 8018400:	d03a      	beq.n	8018478 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13c>
 8018402:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8018404:	b150      	cbz	r0, 801841c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 8018406:	4628      	mov	r0, r5
 8018408:	f003 fdf0 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801840c:	4605      	mov	r5, r0
 801840e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8018410:	6803      	ldr	r3, [r0, #0]
 8018412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018414:	4798      	blx	r3
 8018416:	1a2b      	subs	r3, r5, r0
 8018418:	4258      	negs	r0, r3
 801841a:	4158      	adcs	r0, r3
 801841c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8018420:	6822      	ldr	r2, [r4, #0]
 8018422:	6963      	ldr	r3, [r4, #20]
 8018424:	9303      	str	r3, [sp, #12]
 8018426:	2500      	movs	r5, #0
 8018428:	6165      	str	r5, [r4, #20]
 801842a:	4620      	mov	r0, r4
 801842c:	6892      	ldr	r2, [r2, #8]
 801842e:	a906      	add	r1, sp, #24
 8018430:	4790      	blx	r2
 8018432:	9b03      	ldr	r3, [sp, #12]
 8018434:	6163      	str	r3, [r4, #20]
 8018436:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801843a:	6823      	ldr	r3, [r4, #0]
 801843c:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8018440:	4620      	mov	r0, r4
 8018442:	4c13      	ldr	r4, [pc, #76]	; (8018490 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8018444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018446:	4652      	mov	r2, sl
 8018448:	4649      	mov	r1, r9
 801844a:	4798      	blx	r3
 801844c:	6820      	ldr	r0, [r4, #0]
 801844e:	9b02      	ldr	r3, [sp, #8]
 8018450:	6403      	str	r3, [r0, #64]	; 0x40
 8018452:	4b10      	ldr	r3, [pc, #64]	; (8018494 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8018454:	f8bd 2000 	ldrh.w	r2, [sp]
 8018458:	801a      	strh	r2, [r3, #0]
 801845a:	4b0f      	ldr	r3, [pc, #60]	; (8018498 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801845c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018460:	801a      	strh	r2, [r3, #0]
 8018462:	6803      	ldr	r3, [r0, #0]
 8018464:	63c7      	str	r7, [r0, #60]	; 0x3c
 8018466:	6a1b      	ldr	r3, [r3, #32]
 8018468:	4798      	blx	r3
 801846a:	6820      	ldr	r0, [r4, #0]
 801846c:	6803      	ldr	r3, [r0, #0]
 801846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018470:	4798      	blx	r3
 8018472:	b009      	add	sp, #36	; 0x24
 8018474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018478:	2000      	movs	r0, #0
 801847a:	e7cf      	b.n	801841c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 801847c:	6808      	ldr	r0, [r1, #0]
 801847e:	6849      	ldr	r1, [r1, #4]
 8018480:	aa06      	add	r2, sp, #24
 8018482:	c203      	stmia	r2!, {r0, r1}
 8018484:	4619      	mov	r1, r3
 8018486:	a806      	add	r0, sp, #24
 8018488:	f7f4 f8a2 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801848c:	e7ae      	b.n	80183ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xb0>
 801848e:	bf00      	nop
 8018490:	20009ac0 	.word	0x20009ac0
 8018494:	20009ab8 	.word	0x20009ab8
 8018498:	20009aba 	.word	0x20009aba

0801849c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801849c:	b510      	push	{r4, lr}
 801849e:	4b07      	ldr	r3, [pc, #28]	; (80184bc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80184a0:	781b      	ldrb	r3, [r3, #0]
 80184a2:	4604      	mov	r4, r0
 80184a4:	b12b      	cbz	r3, 80184b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 80184a6:	6803      	ldr	r3, [r0, #0]
 80184a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184aa:	4798      	blx	r3
 80184ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80184ae:	4283      	cmp	r3, r0
 80184b0:	d001      	beq.n	80184b6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80184b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80184b4:	bd10      	pop	{r4, pc}
 80184b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80184b8:	bd10      	pop	{r4, pc}
 80184ba:	bf00      	nop
 80184bc:	20009abc 	.word	0x20009abc

080184c0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80184c0:	b510      	push	{r4, lr}
 80184c2:	4b0a      	ldr	r3, [pc, #40]	; (80184ec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	4604      	mov	r4, r0
 80184c8:	b12b      	cbz	r3, 80184d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 80184ca:	f7f6 feb9 	bl	800f240 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80184ce:	4620      	mov	r0, r4
 80184d0:	f7ff ffe4 	bl	801849c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80184d4:	bd10      	pop	{r4, pc}
 80184d6:	6840      	ldr	r0, [r0, #4]
 80184d8:	f000 fbdc 	bl	8018c94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80184dc:	2800      	cmp	r0, #0
 80184de:	d0f4      	beq.n	80184ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 80184e0:	6862      	ldr	r2, [r4, #4]
 80184e2:	7a53      	ldrb	r3, [r2, #9]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d0fc      	beq.n	80184e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80184e8:	e7ef      	b.n	80184ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 80184ea:	bf00      	nop
 80184ec:	20009abc 	.word	0x20009abc

080184f0 <_ZN8touchgfx3HAL10initializeEv>:
 80184f0:	b510      	push	{r4, lr}
 80184f2:	4604      	mov	r4, r0
 80184f4:	f7f6 fe80 	bl	800f1f8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80184f8:	6860      	ldr	r0, [r4, #4]
 80184fa:	6803      	ldr	r3, [r0, #0]
 80184fc:	68db      	ldr	r3, [r3, #12]
 80184fe:	4798      	blx	r3
 8018500:	68e0      	ldr	r0, [r4, #12]
 8018502:	6803      	ldr	r3, [r0, #0]
 8018504:	689b      	ldr	r3, [r3, #8]
 8018506:	4798      	blx	r3
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	4620      	mov	r0, r4
 801850c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801850e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018512:	4718      	bx	r3

08018514 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018514:	b508      	push	{r3, lr}
 8018516:	290b      	cmp	r1, #11
 8018518:	d816      	bhi.n	8018548 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x34>
 801851a:	e8df f001 	tbb	[pc, r1]
 801851e:	080a      	.short	0x080a
 8018520:	0c0c0c06 	.word	0x0c0c0c06
 8018524:	1313130c 	.word	0x1313130c
 8018528:	1313      	.short	0x1313
 801852a:	2020      	movs	r0, #32
 801852c:	bd08      	pop	{r3, pc}
 801852e:	2018      	movs	r0, #24
 8018530:	bd08      	pop	{r3, pc}
 8018532:	2010      	movs	r0, #16
 8018534:	bd08      	pop	{r3, pc}
 8018536:	4b05      	ldr	r3, [pc, #20]	; (801854c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x38>)
 8018538:	4a05      	ldr	r2, [pc, #20]	; (8018550 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801853a:	4806      	ldr	r0, [pc, #24]	; (8018554 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801853c:	f240 213b 	movw	r1, #571	; 0x23b
 8018540:	f007 f902 	bl	801f748 <__assert_func>
 8018544:	2008      	movs	r0, #8
 8018546:	bd08      	pop	{r3, pc}
 8018548:	2000      	movs	r0, #0
 801854a:	bd08      	pop	{r3, pc}
 801854c:	08022cf3 	.word	0x08022cf3
 8018550:	08023094 	.word	0x08023094
 8018554:	08022bfa 	.word	0x08022bfa

08018558 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018558:	b570      	push	{r4, r5, r6, lr}
 801855a:	460d      	mov	r5, r1
 801855c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018560:	4616      	mov	r6, r2
 8018562:	461c      	mov	r4, r3
 8018564:	f7ff ffd6 	bl	8018514 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018568:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801856c:	10c0      	asrs	r0, r0, #3
 801856e:	fb06 5101 	mla	r1, r6, r1, r5
 8018572:	fb00 4001 	mla	r0, r0, r1, r4
 8018576:	bd70      	pop	{r4, r5, r6, pc}

08018578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8018578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801857c:	b08a      	sub	sp, #40	; 0x28
 801857e:	f04f 0e00 	mov.w	lr, #0
 8018582:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8018586:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801858a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801858e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018592:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8018596:	f8cd e020 	str.w	lr, [sp, #32]
 801859a:	f1b8 0f02 	cmp.w	r8, #2
 801859e:	4604      	mov	r4, r0
 80185a0:	469a      	mov	sl, r3
 80185a2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80185a6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80185aa:	d031      	beq.n	8018610 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 80185ac:	2bff      	cmp	r3, #255	; 0xff
 80185ae:	d12d      	bne.n	801860c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x94>
 80185b0:	4570      	cmp	r0, lr
 80185b2:	bf14      	ite	ne
 80185b4:	2004      	movne	r0, #4
 80185b6:	2001      	moveq	r0, #1
 80185b8:	9002      	str	r0, [sp, #8]
 80185ba:	9204      	str	r2, [sp, #16]
 80185bc:	4620      	mov	r0, r4
 80185be:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80185c2:	9103      	str	r1, [sp, #12]
 80185c4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80185c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80185cc:	f8ad 6018 	strh.w	r6, [sp, #24]
 80185d0:	f8ad 501a 	strh.w	r5, [sp, #26]
 80185d4:	f7ff ff62 	bl	801849c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80185d8:	9701      	str	r7, [sp, #4]
 80185da:	4603      	mov	r3, r0
 80185dc:	f8cd 9000 	str.w	r9, [sp]
 80185e0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80185e4:	4651      	mov	r1, sl
 80185e6:	4620      	mov	r0, r4
 80185e8:	f7ff ffb6 	bl	8018558 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80185ec:	f8ad 901e 	strh.w	r9, [sp, #30]
 80185f0:	9005      	str	r0, [sp, #20]
 80185f2:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80185f6:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80185fa:	b106      	cbz	r6, 80185fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 80185fc:	b98d      	cbnz	r5, 8018622 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 80185fe:	4b13      	ldr	r3, [pc, #76]	; (801864c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8018600:	4a13      	ldr	r2, [pc, #76]	; (8018650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8018602:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8018606:	4813      	ldr	r0, [pc, #76]	; (8018654 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8018608:	f007 f89e 	bl	801f748 <__assert_func>
 801860c:	2004      	movs	r0, #4
 801860e:	e7d3      	b.n	80185b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018610:	2bff      	cmp	r3, #255	; 0xff
 8018612:	d104      	bne.n	801861e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa6>
 8018614:	2800      	cmp	r0, #0
 8018616:	bf14      	ite	ne
 8018618:	2040      	movne	r0, #64	; 0x40
 801861a:	2020      	moveq	r0, #32
 801861c:	e7cc      	b.n	80185b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801861e:	2040      	movs	r0, #64	; 0x40
 8018620:	e7ca      	b.n	80185b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018622:	6823      	ldr	r3, [r4, #0]
 8018624:	9d02      	ldr	r5, [sp, #8]
 8018626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018628:	4620      	mov	r0, r4
 801862a:	4798      	blx	r3
 801862c:	4228      	tst	r0, r5
 801862e:	d104      	bne.n	801863a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc2>
 8018630:	4b09      	ldr	r3, [pc, #36]	; (8018658 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8018632:	4a07      	ldr	r2, [pc, #28]	; (8018650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8018634:	f240 11bd 	movw	r1, #445	; 0x1bd
 8018638:	e7e5      	b.n	8018606 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8e>
 801863a:	6860      	ldr	r0, [r4, #4]
 801863c:	6803      	ldr	r3, [r0, #0]
 801863e:	a902      	add	r1, sp, #8
 8018640:	685b      	ldr	r3, [r3, #4]
 8018642:	4798      	blx	r3
 8018644:	b00a      	add	sp, #40	; 0x28
 8018646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801864a:	bf00      	nop
 801864c:	08022c76 	.word	0x08022c76
 8018650:	08022f36 	.word	0x08022f36
 8018654:	08022bfa 	.word	0x08022bfa
 8018658:	08022cae 	.word	0x08022cae

0801865c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801865c:	b510      	push	{r4, lr}
 801865e:	b08a      	sub	sp, #40	; 0x28
 8018660:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8018664:	9408      	str	r4, [sp, #32]
 8018666:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801866a:	9407      	str	r4, [sp, #28]
 801866c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8018670:	9406      	str	r4, [sp, #24]
 8018672:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8018676:	9405      	str	r4, [sp, #20]
 8018678:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801867c:	9404      	str	r4, [sp, #16]
 801867e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8018682:	9403      	str	r4, [sp, #12]
 8018684:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8018688:	9402      	str	r4, [sp, #8]
 801868a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801868e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8018692:	4613      	mov	r3, r2
 8018694:	2200      	movs	r2, #0
 8018696:	f7ff ff6f 	bl	8018578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801869a:	b00a      	add	sp, #40	; 0x28
 801869c:	bd10      	pop	{r4, pc}
	...

080186a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80186a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186a2:	b08b      	sub	sp, #44	; 0x2c
 80186a4:	4616      	mov	r6, r2
 80186a6:	460d      	mov	r5, r1
 80186a8:	461f      	mov	r7, r3
 80186aa:	4604      	mov	r4, r0
 80186ac:	f7f3 feb4 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 80186b0:	6803      	ldr	r3, [r0, #0]
 80186b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186b4:	4798      	blx	r3
 80186b6:	4b0e      	ldr	r3, [pc, #56]	; (80186f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80186b8:	9008      	str	r0, [sp, #32]
 80186ba:	9007      	str	r0, [sp, #28]
 80186bc:	881b      	ldrh	r3, [r3, #0]
 80186be:	9306      	str	r3, [sp, #24]
 80186c0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80186c4:	9305      	str	r3, [sp, #20]
 80186c6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80186ca:	9304      	str	r3, [sp, #16]
 80186cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80186d0:	9303      	str	r3, [sp, #12]
 80186d2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80186d6:	9302      	str	r3, [sp, #8]
 80186d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80186dc:	9301      	str	r3, [sp, #4]
 80186de:	9700      	str	r7, [sp, #0]
 80186e0:	4633      	mov	r3, r6
 80186e2:	2200      	movs	r2, #0
 80186e4:	4629      	mov	r1, r5
 80186e6:	4620      	mov	r0, r4
 80186e8:	f7ff ff46 	bl	8018578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80186ec:	b00b      	add	sp, #44	; 0x2c
 80186ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186f0:	20009ab8 	.word	0x20009ab8

080186f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80186f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186f8:	461f      	mov	r7, r3
 80186fa:	4b14      	ldr	r3, [pc, #80]	; (801874c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80186fc:	b08a      	sub	sp, #40	; 0x28
 80186fe:	4616      	mov	r6, r2
 8018700:	f8b3 8000 	ldrh.w	r8, [r3]
 8018704:	460d      	mov	r5, r1
 8018706:	4604      	mov	r4, r0
 8018708:	f7f3 fe86 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 801870c:	6803      	ldr	r3, [r0, #0]
 801870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018710:	4798      	blx	r3
 8018712:	2302      	movs	r3, #2
 8018714:	9307      	str	r3, [sp, #28]
 8018716:	2301      	movs	r3, #1
 8018718:	9305      	str	r3, [sp, #20]
 801871a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801871e:	9304      	str	r3, [sp, #16]
 8018720:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018724:	9303      	str	r3, [sp, #12]
 8018726:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801872a:	9302      	str	r3, [sp, #8]
 801872c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018730:	9008      	str	r0, [sp, #32]
 8018732:	9301      	str	r3, [sp, #4]
 8018734:	f8cd 8018 	str.w	r8, [sp, #24]
 8018738:	9700      	str	r7, [sp, #0]
 801873a:	4633      	mov	r3, r6
 801873c:	2200      	movs	r2, #0
 801873e:	4629      	mov	r1, r5
 8018740:	4620      	mov	r0, r4
 8018742:	f7ff ff19 	bl	8018578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018746:	b00a      	add	sp, #40	; 0x28
 8018748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801874c:	20009ab8 	.word	0x20009ab8

08018750 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8018750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018754:	b08b      	sub	sp, #44	; 0x2c
 8018756:	469b      	mov	fp, r3
 8018758:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801875c:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018760:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018764:	2fff      	cmp	r7, #255	; 0xff
 8018766:	bf0c      	ite	eq
 8018768:	2302      	moveq	r3, #2
 801876a:	2308      	movne	r3, #8
 801876c:	2600      	movs	r6, #0
 801876e:	4604      	mov	r4, r0
 8018770:	4689      	mov	r9, r1
 8018772:	4692      	mov	sl, r2
 8018774:	9302      	str	r3, [sp, #8]
 8018776:	9608      	str	r6, [sp, #32]
 8018778:	9603      	str	r6, [sp, #12]
 801877a:	f7ff fe8f 	bl	801849c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801877e:	9501      	str	r5, [sp, #4]
 8018780:	4603      	mov	r3, r0
 8018782:	465a      	mov	r2, fp
 8018784:	4651      	mov	r1, sl
 8018786:	f8cd 8000 	str.w	r8, [sp]
 801878a:	4620      	mov	r0, r4
 801878c:	f7ff fee4 	bl	8018558 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018790:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018794:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018798:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801879c:	f8ad 301a 	strh.w	r3, [sp, #26]
 80187a0:	6823      	ldr	r3, [r4, #0]
 80187a2:	9005      	str	r0, [sp, #20]
 80187a4:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80187a8:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80187ac:	f8ad 601c 	strh.w	r6, [sp, #28]
 80187b0:	f8ad 801e 	strh.w	r8, [sp, #30]
 80187b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80187b8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80187bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187be:	9d02      	ldr	r5, [sp, #8]
 80187c0:	4620      	mov	r0, r4
 80187c2:	4798      	blx	r3
 80187c4:	4228      	tst	r0, r5
 80187c6:	d106      	bne.n	80187d6 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x86>
 80187c8:	4b07      	ldr	r3, [pc, #28]	; (80187e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80187ca:	4a08      	ldr	r2, [pc, #32]	; (80187ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80187cc:	4808      	ldr	r0, [pc, #32]	; (80187f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0xa0>)
 80187ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80187d2:	f006 ffb9 	bl	801f748 <__assert_func>
 80187d6:	6860      	ldr	r0, [r4, #4]
 80187d8:	6803      	ldr	r3, [r0, #0]
 80187da:	a902      	add	r1, sp, #8
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	4798      	blx	r3
 80187e0:	b00b      	add	sp, #44	; 0x2c
 80187e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187e6:	bf00      	nop
 80187e8:	08022cae 	.word	0x08022cae
 80187ec:	08022fff 	.word	0x08022fff
 80187f0:	08022bfa 	.word	0x08022bfa

080187f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80187f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80187f8:	461f      	mov	r7, r3
 80187fa:	4b0b      	ldr	r3, [pc, #44]	; (8018828 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80187fc:	460d      	mov	r5, r1
 80187fe:	f8b3 8000 	ldrh.w	r8, [r3]
 8018802:	4616      	mov	r6, r2
 8018804:	4604      	mov	r4, r0
 8018806:	f7f3 fe07 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 801880a:	6803      	ldr	r3, [r0, #0]
 801880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801880e:	4798      	blx	r3
 8018810:	f8cd 8000 	str.w	r8, [sp]
 8018814:	9001      	str	r0, [sp, #4]
 8018816:	463b      	mov	r3, r7
 8018818:	4632      	mov	r2, r6
 801881a:	4629      	mov	r1, r5
 801881c:	4620      	mov	r0, r4
 801881e:	f7ff fe9b 	bl	8018558 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018822:	b002      	add	sp, #8
 8018824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018828:	20009ab8 	.word	0x20009ab8

0801882c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018830:	b088      	sub	sp, #32
 8018832:	4698      	mov	r8, r3
 8018834:	2300      	movs	r3, #0
 8018836:	9306      	str	r3, [sp, #24]
 8018838:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801883c:	9300      	str	r3, [sp, #0]
 801883e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018842:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018846:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801884a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801884e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018852:	9101      	str	r1, [sp, #4]
 8018854:	4617      	mov	r7, r2
 8018856:	4604      	mov	r4, r0
 8018858:	f88d 301c 	strb.w	r3, [sp, #28]
 801885c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8018860:	f8ad 5012 	strh.w	r5, [sp, #18]
 8018864:	f7ff fe1a 	bl	801849c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018868:	4642      	mov	r2, r8
 801886a:	4603      	mov	r3, r0
 801886c:	4639      	mov	r1, r7
 801886e:	4620      	mov	r0, r4
 8018870:	f7ff ffc0 	bl	80187f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018874:	4b16      	ldr	r3, [pc, #88]	; (80188d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8018876:	9003      	str	r0, [sp, #12]
 8018878:	881b      	ldrh	r3, [r3, #0]
 801887a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801887e:	f7f3 fdcb 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 8018882:	6803      	ldr	r3, [r0, #0]
 8018884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018886:	4798      	blx	r3
 8018888:	f88d 001e 	strb.w	r0, [sp, #30]
 801888c:	f88d 001d 	strb.w	r0, [sp, #29]
 8018890:	b106      	cbz	r6, 8018894 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8018892:	b935      	cbnz	r5, 80188a2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8018894:	4b0f      	ldr	r3, [pc, #60]	; (80188d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8018896:	4a10      	ldr	r2, [pc, #64]	; (80188d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8018898:	f240 11d9 	movw	r1, #473	; 0x1d9
 801889c:	480f      	ldr	r0, [pc, #60]	; (80188dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801889e:	f006 ff53 	bl	801f748 <__assert_func>
 80188a2:	6823      	ldr	r3, [r4, #0]
 80188a4:	9d00      	ldr	r5, [sp, #0]
 80188a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188a8:	4620      	mov	r0, r4
 80188aa:	4798      	blx	r3
 80188ac:	4228      	tst	r0, r5
 80188ae:	d104      	bne.n	80188ba <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80188b0:	4b0b      	ldr	r3, [pc, #44]	; (80188e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80188b2:	4a09      	ldr	r2, [pc, #36]	; (80188d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80188b4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80188b8:	e7f0      	b.n	801889c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80188ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80188bc:	6860      	ldr	r0, [r4, #4]
 80188be:	9306      	str	r3, [sp, #24]
 80188c0:	6803      	ldr	r3, [r0, #0]
 80188c2:	4669      	mov	r1, sp
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	4798      	blx	r3
 80188c8:	b008      	add	sp, #32
 80188ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188ce:	bf00      	nop
 80188d0:	20009ab8 	.word	0x20009ab8
 80188d4:	08022c76 	.word	0x08022c76
 80188d8:	08022de8 	.word	0x08022de8
 80188dc:	08022bfa 	.word	0x08022bfa
 80188e0:	08022cae 	.word	0x08022cae

080188e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80188e4:	b570      	push	{r4, r5, r6, lr}
 80188e6:	4b22      	ldr	r3, [pc, #136]	; (8018970 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	b08a      	sub	sp, #40	; 0x28
 80188ec:	4604      	mov	r4, r0
 80188ee:	e88d 0006 	stmia.w	sp, {r1, r2}
 80188f2:	b933      	cbnz	r3, 8018902 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 80188f4:	4b1f      	ldr	r3, [pc, #124]	; (8018974 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80188f6:	4a20      	ldr	r2, [pc, #128]	; (8018978 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80188f8:	4820      	ldr	r0, [pc, #128]	; (801897c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80188fa:	f240 2105 	movw	r1, #517	; 0x205
 80188fe:	f006 ff23 	bl	801f748 <__assert_func>
 8018902:	2300      	movs	r3, #0
 8018904:	9308      	str	r3, [sp, #32]
 8018906:	2301      	movs	r3, #1
 8018908:	9302      	str	r3, [sp, #8]
 801890a:	6803      	ldr	r3, [r0, #0]
 801890c:	f8bd 5000 	ldrh.w	r5, [sp]
 8018910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018912:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8018916:	4798      	blx	r3
 8018918:	4632      	mov	r2, r6
 801891a:	4629      	mov	r1, r5
 801891c:	4603      	mov	r3, r0
 801891e:	4620      	mov	r0, r4
 8018920:	f7ff ff68 	bl	80187f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018924:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018926:	9305      	str	r3, [sp, #20]
 8018928:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801892c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018930:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018934:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018938:	4b11      	ldr	r3, [pc, #68]	; (8018980 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801893a:	9003      	str	r0, [sp, #12]
 801893c:	881b      	ldrh	r3, [r3, #0]
 801893e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018942:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018946:	f7f3 fd67 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 801894a:	6803      	ldr	r3, [r0, #0]
 801894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801894e:	4798      	blx	r3
 8018950:	23ff      	movs	r3, #255	; 0xff
 8018952:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018956:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801895a:	6860      	ldr	r0, [r4, #4]
 801895c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018960:	6803      	ldr	r3, [r0, #0]
 8018962:	a902      	add	r1, sp, #8
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	4798      	blx	r3
 8018968:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801896a:	b00a      	add	sp, #40	; 0x28
 801896c:	bd70      	pop	{r4, r5, r6, pc}
 801896e:	bf00      	nop
 8018970:	20009abd 	.word	0x20009abd
 8018974:	08022b47 	.word	0x08022b47
 8018978:	08022e8c 	.word	0x08022e8c
 801897c:	08022bfa 	.word	0x08022bfa
 8018980:	20009ab8 	.word	0x20009ab8

08018984 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018986:	b08b      	sub	sp, #44	; 0x2c
 8018988:	461d      	mov	r5, r3
 801898a:	2300      	movs	r3, #0
 801898c:	9308      	str	r3, [sp, #32]
 801898e:	2301      	movs	r3, #1
 8018990:	e88d 0006 	stmia.w	sp, {r1, r2}
 8018994:	9302      	str	r3, [sp, #8]
 8018996:	6803      	ldr	r3, [r0, #0]
 8018998:	f8bd 6000 	ldrh.w	r6, [sp]
 801899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801899e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80189a2:	4604      	mov	r4, r0
 80189a4:	4798      	blx	r3
 80189a6:	463a      	mov	r2, r7
 80189a8:	4631      	mov	r1, r6
 80189aa:	4603      	mov	r3, r0
 80189ac:	4620      	mov	r0, r4
 80189ae:	f7ff ff21 	bl	80187f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80189b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80189b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80189ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80189be:	f8ad 301a 	strh.w	r3, [sp, #26]
 80189c2:	4b0e      	ldr	r3, [pc, #56]	; (80189fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x78>)
 80189c4:	9003      	str	r0, [sp, #12]
 80189c6:	881b      	ldrh	r3, [r3, #0]
 80189c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80189cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 80189d2:	9505      	str	r5, [sp, #20]
 80189d4:	f7f3 fd20 	bl	800c418 <_ZN8touchgfx3HAL3lcdEv>
 80189d8:	6803      	ldr	r3, [r0, #0]
 80189da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189dc:	4798      	blx	r3
 80189de:	23ff      	movs	r3, #255	; 0xff
 80189e0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80189e4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80189e8:	6860      	ldr	r0, [r4, #4]
 80189ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80189ee:	6803      	ldr	r3, [r0, #0]
 80189f0:	a902      	add	r1, sp, #8
 80189f2:	685b      	ldr	r3, [r3, #4]
 80189f4:	4798      	blx	r3
 80189f6:	4628      	mov	r0, r5
 80189f8:	b00b      	add	sp, #44	; 0x2c
 80189fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189fc:	20009ab8 	.word	0x20009ab8

08018a00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018a00:	b570      	push	{r4, r5, r6, lr}
 8018a02:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018a06:	4604      	mov	r4, r0
 8018a08:	b19b      	cbz	r3, 8018a32 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018a0a:	2002      	movs	r0, #2
 8018a0c:	f7fe fec6 	bl	801779c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018a10:	2300      	movs	r3, #0
 8018a12:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018a16:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018a1a:	6823      	ldr	r3, [r4, #0]
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 8018a22:	f7ff fd3b 	bl	801849c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018a26:	462b      	mov	r3, r5
 8018a28:	4601      	mov	r1, r0
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a30:	4718      	bx	r3
 8018a32:	bd70      	pop	{r4, r5, r6, pc}

08018a34 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8018a34:	b570      	push	{r4, r5, r6, lr}
 8018a36:	4605      	mov	r5, r0
 8018a38:	460c      	mov	r4, r1
 8018a3a:	2003      	movs	r0, #3
 8018a3c:	b149      	cbz	r1, 8018a52 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8018a3e:	f7fe fe97 	bl	8017770 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018a42:	6928      	ldr	r0, [r5, #16]
 8018a44:	b168      	cbz	r0, 8018a62 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018a46:	6803      	ldr	r3, [r0, #0]
 8018a48:	695b      	ldr	r3, [r3, #20]
 8018a4a:	2101      	movs	r1, #1
 8018a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a50:	4718      	bx	r3
 8018a52:	f7fe fe98 	bl	8017786 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018a56:	6928      	ldr	r0, [r5, #16]
 8018a58:	b118      	cbz	r0, 8018a62 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018a5a:	6803      	ldr	r3, [r0, #0]
 8018a5c:	4621      	mov	r1, r4
 8018a5e:	695b      	ldr	r3, [r3, #20]
 8018a60:	e7f4      	b.n	8018a4c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8018a62:	bd70      	pop	{r4, r5, r6, pc}

08018a64 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018a64:	4770      	bx	lr

08018a66 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018a66:	68c2      	ldr	r2, [r0, #12]
 8018a68:	6900      	ldr	r0, [r0, #16]
 8018a6a:	1a13      	subs	r3, r2, r0
 8018a6c:	4258      	negs	r0, r3
 8018a6e:	4158      	adcs	r0, r3
 8018a70:	4770      	bx	lr

08018a72 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018a72:	68c2      	ldr	r2, [r0, #12]
 8018a74:	6903      	ldr	r3, [r0, #16]
 8018a76:	1a9b      	subs	r3, r3, r2
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	bfdc      	itt	le
 8018a7c:	6882      	ldrle	r2, [r0, #8]
 8018a7e:	189b      	addle	r3, r3, r2
 8018a80:	2b01      	cmp	r3, #1
 8018a82:	bfcc      	ite	gt
 8018a84:	2000      	movgt	r0, #0
 8018a86:	2001      	movle	r0, #1
 8018a88:	4770      	bx	lr

08018a8a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018a8a:	6902      	ldr	r2, [r0, #16]
 8018a8c:	6840      	ldr	r0, [r0, #4]
 8018a8e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018a92:	4770      	bx	lr

08018a94 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018a94:	6803      	ldr	r3, [r0, #0]
 8018a96:	691b      	ldr	r3, [r3, #16]
 8018a98:	4718      	bx	r3

08018a9a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018a9a:	4770      	bx	lr

08018a9c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018a9c:	4770      	bx	lr
	...

08018aa0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018aa0:	b570      	push	{r4, r5, r6, lr}
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	7203      	strb	r3, [r0, #8]
 8018aa6:	4604      	mov	r4, r0
 8018aa8:	6840      	ldr	r0, [r0, #4]
 8018aaa:	6803      	ldr	r3, [r0, #0]
 8018aac:	699b      	ldr	r3, [r3, #24]
 8018aae:	4798      	blx	r3
 8018ab0:	6803      	ldr	r3, [r0, #0]
 8018ab2:	2b08      	cmp	r3, #8
 8018ab4:	4605      	mov	r5, r0
 8018ab6:	d01e      	beq.n	8018af6 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8018ab8:	d80b      	bhi.n	8018ad2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018aba:	2b02      	cmp	r3, #2
 8018abc:	d027      	beq.n	8018b0e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8018abe:	2b04      	cmp	r3, #4
 8018ac0:	d011      	beq.n	8018ae6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8018ac2:	2b01      	cmp	r3, #1
 8018ac4:	d028      	beq.n	8018b18 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018ac6:	4b17      	ldr	r3, [pc, #92]	; (8018b24 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8018ac8:	4a17      	ldr	r2, [pc, #92]	; (8018b28 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8018aca:	4818      	ldr	r0, [pc, #96]	; (8018b2c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8018acc:	218b      	movs	r1, #139	; 0x8b
 8018ace:	f006 fe3b 	bl	801f748 <__assert_func>
 8018ad2:	2b40      	cmp	r3, #64	; 0x40
 8018ad4:	d020      	beq.n	8018b18 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018ad6:	d801      	bhi.n	8018adc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018ad8:	2b20      	cmp	r3, #32
 8018ada:	e7f3      	b.n	8018ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018adc:	2b80      	cmp	r3, #128	; 0x80
 8018ade:	d01b      	beq.n	8018b18 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018ae4:	e7ee      	b.n	8018ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018ae6:	6823      	ldr	r3, [r4, #0]
 8018ae8:	7f01      	ldrb	r1, [r0, #28]
 8018aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018aec:	4620      	mov	r0, r4
 8018aee:	4798      	blx	r3
 8018af0:	6823      	ldr	r3, [r4, #0]
 8018af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018af4:	e006      	b.n	8018b04 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018af6:	6823      	ldr	r3, [r4, #0]
 8018af8:	7f01      	ldrb	r1, [r0, #28]
 8018afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018afc:	4620      	mov	r0, r4
 8018afe:	4798      	blx	r3
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b04:	4629      	mov	r1, r5
 8018b06:	4620      	mov	r0, r4
 8018b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b0c:	4718      	bx	r3
 8018b0e:	6823      	ldr	r3, [r4, #0]
 8018b10:	4620      	mov	r0, r4
 8018b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b14:	4798      	blx	r3
 8018b16:	e7f3      	b.n	8018b00 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8018b18:	6823      	ldr	r3, [r4, #0]
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b1e:	4798      	blx	r3
 8018b20:	e7e6      	b.n	8018af0 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8018b22:	bf00      	nop
 8018b24:	080230dd 	.word	0x080230dd
 8018b28:	080231ec 	.word	0x080231ec
 8018b2c:	08023102 	.word	0x08023102

08018b30 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018b30:	b570      	push	{r4, r5, r6, lr}
 8018b32:	4604      	mov	r4, r0
 8018b34:	460e      	mov	r6, r1
 8018b36:	6860      	ldr	r0, [r4, #4]
 8018b38:	6803      	ldr	r3, [r0, #0]
 8018b3a:	685b      	ldr	r3, [r3, #4]
 8018b3c:	4798      	blx	r3
 8018b3e:	2800      	cmp	r0, #0
 8018b40:	d1f9      	bne.n	8018b36 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018b42:	4d0b      	ldr	r5, [pc, #44]	; (8018b70 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8018b44:	6828      	ldr	r0, [r5, #0]
 8018b46:	6803      	ldr	r3, [r0, #0]
 8018b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b4a:	4798      	blx	r3
 8018b4c:	f7f6 fb94 	bl	800f278 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018b50:	6860      	ldr	r0, [r4, #4]
 8018b52:	6803      	ldr	r3, [r0, #0]
 8018b54:	4631      	mov	r1, r6
 8018b56:	689b      	ldr	r3, [r3, #8]
 8018b58:	4798      	blx	r3
 8018b5a:	6823      	ldr	r3, [r4, #0]
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b60:	4798      	blx	r3
 8018b62:	6828      	ldr	r0, [r5, #0]
 8018b64:	6803      	ldr	r3, [r0, #0]
 8018b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018b6c:	4718      	bx	r3
 8018b6e:	bf00      	nop
 8018b70:	20009ac0 	.word	0x20009ac0

08018b74 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018b74:	b508      	push	{r3, lr}
 8018b76:	f7f6 fb63 	bl	800f240 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018b7e:	f7f6 bb6d 	b.w	800f25c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018b82 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018b82:	b570      	push	{r4, r5, r6, lr}
 8018b84:	4604      	mov	r4, r0
 8018b86:	6840      	ldr	r0, [r0, #4]
 8018b88:	6803      	ldr	r3, [r0, #0]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	4798      	blx	r3
 8018b8e:	4605      	mov	r5, r0
 8018b90:	b908      	cbnz	r0, 8018b96 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 8018b92:	7a23      	ldrb	r3, [r4, #8]
 8018b94:	b973      	cbnz	r3, 8018bb4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 8018b96:	6860      	ldr	r0, [r4, #4]
 8018b98:	6803      	ldr	r3, [r0, #0]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	4798      	blx	r3
 8018b9e:	b928      	cbnz	r0, 8018bac <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 8018ba0:	6823      	ldr	r3, [r4, #0]
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018baa:	4718      	bx	r3
 8018bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bb0:	f7f6 bb6e 	b.w	800f290 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 8018bb4:	6860      	ldr	r0, [r4, #4]
 8018bb6:	6803      	ldr	r3, [r0, #0]
 8018bb8:	695b      	ldr	r3, [r3, #20]
 8018bba:	4798      	blx	r3
 8018bbc:	7225      	strb	r5, [r4, #8]
 8018bbe:	e7ea      	b.n	8018b96 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

08018bc0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018bc0:	b510      	push	{r4, lr}
 8018bc2:	68c4      	ldr	r4, [r0, #12]
 8018bc4:	6902      	ldr	r2, [r0, #16]
 8018bc6:	1b12      	subs	r2, r2, r4
 8018bc8:	2a00      	cmp	r2, #0
 8018bca:	bfdc      	itt	le
 8018bcc:	6883      	ldrle	r3, [r0, #8]
 8018bce:	18d2      	addle	r2, r2, r3
 8018bd0:	2a01      	cmp	r2, #1
 8018bd2:	dd18      	ble.n	8018c06 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8018bd4:	6843      	ldr	r3, [r0, #4]
 8018bd6:	f101 021c 	add.w	r2, r1, #28
 8018bda:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8018bde:	f851 4b04 	ldr.w	r4, [r1], #4
 8018be2:	f843 4b04 	str.w	r4, [r3], #4
 8018be6:	4291      	cmp	r1, r2
 8018be8:	d1f9      	bne.n	8018bde <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8018bea:	880a      	ldrh	r2, [r1, #0]
 8018bec:	801a      	strh	r2, [r3, #0]
 8018bee:	788a      	ldrb	r2, [r1, #2]
 8018bf0:	709a      	strb	r2, [r3, #2]
 8018bf2:	68c3      	ldr	r3, [r0, #12]
 8018bf4:	6882      	ldr	r2, [r0, #8]
 8018bf6:	f3bf 8f5b 	dmb	ish
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	4293      	cmp	r3, r2
 8018bfe:	bfa8      	it	ge
 8018c00:	1a9b      	subge	r3, r3, r2
 8018c02:	60c3      	str	r3, [r0, #12]
 8018c04:	bd10      	pop	{r4, pc}
 8018c06:	4b03      	ldr	r3, [pc, #12]	; (8018c14 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8018c08:	4a03      	ldr	r2, [pc, #12]	; (8018c18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8018c0a:	4804      	ldr	r0, [pc, #16]	; (8018c1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8018c0c:	2139      	movs	r1, #57	; 0x39
 8018c0e:	f006 fd9b 	bl	801f748 <__assert_func>
 8018c12:	bf00      	nop
 8018c14:	08023128 	.word	0x08023128
 8018c18:	0802321c 	.word	0x0802321c
 8018c1c:	08023102 	.word	0x08023102

08018c20 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018c20:	b510      	push	{r4, lr}
 8018c22:	6803      	ldr	r3, [r0, #0]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	4604      	mov	r4, r0
 8018c28:	4798      	blx	r3
 8018c2a:	b128      	cbz	r0, 8018c38 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018c2c:	4b07      	ldr	r3, [pc, #28]	; (8018c4c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8018c2e:	4a08      	ldr	r2, [pc, #32]	; (8018c50 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018c30:	4808      	ldr	r0, [pc, #32]	; (8018c54 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018c32:	213f      	movs	r1, #63	; 0x3f
 8018c34:	f006 fd88 	bl	801f748 <__assert_func>
 8018c38:	6923      	ldr	r3, [r4, #16]
 8018c3a:	68a2      	ldr	r2, [r4, #8]
 8018c3c:	f3bf 8f5b 	dmb	ish
 8018c40:	3301      	adds	r3, #1
 8018c42:	4293      	cmp	r3, r2
 8018c44:	bfa8      	it	ge
 8018c46:	1a9b      	subge	r3, r3, r2
 8018c48:	6123      	str	r3, [r4, #16]
 8018c4a:	bd10      	pop	{r4, pc}
 8018c4c:	0802314b 	.word	0x0802314b
 8018c50:	0802326a 	.word	0x0802326a
 8018c54:	08023102 	.word	0x08023102

08018c58 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018c58:	b510      	push	{r4, lr}
 8018c5a:	4604      	mov	r4, r0
 8018c5c:	6840      	ldr	r0, [r0, #4]
 8018c5e:	6803      	ldr	r3, [r0, #0]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	4798      	blx	r3
 8018c64:	b948      	cbnz	r0, 8018c7a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c66:	7a63      	ldrb	r3, [r4, #9]
 8018c68:	b13b      	cbz	r3, 8018c7a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c6a:	7a23      	ldrb	r3, [r4, #8]
 8018c6c:	b92b      	cbnz	r3, 8018c7a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018c6e:	6823      	ldr	r3, [r4, #0]
 8018c70:	4620      	mov	r0, r4
 8018c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c78:	4718      	bx	r3
 8018c7a:	bd10      	pop	{r4, pc}

08018c7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018c7c:	b510      	push	{r4, lr}
 8018c7e:	6082      	str	r2, [r0, #8]
 8018c80:	4c03      	ldr	r4, [pc, #12]	; (8018c90 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018c82:	6004      	str	r4, [r0, #0]
 8018c84:	2200      	movs	r2, #0
 8018c86:	6041      	str	r1, [r0, #4]
 8018c88:	60c2      	str	r2, [r0, #12]
 8018c8a:	6102      	str	r2, [r0, #16]
 8018c8c:	bd10      	pop	{r4, pc}
 8018c8e:	bf00      	nop
 8018c90:	080231d0 	.word	0x080231d0

08018c94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018c94:	6840      	ldr	r0, [r0, #4]
 8018c96:	6803      	ldr	r3, [r0, #0]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	4718      	bx	r3

08018c9c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018c9c:	b570      	push	{r4, r5, r6, lr}
 8018c9e:	4604      	mov	r4, r0
 8018ca0:	2500      	movs	r5, #0
 8018ca2:	7223      	strb	r3, [r4, #8]
 8018ca4:	9804      	ldr	r0, [sp, #16]
 8018ca6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018caa:	8025      	strh	r5, [r4, #0]
 8018cac:	6061      	str	r1, [r4, #4]
 8018cae:	7263      	strb	r3, [r4, #9]
 8018cb0:	60e0      	str	r0, [r4, #12]
 8018cb2:	8222      	strh	r2, [r4, #16]
 8018cb4:	8265      	strh	r5, [r4, #18]
 8018cb6:	82a5      	strh	r5, [r4, #20]
 8018cb8:	82e5      	strh	r5, [r4, #22]
 8018cba:	8325      	strh	r5, [r4, #24]
 8018cbc:	8365      	strh	r5, [r4, #26]
 8018cbe:	83a5      	strh	r5, [r4, #28]
 8018cc0:	77a5      	strb	r5, [r4, #30]
 8018cc2:	6803      	ldr	r3, [r0, #0]
 8018cc4:	695b      	ldr	r3, [r3, #20]
 8018cc6:	4798      	blx	r3
 8018cc8:	4606      	mov	r6, r0
 8018cca:	b328      	cbz	r0, 8018d18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x7c>
 8018ccc:	68e0      	ldr	r0, [r4, #12]
 8018cce:	6803      	ldr	r3, [r0, #0]
 8018cd0:	4631      	mov	r1, r6
 8018cd2:	68db      	ldr	r3, [r3, #12]
 8018cd4:	4798      	blx	r3
 8018cd6:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018cda:	7a82      	ldrb	r2, [r0, #10]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	bfb4      	ite	lt
 8018ce0:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8018ce4:	2300      	movge	r3, #0
 8018ce6:	4313      	orrs	r3, r2
 8018ce8:	83a3      	strh	r3, [r4, #28]
 8018cea:	7a63      	ldrb	r3, [r4, #9]
 8018cec:	2b04      	cmp	r3, #4
 8018cee:	4605      	mov	r5, r0
 8018cf0:	d112      	bne.n	8018d18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x7c>
 8018cf2:	68e0      	ldr	r0, [r4, #12]
 8018cf4:	6803      	ldr	r3, [r0, #0]
 8018cf6:	462a      	mov	r2, r5
 8018cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018cfa:	4631      	mov	r1, r6
 8018cfc:	4798      	blx	r3
 8018cfe:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8018d02:	7aaa      	ldrb	r2, [r5, #10]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	bfb4      	ite	lt
 8018d08:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8018d0c:	2300      	movge	r3, #0
 8018d0e:	4313      	orrs	r3, r2
 8018d10:	4418      	add	r0, r3
 8018d12:	8ba3      	ldrh	r3, [r4, #28]
 8018d14:	4418      	add	r0, r3
 8018d16:	83a0      	strh	r0, [r4, #28]
 8018d18:	4620      	mov	r0, r4
 8018d1a:	bd70      	pop	{r4, r5, r6, pc}

08018d1c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d20:	2400      	movs	r4, #0
 8018d22:	b085      	sub	sp, #20
 8018d24:	4681      	mov	r9, r0
 8018d26:	460f      	mov	r7, r1
 8018d28:	4692      	mov	sl, r2
 8018d2a:	469b      	mov	fp, r3
 8018d2c:	46a0      	mov	r8, r4
 8018d2e:	4626      	mov	r6, r4
 8018d30:	4554      	cmp	r4, sl
 8018d32:	da26      	bge.n	8018d82 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x66>
 8018d34:	2300      	movs	r3, #0
 8018d36:	9303      	str	r3, [sp, #12]
 8018d38:	463a      	mov	r2, r7
 8018d3a:	ab03      	add	r3, sp, #12
 8018d3c:	4659      	mov	r1, fp
 8018d3e:	4648      	mov	r0, r9
 8018d40:	f002 fb6e 	bl	801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d44:	4605      	mov	r5, r0
 8018d46:	b1e0      	cbz	r0, 8018d82 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x66>
 8018d48:	280a      	cmp	r0, #10
 8018d4a:	d01a      	beq.n	8018d82 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x66>
 8018d4c:	9a03      	ldr	r2, [sp, #12]
 8018d4e:	b1aa      	cbz	r2, 8018d7c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x60>
 8018d50:	7a93      	ldrb	r3, [r2, #10]
 8018d52:	9300      	str	r3, [sp, #0]
 8018d54:	f992 300d 	ldrsb.w	r3, [r2, #13]
 8018d58:	8895      	ldrh	r5, [r2, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	bfb4      	ite	lt
 8018d5e:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8018d62:	2300      	movge	r3, #0
 8018d64:	9301      	str	r3, [sp, #4]
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	4641      	mov	r1, r8
 8018d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d6c:	4638      	mov	r0, r7
 8018d6e:	4798      	blx	r3
 8018d70:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8018d74:	4313      	orrs	r3, r2
 8018d76:	4418      	add	r0, r3
 8018d78:	4406      	add	r6, r0
 8018d7a:	b2b6      	uxth	r6, r6
 8018d7c:	3401      	adds	r4, #1
 8018d7e:	46a8      	mov	r8, r5
 8018d80:	e7d6      	b.n	8018d30 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8018d82:	4630      	mov	r0, r6
 8018d84:	b005      	add	sp, #20
 8018d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018d8a:	2a02      	cmp	r2, #2
 8018d8c:	b530      	push	{r4, r5, lr}
 8018d8e:	d011      	beq.n	8018db4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018d90:	2a03      	cmp	r2, #3
 8018d92:	d01c      	beq.n	8018dce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018d94:	2a01      	cmp	r2, #1
 8018d96:	d128      	bne.n	8018dea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 8018d98:	888b      	ldrh	r3, [r1, #4]
 8018d9a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018d9e:	8801      	ldrh	r1, [r0, #0]
 8018da0:	8844      	ldrh	r4, [r0, #2]
 8018da2:	8004      	strh	r4, [r0, #0]
 8018da4:	1a9b      	subs	r3, r3, r2
 8018da6:	1a5b      	subs	r3, r3, r1
 8018da8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018dac:	8043      	strh	r3, [r0, #2]
 8018dae:	8081      	strh	r1, [r0, #4]
 8018db0:	80c2      	strh	r2, [r0, #6]
 8018db2:	bd30      	pop	{r4, r5, pc}
 8018db4:	88cb      	ldrh	r3, [r1, #6]
 8018db6:	88c2      	ldrh	r2, [r0, #6]
 8018db8:	1a9b      	subs	r3, r3, r2
 8018dba:	8842      	ldrh	r2, [r0, #2]
 8018dbc:	1a9b      	subs	r3, r3, r2
 8018dbe:	888a      	ldrh	r2, [r1, #4]
 8018dc0:	8881      	ldrh	r1, [r0, #4]
 8018dc2:	8043      	strh	r3, [r0, #2]
 8018dc4:	1a52      	subs	r2, r2, r1
 8018dc6:	8801      	ldrh	r1, [r0, #0]
 8018dc8:	1a52      	subs	r2, r2, r1
 8018dca:	8002      	strh	r2, [r0, #0]
 8018dcc:	bd30      	pop	{r4, r5, pc}
 8018dce:	88cb      	ldrh	r3, [r1, #6]
 8018dd0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018dd4:	8841      	ldrh	r1, [r0, #2]
 8018dd6:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018dda:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018dde:	8045      	strh	r5, [r0, #2]
 8018de0:	1a9b      	subs	r3, r3, r2
 8018de2:	1a5b      	subs	r3, r3, r1
 8018de4:	8003      	strh	r3, [r0, #0]
 8018de6:	8082      	strh	r2, [r0, #4]
 8018de8:	80c4      	strh	r4, [r0, #6]
 8018dea:	bd30      	pop	{r4, r5, pc}

08018dec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8018dec:	b570      	push	{r4, r5, r6, lr}
 8018dee:	b086      	sub	sp, #24
 8018df0:	ad02      	add	r5, sp, #8
 8018df2:	e885 0006 	stmia.w	r5, {r1, r2}
 8018df6:	461a      	mov	r2, r3
 8018df8:	ab0c      	add	r3, sp, #48	; 0x30
 8018dfa:	9305      	str	r3, [sp, #20]
 8018dfc:	4b0a      	ldr	r3, [pc, #40]	; (8018e28 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8018dfe:	685c      	ldr	r4, [r3, #4]
 8018e00:	f014 0f01 	tst.w	r4, #1
 8018e04:	ea4f 0464 	mov.w	r4, r4, asr #1
 8018e08:	bf1b      	ittet	ne
 8018e0a:	681b      	ldrne	r3, [r3, #0]
 8018e0c:	5901      	ldrne	r1, [r0, r4]
 8018e0e:	681e      	ldreq	r6, [r3, #0]
 8018e10:	58ce      	ldrne	r6, [r1, r3]
 8018e12:	9b05      	ldr	r3, [sp, #20]
 8018e14:	9301      	str	r3, [sp, #4]
 8018e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e18:	9300      	str	r3, [sp, #0]
 8018e1a:	4629      	mov	r1, r5
 8018e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e1e:	4420      	add	r0, r4
 8018e20:	47b0      	blx	r6
 8018e22:	b006      	add	sp, #24
 8018e24:	bd70      	pop	{r4, r5, r6, pc}
 8018e26:	bf00      	nop
 8018e28:	20000068 	.word	0x20000068

08018e2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e30:	b09d      	sub	sp, #116	; 0x74
 8018e32:	9114      	str	r1, [sp, #80]	; 0x50
 8018e34:	9315      	str	r3, [sp, #84]	; 0x54
 8018e36:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018e38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018e3a:	8809      	ldrh	r1, [r1, #0]
 8018e3c:	889b      	ldrh	r3, [r3, #4]
 8018e3e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018e40:	9210      	str	r2, [sp, #64]	; 0x40
 8018e42:	440b      	add	r3, r1
 8018e44:	b21b      	sxth	r3, r3
 8018e46:	930e      	str	r3, [sp, #56]	; 0x38
 8018e48:	6833      	ldr	r3, [r6, #0]
 8018e4a:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8018e4e:	7a59      	ldrb	r1, [r3, #9]
 8018e50:	7a1b      	ldrb	r3, [r3, #8]
 8018e52:	9312      	str	r3, [sp, #72]	; 0x48
 8018e54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018e56:	900f      	str	r0, [sp, #60]	; 0x3c
 8018e58:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018e5c:	9113      	str	r1, [sp, #76]	; 0x4c
 8018e5e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018e62:	2a00      	cmp	r2, #0
 8018e64:	d057      	beq.n	8018f16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xea>
 8018e66:	7c33      	ldrb	r3, [r6, #16]
 8018e68:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018e6a:	2b04      	cmp	r3, #4
 8018e6c:	bf0c      	ite	eq
 8018e6e:	2302      	moveq	r3, #2
 8018e70:	2301      	movne	r3, #1
 8018e72:	4413      	add	r3, r2
 8018e74:	2400      	movs	r4, #0
 8018e76:	930d      	str	r3, [sp, #52]	; 0x34
 8018e78:	940c      	str	r4, [sp, #48]	; 0x30
 8018e7a:	4627      	mov	r7, r4
 8018e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e80:	4293      	cmp	r3, r2
 8018e82:	da76      	bge.n	8018f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8018e84:	2300      	movs	r3, #0
 8018e86:	931a      	str	r3, [sp, #104]	; 0x68
 8018e88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e8c:	4293      	cmp	r3, r2
 8018e8e:	db44      	blt.n	8018f1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8018e90:	6830      	ldr	r0, [r6, #0]
 8018e92:	6803      	ldr	r3, [r0, #0]
 8018e94:	695b      	ldr	r3, [r3, #20]
 8018e96:	4798      	blx	r3
 8018e98:	4681      	mov	r9, r0
 8018e9a:	6830      	ldr	r0, [r6, #0]
 8018e9c:	6803      	ldr	r3, [r0, #0]
 8018e9e:	aa1b      	add	r2, sp, #108	; 0x6c
 8018ea0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8018ea4:	4649      	mov	r1, r9
 8018ea6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018eaa:	47c0      	blx	r8
 8018eac:	901a      	str	r0, [sp, #104]	; 0x68
 8018eae:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8018eb2:	45d1      	cmp	r9, sl
 8018eb4:	d046      	beq.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 8018eb6:	f242 080b 	movw	r8, #8203	; 0x200b
 8018eba:	45c1      	cmp	r9, r8
 8018ebc:	d042      	beq.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 8018ebe:	f1b9 0f00 	cmp.w	r9, #0
 8018ec2:	d055      	beq.n	8018f70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x144>
 8018ec4:	f1b9 0f0a 	cmp.w	r9, #10
 8018ec8:	d052      	beq.n	8018f70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x144>
 8018eca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d031      	beq.n	8018f34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x108>
 8018ed0:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8018ed4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018ed6:	2a00      	cmp	r2, #0
 8018ed8:	f000 80e4 	beq.w	80190a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x278>
 8018edc:	f1bb 0f00 	cmp.w	fp, #0
 8018ee0:	d100      	bne.n	8018ee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb8>
 8018ee2:	4425      	add	r5, r4
 8018ee4:	f992 100d 	ldrsb.w	r1, [r2, #13]
 8018ee8:	7a93      	ldrb	r3, [r2, #10]
 8018eea:	2900      	cmp	r1, #0
 8018eec:	bfb4      	ite	lt
 8018eee:	f44f 7480 	movlt.w	r4, #256	; 0x100
 8018ef2:	2400      	movge	r4, #0
 8018ef4:	f1bb 0f01 	cmp.w	fp, #1
 8018ef8:	ea44 0403 	orr.w	r4, r4, r3
 8018efc:	d127      	bne.n	8018f4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x122>
 8018efe:	1b2d      	subs	r5, r5, r4
 8018f00:	2f00      	cmp	r7, #0
 8018f02:	d143      	bne.n	8018f8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x160>
 8018f04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f06:	1963      	adds	r3, r4, r5
 8018f08:	4413      	add	r3, r2
 8018f0a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018f0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018f10:	4293      	cmp	r3, r2
 8018f12:	da45      	bge.n	8018fa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 8018f14:	e02c      	b.n	8018f70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x144>
 8018f16:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018f18:	e7ac      	b.n	8018e74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8018f1a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018f1e:	9301      	str	r3, [sp, #4]
 8018f20:	ab1b      	add	r3, sp, #108	; 0x6c
 8018f22:	9300      	str	r3, [sp, #0]
 8018f24:	6832      	ldr	r2, [r6, #0]
 8018f26:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018f28:	ab1a      	add	r3, sp, #104	; 0x68
 8018f2a:	4659      	mov	r1, fp
 8018f2c:	f002 faaf 	bl	801b48e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018f30:	4681      	mov	r9, r0
 8018f32:	e7bc      	b.n	8018eae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8018f34:	6830      	ldr	r0, [r6, #0]
 8018f36:	6803      	ldr	r3, [r0, #0]
 8018f38:	691b      	ldr	r3, [r3, #16]
 8018f3a:	4798      	blx	r3
 8018f3c:	4550      	cmp	r0, sl
 8018f3e:	d001      	beq.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 8018f40:	4540      	cmp	r0, r8
 8018f42:	d1c7      	bne.n	8018ed4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xa8>
 8018f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018f46:	3301      	adds	r3, #1
 8018f48:	930c      	str	r3, [sp, #48]	; 0x30
 8018f4a:	464f      	mov	r7, r9
 8018f4c:	e796      	b.n	8018e7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8018f4e:	2f00      	cmp	r7, #0
 8018f50:	f000 80bb 	beq.w	80190ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8018f54:	f1bb 0f00 	cmp.w	fp, #0
 8018f58:	d118      	bne.n	8018f8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x160>
 8018f5a:	6830      	ldr	r0, [r6, #0]
 8018f5c:	6803      	ldr	r3, [r0, #0]
 8018f5e:	4639      	mov	r1, r7
 8018f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f62:	4798      	blx	r3
 8018f64:	4405      	add	r5, r0
 8018f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018f6a:	1aeb      	subs	r3, r5, r3
 8018f6c:	4293      	cmp	r3, r2
 8018f6e:	dd17      	ble.n	8018fa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 8018f70:	464f      	mov	r7, r9
 8018f72:	2f00      	cmp	r7, #0
 8018f74:	f000 80a7 	beq.w	80190c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8018f78:	2f0a      	cmp	r7, #10
 8018f7a:	f040 8095 	bne.w	80190a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 8018f7e:	270a      	movs	r7, #10
 8018f80:	fab7 f087 	clz	r0, r7
 8018f84:	0940      	lsrs	r0, r0, #5
 8018f86:	b01d      	add	sp, #116	; 0x74
 8018f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f8c:	6830      	ldr	r0, [r6, #0]
 8018f8e:	6803      	ldr	r3, [r0, #0]
 8018f90:	4639      	mov	r1, r7
 8018f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f94:	4798      	blx	r3
 8018f96:	f1bb 0f01 	cmp.w	fp, #1
 8018f9a:	eba5 0500 	sub.w	r5, r5, r0
 8018f9e:	d0b1      	beq.n	8018f04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd8>
 8018fa0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018fa2:	7b4b      	ldrb	r3, [r1, #13]
 8018fa4:	f991 2009 	ldrsb.w	r2, [r1, #9]
 8018fa8:	7988      	ldrb	r0, [r1, #6]
 8018faa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018fac:	f013 0f08 	tst.w	r3, #8
 8018fb0:	bf14      	ite	ne
 8018fb2:	f44f 7380 	movne.w	r3, #256	; 0x100
 8018fb6:	2300      	moveq	r3, #0
 8018fb8:	442a      	add	r2, r5
 8018fba:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018fbe:	4303      	orrs	r3, r0
 8018fc0:	4413      	add	r3, r2
 8018fc2:	42bb      	cmp	r3, r7
 8018fc4:	dbbe      	blt.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 8018fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	dabb      	bge.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 8018fcc:	6830      	ldr	r0, [r6, #0]
 8018fce:	6803      	ldr	r3, [r0, #0]
 8018fd0:	42af      	cmp	r7, r5
 8018fd2:	bfc8      	it	gt
 8018fd4:	1b7f      	subgt	r7, r7, r5
 8018fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fd8:	bfcc      	ite	gt
 8018fda:	b2bf      	uxthgt	r7, r7
 8018fdc:	2700      	movle	r7, #0
 8018fde:	4798      	blx	r3
 8018fe0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018fe2:	4a3c      	ldr	r2, [pc, #240]	; (80190d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a8>)
 8018fe4:	7b59      	ldrb	r1, [r3, #13]
 8018fe6:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018fea:	f011 0f40 	tst.w	r1, #64	; 0x40
 8018fee:	bf14      	ite	ne
 8018ff0:	4696      	movne	lr, r2
 8018ff2:	f04f 0e00 	moveq.w	lr, #0
 8018ff6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018ff8:	f011 0f20 	tst.w	r1, #32
 8018ffc:	bf14      	ite	ne
 8018ffe:	f44f 7a80 	movne.w	sl, #256	; 0x100
 8019002:	f04f 0a00 	moveq.w	sl, #0
 8019006:	ea4e 0e0c 	orr.w	lr, lr, ip
 801900a:	eb00 0802 	add.w	r8, r0, r2
 801900e:	ea4a 020e 	orr.w	r2, sl, lr
 8019012:	eba8 0802 	sub.w	r8, r8, r2
 8019016:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8019018:	fa1f f888 	uxth.w	r8, r8
 801901c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019020:	fa0f fa88 	sxth.w	sl, r8
 8019024:	4592      	cmp	sl, r2
 8019026:	da3a      	bge.n	801909e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x272>
 8019028:	f011 0f10 	tst.w	r1, #16
 801902c:	79d8      	ldrb	r0, [r3, #7]
 801902e:	bf14      	ite	ne
 8019030:	f44f 7180 	movne.w	r1, #256	; 0x100
 8019034:	2100      	moveq	r1, #0
 8019036:	4308      	orrs	r0, r1
 8019038:	4482      	add	sl, r0
 801903a:	4552      	cmp	r2, sl
 801903c:	dc82      	bgt.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801903e:	eba2 0808 	sub.w	r8, r2, r8
 8019042:	fa1f f888 	uxth.w	r8, r8
 8019046:	4692      	mov	sl, r2
 8019048:	9317      	str	r3, [sp, #92]	; 0x5c
 801904a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801904c:	6830      	ldr	r0, [r6, #0]
 801904e:	681a      	ldr	r2, [r3, #0]
 8019050:	6801      	ldr	r1, [r0, #0]
 8019052:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8019054:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019056:	9311      	str	r3, [sp, #68]	; 0x44
 8019058:	9216      	str	r2, [sp, #88]	; 0x58
 801905a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801905c:	4788      	blx	r1
 801905e:	79b1      	ldrb	r1, [r6, #6]
 8019060:	910b      	str	r1, [sp, #44]	; 0x2c
 8019062:	7bb1      	ldrb	r1, [r6, #14]
 8019064:	910a      	str	r1, [sp, #40]	; 0x28
 8019066:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801906a:	9109      	str	r1, [sp, #36]	; 0x24
 801906c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801906e:	68b1      	ldr	r1, [r6, #8]
 8019070:	9305      	str	r3, [sp, #20]
 8019072:	9702      	str	r7, [sp, #8]
 8019074:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019076:	9304      	str	r3, [sp, #16]
 8019078:	442f      	add	r7, r5
 801907a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801907c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801907e:	9108      	str	r1, [sp, #32]
 8019080:	b23f      	sxth	r7, r7
 8019082:	9007      	str	r0, [sp, #28]
 8019084:	9700      	str	r7, [sp, #0]
 8019086:	9206      	str	r2, [sp, #24]
 8019088:	f8cd 800c 	str.w	r8, [sp, #12]
 801908c:	f8cd a004 	str.w	sl, [sp, #4]
 8019090:	681a      	ldr	r2, [r3, #0]
 8019092:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019098:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801909a:	47b8      	blx	r7
 801909c:	e752      	b.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801909e:	f04f 0800 	mov.w	r8, #0
 80190a2:	e7d1      	b.n	8019048 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x21c>
 80190a4:	4614      	mov	r4, r2
 80190a6:	e74d      	b.n	8018f44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 80190a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80190aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80190ac:	3401      	adds	r4, #1
 80190ae:	429c      	cmp	r4, r3
 80190b0:	f6bf af66 	bge.w	8018f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80190b4:	4659      	mov	r1, fp
 80190b6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80190b8:	f002 f96c 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80190bc:	4607      	mov	r7, r0
 80190be:	b110      	cbz	r0, 80190c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80190c0:	280a      	cmp	r0, #10
 80190c2:	d1f2      	bne.n	80190aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 80190c4:	e75b      	b.n	8018f7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80190c6:	2700      	movs	r7, #0
 80190c8:	e75a      	b.n	8018f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80190ca:	f1bb 0f00 	cmp.w	fp, #0
 80190ce:	f43f af4a 	beq.w	8018f66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13a>
 80190d2:	e765      	b.n	8018fa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 80190d4:	fffffe00 	.word	0xfffffe00

080190d8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80190d8:	b530      	push	{r4, r5, lr}
 80190da:	8a44      	ldrh	r4, [r0, #18]
 80190dc:	8ac5      	ldrh	r5, [r0, #22]
 80190de:	82c3      	strh	r3, [r0, #22]
 80190e0:	442c      	add	r4, r5
 80190e2:	1ae4      	subs	r4, r4, r3
 80190e4:	8244      	strh	r4, [r0, #18]
 80190e6:	8b03      	ldrh	r3, [r0, #24]
 80190e8:	8a84      	ldrh	r4, [r0, #20]
 80190ea:	4422      	add	r2, r4
 80190ec:	440c      	add	r4, r1
 80190ee:	1a59      	subs	r1, r3, r1
 80190f0:	8342      	strh	r2, [r0, #26]
 80190f2:	8284      	strh	r4, [r0, #20]
 80190f4:	8301      	strh	r1, [r0, #24]
 80190f6:	bd30      	pop	{r4, r5, pc}

080190f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80190f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190fc:	f890 b009 	ldrb.w	fp, [r0, #9]
 8019100:	b087      	sub	sp, #28
 8019102:	4604      	mov	r4, r0
 8019104:	4689      	mov	r9, r1
 8019106:	f1ab 0303 	sub.w	r3, fp, #3
 801910a:	b349      	cbz	r1, 8019160 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x68>
 801910c:	2b01      	cmp	r3, #1
 801910e:	d925      	bls.n	801915c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x64>
 8019110:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019114:	f1d2 0a00 	rsbs	sl, r2, #0
 8019118:	eb4a 0a02 	adc.w	sl, sl, r2
 801911c:	f1ab 0302 	sub.w	r3, fp, #2
 8019120:	f1d3 0b00 	rsbs	fp, r3, #0
 8019124:	f04f 0500 	mov.w	r5, #0
 8019128:	eb4b 0b03 	adc.w	fp, fp, r3
 801912c:	9501      	str	r5, [sp, #4]
 801912e:	2600      	movs	r6, #0
 8019130:	8266      	strh	r6, [r4, #18]
 8019132:	82a6      	strh	r6, [r4, #20]
 8019134:	f242 080b 	movw	r8, #8203	; 0x200b
 8019138:	2300      	movs	r3, #0
 801913a:	9305      	str	r3, [sp, #20]
 801913c:	68e2      	ldr	r2, [r4, #12]
 801913e:	7a21      	ldrb	r1, [r4, #8]
 8019140:	6860      	ldr	r0, [r4, #4]
 8019142:	8827      	ldrh	r7, [r4, #0]
 8019144:	ab05      	add	r3, sp, #20
 8019146:	f002 f96b 	bl	801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801914a:	8020      	strh	r0, [r4, #0]
 801914c:	b9b8      	cbnz	r0, 801917e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x86>
 801914e:	8b22      	ldrh	r2, [r4, #24]
 8019150:	2300      	movs	r3, #0
 8019152:	4611      	mov	r1, r2
 8019154:	4620      	mov	r0, r4
 8019156:	f7ff ffbf 	bl	80190d8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801915a:	e08e      	b.n	801927a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801915c:	468a      	mov	sl, r1
 801915e:	e7dd      	b.n	801911c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 8019160:	2b01      	cmp	r3, #1
 8019162:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019166:	bf8c      	ite	hi
 8019168:	2300      	movhi	r3, #0
 801916a:	2301      	movls	r3, #1
 801916c:	f1bb 0f01 	cmp.w	fp, #1
 8019170:	9301      	str	r3, [sp, #4]
 8019172:	bf8c      	ite	hi
 8019174:	2500      	movhi	r5, #0
 8019176:	2501      	movls	r5, #1
 8019178:	468b      	mov	fp, r1
 801917a:	468a      	mov	sl, r1
 801917c:	e7d7      	b.n	801912e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801917e:	8ae3      	ldrh	r3, [r4, #22]
 8019180:	280a      	cmp	r0, #10
 8019182:	f103 0301 	add.w	r3, r3, #1
 8019186:	82e3      	strh	r3, [r4, #22]
 8019188:	d0e1      	beq.n	801914e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x56>
 801918a:	9a05      	ldr	r2, [sp, #20]
 801918c:	bb22      	cbnz	r2, 80191d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xe0>
 801918e:	4540      	cmp	r0, r8
 8019190:	d1d2      	bne.n	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 8019192:	8823      	ldrh	r3, [r4, #0]
 8019194:	8b21      	ldrh	r1, [r4, #24]
 8019196:	2b20      	cmp	r3, #32
 8019198:	d058      	beq.n	801924c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801919a:	4543      	cmp	r3, r8
 801919c:	d056      	beq.n	801924c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801919e:	2000      	movs	r0, #0
 80191a0:	440a      	add	r2, r1
 80191a2:	8aa3      	ldrh	r3, [r4, #20]
 80191a4:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 80191a8:	b292      	uxth	r2, r2
 80191aa:	8322      	strh	r2, [r4, #24]
 80191ac:	4413      	add	r3, r2
 80191ae:	f1b9 0f00 	cmp.w	r9, #0
 80191b2:	d02c      	beq.n	801920e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x116>
 80191b4:	f1ba 0f00 	cmp.w	sl, #0
 80191b8:	d104      	bne.n	80191c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80191ba:	f1bb 0f00 	cmp.w	fp, #0
 80191be:	d04f      	beq.n	8019260 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x168>
 80191c0:	2800      	cmp	r0, #0
 80191c2:	d04d      	beq.n	8019260 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x168>
 80191c4:	8ba1      	ldrh	r1, [r4, #28]
 80191c6:	4419      	add	r1, r3
 80191c8:	458e      	cmp	lr, r1
 80191ca:	da46      	bge.n	801925a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 80191cc:	8a61      	ldrh	r1, [r4, #18]
 80191ce:	2900      	cmp	r1, #0
 80191d0:	d043      	beq.n	801925a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 80191d2:	4573      	cmp	r3, lr
 80191d4:	ddb0      	ble.n	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 80191d6:	e04a      	b.n	801926e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x176>
 80191d8:	4540      	cmp	r0, r8
 80191da:	d016      	beq.n	801920a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x112>
 80191dc:	8893      	ldrh	r3, [r2, #4]
 80191de:	8023      	strh	r3, [r4, #0]
 80191e0:	7a93      	ldrb	r3, [r2, #10]
 80191e2:	9303      	str	r3, [sp, #12]
 80191e4:	f992 300d 	ldrsb.w	r3, [r2, #13]
 80191e8:	68e0      	ldr	r0, [r4, #12]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	bfb4      	ite	lt
 80191ee:	f44f 7380 	movlt.w	r3, #256	; 0x100
 80191f2:	2300      	movge	r3, #0
 80191f4:	9302      	str	r3, [sp, #8]
 80191f6:	6803      	ldr	r3, [r0, #0]
 80191f8:	4639      	mov	r1, r7
 80191fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80191fc:	4798      	blx	r3
 80191fe:	9b02      	ldr	r3, [sp, #8]
 8019200:	9a03      	ldr	r2, [sp, #12]
 8019202:	431a      	orrs	r2, r3
 8019204:	4402      	add	r2, r0
 8019206:	b292      	uxth	r2, r2
 8019208:	e7c3      	b.n	8019192 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801920a:	2200      	movs	r2, #0
 801920c:	e7c1      	b.n	8019192 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801920e:	4573      	cmp	r3, lr
 8019210:	dd0f      	ble.n	8019232 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13a>
 8019212:	9b01      	ldr	r3, [sp, #4]
 8019214:	b113      	cbz	r3, 801921c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x124>
 8019216:	2301      	movs	r3, #1
 8019218:	460a      	mov	r2, r1
 801921a:	e79a      	b.n	8019152 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801921c:	2d00      	cmp	r5, #0
 801921e:	d08b      	beq.n	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 8019220:	2800      	cmp	r0, #0
 8019222:	d189      	bne.n	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 8019224:	2f20      	cmp	r7, #32
 8019226:	d001      	beq.n	801922c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019228:	4547      	cmp	r7, r8
 801922a:	d129      	bne.n	8019280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x188>
 801922c:	2301      	movs	r3, #1
 801922e:	4632      	mov	r2, r6
 8019230:	e790      	b.n	8019154 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5c>
 8019232:	2800      	cmp	r0, #0
 8019234:	d180      	bne.n	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 8019236:	2f20      	cmp	r7, #32
 8019238:	d002      	beq.n	8019240 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x148>
 801923a:	4547      	cmp	r7, r8
 801923c:	f47f af7c 	bne.w	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 8019240:	2301      	movs	r3, #1
 8019242:	4632      	mov	r2, r6
 8019244:	4620      	mov	r0, r4
 8019246:	f7ff ff47 	bl	80190d8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801924a:	e775      	b.n	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801924c:	2f20      	cmp	r7, #32
 801924e:	d002      	beq.n	8019256 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019250:	4547      	cmp	r7, r8
 8019252:	bf18      	it	ne
 8019254:	460e      	movne	r6, r1
 8019256:	2001      	movs	r0, #1
 8019258:	e7a2      	b.n	80191a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801925a:	2300      	movs	r3, #0
 801925c:	4611      	mov	r1, r2
 801925e:	e7f1      	b.n	8019244 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019260:	4573      	cmp	r3, lr
 8019262:	f77f af69 	ble.w	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 8019266:	8a63      	ldrh	r3, [r4, #18]
 8019268:	2b00      	cmp	r3, #0
 801926a:	f43f af65 	beq.w	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801926e:	2301      	movs	r3, #1
 8019270:	77a3      	strb	r3, [r4, #30]
 8019272:	8ba2      	ldrh	r2, [r4, #28]
 8019274:	8b63      	ldrh	r3, [r4, #26]
 8019276:	4413      	add	r3, r2
 8019278:	8363      	strh	r3, [r4, #26]
 801927a:	b007      	add	sp, #28
 801927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019280:	8a63      	ldrh	r3, [r4, #18]
 8019282:	2b00      	cmp	r3, #0
 8019284:	f43f af58 	beq.w	8019138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 8019288:	e7f7      	b.n	801927a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>

0801928a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801928a:	b570      	push	{r4, r5, r6, lr}
 801928c:	4606      	mov	r6, r0
 801928e:	b08a      	sub	sp, #40	; 0x28
 8019290:	4615      	mov	r5, r2
 8019292:	b191      	cbz	r1, 80192ba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8019294:	9101      	str	r1, [sp, #4]
 8019296:	9300      	str	r3, [sp, #0]
 8019298:	4601      	mov	r1, r0
 801929a:	4613      	mov	r3, r2
 801929c:	a802      	add	r0, sp, #8
 801929e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80192a2:	f7ff fcfb 	bl	8018c9c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80192a6:	2401      	movs	r4, #1
 80192a8:	2100      	movs	r1, #0
 80192aa:	a802      	add	r0, sp, #8
 80192ac:	f7ff ff24 	bl	80190f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80192b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80192b4:	b173      	cbz	r3, 80192d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80192b6:	3401      	adds	r4, #1
 80192b8:	e7f6      	b.n	80192a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80192ba:	4611      	mov	r1, r2
 80192bc:	f002 f86a 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80192c0:	2401      	movs	r4, #1
 80192c2:	280a      	cmp	r0, #10
 80192c4:	4629      	mov	r1, r5
 80192c6:	4630      	mov	r0, r6
 80192c8:	bf08      	it	eq
 80192ca:	3401      	addeq	r4, #1
 80192cc:	f002 f862 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80192d0:	2800      	cmp	r0, #0
 80192d2:	d1f6      	bne.n	80192c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80192d4:	b2a0      	uxth	r0, r4
 80192d6:	b00a      	add	sp, #40	; 0x28
 80192d8:	bd70      	pop	{r4, r5, r6, pc}

080192da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80192da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192de:	b0dd      	sub	sp, #372	; 0x174
 80192e0:	468a      	mov	sl, r1
 80192e2:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
 80192e6:	900b      	str	r0, [sp, #44]	; 0x2c
 80192e8:	461c      	mov	r4, r3
 80192ea:	f1bb 0f00 	cmp.w	fp, #0
 80192ee:	f000 80cb 	beq.w	8019488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	f000 80c7 	beq.w	8019488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80192fa:	7ba3      	ldrb	r3, [r4, #14]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	f000 80c3 	beq.w	8019488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8019302:	6810      	ldr	r0, [r2, #0]
 8019304:	6851      	ldr	r1, [r2, #4]
 8019306:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 801930a:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
 801930e:	af0e      	add	r7, sp, #56	; 0x38
 8019310:	463b      	mov	r3, r7
 8019312:	c303      	stmia	r3!, {r0, r1}
 8019314:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
 8019318:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
 801931c:	2300      	movs	r3, #0
 801931e:	79a2      	ldrb	r2, [r4, #6]
 8019320:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019324:	a910      	add	r1, sp, #64	; 0x40
 8019326:	4638      	mov	r0, r7
 8019328:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801932c:	f7ff fd2d 	bl	8018d8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019330:	a910      	add	r1, sp, #64	; 0x40
 8019332:	4608      	mov	r0, r1
 8019334:	79a2      	ldrb	r2, [r4, #6]
 8019336:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 801933a:	f7ff fd26 	bl	8018d8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801933e:	4648      	mov	r0, r9
 8019340:	f001 fee6 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
 8019344:	6820      	ldr	r0, [r4, #0]
 8019346:	6803      	ldr	r3, [r0, #0]
 8019348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801934a:	4798      	blx	r3
 801934c:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 801934e:	4603      	mov	r3, r0
 8019350:	4659      	mov	r1, fp
 8019352:	4648      	mov	r0, r9
 8019354:	f001 fef9 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019358:	a830      	add	r0, sp, #192	; 0xc0
 801935a:	f001 fed9 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
 801935e:	f894 8004 	ldrb.w	r8, [r4, #4]
 8019362:	f1b8 0f00 	cmp.w	r8, #0
 8019366:	d009      	beq.n	801937c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa2>
 8019368:	6820      	ldr	r0, [r4, #0]
 801936a:	6803      	ldr	r3, [r0, #0]
 801936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801936e:	4798      	blx	r3
 8019370:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8019372:	4603      	mov	r3, r0
 8019374:	4659      	mov	r1, fp
 8019376:	a830      	add	r0, sp, #192	; 0xc0
 8019378:	f001 fee7 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801937c:	6820      	ldr	r0, [r4, #0]
 801937e:	6803      	ldr	r3, [r0, #0]
 8019380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019382:	4798      	blx	r3
 8019384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019388:	1946      	adds	r6, r0, r5
 801938a:	2e00      	cmp	r6, #0
 801938c:	dd45      	ble.n	801941a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x140>
 801938e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019392:	4298      	cmp	r0, r3
 8019394:	dc41      	bgt.n	801941a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x140>
 8019396:	441d      	add	r5, r3
 8019398:	fb95 f5f6 	sdiv	r5, r5, r6
 801939c:	a846      	add	r0, sp, #280	; 0x118
 801939e:	f001 feb7 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
 80193a2:	7c23      	ldrb	r3, [r4, #16]
 80193a4:	b14b      	cbz	r3, 80193ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe0>
 80193a6:	6820      	ldr	r0, [r4, #0]
 80193a8:	6803      	ldr	r3, [r0, #0]
 80193aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193ac:	4798      	blx	r3
 80193ae:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 80193b0:	4603      	mov	r3, r0
 80193b2:	4659      	mov	r1, fp
 80193b4:	a846      	add	r0, sp, #280	; 0x118
 80193b6:	f001 fec8 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80193ba:	7c21      	ldrb	r1, [r4, #16]
 80193bc:	9101      	str	r1, [sp, #4]
 80193be:	6821      	ldr	r1, [r4, #0]
 80193c0:	7963      	ldrb	r3, [r4, #5]
 80193c2:	9100      	str	r1, [sp, #0]
 80193c4:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 80193c8:	a946      	add	r1, sp, #280	; 0x118
 80193ca:	a812      	add	r0, sp, #72	; 0x48
 80193cc:	f7ff fc66 	bl	8018c9c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80193d0:	7c23      	ldrb	r3, [r4, #16]
 80193d2:	bb23      	cbnz	r3, 801941e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80193d4:	fa1f fb86 	uxth.w	fp, r6
 80193d8:	2d00      	cmp	r5, #0
 80193da:	dd58      	ble.n	801948e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 80193dc:	7961      	ldrb	r1, [r4, #5]
 80193de:	4648      	mov	r0, r9
 80193e0:	f001 ffd8 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80193e4:	4603      	mov	r3, r0
 80193e6:	f1b8 0f00 	cmp.w	r8, #0
 80193ea:	d005      	beq.n	80193f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11e>
 80193ec:	9009      	str	r0, [sp, #36]	; 0x24
 80193ee:	7961      	ldrb	r1, [r4, #5]
 80193f0:	a830      	add	r0, sp, #192	; 0xc0
 80193f2:	f001 ffcf 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80193f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d045      	beq.n	8019488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80193fc:	2b0a      	cmp	r3, #10
 80193fe:	d1eb      	bne.n	80193d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xfe>
 8019400:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019404:	445b      	add	r3, fp
 8019406:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801940a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801940e:	eba3 030b 	sub.w	r3, r3, fp
 8019412:	3d01      	subs	r5, #1
 8019414:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8019418:	e7de      	b.n	80193d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xfe>
 801941a:	2500      	movs	r5, #0
 801941c:	e7be      	b.n	801939c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc2>
 801941e:	0073      	lsls	r3, r6, #1
 8019420:	930a      	str	r3, [sp, #40]	; 0x28
 8019422:	b2b3      	uxth	r3, r6
 8019424:	9309      	str	r3, [sp, #36]	; 0x24
 8019426:	2d00      	cmp	r5, #0
 8019428:	dd31      	ble.n	801948e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801942a:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 801942e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019430:	428b      	cmp	r3, r1
 8019432:	bfd4      	ite	le
 8019434:	2100      	movle	r1, #0
 8019436:	2101      	movgt	r1, #1
 8019438:	a812      	add	r0, sp, #72	; 0x48
 801943a:	f7ff fe5d 	bl	80190f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801943e:	f8bd b05a 	ldrh.w	fp, [sp, #90]	; 0x5a
 8019442:	f1bb 0f00 	cmp.w	fp, #0
 8019446:	d00f      	beq.n	8019468 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18e>
 8019448:	7961      	ldrb	r1, [r4, #5]
 801944a:	4648      	mov	r0, r9
 801944c:	f001 ffa2 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019450:	f1b8 0f00 	cmp.w	r8, #0
 8019454:	d003      	beq.n	801945e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x184>
 8019456:	7961      	ldrb	r1, [r4, #5]
 8019458:	a830      	add	r0, sp, #192	; 0xc0
 801945a:	f001 ff9b 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801945e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019462:	fa1f fb83 	uxth.w	fp, r3
 8019466:	e7ec      	b.n	8019442 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8019468:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801946c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801946e:	4413      	add	r3, r2
 8019470:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019474:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8019478:	1a9b      	subs	r3, r3, r2
 801947a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 801947e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019482:	3d01      	subs	r5, #1
 8019484:	2b00      	cmp	r3, #0
 8019486:	d1ce      	bne.n	8019426 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 8019488:	b05d      	add	sp, #372	; 0x174
 801948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8019492:	f10d 0536 	add.w	r5, sp, #54	; 0x36
 8019496:	7c23      	ldrb	r3, [r4, #16]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d05f      	beq.n	801955c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x282>
 801949c:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 80194a0:	458b      	cmp	fp, r1
 80194a2:	bfd4      	ite	le
 80194a4:	2100      	movle	r1, #0
 80194a6:	2101      	movgt	r1, #1
 80194a8:	a812      	add	r0, sp, #72	; 0x48
 80194aa:	f7ff fe25 	bl	80190f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80194ae:	f1b8 0f00 	cmp.w	r8, #0
 80194b2:	d04c      	beq.n	801954e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80194b4:	7c23      	ldrb	r3, [r4, #16]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d053      	beq.n	8019562 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x288>
 80194ba:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 80194be:	7922      	ldrb	r2, [r4, #4]
 80194c0:	2a01      	cmp	r2, #1
 80194c2:	d13c      	bne.n	801953e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 80194c4:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
 80194c8:	1ac0      	subs	r0, r0, r3
 80194ca:	2302      	movs	r3, #2
 80194cc:	fb90 f0f3 	sdiv	r0, r0, r3
 80194d0:	b200      	sxth	r0, r0
 80194d2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80194d6:	4418      	add	r0, r3
 80194d8:	7c23      	ldrb	r3, [r4, #16]
 80194da:	8028      	strh	r0, [r5, #0]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d03a      	beq.n	8019556 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27c>
 80194e0:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 80194e4:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
 80194e8:	9205      	str	r2, [sp, #20]
 80194ea:	2200      	movs	r2, #0
 80194ec:	9106      	str	r1, [sp, #24]
 80194ee:	9203      	str	r2, [sp, #12]
 80194f0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80194f4:	f8cd 9010 	str.w	r9, [sp, #16]
 80194f8:	9402      	str	r4, [sp, #8]
 80194fa:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80194fe:	4652      	mov	r2, sl
 8019500:	2100      	movs	r1, #0
 8019502:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019504:	f7ff fc92 	bl	8018e2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019508:	2800      	cmp	r0, #0
 801950a:	d1bd      	bne.n	8019488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801950c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019510:	b2b2      	uxth	r2, r6
 8019512:	4611      	mov	r1, r2
 8019514:	4413      	add	r3, r2
 8019516:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 801951a:	1a52      	subs	r2, r2, r1
 801951c:	7c21      	ldrb	r1, [r4, #16]
 801951e:	b21b      	sxth	r3, r3
 8019520:	b212      	sxth	r2, r2
 8019522:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019526:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
 801952a:	b109      	cbz	r1, 8019530 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801952c:	4296      	cmp	r6, r2
 801952e:	dcab      	bgt.n	8019488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8019530:	887a      	ldrh	r2, [r7, #2]
 8019532:	88f9      	ldrh	r1, [r7, #6]
 8019534:	440a      	add	r2, r1
 8019536:	b212      	sxth	r2, r2
 8019538:	4293      	cmp	r3, r2
 801953a:	ddac      	ble.n	8019496 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801953c:	e7a4      	b.n	8019488 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801953e:	2a02      	cmp	r2, #2
 8019540:	d107      	bne.n	8019552 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>
 8019542:	7be2      	ldrb	r2, [r4, #15]
 8019544:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8019548:	1a80      	subs	r0, r0, r2
 801954a:	1ac0      	subs	r0, r0, r3
 801954c:	e7c0      	b.n	80194d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f6>
 801954e:	7be0      	ldrb	r0, [r4, #15]
 8019550:	e7bf      	b.n	80194d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8019552:	2000      	movs	r0, #0
 8019554:	e7bd      	b.n	80194d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8019556:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801955a:	e7c3      	b.n	80194e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x20a>
 801955c:	f1b8 0f00 	cmp.w	r8, #0
 8019560:	d0f5      	beq.n	801954e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8019562:	2300      	movs	r3, #0
 8019564:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019568:	6821      	ldr	r1, [r4, #0]
 801956a:	a830      	add	r0, sp, #192	; 0xc0
 801956c:	f7ff fbd6 	bl	8018d1c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019570:	b203      	sxth	r3, r0
 8019572:	e7a4      	b.n	80194be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e4>

08019574 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019574:	2b02      	cmp	r3, #2
 8019576:	d00e      	beq.n	8019596 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8019578:	2b03      	cmp	r3, #3
 801957a:	d012      	beq.n	80195a2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801957c:	2b01      	cmp	r3, #1
 801957e:	d003      	beq.n	8019588 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019580:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019584:	1850      	adds	r0, r2, r1
 8019586:	4770      	bx	lr
 8019588:	8803      	ldrh	r3, [r0, #0]
 801958a:	8880      	ldrh	r0, [r0, #4]
 801958c:	4418      	add	r0, r3
 801958e:	b200      	sxth	r0, r0
 8019590:	1a80      	subs	r0, r0, r2
 8019592:	3801      	subs	r0, #1
 8019594:	4770      	bx	lr
 8019596:	8803      	ldrh	r3, [r0, #0]
 8019598:	8880      	ldrh	r0, [r0, #4]
 801959a:	4418      	add	r0, r3
 801959c:	b200      	sxth	r0, r0
 801959e:	1a40      	subs	r0, r0, r1
 80195a0:	e7f7      	b.n	8019592 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80195a2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80195a6:	4410      	add	r0, r2
 80195a8:	4770      	bx	lr

080195aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80195aa:	2b02      	cmp	r3, #2
 80195ac:	d008      	beq.n	80195c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80195ae:	2b03      	cmp	r3, #3
 80195b0:	d00d      	beq.n	80195ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80195b2:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80195b6:	2b01      	cmp	r3, #1
 80195b8:	bf14      	ite	ne
 80195ba:	1880      	addne	r0, r0, r2
 80195bc:	1840      	addeq	r0, r0, r1
 80195be:	4770      	bx	lr
 80195c0:	8843      	ldrh	r3, [r0, #2]
 80195c2:	88c0      	ldrh	r0, [r0, #6]
 80195c4:	4418      	add	r0, r3
 80195c6:	b200      	sxth	r0, r0
 80195c8:	1a80      	subs	r0, r0, r2
 80195ca:	3801      	subs	r0, #1
 80195cc:	4770      	bx	lr
 80195ce:	8843      	ldrh	r3, [r0, #2]
 80195d0:	88c0      	ldrh	r0, [r0, #6]
 80195d2:	4418      	add	r0, r3
 80195d4:	b200      	sxth	r0, r0
 80195d6:	1a40      	subs	r0, r0, r1
 80195d8:	e7f7      	b.n	80195ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

080195da <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80195da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195dc:	f8dd c014 	ldr.w	ip, [sp, #20]
 80195e0:	9c06      	ldr	r4, [sp, #24]
 80195e2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80195e6:	1e05      	subs	r5, r0, #0
 80195e8:	bfba      	itte	lt
 80195ea:	f04f 37ff 	movlt.w	r7, #4294967295
 80195ee:	426d      	neglt	r5, r5
 80195f0:	2701      	movge	r7, #1
 80195f2:	f1bc 0f00 	cmp.w	ip, #0
 80195f6:	bfb8      	it	lt
 80195f8:	f1cc 0c00 	rsblt	ip, ip, #0
 80195fc:	f04f 0601 	mov.w	r6, #1
 8019600:	fa4c f001 	asr.w	r0, ip, r1
 8019604:	fa06 f101 	lsl.w	r1, r6, r1
 8019608:	f101 31ff 	add.w	r1, r1, #4294967295
 801960c:	ea01 010c 	and.w	r1, r1, ip
 8019610:	bfb8      	it	lt
 8019612:	427f      	neglt	r7, r7
 8019614:	434d      	muls	r5, r1
 8019616:	2c00      	cmp	r4, #0
 8019618:	f8de 1000 	ldr.w	r1, [lr]
 801961c:	bfb8      	it	lt
 801961e:	4264      	neglt	r4, r4
 8019620:	fb03 1300 	mla	r3, r3, r0, r1
 8019624:	fb95 f1f4 	sdiv	r1, r5, r4
 8019628:	fb04 5511 	mls	r5, r4, r1, r5
 801962c:	441d      	add	r5, r3
 801962e:	fb95 f3f4 	sdiv	r3, r5, r4
 8019632:	fb04 5413 	mls	r4, r4, r3, r5
 8019636:	4419      	add	r1, r3
 8019638:	bfb8      	it	lt
 801963a:	427f      	neglt	r7, r7
 801963c:	fb02 1000 	mla	r0, r2, r0, r1
 8019640:	f8ce 4000 	str.w	r4, [lr]
 8019644:	4378      	muls	r0, r7
 8019646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019648 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801964c:	4c24      	ldr	r4, [pc, #144]	; (80196e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801964e:	6807      	ldr	r7, [r0, #0]
 8019650:	69a3      	ldr	r3, [r4, #24]
 8019652:	b086      	sub	sp, #24
 8019654:	4605      	mov	r5, r0
 8019656:	b92b      	cbnz	r3, 8019664 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8019658:	6840      	ldr	r0, [r0, #4]
 801965a:	602f      	str	r7, [r5, #0]
 801965c:	6068      	str	r0, [r5, #4]
 801965e:	b006      	add	sp, #24
 8019660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019664:	68a2      	ldr	r2, [r4, #8]
 8019666:	6820      	ldr	r0, [r4, #0]
 8019668:	ae06      	add	r6, sp, #24
 801966a:	f04f 0802 	mov.w	r8, #2
 801966e:	fb93 f1f8 	sdiv	r1, r3, r8
 8019672:	440a      	add	r2, r1
 8019674:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019678:	69e1      	ldr	r1, [r4, #28]
 801967a:	9301      	str	r3, [sp, #4]
 801967c:	9700      	str	r7, [sp, #0]
 801967e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019682:	9602      	str	r6, [sp, #8]
 8019684:	f7ff ffa9 	bl	80195da <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019688:	69a3      	ldr	r3, [r4, #24]
 801968a:	9301      	str	r3, [sp, #4]
 801968c:	686b      	ldr	r3, [r5, #4]
 801968e:	9300      	str	r3, [sp, #0]
 8019690:	4607      	mov	r7, r0
 8019692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019694:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8019696:	6a21      	ldr	r1, [r4, #32]
 8019698:	9602      	str	r6, [sp, #8]
 801969a:	6860      	ldr	r0, [r4, #4]
 801969c:	f7ff ff9d 	bl	80195da <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80196a0:	6963      	ldr	r3, [r4, #20]
 80196a2:	69a2      	ldr	r2, [r4, #24]
 80196a4:	fb92 f8f8 	sdiv	r8, r2, r8
 80196a8:	4443      	add	r3, r8
 80196aa:	9305      	str	r3, [sp, #20]
 80196ac:	682b      	ldr	r3, [r5, #0]
 80196ae:	9201      	str	r2, [sp, #4]
 80196b0:	9300      	str	r3, [sp, #0]
 80196b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80196b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80196b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80196b8:	9602      	str	r6, [sp, #8]
 80196ba:	4407      	add	r7, r0
 80196bc:	68e0      	ldr	r0, [r4, #12]
 80196be:	f7ff ff8c 	bl	80195da <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80196c2:	69a3      	ldr	r3, [r4, #24]
 80196c4:	9301      	str	r3, [sp, #4]
 80196c6:	686b      	ldr	r3, [r5, #4]
 80196c8:	9300      	str	r3, [sp, #0]
 80196ca:	4680      	mov	r8, r0
 80196cc:	9602      	str	r6, [sp, #8]
 80196ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80196d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80196d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80196d4:	6920      	ldr	r0, [r4, #16]
 80196d6:	f7ff ff80 	bl	80195da <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80196da:	4440      	add	r0, r8
 80196dc:	e7bd      	b.n	801965a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80196de:	bf00      	nop
 80196e0:	20009ac8 	.word	0x20009ac8

080196e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80196e4:	b510      	push	{r4, lr}
 80196e6:	4b07      	ldr	r3, [pc, #28]	; (8019704 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	2b01      	cmp	r3, #1
 80196ec:	d108      	bne.n	8019700 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80196ee:	4b06      	ldr	r3, [pc, #24]	; (8019708 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80196f0:	880c      	ldrh	r4, [r1, #0]
 80196f2:	881b      	ldrh	r3, [r3, #0]
 80196f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80196f8:	3b01      	subs	r3, #1
 80196fa:	1b1b      	subs	r3, r3, r4
 80196fc:	8003      	strh	r3, [r0, #0]
 80196fe:	800a      	strh	r2, [r1, #0]
 8019700:	bd10      	pop	{r4, pc}
 8019702:	bf00      	nop
 8019704:	20009ab6 	.word	0x20009ab6
 8019708:	20009aba 	.word	0x20009aba

0801970c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801970c:	b510      	push	{r4, lr}
 801970e:	4b07      	ldr	r3, [pc, #28]	; (801972c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	2b01      	cmp	r3, #1
 8019714:	d108      	bne.n	8019728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019716:	f9b1 3000 	ldrsh.w	r3, [r1]
 801971a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801971e:	8003      	strh	r3, [r0, #0]
 8019720:	8893      	ldrh	r3, [r2, #4]
 8019722:	3b01      	subs	r3, #1
 8019724:	1b1b      	subs	r3, r3, r4
 8019726:	800b      	strh	r3, [r1, #0]
 8019728:	bd10      	pop	{r4, pc}
 801972a:	bf00      	nop
 801972c:	20009ab6 	.word	0x20009ab6

08019730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019730:	b513      	push	{r0, r1, r4, lr}
 8019732:	4b0a      	ldr	r3, [pc, #40]	; (801975c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 8019734:	f9b3 4000 	ldrsh.w	r4, [r3]
 8019738:	4b09      	ldr	r3, [pc, #36]	; (8019760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801973a:	f8ad 4004 	strh.w	r4, [sp, #4]
 801973e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019742:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019746:	2300      	movs	r3, #0
 8019748:	466a      	mov	r2, sp
 801974a:	f8ad 3000 	strh.w	r3, [sp]
 801974e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019752:	f7ff ffdb 	bl	801970c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019756:	b002      	add	sp, #8
 8019758:	bd10      	pop	{r4, pc}
 801975a:	bf00      	nop
 801975c:	20009ab2 	.word	0x20009ab2
 8019760:	20009ab4 	.word	0x20009ab4

08019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019764:	b510      	push	{r4, lr}
 8019766:	4b0a      	ldr	r3, [pc, #40]	; (8019790 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019768:	781b      	ldrb	r3, [r3, #0]
 801976a:	2b01      	cmp	r3, #1
 801976c:	460a      	mov	r2, r1
 801976e:	d10d      	bne.n	801978c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019770:	8881      	ldrh	r1, [r0, #4]
 8019772:	8803      	ldrh	r3, [r0, #0]
 8019774:	440b      	add	r3, r1
 8019776:	4601      	mov	r1, r0
 8019778:	3b01      	subs	r3, #1
 801977a:	f821 3b02 	strh.w	r3, [r1], #2
 801977e:	f7ff ffc5 	bl	801970c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019782:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019786:	88c2      	ldrh	r2, [r0, #6]
 8019788:	8082      	strh	r2, [r0, #4]
 801978a:	80c3      	strh	r3, [r0, #6]
 801978c:	bd10      	pop	{r4, pc}
 801978e:	bf00      	nop
 8019790:	20009ab6 	.word	0x20009ab6

08019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019794:	b507      	push	{r0, r1, r2, lr}
 8019796:	4b0a      	ldr	r3, [pc, #40]	; (80197c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019798:	f9b3 1000 	ldrsh.w	r1, [r3]
 801979c:	4b09      	ldr	r3, [pc, #36]	; (80197c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801979e:	f8ad 1004 	strh.w	r1, [sp, #4]
 80197a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197a6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80197aa:	2300      	movs	r3, #0
 80197ac:	4669      	mov	r1, sp
 80197ae:	f8ad 3000 	strh.w	r3, [sp]
 80197b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80197b6:	f7ff ffd5 	bl	8019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80197ba:	b003      	add	sp, #12
 80197bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80197c0:	20009ab2 	.word	0x20009ab2
 80197c4:	20009ab4 	.word	0x20009ab4

080197c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80197c8:	4b03      	ldr	r3, [pc, #12]	; (80197d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80197ca:	6818      	ldr	r0, [r3, #0]
 80197cc:	b110      	cbz	r0, 80197d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80197ce:	6803      	ldr	r3, [r0, #0]
 80197d0:	699b      	ldr	r3, [r3, #24]
 80197d2:	4718      	bx	r3
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop
 80197d8:	20009b18 	.word	0x20009b18

080197dc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80197dc:	4770      	bx	lr
	...

080197e0 <_ZN8touchgfx11Application4drawEv>:
 80197e0:	b507      	push	{r0, r1, r2, lr}
 80197e2:	4b0b      	ldr	r3, [pc, #44]	; (8019810 <_ZN8touchgfx11Application4drawEv+0x30>)
 80197e4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80197e8:	4b0a      	ldr	r3, [pc, #40]	; (8019814 <_ZN8touchgfx11Application4drawEv+0x34>)
 80197ea:	f8ad 1004 	strh.w	r1, [sp, #4]
 80197ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197f2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80197f6:	2300      	movs	r3, #0
 80197f8:	f8ad 3000 	strh.w	r3, [sp]
 80197fc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019800:	6803      	ldr	r3, [r0, #0]
 8019802:	4669      	mov	r1, sp
 8019804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019806:	4798      	blx	r3
 8019808:	b003      	add	sp, #12
 801980a:	f85d fb04 	ldr.w	pc, [sp], #4
 801980e:	bf00      	nop
 8019810:	20009ab2 	.word	0x20009ab2
 8019814:	20009ab4 	.word	0x20009ab4

08019818 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019818:	4b03      	ldr	r3, [pc, #12]	; (8019828 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801981a:	6818      	ldr	r0, [r3, #0]
 801981c:	b110      	cbz	r0, 8019824 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801981e:	6803      	ldr	r3, [r0, #0]
 8019820:	69db      	ldr	r3, [r3, #28]
 8019822:	4718      	bx	r3
 8019824:	4770      	bx	lr
 8019826:	bf00      	nop
 8019828:	20009b18 	.word	0x20009b18

0801982c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801982c:	4b03      	ldr	r3, [pc, #12]	; (801983c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801982e:	6818      	ldr	r0, [r3, #0]
 8019830:	b110      	cbz	r0, 8019838 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019832:	6803      	ldr	r3, [r0, #0]
 8019834:	6a1b      	ldr	r3, [r3, #32]
 8019836:	4718      	bx	r3
 8019838:	4770      	bx	lr
 801983a:	bf00      	nop
 801983c:	20009b18 	.word	0x20009b18

08019840 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019840:	4b03      	ldr	r3, [pc, #12]	; (8019850 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019842:	6818      	ldr	r0, [r3, #0]
 8019844:	b110      	cbz	r0, 801984c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019846:	6803      	ldr	r3, [r0, #0]
 8019848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801984a:	4718      	bx	r3
 801984c:	4770      	bx	lr
 801984e:	bf00      	nop
 8019850:	20009b18 	.word	0x20009b18

08019854 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019858:	4d3b      	ldr	r5, [pc, #236]	; (8019948 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801985a:	4604      	mov	r4, r0
 801985c:	6828      	ldr	r0, [r5, #0]
 801985e:	2800      	cmp	r0, #0
 8019860:	d046      	beq.n	80198f0 <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 8019862:	7a03      	ldrb	r3, [r0, #8]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d143      	bne.n	80198f0 <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 8019868:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801986c:	6803      	ldr	r3, [r0, #0]
 801986e:	689b      	ldr	r3, [r3, #8]
 8019870:	e03b      	b.n	80198ea <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8019872:	3b01      	subs	r3, #1
 8019874:	f04f 0c00 	mov.w	ip, #0
 8019878:	1c5a      	adds	r2, r3, #1
 801987a:	d031      	beq.n	80198e0 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801987c:	18e2      	adds	r2, r4, r3
 801987e:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 8019882:	bb59      	cbnz	r1, 80198dc <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 8019884:	b298      	uxth	r0, r3
 8019886:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801988a:	1d25      	adds	r5, r4, #4
 801988c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8019890:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 8019894:	428a      	cmp	r2, r1
 8019896:	dd14      	ble.n	80198c2 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 8019898:	682e      	ldr	r6, [r5, #0]
 801989a:	45b0      	cmp	r8, r6
 801989c:	d106      	bne.n	80198ac <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801989e:	46ae      	mov	lr, r5
 80198a0:	460e      	mov	r6, r1
 80198a2:	2e1e      	cmp	r6, #30
 80198a4:	dd05      	ble.n	80198b2 <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 80198a6:	3a01      	subs	r2, #1
 80198a8:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 80198ac:	3101      	adds	r1, #1
 80198ae:	3504      	adds	r5, #4
 80198b0:	e7ee      	b.n	8019890 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 80198b2:	3601      	adds	r6, #1
 80198b4:	f8de 7004 	ldr.w	r7, [lr, #4]
 80198b8:	f84e 7b04 	str.w	r7, [lr], #4
 80198bc:	42b2      	cmp	r2, r6
 80198be:	dcf0      	bgt.n	80198a2 <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 80198c0:	e7f1      	b.n	80198a6 <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 80198c2:	4290      	cmp	r0, r2
 80198c4:	da07      	bge.n	80198d6 <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 80198c6:	1821      	adds	r1, r4, r0
 80198c8:	3001      	adds	r0, #1
 80198ca:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 80198ce:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80198d2:	b280      	uxth	r0, r0
 80198d4:	e7f5      	b.n	80198c2 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 80198d6:	4422      	add	r2, r4
 80198d8:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 80198dc:	3b01      	subs	r3, #1
 80198de:	e7cb      	b.n	8019878 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 80198e0:	4b1a      	ldr	r3, [pc, #104]	; (801994c <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 80198e2:	6818      	ldr	r0, [r3, #0]
 80198e4:	b368      	cbz	r0, 8019942 <_ZN8touchgfx11Application15handleTickEventEv+0xee>
 80198e6:	6803      	ldr	r3, [r0, #0]
 80198e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198ee:	4718      	bx	r3
 80198f0:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80198f4:	b913      	cbnz	r3, 80198fc <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 80198f6:	b108      	cbz	r0, 80198fc <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 80198f8:	7a03      	ldrb	r3, [r0, #8]
 80198fa:	b9a3      	cbnz	r3, 8019926 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 80198fc:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 8019900:	f104 0788 	add.w	r7, r4, #136	; 0x88
 8019904:	2600      	movs	r6, #0
 8019906:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801990a:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801990e:	429e      	cmp	r6, r3
 8019910:	daaf      	bge.n	8019872 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8019912:	f817 3b01 	ldrb.w	r3, [r7], #1
 8019916:	b123      	cbz	r3, 8019922 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8019918:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801991c:	6803      	ldr	r3, [r0, #0]
 801991e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019920:	4798      	blx	r3
 8019922:	3601      	adds	r6, #1
 8019924:	e7f1      	b.n	801990a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8019926:	4b09      	ldr	r3, [pc, #36]	; (801994c <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 8019928:	6818      	ldr	r0, [r3, #0]
 801992a:	b110      	cbz	r0, 8019932 <_ZN8touchgfx11Application15handleTickEventEv+0xde>
 801992c:	6803      	ldr	r3, [r0, #0]
 801992e:	691b      	ldr	r3, [r3, #16]
 8019930:	4798      	blx	r3
 8019932:	6828      	ldr	r0, [r5, #0]
 8019934:	6803      	ldr	r3, [r0, #0]
 8019936:	68db      	ldr	r3, [r3, #12]
 8019938:	4798      	blx	r3
 801993a:	2301      	movs	r3, #1
 801993c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8019940:	e7dc      	b.n	80198fc <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 8019942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019946:	bf00      	nop
 8019948:	20009b1c 	.word	0x20009b1c
 801994c:	20009b18 	.word	0x20009b18

08019950 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019950:	b570      	push	{r4, r5, r6, lr}
 8019952:	4606      	mov	r6, r0
 8019954:	460c      	mov	r4, r1
 8019956:	b929      	cbnz	r1, 8019964 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019958:	4b0c      	ldr	r3, [pc, #48]	; (801998c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801995a:	4a0d      	ldr	r2, [pc, #52]	; (8019990 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801995c:	480d      	ldr	r0, [pc, #52]	; (8019994 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801995e:	2163      	movs	r1, #99	; 0x63
 8019960:	f005 fef2 	bl	801f748 <__assert_func>
 8019964:	4d0c      	ldr	r5, [pc, #48]	; (8019998 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019966:	2300      	movs	r3, #0
 8019968:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801996c:	6828      	ldr	r0, [r5, #0]
 801996e:	b110      	cbz	r0, 8019976 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8019970:	6803      	ldr	r3, [r0, #0]
 8019972:	695b      	ldr	r3, [r3, #20]
 8019974:	4798      	blx	r3
 8019976:	602c      	str	r4, [r5, #0]
 8019978:	6823      	ldr	r3, [r4, #0]
 801997a:	4620      	mov	r0, r4
 801997c:	68db      	ldr	r3, [r3, #12]
 801997e:	4798      	blx	r3
 8019980:	6833      	ldr	r3, [r6, #0]
 8019982:	4630      	mov	r0, r6
 8019984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801998a:	4718      	bx	r3
 801998c:	0802329a 	.word	0x0802329a
 8019990:	08023364 	.word	0x08023364
 8019994:	080232a4 	.word	0x080232a4
 8019998:	20009b18 	.word	0x20009b18

0801999c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801999c:	b570      	push	{r4, r5, r6, lr}
 801999e:	f9b1 4000 	ldrsh.w	r4, [r1]
 80199a2:	f9b0 5000 	ldrsh.w	r5, [r0]
 80199a6:	42ac      	cmp	r4, r5
 80199a8:	db18      	blt.n	80199dc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80199aa:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80199ae:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80199b2:	429a      	cmp	r2, r3
 80199b4:	db12      	blt.n	80199dc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80199b6:	8886      	ldrh	r6, [r0, #4]
 80199b8:	4435      	add	r5, r6
 80199ba:	888e      	ldrh	r6, [r1, #4]
 80199bc:	4434      	add	r4, r6
 80199be:	b22d      	sxth	r5, r5
 80199c0:	b224      	sxth	r4, r4
 80199c2:	42a5      	cmp	r5, r4
 80199c4:	db0a      	blt.n	80199dc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80199c6:	88c0      	ldrh	r0, [r0, #6]
 80199c8:	4418      	add	r0, r3
 80199ca:	88cb      	ldrh	r3, [r1, #6]
 80199cc:	441a      	add	r2, r3
 80199ce:	b200      	sxth	r0, r0
 80199d0:	b212      	sxth	r2, r2
 80199d2:	4290      	cmp	r0, r2
 80199d4:	bfb4      	ite	lt
 80199d6:	2000      	movlt	r0, #0
 80199d8:	2001      	movge	r0, #1
 80199da:	bd70      	pop	{r4, r5, r6, pc}
 80199dc:	2000      	movs	r0, #0
 80199de:	bd70      	pop	{r4, r5, r6, pc}

080199e0 <_ZN8touchgfx11Application11getInstanceEv>:
 80199e0:	4b01      	ldr	r3, [pc, #4]	; (80199e8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80199e2:	6818      	ldr	r0, [r3, #0]
 80199e4:	4770      	bx	lr
 80199e6:	bf00      	nop
 80199e8:	20009b20 	.word	0x20009b20

080199ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80199ec:	2300      	movs	r3, #0
 80199ee:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80199f2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80199f6:	30a8      	adds	r0, #168	; 0xa8
 80199f8:	f802 3b01 	strb.w	r3, [r2], #1
 80199fc:	4282      	cmp	r2, r0
 80199fe:	d1fb      	bne.n	80199f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019a00:	4770      	bx	lr

08019a02 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019a02:	4603      	mov	r3, r0
 8019a04:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019a08:	2200      	movs	r2, #0
 8019a0a:	801a      	strh	r2, [r3, #0]
 8019a0c:	805a      	strh	r2, [r3, #2]
 8019a0e:	809a      	strh	r2, [r3, #4]
 8019a10:	80da      	strh	r2, [r3, #6]
 8019a12:	3308      	adds	r3, #8
 8019a14:	428b      	cmp	r3, r1
 8019a16:	d1f8      	bne.n	8019a0a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019a18:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8019a1c:	4770      	bx	lr
	...

08019a20 <_ZN8touchgfx11ApplicationC1Ev>:
 8019a20:	b570      	push	{r4, r5, r6, lr}
 8019a22:	4b16      	ldr	r3, [pc, #88]	; (8019a7c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8019a24:	6003      	str	r3, [r0, #0]
 8019a26:	2500      	movs	r5, #0
 8019a28:	4604      	mov	r4, r0
 8019a2a:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8019a2e:	30a8      	adds	r0, #168	; 0xa8
 8019a30:	f7ff ffe7 	bl	8019a02 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019a34:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019a38:	f7ff ffe3 	bl	8019a02 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019a3c:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8019a40:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8019a44:	490e      	ldr	r1, [pc, #56]	; (8019a80 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8019a46:	480f      	ldr	r0, [pc, #60]	; (8019a84 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8019a48:	4e0f      	ldr	r6, [pc, #60]	; (8019a88 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8019a4a:	f005 fd61 	bl	801f510 <CRC_Lock>
 8019a4e:	4b0f      	ldr	r3, [pc, #60]	; (8019a8c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019a50:	b158      	cbz	r0, 8019a6a <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 8019a52:	801d      	strh	r5, [r3, #0]
 8019a54:	4a0e      	ldr	r2, [pc, #56]	; (8019a90 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019a56:	2300      	movs	r3, #0
 8019a58:	6013      	str	r3, [r2, #0]
 8019a5a:	4a0e      	ldr	r2, [pc, #56]	; (8019a94 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019a5c:	6033      	str	r3, [r6, #0]
 8019a5e:	4620      	mov	r0, r4
 8019a60:	6013      	str	r3, [r2, #0]
 8019a62:	f7ff ffc3 	bl	80199ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019a66:	4620      	mov	r0, r4
 8019a68:	bd70      	pop	{r4, r5, r6, pc}
 8019a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019a6e:	2002      	movs	r0, #2
 8019a70:	801a      	strh	r2, [r3, #0]
 8019a72:	6030      	str	r0, [r6, #0]
 8019a74:	f000 ff3e 	bl	801a8f4 <_ZN8touchgfx6Screen4drawEv>
 8019a78:	e7ec      	b.n	8019a54 <_ZN8touchgfx11ApplicationC1Ev+0x34>
 8019a7a:	bf00      	nop
 8019a7c:	08023330 	.word	0x08023330
 8019a80:	b5e8b5cd 	.word	0xb5e8b5cd
 8019a84:	f407a5c2 	.word	0xf407a5c2
 8019a88:	20009b18 	.word	0x20009b18
 8019a8c:	20000082 	.word	0x20000082
 8019a90:	20009b20 	.word	0x20009b20
 8019a94:	20009b1c 	.word	0x20009b1c

08019a98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019a98:	2300      	movs	r3, #0
 8019a9a:	8003      	strh	r3, [r0, #0]
 8019a9c:	8043      	strh	r3, [r0, #2]
 8019a9e:	8083      	strh	r3, [r0, #4]
 8019aa0:	80c3      	strh	r3, [r0, #6]
 8019aa2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	b530      	push	{r4, r5, lr}
 8019aaa:	da12      	bge.n	8019ad2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019aac:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8019ab0:	3b01      	subs	r3, #1
 8019ab2:	6825      	ldr	r5, [r4, #0]
 8019ab4:	6005      	str	r5, [r0, #0]
 8019ab6:	b29b      	uxth	r3, r3
 8019ab8:	6865      	ldr	r5, [r4, #4]
 8019aba:	6045      	str	r5, [r0, #4]
 8019abc:	429a      	cmp	r2, r3
 8019abe:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8019ac2:	da06      	bge.n	8019ad2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019ac4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019ac8:	681d      	ldr	r5, [r3, #0]
 8019aca:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8019ace:	685d      	ldr	r5, [r3, #4]
 8019ad0:	6065      	str	r5, [r4, #4]
 8019ad2:	bd30      	pop	{r4, r5, pc}

08019ad4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8019ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ad6:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019ada:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8019ade:	2a07      	cmp	r2, #7
 8019ae0:	4604      	mov	r4, r0
 8019ae2:	466b      	mov	r3, sp
 8019ae4:	dd06      	ble.n	8019af4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8019ae6:	4b09      	ldr	r3, [pc, #36]	; (8019b0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019ae8:	4a09      	ldr	r2, [pc, #36]	; (8019b10 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8019aea:	480a      	ldr	r0, [pc, #40]	; (8019b14 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019aec:	f44f 7102 	mov.w	r1, #520	; 0x208
 8019af0:	f005 fe2a 	bl	801f748 <__assert_func>
 8019af4:	1c51      	adds	r1, r2, #1
 8019af6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8019afa:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8019afe:	cb03      	ldmia	r3!, {r0, r1}
 8019b00:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019b04:	6069      	str	r1, [r5, #4]
 8019b06:	b003      	add	sp, #12
 8019b08:	bd30      	pop	{r4, r5, pc}
 8019b0a:	bf00      	nop
 8019b0c:	080232ce 	.word	0x080232ce
 8019b10:	080233a8 	.word	0x080233a8
 8019b14:	080232fd 	.word	0x080232fd

08019b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b1c:	b089      	sub	sp, #36	; 0x24
 8019b1e:	4606      	mov	r6, r0
 8019b20:	4668      	mov	r0, sp
 8019b22:	466c      	mov	r4, sp
 8019b24:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019b28:	f7f2 fe5a 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b2c:	bbb0      	cbnz	r0, 8019b9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019b2e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8019b32:	b1fd      	cbz	r5, 8019b74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019b34:	3d01      	subs	r5, #1
 8019b36:	af04      	add	r7, sp, #16
 8019b38:	f04f 090a 	mov.w	r9, #10
 8019b3c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8019b40:	ab02      	add	r3, sp, #8
 8019b42:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019b46:	6851      	ldr	r1, [r2, #4]
 8019b48:	c303      	stmia	r3!, {r0, r1}
 8019b4a:	4621      	mov	r1, r4
 8019b4c:	a802      	add	r0, sp, #8
 8019b4e:	fa1f f885 	uxth.w	r8, r5
 8019b52:	f7ff ff23 	bl	801999c <_ZNK8touchgfx4Rect8includesERKS0_>
 8019b56:	bb08      	cbnz	r0, 8019b9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019b58:	a902      	add	r1, sp, #8
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	f7ff ff1e 	bl	801999c <_ZNK8touchgfx4Rect8includesERKS0_>
 8019b60:	b1f8      	cbz	r0, 8019ba2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8019b62:	4642      	mov	r2, r8
 8019b64:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019b68:	a806      	add	r0, sp, #24
 8019b6a:	f7ff ff95 	bl	8019a98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019b6e:	f115 35ff 	adds.w	r5, r5, #4294967295
 8019b72:	d2e3      	bcs.n	8019b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8019b74:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8019b78:	2b08      	cmp	r3, #8
 8019b7a:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8019b7e:	d108      	bne.n	8019b92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019b80:	4629      	mov	r1, r5
 8019b82:	a806      	add	r0, sp, #24
 8019b84:	2207      	movs	r2, #7
 8019b86:	f7ff ff87 	bl	8019a98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019b8a:	a906      	add	r1, sp, #24
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	f7f2 fd9b 	bl	800c6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019b92:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019b96:	4628      	mov	r0, r5
 8019b98:	f7ff ff9c 	bl	8019ad4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019b9c:	b009      	add	sp, #36	; 0x24
 8019b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ba2:	4621      	mov	r1, r4
 8019ba4:	a802      	add	r0, sp, #8
 8019ba6:	f7f2 fccc 	bl	800c542 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019baa:	b150      	cbz	r0, 8019bc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8019bac:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019bb0:	a806      	add	r0, sp, #24
 8019bb2:	4642      	mov	r2, r8
 8019bb4:	f7ff ff70 	bl	8019a98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019bb8:	a902      	add	r1, sp, #8
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f7f2 fd84 	bl	800c6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019bc0:	e7d5      	b.n	8019b6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019bc6:	e887 0003 	stmia.w	r7, {r0, r1}
 8019bca:	a902      	add	r1, sp, #8
 8019bcc:	4638      	mov	r0, r7
 8019bce:	f7f2 fd7b 	bl	800c6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019bd2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019bd6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019bda:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019bde:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019be2:	fb13 f302 	smulbb	r3, r3, r2
 8019be6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019bea:	fb11 f102 	smulbb	r1, r1, r2
 8019bee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019bf2:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019bf6:	220b      	movs	r2, #11
 8019bf8:	fb09 f303 	mul.w	r3, r9, r3
 8019bfc:	434a      	muls	r2, r1
 8019bfe:	4293      	cmp	r3, r2
 8019c00:	dab5      	bge.n	8019b6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019c02:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019c06:	a806      	add	r0, sp, #24
 8019c08:	4642      	mov	r2, r8
 8019c0a:	f7ff ff45 	bl	8019a98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019c0e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019c12:	e884 0003 	stmia.w	r4, {r0, r1}
 8019c16:	e7aa      	b.n	8019b6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019c18 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019c18:	b530      	push	{r4, r5, lr}
 8019c1a:	4b1b      	ldr	r3, [pc, #108]	; (8019c88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 8019c1c:	b085      	sub	sp, #20
 8019c1e:	460c      	mov	r4, r1
 8019c20:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019c24:	4b19      	ldr	r3, [pc, #100]	; (8019c8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 8019c26:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019c2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c2e:	6861      	ldr	r1, [r4, #4]
 8019c30:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019c34:	2300      	movs	r3, #0
 8019c36:	4605      	mov	r5, r0
 8019c38:	6820      	ldr	r0, [r4, #0]
 8019c3a:	f8ad 3000 	strh.w	r3, [sp]
 8019c3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019c42:	ab02      	add	r3, sp, #8
 8019c44:	c303      	stmia	r3!, {r0, r1}
 8019c46:	4669      	mov	r1, sp
 8019c48:	a802      	add	r0, sp, #8
 8019c4a:	f7f2 fcc1 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 8019c4e:	ab02      	add	r3, sp, #8
 8019c50:	cb03      	ldmia	r3!, {r0, r1}
 8019c52:	4b0f      	ldr	r3, [pc, #60]	; (8019c90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019c54:	6020      	str	r0, [r4, #0]
 8019c56:	6818      	ldr	r0, [r3, #0]
 8019c58:	6061      	str	r1, [r4, #4]
 8019c5a:	b138      	cbz	r0, 8019c6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 8019c5c:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8019c60:	b133      	cbz	r3, 8019c70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 8019c62:	6821      	ldr	r1, [r4, #0]
 8019c64:	6862      	ldr	r2, [r4, #4]
 8019c66:	4628      	mov	r0, r5
 8019c68:	f7ff ff56 	bl	8019b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019c6c:	b005      	add	sp, #20
 8019c6e:	bd30      	pop	{r4, r5, pc}
 8019c70:	6803      	ldr	r3, [r0, #0]
 8019c72:	4621      	mov	r1, r4
 8019c74:	689b      	ldr	r3, [r3, #8]
 8019c76:	4798      	blx	r3
 8019c78:	4b06      	ldr	r3, [pc, #24]	; (8019c94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019c7a:	6818      	ldr	r0, [r3, #0]
 8019c7c:	6803      	ldr	r3, [r0, #0]
 8019c7e:	4621      	mov	r1, r4
 8019c80:	695b      	ldr	r3, [r3, #20]
 8019c82:	4798      	blx	r3
 8019c84:	e7f2      	b.n	8019c6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 8019c86:	bf00      	nop
 8019c88:	20009ab2 	.word	0x20009ab2
 8019c8c:	20009ab4 	.word	0x20009ab4
 8019c90:	20009b18 	.word	0x20009b18
 8019c94:	20009ac0 	.word	0x20009ac0

08019c98 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	b09a      	sub	sp, #104	; 0x68
 8019ca0:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8019ca4:	b129      	cbz	r1, 8019cb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019cac:	b01a      	add	sp, #104	; 0x68
 8019cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cb2:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d0f8      	beq.n	8019cac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019cba:	4fc6      	ldr	r7, [pc, #792]	; (8019fd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33c>)
 8019cbc:	a809      	add	r0, sp, #36	; 0x24
 8019cbe:	f7ff fea0 	bl	8019a02 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019cc2:	883d      	ldrh	r5, [r7, #0]
 8019cc4:	462e      	mov	r6, r5
 8019cc6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019cca:	429e      	cmp	r6, r3
 8019ccc:	db10      	blt.n	8019cf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 8019cce:	462e      	mov	r6, r5
 8019cd0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019cd4:	429e      	cmp	r6, r3
 8019cd6:	da17      	bge.n	8019d08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019cd8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019cdc:	4620      	mov	r0, r4
 8019cde:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019ce2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019ce6:	3601      	adds	r6, #1
 8019ce8:	f7ff ff16 	bl	8019b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019cec:	b2b6      	uxth	r6, r6
 8019cee:	e7ef      	b.n	8019cd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 8019cf0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019cf4:	a809      	add	r0, sp, #36	; 0x24
 8019cf6:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019cfa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019cfe:	3601      	adds	r6, #1
 8019d00:	f7ff fee8 	bl	8019ad4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019d04:	b2b6      	uxth	r6, r6
 8019d06:	e7de      	b.n	8019cc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 8019d08:	4eb3      	ldr	r6, [pc, #716]	; (8019fd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x340>)
 8019d0a:	6833      	ldr	r3, [r6, #0]
 8019d0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019d10:	2b01      	cmp	r3, #1
 8019d12:	f040 80a5 	bne.w	8019e60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1c8>
 8019d16:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019d1a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019d1e:	33aa      	adds	r3, #170	; 0xaa
 8019d20:	f04f 0900 	mov.w	r9, #0
 8019d24:	42a8      	cmp	r0, r5
 8019d26:	f103 0308 	add.w	r3, r3, #8
 8019d2a:	dd0a      	ble.n	8019d42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 8019d2c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019d30:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019d34:	440a      	add	r2, r1
 8019d36:	b212      	sxth	r2, r2
 8019d38:	4591      	cmp	r9, r2
 8019d3a:	bfb8      	it	lt
 8019d3c:	4691      	movlt	r9, r2
 8019d3e:	3501      	adds	r5, #1
 8019d40:	e7f0      	b.n	8019d24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 8019d42:	4ba6      	ldr	r3, [pc, #664]	; (8019fdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x344>)
 8019d44:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8019fe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>
 8019d48:	881d      	ldrh	r5, [r3, #0]
 8019d4a:	08ed      	lsrs	r5, r5, #3
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	2d01      	cmp	r5, #1
 8019d50:	bfb8      	it	lt
 8019d52:	2501      	movlt	r5, #1
 8019d54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019d58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d5c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019d60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019d64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019d68:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019d6c:	6830      	ldr	r0, [r6, #0]
 8019d6e:	4413      	add	r3, r2
 8019d70:	b21b      	sxth	r3, r3
 8019d72:	4599      	cmp	r9, r3
 8019d74:	6803      	ldr	r3, [r0, #0]
 8019d76:	dd49      	ble.n	8019e0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x174>
 8019d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019d7c:	4798      	blx	r3
 8019d7e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019d82:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019d86:	4413      	add	r3, r2
 8019d88:	b21b      	sxth	r3, r3
 8019d8a:	18ea      	adds	r2, r5, r3
 8019d8c:	4290      	cmp	r0, r2
 8019d8e:	f280 812f 	bge.w	8019ff0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 8019d92:	4581      	cmp	r9, r0
 8019d94:	f340 812c 	ble.w	8019ff0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 8019d98:	4298      	cmp	r0, r3
 8019d9a:	da02      	bge.n	8019da2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10a>
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	f300 812a 	bgt.w	8019ff6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x35e>
 8019da2:	6830      	ldr	r0, [r6, #0]
 8019da4:	6803      	ldr	r3, [r0, #0]
 8019da6:	2101      	movs	r1, #1
 8019da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019dac:	4798      	blx	r3
 8019dae:	e7d9      	b.n	8019d64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 8019db0:	4548      	cmp	r0, r9
 8019db2:	bfa8      	it	ge
 8019db4:	4648      	movge	r0, r9
 8019db6:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019dba:	f8b7 a000 	ldrh.w	sl, [r7]
 8019dbe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019dc2:	2100      	movs	r1, #0
 8019dc4:	1ac0      	subs	r0, r0, r3
 8019dc6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019dca:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019dce:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019dd2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019dd6:	459a      	cmp	sl, r3
 8019dd8:	dac4      	bge.n	8019d64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 8019dda:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019dde:	ab07      	add	r3, sp, #28
 8019de0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019de4:	6851      	ldr	r1, [r2, #4]
 8019de6:	c303      	stmia	r3!, {r0, r1}
 8019de8:	a807      	add	r0, sp, #28
 8019dea:	a905      	add	r1, sp, #20
 8019dec:	f7f2 fbf0 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 8019df0:	a807      	add	r0, sp, #28
 8019df2:	f7f2 fcf5 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019df6:	b920      	cbnz	r0, 8019e02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16a>
 8019df8:	6823      	ldr	r3, [r4, #0]
 8019dfa:	a907      	add	r1, sp, #28
 8019dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dfe:	4620      	mov	r0, r4
 8019e00:	4798      	blx	r3
 8019e02:	f10a 0a01 	add.w	sl, sl, #1
 8019e06:	fa1f fa8a 	uxth.w	sl, sl
 8019e0a:	e7e2      	b.n	8019dd2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x13a>
 8019e0c:	69db      	ldr	r3, [r3, #28]
 8019e0e:	4798      	blx	r3
 8019e10:	4b73      	ldr	r3, [pc, #460]	; (8019fe0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x348>)
 8019e12:	6818      	ldr	r0, [r3, #0]
 8019e14:	b148      	cbz	r0, 8019e2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x192>
 8019e16:	6803      	ldr	r3, [r0, #0]
 8019e18:	689a      	ldr	r2, [r3, #8]
 8019e1a:	6833      	ldr	r3, [r6, #0]
 8019e1c:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
 8019e20:	b109      	cbz	r1, 8019e26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x18e>
 8019e22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8019e24:	b901      	cbnz	r1, 8019e28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x190>
 8019e26:	6899      	ldr	r1, [r3, #8]
 8019e28:	4790      	blx	r2
 8019e2a:	4b6e      	ldr	r3, [pc, #440]	; (8019fe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 8019e2c:	781b      	ldrb	r3, [r3, #0]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	f43f af3c 	beq.w	8019cac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019e34:	2300      	movs	r3, #0
 8019e36:	883d      	ldrh	r5, [r7, #0]
 8019e38:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8019e3c:	34ea      	adds	r4, #234	; 0xea
 8019e3e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019e42:	429d      	cmp	r5, r3
 8019e44:	f6bf af32 	bge.w	8019cac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019e48:	ab1a      	add	r3, sp, #104	; 0x68
 8019e4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019e4e:	3b44      	subs	r3, #68	; 0x44
 8019e50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019e54:	4620      	mov	r0, r4
 8019e56:	3501      	adds	r5, #1
 8019e58:	f7ff fe3c 	bl	8019ad4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019e5c:	b2ad      	uxth	r5, r5
 8019e5e:	e7ee      	b.n	8019e3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 8019e60:	2b02      	cmp	r3, #2
 8019e62:	f040 809f 	bne.w	8019fa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 8019e66:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8019fec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x354>
 8019e6a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019e6e:	429d      	cmp	r5, r3
 8019e70:	dace      	bge.n	8019e10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 8019e72:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019e76:	ab03      	add	r3, sp, #12
 8019e78:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019e7c:	6851      	ldr	r1, [r2, #4]
 8019e7e:	c303      	stmia	r3!, {r0, r1}
 8019e80:	f899 3000 	ldrb.w	r3, [r9]
 8019e84:	2b01      	cmp	r3, #1
 8019e86:	d102      	bne.n	8019e8e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 8019e88:	a803      	add	r0, sp, #12
 8019e8a:	f7ff fc83 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019e8e:	a803      	add	r0, sp, #12
 8019e90:	f7f2 fca6 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e94:	2800      	cmp	r0, #0
 8019e96:	d17e      	bne.n	8019f96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fe>
 8019e98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019e9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019ea0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ea8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019eac:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019eb0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019eb4:	4680      	mov	r8, r0
 8019eb6:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8019eba:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 8019ebe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019ec2:	6830      	ldr	r0, [r6, #0]
 8019ec4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019ec8:	f8d0 c000 	ldr.w	ip, [r0]
 8019ecc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019ed0:	44d6      	add	lr, sl
 8019ed2:	ebae 0e02 	sub.w	lr, lr, r2
 8019ed6:	fa1f fe8e 	uxth.w	lr, lr
 8019eda:	f8cd e000 	str.w	lr, [sp]
 8019ede:	f8dc a084 	ldr.w	sl, [ip, #132]	; 0x84
 8019ee2:	47d0      	blx	sl
 8019ee4:	f899 3000 	ldrb.w	r3, [r9]
 8019ee8:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019eec:	2b01      	cmp	r3, #1
 8019eee:	d155      	bne.n	8019f9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>
 8019ef0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019ef4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019ef8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019efc:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019f00:	3b01      	subs	r3, #1
 8019f02:	4418      	add	r0, r3
 8019f04:	f8ad 000a 	strh.w	r0, [sp, #10]
 8019f08:	f10d 010a 	add.w	r1, sp, #10
 8019f0c:	a802      	add	r0, sp, #8
 8019f0e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8019f12:	f8ad 8020 	strh.w	r8, [sp, #32]
 8019f16:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8019f1a:	f7ff fbe3 	bl	80196e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019f1e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f22:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019f26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019f2a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8019f2e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019f32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019f36:	4413      	add	r3, r2
 8019f38:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019f3c:	f10d 010a 	add.w	r1, sp, #10
 8019f40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019f44:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019f48:	a802      	add	r0, sp, #8
 8019f4a:	f7ff fbcb 	bl	80196e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019f4e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8019f56:	3301      	adds	r3, #1
 8019f58:	1a9b      	subs	r3, r3, r2
 8019f5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019f5e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019f62:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019f66:	1a9b      	subs	r3, r3, r2
 8019f68:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019f6c:	6823      	ldr	r3, [r4, #0]
 8019f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f70:	a907      	add	r1, sp, #28
 8019f72:	4620      	mov	r0, r4
 8019f74:	4798      	blx	r3
 8019f76:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019f7a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019f7e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8019f82:	4413      	add	r3, r2
 8019f84:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019f88:	440a      	add	r2, r1
 8019f8a:	b21b      	sxth	r3, r3
 8019f8c:	b212      	sxth	r2, r2
 8019f8e:	4293      	cmp	r3, r2
 8019f90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f94:	db8f      	blt.n	8019eb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21e>
 8019f96:	3501      	adds	r5, #1
 8019f98:	b2ad      	uxth	r5, r5
 8019f9a:	e766      	b.n	8019e6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8019f9c:	6823      	ldr	r3, [r4, #0]
 8019f9e:	a905      	add	r1, sp, #20
 8019fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fa2:	e7e6      	b.n	8019f72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2da>
 8019fa4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019fa8:	429d      	cmp	r5, r3
 8019faa:	f6bf af31 	bge.w	8019e10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 8019fae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019fb2:	ab07      	add	r3, sp, #28
 8019fb4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019fb8:	6851      	ldr	r1, [r2, #4]
 8019fba:	c303      	stmia	r3!, {r0, r1}
 8019fbc:	a807      	add	r0, sp, #28
 8019fbe:	f7f2 fc0f 	bl	800c7e0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019fc2:	b920      	cbnz	r0, 8019fce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x336>
 8019fc4:	6823      	ldr	r3, [r4, #0]
 8019fc6:	a907      	add	r1, sp, #28
 8019fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fca:	4620      	mov	r0, r4
 8019fcc:	4798      	blx	r3
 8019fce:	3501      	adds	r5, #1
 8019fd0:	b2ad      	uxth	r5, r5
 8019fd2:	e7e7      	b.n	8019fa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 8019fd4:	20000082 	.word	0x20000082
 8019fd8:	20009ac0 	.word	0x20009ac0
 8019fdc:	20009ab4 	.word	0x20009ab4
 8019fe0:	20009b14 	.word	0x20009b14
 8019fe4:	20009abc 	.word	0x20009abc
 8019fe8:	20009ab2 	.word	0x20009ab2
 8019fec:	20009ab6 	.word	0x20009ab6
 8019ff0:	4298      	cmp	r0, r3
 8019ff2:	f6bf aedd 	bge.w	8019db0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x118>
 8019ff6:	4648      	mov	r0, r9
 8019ff8:	e6dd      	b.n	8019db6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x11e>
 8019ffa:	bf00      	nop

08019ffc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8019ffc:	2000      	movs	r0, #0
 8019ffe:	4770      	bx	lr

0801a000 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801a000:	2000      	movs	r0, #0
 801a002:	4770      	bx	lr

0801a004 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a004:	b508      	push	{r3, lr}
 801a006:	6803      	ldr	r3, [r0, #0]
 801a008:	68db      	ldr	r3, [r3, #12]
 801a00a:	4798      	blx	r3
 801a00c:	b140      	cbz	r0, 801a020 <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801a00e:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801a012:	7a83      	ldrb	r3, [r0, #10]
 801a014:	2a00      	cmp	r2, #0
 801a016:	bfb4      	ite	lt
 801a018:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801a01c:	2000      	movge	r0, #0
 801a01e:	4318      	orrs	r0, r3
 801a020:	bd08      	pop	{r3, pc}
	...

0801a024 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801a024:	b40e      	push	{r1, r2, r3}
 801a026:	b533      	push	{r0, r1, r4, r5, lr}
 801a028:	ab05      	add	r3, sp, #20
 801a02a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a02e:	9301      	str	r3, [sp, #4]
 801a030:	4b09      	ldr	r3, [pc, #36]	; (801a058 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 801a032:	685c      	ldr	r4, [r3, #4]
 801a034:	f014 0f01 	tst.w	r4, #1
 801a038:	ea4f 0464 	mov.w	r4, r4, asr #1
 801a03c:	bf1b      	ittet	ne
 801a03e:	681b      	ldrne	r3, [r3, #0]
 801a040:	5901      	ldrne	r1, [r0, r4]
 801a042:	681d      	ldreq	r5, [r3, #0]
 801a044:	58cd      	ldrne	r5, [r1, r3]
 801a046:	9b01      	ldr	r3, [sp, #4]
 801a048:	2100      	movs	r1, #0
 801a04a:	4420      	add	r0, r4
 801a04c:	47a8      	blx	r5
 801a04e:	b002      	add	sp, #8
 801a050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a054:	b003      	add	sp, #12
 801a056:	4770      	bx	lr
 801a058:	20000060 	.word	0x20000060

0801a05c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801a05c:	b40c      	push	{r2, r3}
 801a05e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a060:	ab06      	add	r3, sp, #24
 801a062:	f853 2b04 	ldr.w	r2, [r3], #4
 801a066:	9301      	str	r3, [sp, #4]
 801a068:	4b09      	ldr	r3, [pc, #36]	; (801a090 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801a06a:	685c      	ldr	r4, [r3, #4]
 801a06c:	f014 0f01 	tst.w	r4, #1
 801a070:	ea4f 0464 	mov.w	r4, r4, asr #1
 801a074:	bf1b      	ittet	ne
 801a076:	681b      	ldrne	r3, [r3, #0]
 801a078:	5905      	ldrne	r5, [r0, r4]
 801a07a:	681d      	ldreq	r5, [r3, #0]
 801a07c:	58ed      	ldrne	r5, [r5, r3]
 801a07e:	9b01      	ldr	r3, [sp, #4]
 801a080:	4420      	add	r0, r4
 801a082:	47a8      	blx	r5
 801a084:	b003      	add	sp, #12
 801a086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a08a:	b002      	add	sp, #8
 801a08c:	4770      	bx	lr
 801a08e:	bf00      	nop
 801a090:	20000060 	.word	0x20000060

0801a094 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a094:	b40e      	push	{r1, r2, r3}
 801a096:	b530      	push	{r4, r5, lr}
 801a098:	b098      	sub	sp, #96	; 0x60
 801a09a:	ab1b      	add	r3, sp, #108	; 0x6c
 801a09c:	4604      	mov	r4, r0
 801a09e:	f853 5b04 	ldr.w	r5, [r3], #4
 801a0a2:	9301      	str	r3, [sp, #4]
 801a0a4:	a802      	add	r0, sp, #8
 801a0a6:	f001 f833 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
 801a0aa:	6823      	ldr	r3, [r4, #0]
 801a0ac:	4620      	mov	r0, r4
 801a0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0b0:	4798      	blx	r3
 801a0b2:	9a01      	ldr	r2, [sp, #4]
 801a0b4:	4603      	mov	r3, r0
 801a0b6:	4629      	mov	r1, r5
 801a0b8:	a802      	add	r0, sp, #8
 801a0ba:	f001 f846 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a0be:	a802      	add	r0, sp, #8
 801a0c0:	f001 f87c 	bl	801b1bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0c4:	2401      	movs	r4, #1
 801a0c6:	b140      	cbz	r0, 801a0da <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801a0c8:	280a      	cmp	r0, #10
 801a0ca:	bf08      	it	eq
 801a0cc:	3401      	addeq	r4, #1
 801a0ce:	a802      	add	r0, sp, #8
 801a0d0:	bf08      	it	eq
 801a0d2:	b224      	sxtheq	r4, r4
 801a0d4:	f001 f872 	bl	801b1bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0d8:	e7f5      	b.n	801a0c6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801a0da:	b2a0      	uxth	r0, r4
 801a0dc:	b018      	add	sp, #96	; 0x60
 801a0de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a0e2:	b003      	add	sp, #12
 801a0e4:	4770      	bx	lr
	...

0801a0e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a0e8:	b40e      	push	{r1, r2, r3}
 801a0ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0ec:	b098      	sub	sp, #96	; 0x60
 801a0ee:	ab1d      	add	r3, sp, #116	; 0x74
 801a0f0:	4605      	mov	r5, r0
 801a0f2:	f853 4b04 	ldr.w	r4, [r3], #4
 801a0f6:	9300      	str	r3, [sp, #0]
 801a0f8:	a802      	add	r0, sp, #8
 801a0fa:	f001 f809 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
 801a0fe:	682b      	ldr	r3, [r5, #0]
 801a100:	4f24      	ldr	r7, [pc, #144]	; (801a194 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xac>)
 801a102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a104:	4628      	mov	r0, r5
 801a106:	4798      	blx	r3
 801a108:	ae18      	add	r6, sp, #96	; 0x60
 801a10a:	4603      	mov	r3, r0
 801a10c:	4621      	mov	r1, r4
 801a10e:	9a00      	ldr	r2, [sp, #0]
 801a110:	a802      	add	r0, sp, #8
 801a112:	2400      	movs	r4, #0
 801a114:	f001 f819 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a118:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801a11c:	462a      	mov	r2, r5
 801a11e:	4633      	mov	r3, r6
 801a120:	4621      	mov	r1, r4
 801a122:	a802      	add	r0, sp, #8
 801a124:	f001 f97c 	bl	801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a128:	b370      	cbz	r0, 801a188 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>
 801a12a:	280a      	cmp	r0, #10
 801a12c:	d025      	beq.n	801a17a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 801a12e:	9a01      	ldr	r2, [sp, #4]
 801a130:	b31a      	cbz	r2, 801a17a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 801a132:	7b51      	ldrb	r1, [r2, #13]
 801a134:	f892 c008 	ldrb.w	ip, [r2, #8]
 801a138:	88ab      	ldrh	r3, [r5, #4]
 801a13a:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a13e:	bf14      	ite	ne
 801a140:	46be      	movne	lr, r7
 801a142:	f04f 0e00 	moveq.w	lr, #0
 801a146:	f011 0f20 	tst.w	r1, #32
 801a14a:	bf14      	ite	ne
 801a14c:	f44f 7080 	movne.w	r0, #256	; 0x100
 801a150:	2000      	moveq	r0, #0
 801a152:	ea4e 0e0c 	orr.w	lr, lr, ip
 801a156:	ea40 000e 	orr.w	r0, r0, lr
 801a15a:	f011 0f10 	tst.w	r1, #16
 801a15e:	eba3 0300 	sub.w	r3, r3, r0
 801a162:	79d0      	ldrb	r0, [r2, #7]
 801a164:	bf14      	ite	ne
 801a166:	f44f 7280 	movne.w	r2, #256	; 0x100
 801a16a:	2200      	moveq	r2, #0
 801a16c:	4302      	orrs	r2, r0
 801a16e:	fa12 f383 	uxtah	r3, r2, r3
 801a172:	b29b      	uxth	r3, r3
 801a174:	42a3      	cmp	r3, r4
 801a176:	bfc8      	it	gt
 801a178:	b21c      	sxthgt	r4, r3
 801a17a:	4633      	mov	r3, r6
 801a17c:	462a      	mov	r2, r5
 801a17e:	2100      	movs	r1, #0
 801a180:	a802      	add	r0, sp, #8
 801a182:	f001 f94d 	bl	801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a186:	e7cf      	b.n	801a128 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801a188:	b2a0      	uxth	r0, r4
 801a18a:	b018      	add	sp, #96	; 0x60
 801a18c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a190:	b003      	add	sp, #12
 801a192:	4770      	bx	lr
 801a194:	fffffe00 	.word	0xfffffe00

0801a198 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a198:	b40e      	push	{r1, r2, r3}
 801a19a:	b570      	push	{r4, r5, r6, lr}
 801a19c:	b099      	sub	sp, #100	; 0x64
 801a19e:	ab1d      	add	r3, sp, #116	; 0x74
 801a1a0:	4604      	mov	r4, r0
 801a1a2:	f853 5b04 	ldr.w	r5, [r3], #4
 801a1a6:	9300      	str	r3, [sp, #0]
 801a1a8:	a802      	add	r0, sp, #8
 801a1aa:	f000 ffb1 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
 801a1ae:	6823      	ldr	r3, [r4, #0]
 801a1b0:	4620      	mov	r0, r4
 801a1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1b4:	4798      	blx	r3
 801a1b6:	4629      	mov	r1, r5
 801a1b8:	4603      	mov	r3, r0
 801a1ba:	9a00      	ldr	r2, [sp, #0]
 801a1bc:	a802      	add	r0, sp, #8
 801a1be:	ad18      	add	r5, sp, #96	; 0x60
 801a1c0:	f000 ffc3 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a1c4:	2100      	movs	r1, #0
 801a1c6:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801a1ca:	4622      	mov	r2, r4
 801a1cc:	462b      	mov	r3, r5
 801a1ce:	a802      	add	r0, sp, #8
 801a1d0:	f001 f926 	bl	801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a1d4:	26ff      	movs	r6, #255	; 0xff
 801a1d6:	b190      	cbz	r0, 801a1fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801a1d8:	280a      	cmp	r0, #10
 801a1da:	d009      	beq.n	801a1f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801a1dc:	9a01      	ldr	r2, [sp, #4]
 801a1de:	b13a      	cbz	r2, 801a1f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801a1e0:	7923      	ldrb	r3, [r4, #4]
 801a1e2:	7a12      	ldrb	r2, [r2, #8]
 801a1e4:	1a9b      	subs	r3, r3, r2
 801a1e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801a1ea:	429e      	cmp	r6, r3
 801a1ec:	bfa8      	it	ge
 801a1ee:	461e      	movge	r6, r3
 801a1f0:	462b      	mov	r3, r5
 801a1f2:	4622      	mov	r2, r4
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	a802      	add	r0, sp, #8
 801a1f8:	f001 f912 	bl	801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a1fc:	e7eb      	b.n	801a1d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801a1fe:	4630      	mov	r0, r6
 801a200:	b019      	add	sp, #100	; 0x64
 801a202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a206:	b003      	add	sp, #12
 801a208:	4770      	bx	lr

0801a20a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a20a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a20e:	4607      	mov	r7, r0
 801a210:	b099      	sub	sp, #100	; 0x64
 801a212:	a802      	add	r0, sp, #8
 801a214:	4614      	mov	r4, r2
 801a216:	461d      	mov	r5, r3
 801a218:	468a      	mov	sl, r1
 801a21a:	f000 ff79 	bl	801b110 <_ZN8touchgfx12TextProviderC1Ev>
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	4638      	mov	r0, r7
 801a222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a224:	4798      	blx	r3
 801a226:	462a      	mov	r2, r5
 801a228:	4603      	mov	r3, r0
 801a22a:	4621      	mov	r1, r4
 801a22c:	a802      	add	r0, sp, #8
 801a22e:	f000 ff8c 	bl	801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a232:	f04f 0800 	mov.w	r8, #0
 801a236:	46c1      	mov	r9, r8
 801a238:	4645      	mov	r5, r8
 801a23a:	2300      	movs	r3, #0
 801a23c:	9301      	str	r3, [sp, #4]
 801a23e:	463a      	mov	r2, r7
 801a240:	ab01      	add	r3, sp, #4
 801a242:	4651      	mov	r1, sl
 801a244:	a802      	add	r0, sp, #8
 801a246:	f001 f8eb 	bl	801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a24a:	4606      	mov	r6, r0
 801a24c:	b108      	cbz	r0, 801a252 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x48>
 801a24e:	280a      	cmp	r0, #10
 801a250:	d106      	bne.n	801a260 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x56>
 801a252:	454d      	cmp	r5, r9
 801a254:	dd00      	ble.n	801a258 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4e>
 801a256:	46a9      	mov	r9, r5
 801a258:	2500      	movs	r5, #0
 801a25a:	e018      	b.n	801a28e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x84>
 801a25c:	46b0      	mov	r8, r6
 801a25e:	e7ec      	b.n	801a23a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x30>
 801a260:	9a01      	ldr	r2, [sp, #4]
 801a262:	2a00      	cmp	r2, #0
 801a264:	d0fa      	beq.n	801a25c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a266:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801a26a:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a26e:	8896      	ldrh	r6, [r2, #4]
 801a270:	2b00      	cmp	r3, #0
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	4641      	mov	r1, r8
 801a276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a278:	4638      	mov	r0, r7
 801a27a:	bfb4      	ite	lt
 801a27c:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801a280:	2400      	movge	r4, #0
 801a282:	4798      	blx	r3
 801a284:	ea44 040b 	orr.w	r4, r4, fp
 801a288:	4404      	add	r4, r0
 801a28a:	4425      	add	r5, r4
 801a28c:	b2ad      	uxth	r5, r5
 801a28e:	2e00      	cmp	r6, #0
 801a290:	d1e4      	bne.n	801a25c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a292:	4648      	mov	r0, r9
 801a294:	b019      	add	sp, #100	; 0x64
 801a296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a29a <_ZNK8touchgfx8Drawable7getTypeEv>:
 801a29a:	2000      	movs	r0, #0
 801a29c:	4770      	bx	lr

0801a29e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a29e:	b513      	push	{r0, r1, r4, lr}
 801a2a0:	1d01      	adds	r1, r0, #4
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	c903      	ldmia	r1, {r0, r1}
 801a2a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a2aa:	2100      	movs	r1, #0
 801a2ac:	f8ad 1000 	strh.w	r1, [sp]
 801a2b0:	f8ad 1002 	strh.w	r1, [sp, #2]
 801a2b4:	6819      	ldr	r1, [r3, #0]
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	690c      	ldr	r4, [r1, #16]
 801a2ba:	4669      	mov	r1, sp
 801a2bc:	47a0      	blx	r4
 801a2be:	b002      	add	sp, #8
 801a2c0:	bd10      	pop	{r4, pc}

0801a2c2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a2c2:	b538      	push	{r3, r4, r5, lr}
 801a2c4:	680b      	ldr	r3, [r1, #0]
 801a2c6:	460c      	mov	r4, r1
 801a2c8:	68db      	ldr	r3, [r3, #12]
 801a2ca:	4605      	mov	r5, r0
 801a2cc:	4798      	blx	r3
 801a2ce:	6823      	ldr	r3, [r4, #0]
 801a2d0:	4620      	mov	r0, r4
 801a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d4:	4629      	mov	r1, r5
 801a2d6:	4798      	blx	r3
 801a2d8:	4628      	mov	r0, r5
 801a2da:	bd38      	pop	{r3, r4, r5, pc}

0801a2dc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a2dc:	b410      	push	{r4}
 801a2de:	880a      	ldrh	r2, [r1, #0]
 801a2e0:	8884      	ldrh	r4, [r0, #4]
 801a2e2:	4422      	add	r2, r4
 801a2e4:	800a      	strh	r2, [r1, #0]
 801a2e6:	88c4      	ldrh	r4, [r0, #6]
 801a2e8:	884a      	ldrh	r2, [r1, #2]
 801a2ea:	4422      	add	r2, r4
 801a2ec:	804a      	strh	r2, [r1, #2]
 801a2ee:	6940      	ldr	r0, [r0, #20]
 801a2f0:	b120      	cbz	r0, 801a2fc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a2f2:	6803      	ldr	r3, [r0, #0]
 801a2f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2fa:	4718      	bx	r3
 801a2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a300:	4770      	bx	lr

0801a302 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a302:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a304:	460b      	mov	r3, r1
 801a306:	b085      	sub	sp, #20
 801a308:	4604      	mov	r4, r0
 801a30a:	b901      	cbnz	r1, 801a30e <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a30c:	b1f2      	cbz	r2, 801a34c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801a30e:	1d27      	adds	r7, r4, #4
 801a310:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a314:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a318:	88e1      	ldrh	r1, [r4, #6]
 801a31a:	440a      	add	r2, r1
 801a31c:	88a1      	ldrh	r1, [r4, #4]
 801a31e:	4419      	add	r1, r3
 801a320:	6823      	ldr	r3, [r4, #0]
 801a322:	b209      	sxth	r1, r1
 801a324:	4620      	mov	r0, r4
 801a326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a328:	b212      	sxth	r2, r2
 801a32a:	4798      	blx	r3
 801a32c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a330:	ad02      	add	r5, sp, #8
 801a332:	e885 0003 	stmia.w	r5, {r0, r1}
 801a336:	6960      	ldr	r0, [r4, #20]
 801a338:	b150      	cbz	r0, 801a350 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801a33a:	6803      	ldr	r3, [r0, #0]
 801a33c:	4669      	mov	r1, sp
 801a33e:	691b      	ldr	r3, [r3, #16]
 801a340:	4798      	blx	r3
 801a342:	6960      	ldr	r0, [r4, #20]
 801a344:	6803      	ldr	r3, [r0, #0]
 801a346:	691b      	ldr	r3, [r3, #16]
 801a348:	4629      	mov	r1, r5
 801a34a:	4798      	blx	r3
 801a34c:	b005      	add	sp, #20
 801a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a350:	f7ff fb46 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 801a354:	6803      	ldr	r3, [r0, #0]
 801a356:	4669      	mov	r1, sp
 801a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a35a:	4798      	blx	r3
 801a35c:	f7ff fb40 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 801a360:	6803      	ldr	r3, [r0, #0]
 801a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a364:	e7f0      	b.n	801a348 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801a366 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a366:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a368:	8882      	ldrh	r2, [r0, #4]
 801a36a:	880b      	ldrh	r3, [r1, #0]
 801a36c:	4413      	add	r3, r2
 801a36e:	800b      	strh	r3, [r1, #0]
 801a370:	88c2      	ldrh	r2, [r0, #6]
 801a372:	884b      	ldrh	r3, [r1, #2]
 801a374:	4413      	add	r3, r2
 801a376:	4602      	mov	r2, r0
 801a378:	804b      	strh	r3, [r1, #2]
 801a37a:	4605      	mov	r5, r0
 801a37c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a380:	460c      	mov	r4, r1
 801a382:	6851      	ldr	r1, [r2, #4]
 801a384:	466b      	mov	r3, sp
 801a386:	c303      	stmia	r3!, {r0, r1}
 801a388:	4621      	mov	r1, r4
 801a38a:	4668      	mov	r0, sp
 801a38c:	f7f2 f920 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801a390:	466b      	mov	r3, sp
 801a392:	cb03      	ldmia	r3!, {r0, r1}
 801a394:	6020      	str	r0, [r4, #0]
 801a396:	6061      	str	r1, [r4, #4]
 801a398:	6968      	ldr	r0, [r5, #20]
 801a39a:	b128      	cbz	r0, 801a3a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801a39c:	6803      	ldr	r3, [r0, #0]
 801a39e:	691b      	ldr	r3, [r3, #16]
 801a3a0:	4621      	mov	r1, r4
 801a3a2:	4798      	blx	r3
 801a3a4:	b003      	add	sp, #12
 801a3a6:	bd30      	pop	{r4, r5, pc}
 801a3a8:	f7ff fb1a 	bl	80199e0 <_ZN8touchgfx11Application11getInstanceEv>
 801a3ac:	6803      	ldr	r3, [r0, #0]
 801a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3b0:	e7f6      	b.n	801a3a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801a3b2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a3b2:	b570      	push	{r4, r5, r6, lr}
 801a3b4:	8882      	ldrh	r2, [r0, #4]
 801a3b6:	880b      	ldrh	r3, [r1, #0]
 801a3b8:	4413      	add	r3, r2
 801a3ba:	800b      	strh	r3, [r1, #0]
 801a3bc:	88c2      	ldrh	r2, [r0, #6]
 801a3be:	884b      	ldrh	r3, [r1, #2]
 801a3c0:	460c      	mov	r4, r1
 801a3c2:	4413      	add	r3, r2
 801a3c4:	804b      	strh	r3, [r1, #2]
 801a3c6:	4605      	mov	r5, r0
 801a3c8:	1d01      	adds	r1, r0, #4
 801a3ca:	4620      	mov	r0, r4
 801a3cc:	f7f2 f900 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801a3d0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a3d4:	b163      	cbz	r3, 801a3f0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a3d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a3da:	b933      	cbnz	r3, 801a3ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801a3dc:	bd70      	pop	{r4, r5, r6, pc}
 801a3de:	6803      	ldr	r3, [r0, #0]
 801a3e0:	4621      	mov	r1, r4
 801a3e2:	6a1b      	ldr	r3, [r3, #32]
 801a3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3e8:	4718      	bx	r3
 801a3ea:	6968      	ldr	r0, [r5, #20]
 801a3ec:	2800      	cmp	r0, #0
 801a3ee:	d1f6      	bne.n	801a3de <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801a3f0:	bd70      	pop	{r4, r5, r6, pc}

0801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a3f2:	b510      	push	{r4, lr}
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	4608      	mov	r0, r1
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	8023      	strh	r3, [r4, #0]
 801a3fc:	8063      	strh	r3, [r4, #2]
 801a3fe:	6803      	ldr	r3, [r0, #0]
 801a400:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a404:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a408:	80a1      	strh	r1, [r4, #4]
 801a40a:	80e2      	strh	r2, [r4, #6]
 801a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a40e:	4621      	mov	r1, r4
 801a410:	4798      	blx	r3
 801a412:	4620      	mov	r0, r4
 801a414:	bd10      	pop	{r4, pc}
	...

0801a418 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801a418:	b530      	push	{r4, r5, lr}
 801a41a:	8083      	strh	r3, [r0, #4]
 801a41c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a420:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801a424:	7183      	strb	r3, [r0, #6]
 801a426:	79c3      	ldrb	r3, [r0, #7]
 801a428:	6101      	str	r1, [r0, #16]
 801a42a:	f365 0306 	bfi	r3, r5, #0, #7
 801a42e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a432:	8282      	strh	r2, [r0, #20]
 801a434:	f365 13c7 	bfi	r3, r5, #7, #1
 801a438:	71c3      	strb	r3, [r0, #7]
 801a43a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801a43e:	7203      	strb	r3, [r0, #8]
 801a440:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801a444:	7243      	strb	r3, [r0, #9]
 801a446:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a44a:	8143      	strh	r3, [r0, #10]
 801a44c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a450:	8183      	strh	r3, [r0, #12]
 801a452:	4b01      	ldr	r3, [pc, #4]	; (801a458 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801a454:	6003      	str	r3, [r0, #0]
 801a456:	bd30      	pop	{r4, r5, pc}
 801a458:	080234d4 	.word	0x080234d4

0801a45c <_ZNK8touchgfx9ConstFont4findEt>:
 801a45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a45e:	8a84      	ldrh	r4, [r0, #20]
 801a460:	2500      	movs	r5, #0
 801a462:	3c01      	subs	r4, #1
 801a464:	260e      	movs	r6, #14
 801a466:	42a5      	cmp	r5, r4
 801a468:	dc0c      	bgt.n	801a484 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801a46a:	192a      	adds	r2, r5, r4
 801a46c:	6903      	ldr	r3, [r0, #16]
 801a46e:	1052      	asrs	r2, r2, #1
 801a470:	fb06 3302 	mla	r3, r6, r2, r3
 801a474:	889f      	ldrh	r7, [r3, #4]
 801a476:	42b9      	cmp	r1, r7
 801a478:	da01      	bge.n	801a47e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801a47a:	1e54      	subs	r4, r2, #1
 801a47c:	e7f3      	b.n	801a466 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801a47e:	dd02      	ble.n	801a486 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801a480:	1c55      	adds	r5, r2, #1
 801a482:	e7f0      	b.n	801a466 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801a484:	2300      	movs	r3, #0
 801a486:	4618      	mov	r0, r3
 801a488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a48a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a48c:	4605      	mov	r5, r0
 801a48e:	4617      	mov	r7, r2
 801a490:	461e      	mov	r6, r3
 801a492:	f7ff ffe3 	bl	801a45c <_ZNK8touchgfx9ConstFont4findEt>
 801a496:	b9e0      	cbnz	r0, 801a4d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801a498:	b911      	cbnz	r1, 801a4a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801a49a:	2400      	movs	r4, #0
 801a49c:	4620      	mov	r0, r4
 801a49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4a0:	290a      	cmp	r1, #10
 801a4a2:	d0fa      	beq.n	801a49a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a4a4:	682b      	ldr	r3, [r5, #0]
 801a4a6:	4628      	mov	r0, r5
 801a4a8:	691b      	ldr	r3, [r3, #16]
 801a4aa:	4798      	blx	r3
 801a4ac:	4601      	mov	r1, r0
 801a4ae:	4628      	mov	r0, r5
 801a4b0:	f7ff ffd4 	bl	801a45c <_ZNK8touchgfx9ConstFont4findEt>
 801a4b4:	4604      	mov	r4, r0
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	d0ef      	beq.n	801a49a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a4ba:	682b      	ldr	r3, [r5, #0]
 801a4bc:	4621      	mov	r1, r4
 801a4be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a4c0:	4628      	mov	r0, r5
 801a4c2:	4798      	blx	r3
 801a4c4:	6038      	str	r0, [r7, #0]
 801a4c6:	682b      	ldr	r3, [r5, #0]
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a4cc:	4798      	blx	r3
 801a4ce:	7030      	strb	r0, [r6, #0]
 801a4d0:	e7e4      	b.n	801a49c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801a4d2:	4604      	mov	r4, r0
 801a4d4:	e7f1      	b.n	801a4ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801a4d6 <_ZN8touchgfx6memsetEPvhm>:
 801a4d6:	4402      	add	r2, r0
 801a4d8:	4290      	cmp	r0, r2
 801a4da:	d002      	beq.n	801a4e2 <_ZN8touchgfx6memsetEPvhm+0xc>
 801a4dc:	f800 1b01 	strb.w	r1, [r0], #1
 801a4e0:	e7fa      	b.n	801a4d8 <_ZN8touchgfx6memsetEPvhm+0x2>
 801a4e2:	4770      	bx	lr

0801a4e4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801a4e4:	2002      	movs	r0, #2
 801a4e6:	4770      	bx	lr

0801a4e8 <_ZN8touchgfx12GestureEventD1Ev>:
 801a4e8:	4770      	bx	lr

0801a4ea <_ZN8touchgfx12GestureEventD0Ev>:
 801a4ea:	b510      	push	{r4, lr}
 801a4ec:	210c      	movs	r1, #12
 801a4ee:	4604      	mov	r4, r0
 801a4f0:	f005 f90d 	bl	801f70e <_ZdlPvj>
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	bd10      	pop	{r4, pc}

0801a4f8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a4f8:	b530      	push	{r4, r5, lr}
 801a4fa:	460d      	mov	r5, r1
 801a4fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a4fe:	b087      	sub	sp, #28
 801a500:	4604      	mov	r4, r0
 801a502:	b301      	cbz	r1, 801a546 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a504:	a801      	add	r0, sp, #4
 801a506:	f7ff ff74 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a50a:	892a      	ldrh	r2, [r5, #8]
 801a50c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a510:	7928      	ldrb	r0, [r5, #4]
 801a512:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a516:	f88d 0010 	strb.w	r0, [sp, #16]
 801a51a:	1ad2      	subs	r2, r2, r3
 801a51c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a51e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a520:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a524:	441a      	add	r2, r3
 801a526:	896b      	ldrh	r3, [r5, #10]
 801a528:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a52c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a530:	1b5b      	subs	r3, r3, r5
 801a532:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a534:	442b      	add	r3, r5
 801a536:	4d05      	ldr	r5, [pc, #20]	; (801a54c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a538:	9503      	str	r5, [sp, #12]
 801a53a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a53e:	6803      	ldr	r3, [r0, #0]
 801a540:	a903      	add	r1, sp, #12
 801a542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a544:	4798      	blx	r3
 801a546:	b007      	add	sp, #28
 801a548:	bd30      	pop	{r4, r5, pc}
 801a54a:	bf00      	nop
 801a54c:	08023528 	.word	0x08023528

0801a550 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a552:	460c      	mov	r4, r1
 801a554:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a556:	b089      	sub	sp, #36	; 0x24
 801a558:	4605      	mov	r5, r0
 801a55a:	2900      	cmp	r1, #0
 801a55c:	d053      	beq.n	801a606 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801a55e:	4668      	mov	r0, sp
 801a560:	f7ff ff47 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a564:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a566:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a568:	8922      	ldrh	r2, [r4, #8]
 801a56a:	88e1      	ldrh	r1, [r4, #6]
 801a56c:	443a      	add	r2, r7
 801a56e:	4431      	add	r1, r6
 801a570:	b212      	sxth	r2, r2
 801a572:	b209      	sxth	r1, r1
 801a574:	4668      	mov	r0, sp
 801a576:	f7f1 ffb5 	bl	800c4e4 <_ZNK8touchgfx4Rect9intersectEss>
 801a57a:	b1c8      	cbz	r0, 801a5b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801a57c:	89a2      	ldrh	r2, [r4, #12]
 801a57e:	8961      	ldrh	r1, [r4, #10]
 801a580:	443a      	add	r2, r7
 801a582:	4431      	add	r1, r6
 801a584:	b212      	sxth	r2, r2
 801a586:	b209      	sxth	r1, r1
 801a588:	4668      	mov	r0, sp
 801a58a:	f7f1 ffab 	bl	800c4e4 <_ZNK8touchgfx4Rect9intersectEss>
 801a58e:	b978      	cbnz	r0, 801a5b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801a590:	4b1e      	ldr	r3, [pc, #120]	; (801a60c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a592:	9304      	str	r3, [sp, #16]
 801a594:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a598:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a59c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a5a0:	2302      	movs	r3, #2
 801a5a2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a5a4:	f88d 3014 	strb.w	r3, [sp, #20]
 801a5a8:	6803      	ldr	r3, [r0, #0]
 801a5aa:	a904      	add	r1, sp, #16
 801a5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5ae:	4798      	blx	r3
 801a5b0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a5b2:	a802      	add	r0, sp, #8
 801a5b4:	f7ff ff1d 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5b8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a5bc:	88e0      	ldrh	r0, [r4, #6]
 801a5be:	8961      	ldrh	r1, [r4, #10]
 801a5c0:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801a5c4:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801a5c8:	8923      	ldrh	r3, [r4, #8]
 801a5ca:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a5cc:	7927      	ldrb	r7, [r4, #4]
 801a5ce:	f88d 7014 	strb.w	r7, [sp, #20]
 801a5d2:	1a80      	subs	r0, r0, r2
 801a5d4:	1a89      	subs	r1, r1, r2
 801a5d6:	89a2      	ldrh	r2, [r4, #12]
 801a5d8:	4c0d      	ldr	r4, [pc, #52]	; (801a610 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a5da:	9404      	str	r4, [sp, #16]
 801a5dc:	4470      	add	r0, lr
 801a5de:	eba3 030c 	sub.w	r3, r3, ip
 801a5e2:	eba2 020c 	sub.w	r2, r2, ip
 801a5e6:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a5ea:	4433      	add	r3, r6
 801a5ec:	4471      	add	r1, lr
 801a5ee:	4432      	add	r2, r6
 801a5f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a5f2:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a5f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a5fa:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a5fe:	6803      	ldr	r3, [r0, #0]
 801a600:	a904      	add	r1, sp, #16
 801a602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a604:	4798      	blx	r3
 801a606:	b009      	add	sp, #36	; 0x24
 801a608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a60a:	bf00      	nop
 801a60c:	080216a4 	.word	0x080216a4
 801a610:	08021690 	.word	0x08021690

0801a614 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a618:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801a61a:	790b      	ldrb	r3, [r1, #4]
 801a61c:	b0a1      	sub	sp, #132	; 0x84
 801a61e:	4604      	mov	r4, r0
 801a620:	460d      	mov	r5, r1
 801a622:	b16a      	cbz	r2, 801a640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801a624:	b963      	cbnz	r3, 801a640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801a626:	b021      	add	sp, #132	; 0x84
 801a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a62c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a630:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a634:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a638:	1d20      	adds	r0, r4, #4
 801a63a:	f7f2 fa5f 	bl	800cafc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a63e:	e0a1      	b.n	801a784 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x170>
 801a640:	2b00      	cmp	r3, #0
 801a642:	f040 809f 	bne.w	801a784 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x170>
 801a646:	4a65      	ldr	r2, [pc, #404]	; (801a7dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a648:	6812      	ldr	r2, [r2, #0]
 801a64a:	f892 b049 	ldrb.w	fp, [r2, #73]	; 0x49
 801a64e:	86a3      	strh	r3, [r4, #52]	; 0x34
 801a650:	f1bb 0f03 	cmp.w	fp, #3
 801a654:	86e3      	strh	r3, [r4, #54]	; 0x36
 801a656:	dde9      	ble.n	801a62c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801a658:	f1bb 0f0c 	cmp.w	fp, #12
 801a65c:	6323      	str	r3, [r4, #48]	; 0x30
 801a65e:	f04f 0303 	mov.w	r3, #3
 801a662:	bfdc      	itt	le
 801a664:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801a668:	fb92 f3f3 	sdivle	r3, r2, r3
 801a66c:	9300      	str	r3, [sp, #0]
 801a66e:	4b5c      	ldr	r3, [pc, #368]	; (801a7e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801a670:	495c      	ldr	r1, [pc, #368]	; (801a7e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801a672:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a676:	4b5c      	ldr	r3, [pc, #368]	; (801a7e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801a678:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a67c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a680:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a684:	ab0e      	add	r3, sp, #56	; 0x38
 801a686:	2600      	movs	r6, #0
 801a688:	2248      	movs	r2, #72	; 0x48
 801a68a:	4618      	mov	r0, r3
 801a68c:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801a690:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801a694:	f005 f8c8 	bl	801f828 <memcpy>
 801a698:	f04f 32ff 	mov.w	r2, #4294967295
 801a69c:	f8cd b008 	str.w	fp, [sp, #8]
 801a6a0:	9206      	str	r2, [sp, #24]
 801a6a2:	f04f 0a01 	mov.w	sl, #1
 801a6a6:	9007      	str	r0, [sp, #28]
 801a6a8:	9a00      	ldr	r2, [sp, #0]
 801a6aa:	9b02      	ldr	r3, [sp, #8]
 801a6ac:	fb93 f3f2 	sdiv	r3, r3, r2
 801a6b0:	f10a 32ff 	add.w	r2, sl, #4294967295
 801a6b4:	9201      	str	r2, [sp, #4]
 801a6b6:	9a07      	ldr	r2, [sp, #28]
 801a6b8:	b29b      	uxth	r3, r3
 801a6ba:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801a6be:	3f04      	subs	r7, #4
 801a6c0:	9303      	str	r3, [sp, #12]
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a6c8:	9309      	str	r3, [sp, #36]	; 0x24
 801a6ca:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801a6ce:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801a6d2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801a6d6:	fb13 f302 	smulbb	r3, r3, r2
 801a6da:	b29b      	uxth	r3, r3
 801a6dc:	9304      	str	r3, [sp, #16]
 801a6de:	683b      	ldr	r3, [r7, #0]
 801a6e0:	fb13 f302 	smulbb	r3, r3, r2
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	9305      	str	r3, [sp, #20]
 801a6e8:	9b04      	ldr	r3, [sp, #16]
 801a6ea:	4498      	add	r8, r3
 801a6ec:	9b05      	ldr	r3, [sp, #20]
 801a6ee:	4499      	add	r9, r3
 801a6f0:	fa0f f888 	sxth.w	r8, r8
 801a6f4:	fa0f f989 	sxth.w	r9, r9
 801a6f8:	464a      	mov	r2, r9
 801a6fa:	4641      	mov	r1, r8
 801a6fc:	a80a      	add	r0, sp, #40	; 0x28
 801a6fe:	f7f1 fef1 	bl	800c4e4 <_ZNK8touchgfx4Rect9intersectEss>
 801a702:	b380      	cbz	r0, 801a766 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801a704:	4641      	mov	r1, r8
 801a706:	ab09      	add	r3, sp, #36	; 0x24
 801a708:	464a      	mov	r2, r9
 801a70a:	1d20      	adds	r0, r4, #4
 801a70c:	f7f2 f9f6 	bl	800cafc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a710:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a712:	b341      	cbz	r1, 801a766 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801a714:	42b1      	cmp	r1, r6
 801a716:	d026      	beq.n	801a766 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801a718:	a80c      	add	r0, sp, #48	; 0x30
 801a71a:	f7ff fe6a 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a71e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a722:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a726:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a72a:	2002      	movs	r0, #2
 801a72c:	fb92 f2f0 	sdiv	r2, r2, r0
 801a730:	440a      	add	r2, r1
 801a732:	1a99      	subs	r1, r3, r2
 801a734:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a738:	fb93 f3f0 	sdiv	r3, r3, r0
 801a73c:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a740:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a744:	4403      	add	r3, r0
 801a746:	1ad3      	subs	r3, r2, r3
 801a748:	435b      	muls	r3, r3
 801a74a:	9a06      	ldr	r2, [sp, #24]
 801a74c:	fb01 3301 	mla	r3, r1, r1, r3
 801a750:	4293      	cmp	r3, r2
 801a752:	d208      	bcs.n	801a766 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801a754:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a758:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a75a:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a75c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a760:	6326      	str	r6, [r4, #48]	; 0x30
 801a762:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a764:	9306      	str	r3, [sp, #24]
 801a766:	9b01      	ldr	r3, [sp, #4]
 801a768:	3302      	adds	r3, #2
 801a76a:	2b08      	cmp	r3, #8
 801a76c:	9301      	str	r3, [sp, #4]
 801a76e:	f107 0710 	add.w	r7, r7, #16
 801a772:	dda6      	ble.n	801a6c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xae>
 801a774:	9b02      	ldr	r3, [sp, #8]
 801a776:	445b      	add	r3, fp
 801a778:	9302      	str	r3, [sp, #8]
 801a77a:	9b00      	ldr	r3, [sp, #0]
 801a77c:	f10a 0a01 	add.w	sl, sl, #1
 801a780:	4553      	cmp	r3, sl
 801a782:	da91      	bge.n	801a6a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a784:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a786:	2900      	cmp	r1, #0
 801a788:	f43f af4d 	beq.w	801a626 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801a78c:	a80c      	add	r0, sp, #48	; 0x30
 801a78e:	f7ff fe30 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a792:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a796:	88ea      	ldrh	r2, [r5, #6]
 801a798:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a79c:	7929      	ldrb	r1, [r5, #4]
 801a79e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a7a2:	1ad2      	subs	r2, r2, r3
 801a7a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a7a6:	441a      	add	r2, r3
 801a7a8:	892b      	ldrh	r3, [r5, #8]
 801a7aa:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a7ae:	1a1b      	subs	r3, r3, r0
 801a7b0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a7b2:	4403      	add	r3, r0
 801a7b4:	480d      	ldr	r0, [pc, #52]	; (801a7ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801a7b6:	900e      	str	r0, [sp, #56]	; 0x38
 801a7b8:	2600      	movs	r6, #0
 801a7ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a7bc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a7c0:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a7c4:	6803      	ldr	r3, [r0, #0]
 801a7c6:	a90e      	add	r1, sp, #56	; 0x38
 801a7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a7ca:	4798      	blx	r3
 801a7cc:	792b      	ldrb	r3, [r5, #4]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	f43f af29 	beq.w	801a626 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801a7d4:	6326      	str	r6, [r4, #48]	; 0x30
 801a7d6:	86a6      	strh	r6, [r4, #52]	; 0x34
 801a7d8:	86e6      	strh	r6, [r4, #54]	; 0x36
 801a7da:	e724      	b.n	801a626 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801a7dc:	20009ac0 	.word	0x20009ac0
 801a7e0:	20009ab2 	.word	0x20009ab2
 801a7e4:	08021464 	.word	0x08021464
 801a7e8:	20009ab4 	.word	0x20009ab4
 801a7ec:	080216a4 	.word	0x080216a4

0801a7f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a7f8:	3201      	adds	r2, #1
 801a7fa:	d114      	bne.n	801a826 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801a7fc:	6803      	ldr	r3, [r0, #0]
 801a7fe:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801a802:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801a806:	f8ad 1006 	strh.w	r1, [sp, #6]
 801a80a:	2200      	movs	r2, #0
 801a80c:	4669      	mov	r1, sp
 801a80e:	f8ad 2000 	strh.w	r2, [sp]
 801a812:	f8ad 2002 	strh.w	r2, [sp, #2]
 801a816:	f8ad 5004 	strh.w	r5, [sp, #4]
 801a81a:	6a1b      	ldr	r3, [r3, #32]
 801a81c:	4798      	blx	r3
 801a81e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801a822:	e884 0003 	stmia.w	r4, {r0, r1}
 801a826:	4620      	mov	r0, r4
 801a828:	b003      	add	sp, #12
 801a82a:	bd30      	pop	{r4, r5, pc}

0801a82c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a82c:	b513      	push	{r0, r1, r4, lr}
 801a82e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a832:	3301      	adds	r3, #1
 801a834:	4604      	mov	r4, r0
 801a836:	d109      	bne.n	801a84c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a838:	4601      	mov	r1, r0
 801a83a:	4668      	mov	r0, sp
 801a83c:	f7ff fdd9 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a840:	f8bd 3000 	ldrh.w	r3, [sp]
 801a844:	8423      	strh	r3, [r4, #32]
 801a846:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a84a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a84c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a850:	b002      	add	sp, #8
 801a852:	bd10      	pop	{r4, pc}

0801a854 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a854:	b513      	push	{r0, r1, r4, lr}
 801a856:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a85a:	3301      	adds	r3, #1
 801a85c:	4604      	mov	r4, r0
 801a85e:	d109      	bne.n	801a874 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a860:	4601      	mov	r1, r0
 801a862:	4668      	mov	r0, sp
 801a864:	f7ff fdc5 	bl	801a3f2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a868:	f8bd 3000 	ldrh.w	r3, [sp]
 801a86c:	8423      	strh	r3, [r4, #32]
 801a86e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a872:	8463      	strh	r3, [r4, #34]	; 0x22
 801a874:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a878:	b002      	add	sp, #8
 801a87a:	bd10      	pop	{r4, pc}

0801a87c <_ZN8touchgfx6ScreenC1Ev>:
 801a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a87e:	4605      	mov	r5, r0
 801a880:	4b18      	ldr	r3, [pc, #96]	; (801a8e4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a882:	f845 3b04 	str.w	r3, [r5], #4
 801a886:	2301      	movs	r3, #1
 801a888:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a88c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a890:	4b15      	ldr	r3, [pc, #84]	; (801a8e8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a892:	4916      	ldr	r1, [pc, #88]	; (801a8ec <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a894:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a898:	4b15      	ldr	r3, [pc, #84]	; (801a8f0 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801a89a:	6041      	str	r1, [r0, #4]
 801a89c:	2200      	movs	r2, #0
 801a89e:	8102      	strh	r2, [r0, #8]
 801a8a0:	8142      	strh	r2, [r0, #10]
 801a8a2:	8182      	strh	r2, [r0, #12]
 801a8a4:	81c2      	strh	r2, [r0, #14]
 801a8a6:	8202      	strh	r2, [r0, #16]
 801a8a8:	8242      	strh	r2, [r0, #18]
 801a8aa:	8282      	strh	r2, [r0, #20]
 801a8ac:	82c2      	strh	r2, [r0, #22]
 801a8ae:	6182      	str	r2, [r0, #24]
 801a8b0:	61c2      	str	r2, [r0, #28]
 801a8b2:	6202      	str	r2, [r0, #32]
 801a8b4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a8b8:	62c2      	str	r2, [r0, #44]	; 0x2c
 801a8ba:	6302      	str	r2, [r0, #48]	; 0x30
 801a8bc:	8682      	strh	r2, [r0, #52]	; 0x34
 801a8be:	86c2      	strh	r2, [r0, #54]	; 0x36
 801a8c0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a8c4:	4611      	mov	r1, r2
 801a8c6:	4604      	mov	r4, r0
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	f7f1 fc14 	bl	800c0f6 <_ZN8touchgfx8Drawable5setXYEss>
 801a8ce:	4639      	mov	r1, r7
 801a8d0:	4628      	mov	r0, r5
 801a8d2:	f7f1 fc2e 	bl	800c132 <_ZN8touchgfx8Drawable8setWidthEs>
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	4631      	mov	r1, r6
 801a8da:	f7f1 fc39 	bl	800c150 <_ZN8touchgfx8Drawable9setHeightEs>
 801a8de:	4620      	mov	r0, r4
 801a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8e2:	bf00      	nop
 801a8e4:	0802353c 	.word	0x0802353c
 801a8e8:	20009ab2 	.word	0x20009ab2
 801a8ec:	08021550 	.word	0x08021550
 801a8f0:	20009ab4 	.word	0x20009ab4

0801a8f4 <_ZN8touchgfx6Screen4drawEv>:
 801a8f4:	b507      	push	{r0, r1, r2, lr}
 801a8f6:	4b0b      	ldr	r3, [pc, #44]	; (801a924 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801a8f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a8fc:	4b0a      	ldr	r3, [pc, #40]	; (801a928 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801a8fe:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a902:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a906:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a90a:	2300      	movs	r3, #0
 801a90c:	f8ad 3000 	strh.w	r3, [sp]
 801a910:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a914:	6803      	ldr	r3, [r0, #0]
 801a916:	4669      	mov	r1, sp
 801a918:	689b      	ldr	r3, [r3, #8]
 801a91a:	4798      	blx	r3
 801a91c:	b003      	add	sp, #12
 801a91e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a922:	bf00      	nop
 801a924:	20009ab2 	.word	0x20009ab2
 801a928:	20009ab4 	.word	0x20009ab4

0801a92c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a930:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a934:	b087      	sub	sp, #28
 801a936:	4681      	mov	r9, r0
 801a938:	460c      	mov	r4, r1
 801a93a:	4615      	mov	r5, r2
 801a93c:	b16b      	cbz	r3, 801a95a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a93e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a942:	b153      	cbz	r3, 801a95a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a944:	4628      	mov	r0, r5
 801a946:	f7ff ff53 	bl	801a7f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a94a:	4621      	mov	r1, r4
 801a94c:	f7f1 fdf9 	bl	800c542 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a950:	69eb      	ldr	r3, [r5, #28]
 801a952:	b928      	cbnz	r0, 801a960 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801a954:	461d      	mov	r5, r3
 801a956:	2b00      	cmp	r3, #0
 801a958:	d1f4      	bne.n	801a944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801a95a:	b007      	add	sp, #28
 801a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a960:	ae02      	add	r6, sp, #8
 801a962:	2b00      	cmp	r3, #0
 801a964:	d04a      	beq.n	801a9fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801a966:	682b      	ldr	r3, [r5, #0]
 801a968:	4629      	mov	r1, r5
 801a96a:	68db      	ldr	r3, [r3, #12]
 801a96c:	4668      	mov	r0, sp
 801a96e:	4798      	blx	r3
 801a970:	4628      	mov	r0, r5
 801a972:	f7ff ff5b 	bl	801a82c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a976:	f8bd 7000 	ldrh.w	r7, [sp]
 801a97a:	4407      	add	r7, r0
 801a97c:	4628      	mov	r0, r5
 801a97e:	f7ff ff69 	bl	801a854 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a982:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a986:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a98a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801a98e:	4418      	add	r0, r3
 801a990:	4621      	mov	r1, r4
 801a992:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a996:	f8ad 000a 	strh.w	r0, [sp, #10]
 801a99a:	b23f      	sxth	r7, r7
 801a99c:	4630      	mov	r0, r6
 801a99e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a9a2:	f8ad 7008 	strh.w	r7, [sp, #8]
 801a9a6:	f7f1 fe13 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	f7ff ff20 	bl	801a7f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a9b0:	4602      	mov	r2, r0
 801a9b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a9b6:	ab04      	add	r3, sp, #16
 801a9b8:	e883 0003 	stmia.w	r3, {r0, r1}
 801a9bc:	4611      	mov	r1, r2
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f7f1 fe06 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801a9c4:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801a9c8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a9cc:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801a9d0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a9d4:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a9d8:	455a      	cmp	r2, fp
 801a9da:	f040 8096 	bne.w	801ab0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801a9de:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a9e2:	4553      	cmp	r3, sl
 801a9e4:	f040 8091 	bne.w	801ab0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801a9e8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a9ec:	4543      	cmp	r3, r8
 801a9ee:	f040 808c 	bne.w	801ab0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801a9f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a9f6:	42bb      	cmp	r3, r7
 801a9f8:	f040 8087 	bne.w	801ab0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801a9fc:	4628      	mov	r0, r5
 801a9fe:	f7ff fef7 	bl	801a7f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aa02:	6861      	ldr	r1, [r4, #4]
 801aa04:	4602      	mov	r2, r0
 801aa06:	6820      	ldr	r0, [r4, #0]
 801aa08:	4633      	mov	r3, r6
 801aa0a:	c303      	stmia	r3!, {r0, r1}
 801aa0c:	4611      	mov	r1, r2
 801aa0e:	4630      	mov	r0, r6
 801aa10:	f7f1 fdde 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801aa14:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d09e      	beq.n	801a95a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801aa1c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d09a      	beq.n	801a95a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801aa24:	4628      	mov	r0, r5
 801aa26:	f7ff ff01 	bl	801a82c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801aa2a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801aa2e:	1a18      	subs	r0, r3, r0
 801aa30:	f8ad 0008 	strh.w	r0, [sp, #8]
 801aa34:	4628      	mov	r0, r5
 801aa36:	f7ff ff0d 	bl	801a854 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801aa3a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801aa3e:	1a18      	subs	r0, r3, r0
 801aa40:	f8ad 000a 	strh.w	r0, [sp, #10]
 801aa44:	682b      	ldr	r3, [r5, #0]
 801aa46:	4631      	mov	r1, r6
 801aa48:	689b      	ldr	r3, [r3, #8]
 801aa4a:	4628      	mov	r0, r5
 801aa4c:	4798      	blx	r3
 801aa4e:	e784      	b.n	801a95a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801aa50:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801aa54:	4553      	cmp	r3, sl
 801aa56:	da10      	bge.n	801aa7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801aa58:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aa5c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801aa60:	ebaa 0303 	sub.w	r3, sl, r3
 801aa64:	f8ad 100c 	strh.w	r1, [sp, #12]
 801aa68:	f8ad 2008 	strh.w	r2, [sp, #8]
 801aa6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801aa70:	69ea      	ldr	r2, [r5, #28]
 801aa72:	4631      	mov	r1, r6
 801aa74:	4648      	mov	r0, r9
 801aa76:	f7ff ff59 	bl	801a92c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aa7a:	f9b4 3000 	ldrsh.w	r3, [r4]
 801aa7e:	455b      	cmp	r3, fp
 801aa80:	da0e      	bge.n	801aaa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801aa82:	f8ad 3008 	strh.w	r3, [sp, #8]
 801aa86:	ebab 0303 	sub.w	r3, fp, r3
 801aa8a:	f8ad a00a 	strh.w	sl, [sp, #10]
 801aa8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aa92:	f8ad 700e 	strh.w	r7, [sp, #14]
 801aa96:	69ea      	ldr	r2, [r5, #28]
 801aa98:	4631      	mov	r1, r6
 801aa9a:	4648      	mov	r0, r9
 801aa9c:	f7ff ff46 	bl	801a92c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aaa0:	8822      	ldrh	r2, [r4, #0]
 801aaa2:	88a3      	ldrh	r3, [r4, #4]
 801aaa4:	44d8      	add	r8, fp
 801aaa6:	4413      	add	r3, r2
 801aaa8:	b29b      	uxth	r3, r3
 801aaaa:	fa1f f888 	uxth.w	r8, r8
 801aaae:	fa0f f288 	sxth.w	r2, r8
 801aab2:	b219      	sxth	r1, r3
 801aab4:	4291      	cmp	r1, r2
 801aab6:	dd0e      	ble.n	801aad6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801aab8:	eba3 0308 	sub.w	r3, r3, r8
 801aabc:	f8ad 2008 	strh.w	r2, [sp, #8]
 801aac0:	f8ad a00a 	strh.w	sl, [sp, #10]
 801aac4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aac8:	f8ad 700e 	strh.w	r7, [sp, #14]
 801aacc:	69ea      	ldr	r2, [r5, #28]
 801aace:	4631      	mov	r1, r6
 801aad0:	4648      	mov	r0, r9
 801aad2:	f7ff ff2b 	bl	801a92c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aad6:	88e2      	ldrh	r2, [r4, #6]
 801aad8:	8863      	ldrh	r3, [r4, #2]
 801aada:	4457      	add	r7, sl
 801aadc:	4413      	add	r3, r2
 801aade:	b29b      	uxth	r3, r3
 801aae0:	b2bf      	uxth	r7, r7
 801aae2:	b23a      	sxth	r2, r7
 801aae4:	b219      	sxth	r1, r3
 801aae6:	428a      	cmp	r2, r1
 801aae8:	da88      	bge.n	801a9fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801aaea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aaee:	f9b4 0000 	ldrsh.w	r0, [r4]
 801aaf2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801aaf6:	1bdb      	subs	r3, r3, r7
 801aaf8:	f8ad 0008 	strh.w	r0, [sp, #8]
 801aafc:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ab00:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ab04:	69ea      	ldr	r2, [r5, #28]
 801ab06:	4631      	mov	r1, r6
 801ab08:	e006      	b.n	801ab18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801ab0a:	f1b8 0f00 	cmp.w	r8, #0
 801ab0e:	d001      	beq.n	801ab14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801ab10:	2f00      	cmp	r7, #0
 801ab12:	d19d      	bne.n	801aa50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801ab14:	69ea      	ldr	r2, [r5, #28]
 801ab16:	4621      	mov	r1, r4
 801ab18:	4648      	mov	r0, r9
 801ab1a:	f7ff ff07 	bl	801a92c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab1e:	e76d      	b.n	801a9fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801ab20 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ab20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab22:	aa02      	add	r2, sp, #8
 801ab24:	2300      	movs	r3, #0
 801ab26:	f842 3d04 	str.w	r3, [r2, #-4]!
 801ab2a:	4604      	mov	r4, r0
 801ab2c:	3004      	adds	r0, #4
 801ab2e:	460d      	mov	r5, r1
 801ab30:	f7f2 f8e5 	bl	800ccfe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ab34:	9a01      	ldr	r2, [sp, #4]
 801ab36:	b11a      	cbz	r2, 801ab40 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801ab38:	4629      	mov	r1, r5
 801ab3a:	4620      	mov	r0, r4
 801ab3c:	f7ff fef6 	bl	801a92c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab40:	b003      	add	sp, #12
 801ab42:	bd30      	pop	{r4, r5, pc}

0801ab44 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ab44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab46:	4602      	mov	r2, r0
 801ab48:	4604      	mov	r4, r0
 801ab4a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ab4e:	460d      	mov	r5, r1
 801ab50:	6851      	ldr	r1, [r2, #4]
 801ab52:	466b      	mov	r3, sp
 801ab54:	c303      	stmia	r3!, {r0, r1}
 801ab56:	4629      	mov	r1, r5
 801ab58:	4668      	mov	r0, sp
 801ab5a:	f7f1 fd39 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801ab5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ab62:	4669      	mov	r1, sp
 801ab64:	b123      	cbz	r3, 801ab70 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801ab66:	4620      	mov	r0, r4
 801ab68:	f7ff ffda 	bl	801ab20 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ab6c:	b003      	add	sp, #12
 801ab6e:	bd30      	pop	{r4, r5, pc}
 801ab70:	1d20      	adds	r0, r4, #4
 801ab72:	f7f1 ff58 	bl	800ca26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ab76:	e7f9      	b.n	801ab6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801ab78 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ab78:	680a      	ldr	r2, [r1, #0]
 801ab7a:	460b      	mov	r3, r1
 801ab7c:	6952      	ldr	r2, [r2, #20]
 801ab7e:	1d01      	adds	r1, r0, #4
 801ab80:	4618      	mov	r0, r3
 801ab82:	4710      	bx	r2

0801ab84 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801ab84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ab88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ab90:	bfcc      	ite	gt
 801ab92:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801ab96:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801ab9a:	b082      	sub	sp, #8
 801ab9c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801aba0:	edcd 7a01 	vstr	s15, [sp, #4]
 801aba4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801aba8:	b002      	add	sp, #8
 801abaa:	4770      	bx	lr

0801abac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801abac:	b510      	push	{r4, lr}
 801abae:	4298      	cmp	r0, r3
 801abb0:	eb01 0402 	add.w	r4, r1, r2
 801abb4:	b224      	sxth	r4, r4
 801abb6:	da1f      	bge.n	801abf8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801abb8:	b1f3      	cbz	r3, 801abf8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801abba:	ee07 0a90 	vmov	s15, r0
 801abbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801abc2:	ee07 3a90 	vmov	s15, r3
 801abc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801abca:	ee06 1a10 	vmov	s12, r1
 801abce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801abd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801abd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801abda:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801abde:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801abe2:	ee06 2a90 	vmov	s13, r2
 801abe6:	eea7 7a86 	vfma.f32	s14, s15, s12
 801abea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801abee:	eea6 0a87 	vfma.f32	s0, s13, s14
 801abf2:	f7ff ffc7 	bl	801ab84 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801abf6:	4604      	mov	r4, r0
 801abf8:	4620      	mov	r0, r4
 801abfa:	bd10      	pop	{r4, pc}

0801abfc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801abfc:	f011 0f40 	tst.w	r1, #64	; 0x40
 801ac00:	4b05      	ldr	r3, [pc, #20]	; (801ac18 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x1c>)
 801ac02:	bf08      	it	eq
 801ac04:	2300      	moveq	r3, #0
 801ac06:	f011 0f20 	tst.w	r1, #32
 801ac0a:	bf14      	ite	ne
 801ac0c:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ac10:	2200      	moveq	r2, #0
 801ac12:	4318      	orrs	r0, r3
 801ac14:	4310      	orrs	r0, r2
 801ac16:	4770      	bx	lr
 801ac18:	fffffe00 	.word	0xfffffe00

0801ac1c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801ac1c:	7b43      	ldrb	r3, [r0, #13]
 801ac1e:	7201      	strb	r1, [r0, #8]
 801ac20:	b289      	uxth	r1, r1
 801ac22:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801ac26:	05ca      	lsls	r2, r1, #23
 801ac28:	bf48      	it	mi
 801ac2a:	f043 0320 	orrmi.w	r3, r3, #32
 801ac2e:	7343      	strb	r3, [r0, #13]
 801ac30:	058b      	lsls	r3, r1, #22
 801ac32:	bf42      	ittt	mi
 801ac34:	7b43      	ldrbmi	r3, [r0, #13]
 801ac36:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801ac3a:	7343      	strbmi	r3, [r0, #13]
 801ac3c:	4770      	bx	lr
	...

0801ac40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac42:	4d1c      	ldr	r5, [pc, #112]	; (801acb4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801ac44:	4604      	mov	r4, r0
 801ac46:	2700      	movs	r7, #0
 801ac48:	2601      	movs	r6, #1
 801ac4a:	6863      	ldr	r3, [r4, #4]
 801ac4c:	b93b      	cbnz	r3, 801ac5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801ac4e:	6821      	ldr	r1, [r4, #0]
 801ac50:	2900      	cmp	r1, #0
 801ac52:	d02c      	beq.n	801acae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801ac54:	6828      	ldr	r0, [r5, #0]
 801ac56:	6803      	ldr	r3, [r0, #0]
 801ac58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac5a:	4798      	blx	r3
 801ac5c:	6060      	str	r0, [r4, #4]
 801ac5e:	7c23      	ldrb	r3, [r4, #16]
 801ac60:	b16b      	cbz	r3, 801ac7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801ac62:	68e3      	ldr	r3, [r4, #12]
 801ac64:	b12b      	cbz	r3, 801ac72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801ac66:	881a      	ldrh	r2, [r3, #0]
 801ac68:	b11a      	cbz	r2, 801ac72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801ac6a:	1c9a      	adds	r2, r3, #2
 801ac6c:	60e2      	str	r2, [r4, #12]
 801ac6e:	8818      	ldrh	r0, [r3, #0]
 801ac70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac72:	6828      	ldr	r0, [r5, #0]
 801ac74:	7427      	strb	r7, [r4, #16]
 801ac76:	6803      	ldr	r3, [r0, #0]
 801ac78:	6821      	ldr	r1, [r4, #0]
 801ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac7c:	4798      	blx	r3
 801ac7e:	6863      	ldr	r3, [r4, #4]
 801ac80:	881a      	ldrh	r2, [r3, #0]
 801ac82:	b1a2      	cbz	r2, 801acae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801ac84:	2a02      	cmp	r2, #2
 801ac86:	f103 0202 	add.w	r2, r3, #2
 801ac8a:	6062      	str	r2, [r4, #4]
 801ac8c:	d1ef      	bne.n	801ac6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801ac8e:	6828      	ldr	r0, [r5, #0]
 801ac90:	6803      	ldr	r3, [r0, #0]
 801ac92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ac94:	68a3      	ldr	r3, [r4, #8]
 801ac96:	1d19      	adds	r1, r3, #4
 801ac98:	60a1      	str	r1, [r4, #8]
 801ac9a:	6819      	ldr	r1, [r3, #0]
 801ac9c:	4790      	blx	r2
 801ac9e:	60e0      	str	r0, [r4, #12]
 801aca0:	2800      	cmp	r0, #0
 801aca2:	d0d2      	beq.n	801ac4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801aca4:	8803      	ldrh	r3, [r0, #0]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d0cf      	beq.n	801ac4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801acaa:	7426      	strb	r6, [r4, #16]
 801acac:	e7cd      	b.n	801ac4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801acae:	2000      	movs	r0, #0
 801acb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acb2:	bf00      	nop
 801acb4:	20009ac0 	.word	0x20009ac0

0801acb8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801acb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acba:	4605      	mov	r5, r0
 801acbc:	4608      	mov	r0, r1
 801acbe:	b301      	cbz	r1, 801ad02 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x4a>
 801acc0:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801acc4:	460b      	mov	r3, r1
 801acc6:	f101 0708 	add.w	r7, r1, #8
 801acca:	4622      	mov	r2, r4
 801accc:	6818      	ldr	r0, [r3, #0]
 801acce:	6859      	ldr	r1, [r3, #4]
 801acd0:	4626      	mov	r6, r4
 801acd2:	c603      	stmia	r6!, {r0, r1}
 801acd4:	3308      	adds	r3, #8
 801acd6:	42bb      	cmp	r3, r7
 801acd8:	4634      	mov	r4, r6
 801acda:	d1f7      	bne.n	801accc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801acdc:	6818      	ldr	r0, [r3, #0]
 801acde:	6030      	str	r0, [r6, #0]
 801ace0:	889b      	ldrh	r3, [r3, #4]
 801ace2:	80b3      	strh	r3, [r6, #4]
 801ace4:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801ace8:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
 801acec:	f013 0f08 	tst.w	r3, #8
 801acf0:	bf14      	ite	ne
 801acf2:	f44f 7380 	movne.w	r3, #256	; 0x100
 801acf6:	2300      	moveq	r3, #0
 801acf8:	430b      	orrs	r3, r1
 801acfa:	425b      	negs	r3, r3
 801acfc:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801ad00:	4610      	mov	r0, r2
 801ad02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ad04 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ad04:	b538      	push	{r3, r4, r5, lr}
 801ad06:	460c      	mov	r4, r1
 801ad08:	6811      	ldr	r1, [r2, #0]
 801ad0a:	4610      	mov	r0, r2
 801ad0c:	68cd      	ldr	r5, [r1, #12]
 801ad0e:	4619      	mov	r1, r3
 801ad10:	47a8      	blx	r5
 801ad12:	2800      	cmp	r0, #0
 801ad14:	bf08      	it	eq
 801ad16:	4620      	moveq	r0, r4
 801ad18:	bd38      	pop	{r3, r4, r5, pc}

0801ad1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ad1a:	b570      	push	{r4, r5, r6, lr}
 801ad1c:	8810      	ldrh	r0, [r2, #0]
 801ad1e:	4283      	cmp	r3, r0
 801ad20:	db17      	blt.n	801ad52 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ad22:	1e48      	subs	r0, r1, #1
 801ad24:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ad28:	4283      	cmp	r3, r0
 801ad2a:	dc12      	bgt.n	801ad52 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ad2c:	2400      	movs	r4, #0
 801ad2e:	428c      	cmp	r4, r1
 801ad30:	da0f      	bge.n	801ad52 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ad32:	1860      	adds	r0, r4, r1
 801ad34:	1040      	asrs	r0, r0, #1
 801ad36:	0085      	lsls	r5, r0, #2
 801ad38:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ad3c:	42b3      	cmp	r3, r6
 801ad3e:	dd02      	ble.n	801ad46 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ad40:	3001      	adds	r0, #1
 801ad42:	b284      	uxth	r4, r0
 801ad44:	e7f3      	b.n	801ad2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ad46:	d102      	bne.n	801ad4e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801ad48:	442a      	add	r2, r5
 801ad4a:	8850      	ldrh	r0, [r2, #2]
 801ad4c:	bd70      	pop	{r4, r5, r6, pc}
 801ad4e:	b281      	uxth	r1, r0
 801ad50:	e7ed      	b.n	801ad2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ad52:	2000      	movs	r0, #0
 801ad54:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ad58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801ad58:	b510      	push	{r4, lr}
 801ad5a:	8ac3      	ldrh	r3, [r0, #22]
 801ad5c:	4299      	cmp	r1, r3
 801ad5e:	db05      	blt.n	801ad6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801ad60:	4b07      	ldr	r3, [pc, #28]	; (801ad80 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801ad62:	4a08      	ldr	r2, [pc, #32]	; (801ad84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801ad64:	4808      	ldr	r0, [pc, #32]	; (801ad88 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801ad66:	21ee      	movs	r1, #238	; 0xee
 801ad68:	f004 fcee 	bl	801f748 <__assert_func>
 801ad6c:	8a83      	ldrh	r3, [r0, #20]
 801ad6e:	240a      	movs	r4, #10
 801ad70:	4419      	add	r1, r3
 801ad72:	fbb1 f3f4 	udiv	r3, r1, r4
 801ad76:	fb04 1113 	mls	r1, r4, r3, r1
 801ad7a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801ad7e:	bd10      	pop	{r4, pc}
 801ad80:	08023589 	.word	0x08023589
 801ad84:	080239be 	.word	0x080239be
 801ad88:	08023597 	.word	0x08023597

0801ad8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801ad8c:	b508      	push	{r3, lr}
 801ad8e:	8ac3      	ldrh	r3, [r0, #22]
 801ad90:	4299      	cmp	r1, r3
 801ad92:	db05      	blt.n	801ada0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801ad94:	4b07      	ldr	r3, [pc, #28]	; (801adb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801ad96:	4a08      	ldr	r2, [pc, #32]	; (801adb8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801ad98:	4808      	ldr	r0, [pc, #32]	; (801adbc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801ad9a:	21c4      	movs	r1, #196	; 0xc4
 801ad9c:	f004 fcd4 	bl	801f748 <__assert_func>
 801ada0:	8a83      	ldrh	r3, [r0, #20]
 801ada2:	220a      	movs	r2, #10
 801ada4:	4419      	add	r1, r3
 801ada6:	fbb1 f3f2 	udiv	r3, r1, r2
 801adaa:	fb02 1113 	mls	r1, r2, r3, r1
 801adae:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801adb2:	bd08      	pop	{r3, pc}
 801adb4:	08023589 	.word	0x08023589
 801adb8:	0802370a 	.word	0x0802370a
 801adbc:	08023597 	.word	0x08023597

0801adc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801adc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc4:	4604      	mov	r4, r0
 801adc6:	4689      	mov	r9, r1
 801adc8:	4616      	mov	r6, r2
 801adca:	b942      	cbnz	r2, 801adde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801adcc:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801add0:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801add4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801add8:	4630      	mov	r0, r6
 801adda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adde:	8895      	ldrh	r5, [r2, #4]
 801ade0:	4613      	mov	r3, r2
 801ade2:	f100 0240 	add.w	r2, r0, #64	; 0x40
 801ade6:	f106 0e08 	add.w	lr, r6, #8
 801adea:	4692      	mov	sl, r2
 801adec:	6818      	ldr	r0, [r3, #0]
 801adee:	6859      	ldr	r1, [r3, #4]
 801adf0:	4617      	mov	r7, r2
 801adf2:	c703      	stmia	r7!, {r0, r1}
 801adf4:	3308      	adds	r3, #8
 801adf6:	4573      	cmp	r3, lr
 801adf8:	463a      	mov	r2, r7
 801adfa:	d1f7      	bne.n	801adec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2c>
 801adfc:	6818      	ldr	r0, [r3, #0]
 801adfe:	6038      	str	r0, [r7, #0]
 801ae00:	889b      	ldrh	r3, [r3, #4]
 801ae02:	80bb      	strh	r3, [r7, #4]
 801ae04:	f894 b04d 	ldrb.w	fp, [r4, #77]	; 0x4d
 801ae08:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 801ae0c:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801ae10:	f01b 0f10 	tst.w	fp, #16
 801ae14:	442b      	add	r3, r5
 801ae16:	bf14      	ite	ne
 801ae18:	f44f 7880 	movne.w	r8, #256	; 0x100
 801ae1c:	f04f 0800 	moveq.w	r8, #0
 801ae20:	b29a      	uxth	r2, r3
 801ae22:	ea48 0801 	orr.w	r8, r8, r1
 801ae26:	2a1d      	cmp	r2, #29
 801ae28:	fa1f f788 	uxth.w	r7, r8
 801ae2c:	d843      	bhi.n	801aeb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf6>
 801ae2e:	2301      	movs	r3, #1
 801ae30:	4093      	lsls	r3, r2
 801ae32:	4a56      	ldr	r2, [pc, #344]	; (801af8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>)
 801ae34:	4213      	tst	r3, r2
 801ae36:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801ae3a:	d114      	bne.n	801ae66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801ae3c:	f413 7f60 	tst.w	r3, #896	; 0x380
 801ae40:	d03d      	beq.n	801aebe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfe>
 801ae42:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801ae46:	fa1f f888 	uxth.w	r8, r8
 801ae4a:	eba1 0108 	sub.w	r1, r1, r8
 801ae4e:	4650      	mov	r0, sl
 801ae50:	b209      	sxth	r1, r1
 801ae52:	f7ff fee3 	bl	801ac1c <_ZN8touchgfx9GlyphNode6setTopEs>
 801ae56:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801ae5a:	1bc7      	subs	r7, r0, r7
 801ae5c:	eba7 0808 	sub.w	r8, r7, r8
 801ae60:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
 801ae64:	e025      	b.n	801aeb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 801ae66:	2100      	movs	r1, #0
 801ae68:	f104 001a 	add.w	r0, r4, #26
 801ae6c:	f7ff ff8e 	bl	801ad8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ae70:	f640 6333 	movw	r3, #3635	; 0xe33
 801ae74:	4298      	cmp	r0, r3
 801ae76:	4601      	mov	r1, r0
 801ae78:	d10a      	bne.n	801ae90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801ae7a:	f8d9 3000 	ldr.w	r3, [r9]
 801ae7e:	4648      	mov	r0, r9
 801ae80:	68db      	ldr	r3, [r3, #12]
 801ae82:	4798      	blx	r3
 801ae84:	7b41      	ldrb	r1, [r0, #13]
 801ae86:	7a00      	ldrb	r0, [r0, #8]
 801ae88:	f7ff feb8 	bl	801abfc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801ae8c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801ae90:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801ae94:	4439      	add	r1, r7
 801ae96:	4441      	add	r1, r8
 801ae98:	b209      	sxth	r1, r1
 801ae9a:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801ae9e:	4650      	mov	r0, sl
 801aea0:	f7ff febc 	bl	801ac1c <_ZN8touchgfx9GlyphNode6setTopEs>
 801aea4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801aea8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801aeac:	1a9b      	subs	r3, r3, r2
 801aeae:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801aeb2:	4656      	mov	r6, sl
 801aeb4:	e790      	b.n	801add8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801aeb6:	f640 631b 	movw	r3, #3611	; 0xe1b
 801aeba:	429d      	cmp	r5, r3
 801aebc:	d005      	beq.n	801aeca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x10a>
 801aebe:	f025 0302 	bic.w	r3, r5, #2
 801aec2:	f640 621d 	movw	r2, #3613	; 0xe1d
 801aec6:	4293      	cmp	r3, r2
 801aec8:	d11c      	bne.n	801af04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801aeca:	1e6b      	subs	r3, r5, #1
 801aecc:	b29b      	uxth	r3, r3
 801aece:	464a      	mov	r2, r9
 801aed0:	4631      	mov	r1, r6
 801aed2:	4620      	mov	r0, r4
 801aed4:	f7ff ff16 	bl	801ad04 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801aed8:	7b41      	ldrb	r1, [r0, #13]
 801aeda:	7a00      	ldrb	r0, [r0, #8]
 801aedc:	f7ff fe8e 	bl	801abfc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801aee0:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801aee4:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 801aee8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	bfb4      	ite	lt
 801aef0:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801aef4:	2300      	movge	r3, #0
 801aef6:	4313      	orrs	r3, r2
 801aef8:	115a      	asrs	r2, r3, #5
 801aefa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801aefe:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801af02:	e036      	b.n	801af72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b2>
 801af04:	4659      	mov	r1, fp
 801af06:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801af0a:	f7ff fe77 	bl	801abfc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801af0e:	f025 0310 	bic.w	r3, r5, #16
 801af12:	f640 6209 	movw	r2, #3593	; 0xe09
 801af16:	4293      	cmp	r3, r2
 801af18:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801af1c:	d003      	beq.n	801af26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x166>
 801af1e:	f640 6313 	movw	r3, #3603	; 0xe13
 801af22:	429d      	cmp	r5, r3
 801af24:	d12f      	bne.n	801af86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c6>
 801af26:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801af2a:	f01b 0f80 	tst.w	fp, #128	; 0x80
 801af2e:	bf14      	ite	ne
 801af30:	f44f 7880 	movne.w	r8, #256	; 0x100
 801af34:	f04f 0800 	moveq.w	r8, #0
 801af38:	ea48 0803 	orr.w	r8, r8, r3
 801af3c:	f640 6313 	movw	r3, #3603	; 0xe13
 801af40:	429d      	cmp	r5, r3
 801af42:	bf1a      	itte	ne
 801af44:	f105 33ff 	addne.w	r3, r5, #4294967295
 801af48:	b29b      	uxthne	r3, r3
 801af4a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801af4e:	464a      	mov	r2, r9
 801af50:	4631      	mov	r1, r6
 801af52:	4620      	mov	r0, r4
 801af54:	f7ff fed6 	bl	801ad04 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801af58:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801af5c:	7a82      	ldrb	r2, [r0, #10]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	bfb4      	ite	lt
 801af62:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801af66:	2300      	movge	r3, #0
 801af68:	4313      	orrs	r3, r2
 801af6a:	eba8 0803 	sub.w	r8, r8, r3
 801af6e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801af72:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801af76:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801af7a:	f7ff fe3f 	bl	801abfc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801af7e:	1bc0      	subs	r0, r0, r7
 801af80:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801af84:	e795      	b.n	801aeb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 801af86:	2300      	movs	r3, #0
 801af88:	e7b9      	b.n	801aefe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13e>
 801af8a:	bf00      	nop
 801af8c:	3fc00079 	.word	0x3fc00079

0801af90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af94:	460d      	mov	r5, r1
 801af96:	2600      	movs	r6, #0
 801af98:	f102 3eff 	add.w	lr, r2, #4294967295
 801af9c:	b2b1      	uxth	r1, r6
 801af9e:	4291      	cmp	r1, r2
 801afa0:	da1a      	bge.n	801afd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x48>
 801afa2:	ebae 0101 	sub.w	r1, lr, r1
 801afa6:	b28c      	uxth	r4, r1
 801afa8:	8b01      	ldrh	r1, [r0, #24]
 801afaa:	f835 7b02 	ldrh.w	r7, [r5], #2
 801afae:	428c      	cmp	r4, r1
 801afb0:	db05      	blt.n	801afbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2e>
 801afb2:	4b14      	ldr	r3, [pc, #80]	; (801b004 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801afb4:	4a14      	ldr	r2, [pc, #80]	; (801b008 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 801afb6:	4815      	ldr	r0, [pc, #84]	; (801b00c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7c>)
 801afb8:	21c4      	movs	r1, #196	; 0xc4
 801afba:	f004 fbc5 	bl	801f748 <__assert_func>
 801afbe:	8ac1      	ldrh	r1, [r0, #22]
 801afc0:	4421      	add	r1, r4
 801afc2:	f001 0101 	and.w	r1, r1, #1
 801afc6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801afca:	3601      	adds	r6, #1
 801afcc:	8a49      	ldrh	r1, [r1, #18]
 801afce:	42b9      	cmp	r1, r7
 801afd0:	d0e4      	beq.n	801af9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xc>
 801afd2:	2000      	movs	r0, #0
 801afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afd8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801afdc:	2600      	movs	r6, #0
 801afde:	441f      	add	r7, r3
 801afe0:	f100 041a 	add.w	r4, r0, #26
 801afe4:	b2b1      	uxth	r1, r6
 801afe6:	42b9      	cmp	r1, r7
 801afe8:	da09      	bge.n	801affe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6e>
 801afea:	4620      	mov	r0, r4
 801afec:	f7ff fece 	bl	801ad8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801aff0:	f835 8016 	ldrh.w	r8, [r5, r6, lsl #1]
 801aff4:	4580      	cmp	r8, r0
 801aff6:	f106 0601 	add.w	r6, r6, #1
 801affa:	d0f3      	beq.n	801afe4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x54>
 801affc:	e7e9      	b.n	801afd2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801affe:	2001      	movs	r0, #1
 801b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b004:	08023589 	.word	0x08023589
 801b008:	08023b20 	.word	0x08023b20
 801b00c:	08023597 	.word	0x08023597

0801b010 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801b010:	b538      	push	{r3, r4, r5, lr}
 801b012:	8ac3      	ldrh	r3, [r0, #22]
 801b014:	428b      	cmp	r3, r1
 801b016:	da05      	bge.n	801b024 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801b018:	4b08      	ldr	r3, [pc, #32]	; (801b03c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801b01a:	4a09      	ldr	r2, [pc, #36]	; (801b040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801b01c:	4809      	ldr	r0, [pc, #36]	; (801b044 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801b01e:	21c9      	movs	r1, #201	; 0xc9
 801b020:	f004 fb92 	bl	801f748 <__assert_func>
 801b024:	8a82      	ldrh	r2, [r0, #20]
 801b026:	250a      	movs	r5, #10
 801b028:	440a      	add	r2, r1
 801b02a:	1a5b      	subs	r3, r3, r1
 801b02c:	fbb2 f4f5 	udiv	r4, r2, r5
 801b030:	fb05 2214 	mls	r2, r5, r4, r2
 801b034:	8282      	strh	r2, [r0, #20]
 801b036:	82c3      	strh	r3, [r0, #22]
 801b038:	bd38      	pop	{r3, r4, r5, pc}
 801b03a:	bf00      	nop
 801b03c:	0802357d 	.word	0x0802357d
 801b040:	08023939 	.word	0x08023939
 801b044:	08023597 	.word	0x08023597

0801b048 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801b048:	b538      	push	{r3, r4, r5, lr}
 801b04a:	8ac3      	ldrh	r3, [r0, #22]
 801b04c:	2b09      	cmp	r3, #9
 801b04e:	d905      	bls.n	801b05c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801b050:	4b08      	ldr	r3, [pc, #32]	; (801b074 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801b052:	4a09      	ldr	r2, [pc, #36]	; (801b078 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801b054:	4809      	ldr	r0, [pc, #36]	; (801b07c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801b056:	21e8      	movs	r1, #232	; 0xe8
 801b058:	f004 fb76 	bl	801f748 <__assert_func>
 801b05c:	8a82      	ldrh	r2, [r0, #20]
 801b05e:	250a      	movs	r5, #10
 801b060:	441a      	add	r2, r3
 801b062:	fbb2 f4f5 	udiv	r4, r2, r5
 801b066:	fb05 2214 	mls	r2, r5, r4, r2
 801b06a:	3301      	adds	r3, #1
 801b06c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801b070:	82c3      	strh	r3, [r0, #22]
 801b072:	bd38      	pop	{r3, r4, r5, pc}
 801b074:	08023571 	.word	0x08023571
 801b078:	08023889 	.word	0x08023889
 801b07c:	08023597 	.word	0x08023597

0801b080 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b080:	b538      	push	{r3, r4, r5, lr}
 801b082:	4604      	mov	r4, r0
 801b084:	f100 051a 	add.w	r5, r0, #26
 801b088:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b08a:	2b0a      	cmp	r3, #10
 801b08c:	d01c      	beq.n	801b0c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801b08e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801b090:	b962      	cbnz	r2, 801b0ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801b092:	f104 051a 	add.w	r5, r4, #26
 801b096:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b098:	2b0a      	cmp	r3, #10
 801b09a:	d015      	beq.n	801b0c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801b09c:	4620      	mov	r0, r4
 801b09e:	f7ff fdcf 	bl	801ac40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b0a2:	4601      	mov	r1, r0
 801b0a4:	4628      	mov	r0, r5
 801b0a6:	f7ff ffcf 	bl	801b048 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801b0aa:	e7f4      	b.n	801b096 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801b0ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b0ae:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801b0b2:	3301      	adds	r3, #1
 801b0b4:	f003 0301 	and.w	r3, r3, #1
 801b0b8:	3a01      	subs	r2, #1
 801b0ba:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801b0bc:	86e3      	strh	r3, [r4, #54]	; 0x36
 801b0be:	8722      	strh	r2, [r4, #56]	; 0x38
 801b0c0:	4628      	mov	r0, r5
 801b0c2:	f7ff ffc1 	bl	801b048 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801b0c6:	e7df      	b.n	801b088 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801b0c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b0cc <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	b510      	push	{r4, lr}
 801b0d0:	6043      	str	r3, [r0, #4]
 801b0d2:	60c3      	str	r3, [r0, #12]
 801b0d4:	7403      	strb	r3, [r0, #16]
 801b0d6:	8603      	strh	r3, [r0, #48]	; 0x30
 801b0d8:	8303      	strh	r3, [r0, #24]
 801b0da:	8703      	strh	r3, [r0, #56]	; 0x38
 801b0dc:	4604      	mov	r4, r0
 801b0de:	f7ff ffcf 	bl	801b080 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b0e2:	4a0a      	ldr	r2, [pc, #40]	; (801b10c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801b0e4:	6813      	ldr	r3, [r2, #0]
 801b0e6:	4611      	mov	r1, r2
 801b0e8:	b913      	cbnz	r3, 801b0f0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801b0ea:	6852      	ldr	r2, [r2, #4]
 801b0ec:	07d2      	lsls	r2, r2, #31
 801b0ee:	d50c      	bpl.n	801b10a <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3e>
 801b0f0:	6848      	ldr	r0, [r1, #4]
 801b0f2:	f010 0f01 	tst.w	r0, #1
 801b0f6:	ea4f 0060 	mov.w	r0, r0, asr #1
 801b0fa:	bf18      	it	ne
 801b0fc:	5822      	ldrne	r2, [r4, r0]
 801b0fe:	4420      	add	r0, r4
 801b100:	bf18      	it	ne
 801b102:	58d3      	ldrne	r3, [r2, r3]
 801b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b108:	4718      	bx	r3
 801b10a:	bd10      	pop	{r4, pc}
 801b10c:	20008748 	.word	0x20008748

0801b110 <_ZN8touchgfx12TextProviderC1Ev>:
 801b110:	b510      	push	{r4, lr}
 801b112:	2300      	movs	r3, #0
 801b114:	2201      	movs	r2, #1
 801b116:	4604      	mov	r4, r0
 801b118:	6003      	str	r3, [r0, #0]
 801b11a:	6043      	str	r3, [r0, #4]
 801b11c:	60c3      	str	r3, [r0, #12]
 801b11e:	7403      	strb	r3, [r0, #16]
 801b120:	82c3      	strh	r3, [r0, #22]
 801b122:	8303      	strh	r3, [r0, #24]
 801b124:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b126:	8603      	strh	r3, [r0, #48]	; 0x30
 801b128:	86c3      	strh	r3, [r0, #54]	; 0x36
 801b12a:	8703      	strh	r3, [r0, #56]	; 0x38
 801b12c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b12e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801b132:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801b136:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801b13a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801b13e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801b142:	f7ff ffc3 	bl	801b0cc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b146:	4620      	mov	r0, r4
 801b148:	bd10      	pop	{r4, pc}

0801b14a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801b14a:	b410      	push	{r4}
 801b14c:	6082      	str	r2, [r0, #8]
 801b14e:	6001      	str	r1, [r0, #0]
 801b150:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b152:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b156:	f7ff bfb9 	b.w	801b0cc <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801b15c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801b15c:	b508      	push	{r3, lr}
 801b15e:	88c2      	ldrh	r2, [r0, #6]
 801b160:	440a      	add	r2, r1
 801b162:	2a02      	cmp	r2, #2
 801b164:	dd05      	ble.n	801b172 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801b166:	4b06      	ldr	r3, [pc, #24]	; (801b180 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801b168:	4a06      	ldr	r2, [pc, #24]	; (801b184 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801b16a:	4807      	ldr	r0, [pc, #28]	; (801b188 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801b16c:	21dd      	movs	r1, #221	; 0xdd
 801b16e:	f004 faeb 	bl	801f748 <__assert_func>
 801b172:	8883      	ldrh	r3, [r0, #4]
 801b174:	80c2      	strh	r2, [r0, #6]
 801b176:	1a59      	subs	r1, r3, r1
 801b178:	f001 0101 	and.w	r1, r1, #1
 801b17c:	8081      	strh	r1, [r0, #4]
 801b17e:	bd08      	pop	{r3, pc}
 801b180:	080235c3 	.word	0x080235c3
 801b184:	08023a98 	.word	0x08023a98
 801b188:	08023597 	.word	0x08023597

0801b18c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801b18c:	b508      	push	{r3, lr}
 801b18e:	88c3      	ldrh	r3, [r0, #6]
 801b190:	4299      	cmp	r1, r3
 801b192:	db05      	blt.n	801b1a0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801b194:	4b06      	ldr	r3, [pc, #24]	; (801b1b0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801b196:	4a07      	ldr	r2, [pc, #28]	; (801b1b4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801b198:	4807      	ldr	r0, [pc, #28]	; (801b1b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801b19a:	21ee      	movs	r1, #238	; 0xee
 801b19c:	f004 fad4 	bl	801f748 <__assert_func>
 801b1a0:	8883      	ldrh	r3, [r0, #4]
 801b1a2:	4419      	add	r1, r3
 801b1a4:	f001 0101 	and.w	r1, r1, #1
 801b1a8:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801b1ac:	bd08      	pop	{r3, pc}
 801b1ae:	bf00      	nop
 801b1b0:	08023589 	.word	0x08023589
 801b1b4:	08023bf2 	.word	0x08023bf2
 801b1b8:	08023597 	.word	0x08023597

0801b1bc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b1bc:	b570      	push	{r4, r5, r6, lr}
 801b1be:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801b1c0:	4604      	mov	r4, r0
 801b1c2:	b92a      	cbnz	r2, 801b1d0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801b1c4:	4b12      	ldr	r3, [pc, #72]	; (801b210 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801b1c6:	4a13      	ldr	r2, [pc, #76]	; (801b214 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801b1c8:	4813      	ldr	r0, [pc, #76]	; (801b218 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801b1ca:	21cf      	movs	r1, #207	; 0xcf
 801b1cc:	f004 fabc 	bl	801f748 <__assert_func>
 801b1d0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b1d2:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801b1d6:	260a      	movs	r6, #10
 801b1d8:	3301      	adds	r3, #1
 801b1da:	8b4d      	ldrh	r5, [r1, #26]
 801b1dc:	fbb3 f1f6 	udiv	r1, r3, r6
 801b1e0:	3a01      	subs	r2, #1
 801b1e2:	fb06 3311 	mls	r3, r6, r1, r3
 801b1e6:	8602      	strh	r2, [r0, #48]	; 0x30
 801b1e8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b1ea:	f7ff ff49 	bl	801b080 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b1ee:	8b23      	ldrh	r3, [r4, #24]
 801b1f0:	2b02      	cmp	r3, #2
 801b1f2:	bf04      	itt	eq
 801b1f4:	2301      	moveq	r3, #1
 801b1f6:	8323      	strheq	r3, [r4, #24]
 801b1f8:	3412      	adds	r4, #18
 801b1fa:	4620      	mov	r0, r4
 801b1fc:	2101      	movs	r1, #1
 801b1fe:	f7ff ffad 	bl	801b15c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b202:	4620      	mov	r0, r4
 801b204:	462a      	mov	r2, r5
 801b206:	2100      	movs	r1, #0
 801b208:	f7ff ffc0 	bl	801b18c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b20c:	4628      	mov	r0, r5
 801b20e:	bd70      	pop	{r4, r5, r6, pc}
 801b210:	08023568 	.word	0x08023568
 801b214:	080237dd 	.word	0x080237dd
 801b218:	08023597 	.word	0x08023597

0801b21c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b21c:	428a      	cmp	r2, r1
 801b21e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b222:	4604      	mov	r4, r0
 801b224:	460e      	mov	r6, r1
 801b226:	4615      	mov	r5, r2
 801b228:	469a      	mov	sl, r3
 801b22a:	dd2b      	ble.n	801b284 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801b22c:	eba2 0801 	sub.w	r8, r2, r1
 801b230:	fa1f f888 	uxth.w	r8, r8
 801b234:	2700      	movs	r7, #0
 801b236:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801b23a:	f04f 0b0a 	mov.w	fp, #10
 801b23e:	b2bb      	uxth	r3, r7
 801b240:	4543      	cmp	r3, r8
 801b242:	da1f      	bge.n	801b284 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801b244:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b246:	3701      	adds	r7, #1
 801b248:	b92b      	cbnz	r3, 801b256 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x3a>
 801b24a:	4b22      	ldr	r3, [pc, #136]	; (801b2d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801b24c:	4a22      	ldr	r2, [pc, #136]	; (801b2d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801b24e:	21d7      	movs	r1, #215	; 0xd7
 801b250:	4822      	ldr	r0, [pc, #136]	; (801b2dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801b252:	f004 fa79 	bl	801f748 <__assert_func>
 801b256:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b258:	3b01      	subs	r3, #1
 801b25a:	b29b      	uxth	r3, r3
 801b25c:	441a      	add	r2, r3
 801b25e:	8623      	strh	r3, [r4, #48]	; 0x30
 801b260:	fbb2 f3fb 	udiv	r3, r2, fp
 801b264:	fb0b 2313 	mls	r3, fp, r3, r2
 801b268:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b26c:	4648      	mov	r0, r9
 801b26e:	8b5a      	ldrh	r2, [r3, #26]
 801b270:	9201      	str	r2, [sp, #4]
 801b272:	2101      	movs	r1, #1
 801b274:	f7ff ff72 	bl	801b15c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b278:	9a01      	ldr	r2, [sp, #4]
 801b27a:	2100      	movs	r1, #0
 801b27c:	4648      	mov	r0, r9
 801b27e:	f7ff ff85 	bl	801b18c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b282:	e7dc      	b.n	801b23e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801b284:	f104 071a 	add.w	r7, r4, #26
 801b288:	4631      	mov	r1, r6
 801b28a:	4638      	mov	r0, r7
 801b28c:	f7ff fec0 	bl	801b010 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801b290:	260a      	movs	r6, #10
 801b292:	b1c5      	cbz	r5, 801b2c6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801b294:	3d01      	subs	r5, #1
 801b296:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b298:	b2ad      	uxth	r5, r5
 801b29a:	2b09      	cmp	r3, #9
 801b29c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801b2a0:	dd03      	ble.n	801b2aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801b2a2:	4b0f      	ldr	r3, [pc, #60]	; (801b2e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801b2a4:	4a0f      	ldr	r2, [pc, #60]	; (801b2e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801b2a6:	21dd      	movs	r1, #221	; 0xdd
 801b2a8:	e7d2      	b.n	801b250 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x34>
 801b2aa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801b2ac:	3109      	adds	r1, #9
 801b2ae:	3301      	adds	r3, #1
 801b2b0:	fbb1 f0f6 	udiv	r0, r1, r6
 801b2b4:	fb06 1110 	mls	r1, r6, r0, r1
 801b2b8:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801b2ba:	8623      	strh	r3, [r4, #48]	; 0x30
 801b2bc:	2100      	movs	r1, #0
 801b2be:	4638      	mov	r0, r7
 801b2c0:	f7ff fd4a 	bl	801ad58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b2c4:	e7e5      	b.n	801b292 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801b2c6:	4620      	mov	r0, r4
 801b2c8:	b003      	add	sp, #12
 801b2ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ce:	f7ff bed7 	b.w	801b080 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b2d2:	bf00      	nop
 801b2d4:	08023568 	.word	0x08023568
 801b2d8:	0802365f 	.word	0x0802365f
 801b2dc:	08023597 	.word	0x08023597
 801b2e0:	080235c3 	.word	0x080235c3
 801b2e4:	080235d6 	.word	0x080235d6

0801b2e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ec:	4605      	mov	r5, r0
 801b2ee:	4616      	mov	r6, r2
 801b2f0:	1c8c      	adds	r4, r1, #2
 801b2f2:	8809      	ldrh	r1, [r1, #0]
 801b2f4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b2f8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b2fc:	42b3      	cmp	r3, r6
 801b2fe:	d124      	bne.n	801b34a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b300:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b304:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b308:	f001 070f 	and.w	r7, r1, #15
 801b30c:	f8cd 8000 	str.w	r8, [sp]
 801b310:	464b      	mov	r3, r9
 801b312:	4652      	mov	r2, sl
 801b314:	4621      	mov	r1, r4
 801b316:	4628      	mov	r0, r5
 801b318:	f7ff fe3a 	bl	801af90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b31c:	4683      	mov	fp, r0
 801b31e:	b168      	cbz	r0, 801b33c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b320:	eb0a 0109 	add.w	r1, sl, r9
 801b324:	4441      	add	r1, r8
 801b326:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b32a:	463a      	mov	r2, r7
 801b32c:	4649      	mov	r1, r9
 801b32e:	4628      	mov	r0, r5
 801b330:	f7ff ff74 	bl	801b21c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b334:	4658      	mov	r0, fp
 801b336:	b003      	add	sp, #12
 801b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b33c:	eb07 010a 	add.w	r1, r7, sl
 801b340:	4449      	add	r1, r9
 801b342:	4441      	add	r1, r8
 801b344:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b348:	e7d2      	b.n	801b2f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b34a:	f04f 0b00 	mov.w	fp, #0
 801b34e:	e7f1      	b.n	801b334 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b350 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b354:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b356:	886f      	ldrh	r7, [r5, #2]
 801b358:	4604      	mov	r4, r0
 801b35a:	087f      	lsrs	r7, r7, #1
 801b35c:	260b      	movs	r6, #11
 801b35e:	f100 091a 	add.w	r9, r0, #26
 801b362:	3e01      	subs	r6, #1
 801b364:	d013      	beq.n	801b38e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801b366:	2100      	movs	r1, #0
 801b368:	4648      	mov	r0, r9
 801b36a:	f7ff fd0f 	bl	801ad8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b36e:	462a      	mov	r2, r5
 801b370:	4680      	mov	r8, r0
 801b372:	4603      	mov	r3, r0
 801b374:	4639      	mov	r1, r7
 801b376:	4620      	mov	r0, r4
 801b378:	f7ff fccf 	bl	801ad1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b37c:	b138      	cbz	r0, 801b38e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801b37e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b382:	4642      	mov	r2, r8
 801b384:	4620      	mov	r0, r4
 801b386:	f7ff ffaf 	bl	801b2e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b38a:	2800      	cmp	r0, #0
 801b38c:	d1e9      	bne.n	801b362 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801b38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801b394:	b570      	push	{r4, r5, r6, lr}
 801b396:	4b21      	ldr	r3, [pc, #132]	; (801b41c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 801b398:	681a      	ldr	r2, [r3, #0]
 801b39a:	4604      	mov	r4, r0
 801b39c:	b912      	cbnz	r2, 801b3a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x10>
 801b39e:	6858      	ldr	r0, [r3, #4]
 801b3a0:	07c0      	lsls	r0, r0, #31
 801b3a2:	d511      	bpl.n	801b3c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 801b3a4:	6858      	ldr	r0, [r3, #4]
 801b3a6:	f010 0f01 	tst.w	r0, #1
 801b3aa:	ea4f 0060 	mov.w	r0, r0, asr #1
 801b3ae:	f104 051a 	add.w	r5, r4, #26
 801b3b2:	bf18      	it	ne
 801b3b4:	5823      	ldrne	r3, [r4, r0]
 801b3b6:	4420      	add	r0, r4
 801b3b8:	bf18      	it	ne
 801b3ba:	589a      	ldrne	r2, [r3, r2]
 801b3bc:	4790      	blx	r2
 801b3be:	2100      	movs	r1, #0
 801b3c0:	4602      	mov	r2, r0
 801b3c2:	4628      	mov	r0, r5
 801b3c4:	f7ff fcc8 	bl	801ad58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b3c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b3ca:	b133      	cbz	r3, 801b3da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801b3cc:	f104 051a 	add.w	r5, r4, #26
 801b3d0:	2100      	movs	r1, #0
 801b3d2:	4628      	mov	r0, r5
 801b3d4:	f7ff fcda 	bl	801ad8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b3d8:	b920      	cbnz	r0, 801b3e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x50>
 801b3da:	4620      	mov	r0, r4
 801b3dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3e0:	f7ff beec 	b.w	801b1bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b3e4:	4620      	mov	r0, r4
 801b3e6:	f7ff ffb3 	bl	801b350 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801b3ea:	2101      	movs	r1, #1
 801b3ec:	4628      	mov	r0, r5
 801b3ee:	f7ff fccd 	bl	801ad8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b3f2:	f640 133f 	movw	r3, #2367	; 0x93f
 801b3f6:	4298      	cmp	r0, r3
 801b3f8:	4606      	mov	r6, r0
 801b3fa:	d1ee      	bne.n	801b3da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801b3fc:	2100      	movs	r1, #0
 801b3fe:	4628      	mov	r0, r5
 801b400:	f7ff fcc4 	bl	801ad8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b404:	2101      	movs	r1, #1
 801b406:	4602      	mov	r2, r0
 801b408:	4628      	mov	r0, r5
 801b40a:	f7ff fca5 	bl	801ad58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b40e:	4632      	mov	r2, r6
 801b410:	2100      	movs	r1, #0
 801b412:	4628      	mov	r0, r5
 801b414:	f7ff fca0 	bl	801ad58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b418:	e7df      	b.n	801b3da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801b41a:	bf00      	nop
 801b41c:	20008750 	.word	0x20008750

0801b420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b422:	4617      	mov	r7, r2
 801b424:	461e      	mov	r6, r3
 801b426:	4605      	mov	r5, r0
 801b428:	f7ff ffb4 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b42c:	683b      	ldr	r3, [r7, #0]
 801b42e:	4604      	mov	r4, r0
 801b430:	68db      	ldr	r3, [r3, #12]
 801b432:	4601      	mov	r1, r0
 801b434:	4638      	mov	r0, r7
 801b436:	4798      	blx	r3
 801b438:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801b43c:	b29b      	uxth	r3, r3
 801b43e:	2b7f      	cmp	r3, #127	; 0x7f
 801b440:	4602      	mov	r2, r0
 801b442:	6030      	str	r0, [r6, #0]
 801b444:	d816      	bhi.n	801b474 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x54>
 801b446:	4639      	mov	r1, r7
 801b448:	4628      	mov	r0, r5
 801b44a:	f7ff fcb9 	bl	801adc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b44e:	6030      	str	r0, [r6, #0]
 801b450:	6833      	ldr	r3, [r6, #0]
 801b452:	b15b      	cbz	r3, 801b46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801b454:	7a9a      	ldrb	r2, [r3, #10]
 801b456:	f993 300d 	ldrsb.w	r3, [r3, #13]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	bfb4      	ite	lt
 801b45e:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801b462:	2300      	movge	r3, #0
 801b464:	4313      	orrs	r3, r2
 801b466:	bf0c      	ite	eq
 801b468:	2301      	moveq	r3, #1
 801b46a:	2300      	movne	r3, #0
 801b46c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b470:	4620      	mov	r0, r4
 801b472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b474:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d0e9      	beq.n	801b450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801b47c:	f640 1302 	movw	r3, #2306	; 0x902
 801b480:	429c      	cmp	r4, r3
 801b482:	d1e5      	bne.n	801b450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801b484:	4601      	mov	r1, r0
 801b486:	4628      	mov	r0, r5
 801b488:	f7ff fc16 	bl	801acb8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b48c:	e7df      	b.n	801b44e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801b48e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b492:	4617      	mov	r7, r2
 801b494:	461e      	mov	r6, r3
 801b496:	4605      	mov	r5, r0
 801b498:	f7ff ff7c 	bl	801b394 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	9a06      	ldr	r2, [sp, #24]
 801b4a0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801b4a4:	9b07      	ldr	r3, [sp, #28]
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	4601      	mov	r1, r0
 801b4aa:	4638      	mov	r0, r7
 801b4ac:	47c0      	blx	r8
 801b4ae:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801b4b2:	b29b      	uxth	r3, r3
 801b4b4:	2b7f      	cmp	r3, #127	; 0x7f
 801b4b6:	4602      	mov	r2, r0
 801b4b8:	6030      	str	r0, [r6, #0]
 801b4ba:	d817      	bhi.n	801b4ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801b4bc:	4639      	mov	r1, r7
 801b4be:	4628      	mov	r0, r5
 801b4c0:	f7ff fc7e 	bl	801adc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b4c4:	6030      	str	r0, [r6, #0]
 801b4c6:	6833      	ldr	r3, [r6, #0]
 801b4c8:	b15b      	cbz	r3, 801b4e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801b4ca:	7a9a      	ldrb	r2, [r3, #10]
 801b4cc:	f993 300d 	ldrsb.w	r3, [r3, #13]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	bfb4      	ite	lt
 801b4d4:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801b4d8:	2300      	movge	r3, #0
 801b4da:	4313      	orrs	r3, r2
 801b4dc:	bf0c      	ite	eq
 801b4de:	2301      	moveq	r3, #1
 801b4e0:	2300      	movne	r3, #0
 801b4e2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4ec:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d0e8      	beq.n	801b4c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b4f4:	f640 1302 	movw	r3, #2306	; 0x902
 801b4f8:	429c      	cmp	r4, r3
 801b4fa:	d1e4      	bne.n	801b4c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b4fc:	4601      	mov	r1, r0
 801b4fe:	4628      	mov	r0, r5
 801b500:	f7ff fbda 	bl	801acb8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b504:	e7de      	b.n	801b4c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801b506 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b506:	4602      	mov	r2, r0
 801b508:	b148      	cbz	r0, 801b51e <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b50a:	2300      	movs	r3, #0
 801b50c:	b298      	uxth	r0, r3
 801b50e:	3301      	adds	r3, #1
 801b510:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b514:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b518:	2900      	cmp	r1, #0
 801b51a:	d1f7      	bne.n	801b50c <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b51c:	4770      	bx	lr
 801b51e:	4770      	bx	lr

0801b520 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801b520:	b140      	cbz	r0, 801b534 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801b522:	4602      	mov	r2, r0
 801b524:	1a13      	subs	r3, r2, r0
 801b526:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b52a:	b29b      	uxth	r3, r3
 801b52c:	2900      	cmp	r1, #0
 801b52e:	d1f9      	bne.n	801b524 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801b530:	4618      	mov	r0, r3
 801b532:	4770      	bx	lr
 801b534:	4603      	mov	r3, r0
 801b536:	e7fb      	b.n	801b530 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801b538 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b538:	b530      	push	{r4, r5, lr}
 801b53a:	b169      	cbz	r1, 801b558 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 801b53c:	b168      	cbz	r0, 801b55a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801b53e:	1e85      	subs	r5, r0, #2
 801b540:	460b      	mov	r3, r1
 801b542:	1a58      	subs	r0, r3, r1
 801b544:	b280      	uxth	r0, r0
 801b546:	4290      	cmp	r0, r2
 801b548:	da07      	bge.n	801b55a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801b54a:	f813 4b01 	ldrb.w	r4, [r3], #1
 801b54e:	f825 4f02 	strh.w	r4, [r5, #2]!
 801b552:	2c00      	cmp	r4, #0
 801b554:	d1f5      	bne.n	801b542 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b556:	bd30      	pop	{r4, r5, pc}
 801b558:	4608      	mov	r0, r1
 801b55a:	bd30      	pop	{r4, r5, pc}

0801b55c <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 801b55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b55e:	b08b      	sub	sp, #44	; 0x2c
 801b560:	460f      	mov	r7, r1
 801b562:	2100      	movs	r1, #0
 801b564:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b568:	ad01      	add	r5, sp, #4
 801b56a:	211f      	movs	r1, #31
 801b56c:	fbb0 f6f3 	udiv	r6, r0, r3
 801b570:	fb03 0416 	mls	r4, r3, r6, r0
 801b574:	2c09      	cmp	r4, #9
 801b576:	bfd4      	ite	le
 801b578:	3430      	addle	r4, #48	; 0x30
 801b57a:	3457      	addgt	r4, #87	; 0x57
 801b57c:	b2e4      	uxtb	r4, r4
 801b57e:	554c      	strb	r4, [r1, r5]
 801b580:	4630      	mov	r0, r6
 801b582:	1e4c      	subs	r4, r1, #1
 801b584:	b92e      	cbnz	r6, 801b592 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 801b586:	4429      	add	r1, r5
 801b588:	4638      	mov	r0, r7
 801b58a:	f7ff ffd5 	bl	801b538 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b58e:	b00b      	add	sp, #44	; 0x2c
 801b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b592:	4621      	mov	r1, r4
 801b594:	e7ea      	b.n	801b56c <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

0801b596 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b596:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b598:	4606      	mov	r6, r0
 801b59a:	b08b      	sub	sp, #44	; 0x2c
 801b59c:	4608      	mov	r0, r1
 801b59e:	b349      	cbz	r1, 801b5f4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5e>
 801b5a0:	1e99      	subs	r1, r3, #2
 801b5a2:	290e      	cmp	r1, #14
 801b5a4:	d826      	bhi.n	801b5f4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5e>
 801b5a6:	2100      	movs	r1, #0
 801b5a8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b5ac:	4634      	mov	r4, r6
 801b5ae:	251f      	movs	r5, #31
 801b5b0:	fb94 f7f3 	sdiv	r7, r4, r3
 801b5b4:	fb03 4417 	mls	r4, r3, r7, r4
 801b5b8:	2c00      	cmp	r4, #0
 801b5ba:	bfb8      	it	lt
 801b5bc:	4264      	neglt	r4, r4
 801b5be:	2c09      	cmp	r4, #9
 801b5c0:	f105 31ff 	add.w	r1, r5, #4294967295
 801b5c4:	f10d 0e04 	add.w	lr, sp, #4
 801b5c8:	bfd4      	ite	le
 801b5ca:	3430      	addle	r4, #48	; 0x30
 801b5cc:	3457      	addgt	r4, #87	; 0x57
 801b5ce:	448e      	add	lr, r1
 801b5d0:	b2e4      	uxtb	r4, r4
 801b5d2:	f88e 4001 	strb.w	r4, [lr, #1]
 801b5d6:	463c      	mov	r4, r7
 801b5d8:	b977      	cbnz	r7, 801b5f8 <_ZN8touchgfx7Unicode4itoaElPtti+0x62>
 801b5da:	2e00      	cmp	r6, #0
 801b5dc:	da05      	bge.n	801b5ea <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b5de:	ab0a      	add	r3, sp, #40	; 0x28
 801b5e0:	4419      	add	r1, r3
 801b5e2:	232d      	movs	r3, #45	; 0x2d
 801b5e4:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b5e8:	1ea9      	subs	r1, r5, #2
 801b5ea:	3101      	adds	r1, #1
 801b5ec:	ab01      	add	r3, sp, #4
 801b5ee:	4419      	add	r1, r3
 801b5f0:	f7ff ffa2 	bl	801b538 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b5f4:	b00b      	add	sp, #44	; 0x2c
 801b5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5f8:	460d      	mov	r5, r1
 801b5fa:	e7d9      	b.n	801b5b0 <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

0801b5fc <_ZN8touchgfx7Unicode4atoiEPKt>:
 801b5fc:	b510      	push	{r4, lr}
 801b5fe:	b158      	cbz	r0, 801b618 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b600:	1e82      	subs	r2, r0, #2
 801b602:	210a      	movs	r1, #10
 801b604:	2000      	movs	r0, #0
 801b606:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b60a:	3b30      	subs	r3, #48	; 0x30
 801b60c:	b29c      	uxth	r4, r3
 801b60e:	2c09      	cmp	r4, #9
 801b610:	d802      	bhi.n	801b618 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b612:	fb01 3000 	mla	r0, r1, r0, r3
 801b616:	e7f6      	b.n	801b606 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801b618:	bd10      	pop	{r4, pc}

0801b61a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801b61a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b61e:	b085      	sub	sp, #20
 801b620:	f8d0 8000 	ldr.w	r8, [r0]
 801b624:	9203      	str	r2, [sp, #12]
 801b626:	468a      	mov	sl, r1
 801b628:	4681      	mov	r9, r0
 801b62a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801b62e:	9102      	str	r1, [sp, #8]
 801b630:	461c      	mov	r4, r3
 801b632:	4640      	mov	r0, r8
 801b634:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801b638:	9301      	str	r3, [sp, #4]
 801b63a:	f7ff ff64 	bl	801b506 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b63e:	9a03      	ldr	r2, [sp, #12]
 801b640:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801b644:	8812      	ldrh	r2, [r2, #0]
 801b646:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b648:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b64a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801b64c:	9902      	ldr	r1, [sp, #8]
 801b64e:	f1ba 0f00 	cmp.w	sl, #0
 801b652:	bf0c      	ite	eq
 801b654:	4603      	moveq	r3, r0
 801b656:	1c43      	addne	r3, r0, #1
 801b658:	2a69      	cmp	r2, #105	; 0x69
 801b65a:	b29b      	uxth	r3, r3
 801b65c:	d004      	beq.n	801b668 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801b65e:	d852      	bhi.n	801b706 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b660:	2a58      	cmp	r2, #88	; 0x58
 801b662:	d001      	beq.n	801b668 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801b664:	2a64      	cmp	r2, #100	; 0x64
 801b666:	d159      	bne.n	801b71c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801b668:	b19c      	cbz	r4, 801b692 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801b66a:	b956      	cbnz	r6, 801b682 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801b66c:	2801      	cmp	r0, #1
 801b66e:	d108      	bne.n	801b682 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801b670:	f8b8 2000 	ldrh.w	r2, [r8]
 801b674:	2a30      	cmp	r2, #48	; 0x30
 801b676:	bf02      	ittt	eq
 801b678:	f108 0202 	addeq.w	r2, r8, #2
 801b67c:	f8c9 2000 	streq.w	r2, [r9]
 801b680:	4630      	moveq	r0, r6
 801b682:	429e      	cmp	r6, r3
 801b684:	dd4c      	ble.n	801b720 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 801b686:	b2b6      	uxth	r6, r6
 801b688:	1af4      	subs	r4, r6, r3
 801b68a:	b2a4      	uxth	r4, r4
 801b68c:	4633      	mov	r3, r6
 801b68e:	f04f 0b00 	mov.w	fp, #0
 801b692:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801b696:	9a01      	ldr	r2, [sp, #4]
 801b698:	3e01      	subs	r6, #1
 801b69a:	b162      	cbz	r2, 801b6b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801b69c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b69e:	4293      	cmp	r3, r2
 801b6a0:	da09      	bge.n	801b6b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801b6a2:	1ad2      	subs	r2, r2, r3
 801b6a4:	b292      	uxth	r2, r2
 801b6a6:	b939      	cbnz	r1, 801b6b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801b6a8:	f1bb 0f00 	cmp.w	fp, #0
 801b6ac:	d050      	beq.n	801b750 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801b6ae:	2800      	cmp	r0, #0
 801b6b0:	d04e      	beq.n	801b750 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801b6b2:	4414      	add	r4, r2
 801b6b4:	b2a4      	uxth	r4, r4
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	682b      	ldr	r3, [r5, #0]
 801b6ba:	42b3      	cmp	r3, r6
 801b6bc:	da07      	bge.n	801b6ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801b6be:	f1ba 0f00 	cmp.w	sl, #0
 801b6c2:	d004      	beq.n	801b6ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801b6c4:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801b6c8:	682b      	ldr	r3, [r5, #0]
 801b6ca:	3301      	adds	r3, #1
 801b6cc:	602b      	str	r3, [r5, #0]
 801b6ce:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801b6d2:	b124      	cbz	r4, 801b6de <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801b6d4:	6829      	ldr	r1, [r5, #0]
 801b6d6:	3c01      	subs	r4, #1
 801b6d8:	428e      	cmp	r6, r1
 801b6da:	b2a4      	uxth	r4, r4
 801b6dc:	dc22      	bgt.n	801b724 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 801b6de:	b140      	cbz	r0, 801b6f2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801b6e0:	f8d9 3000 	ldr.w	r3, [r9]
 801b6e4:	8819      	ldrh	r1, [r3, #0]
 801b6e6:	b121      	cbz	r1, 801b6f2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801b6e8:	6829      	ldr	r1, [r5, #0]
 801b6ea:	3801      	subs	r0, #1
 801b6ec:	428e      	cmp	r6, r1
 801b6ee:	b280      	uxth	r0, r0
 801b6f0:	dc1e      	bgt.n	801b730 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b6f2:	2020      	movs	r0, #32
 801b6f4:	b122      	cbz	r2, 801b700 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 801b6f6:	6829      	ldr	r1, [r5, #0]
 801b6f8:	3a01      	subs	r2, #1
 801b6fa:	428e      	cmp	r6, r1
 801b6fc:	b292      	uxth	r2, r2
 801b6fe:	dc21      	bgt.n	801b744 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 801b700:	b005      	add	sp, #20
 801b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b706:	2a73      	cmp	r2, #115	; 0x73
 801b708:	d003      	beq.n	801b712 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 801b70a:	2a78      	cmp	r2, #120	; 0x78
 801b70c:	d0ac      	beq.n	801b668 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801b70e:	2a6f      	cmp	r2, #111	; 0x6f
 801b710:	e7a9      	b.n	801b666 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 801b712:	2c00      	cmp	r4, #0
 801b714:	d0bd      	beq.n	801b692 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801b716:	4286      	cmp	r6, r0
 801b718:	da00      	bge.n	801b71c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801b71a:	b2b0      	uxth	r0, r6
 801b71c:	2400      	movs	r4, #0
 801b71e:	e7b8      	b.n	801b692 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801b720:	2400      	movs	r4, #0
 801b722:	e7b4      	b.n	801b68e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 801b724:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801b728:	682b      	ldr	r3, [r5, #0]
 801b72a:	3301      	adds	r3, #1
 801b72c:	602b      	str	r3, [r5, #0]
 801b72e:	e7d0      	b.n	801b6d2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 801b730:	1c9c      	adds	r4, r3, #2
 801b732:	f8c9 4000 	str.w	r4, [r9]
 801b736:	881b      	ldrh	r3, [r3, #0]
 801b738:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 801b73c:	682b      	ldr	r3, [r5, #0]
 801b73e:	3301      	adds	r3, #1
 801b740:	602b      	str	r3, [r5, #0]
 801b742:	e7cc      	b.n	801b6de <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801b744:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 801b748:	682b      	ldr	r3, [r5, #0]
 801b74a:	3301      	adds	r3, #1
 801b74c:	602b      	str	r3, [r5, #0]
 801b74e:	e7d1      	b.n	801b6f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 801b750:	2a00      	cmp	r2, #0
 801b752:	d0b1      	beq.n	801b6b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801b754:	f04f 0e20 	mov.w	lr, #32
 801b758:	6829      	ldr	r1, [r5, #0]
 801b75a:	3a01      	subs	r2, #1
 801b75c:	42b1      	cmp	r1, r6
 801b75e:	b292      	uxth	r2, r2
 801b760:	daa9      	bge.n	801b6b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801b762:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801b766:	682b      	ldr	r3, [r5, #0]
 801b768:	3301      	adds	r3, #1
 801b76a:	602b      	str	r3, [r5, #0]
 801b76c:	2a00      	cmp	r2, #0
 801b76e:	d1f3      	bne.n	801b758 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 801b770:	e7a2      	b.n	801b6b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

0801b772 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801b772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b776:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b77a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b77e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b780:	9f08      	ldr	r7, [sp, #32]
 801b782:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b784:	4604      	mov	r4, r0
 801b786:	2000      	movs	r0, #0
 801b788:	8008      	strh	r0, [r1, #0]
 801b78a:	f04f 0801 	mov.w	r8, #1
 801b78e:	7010      	strb	r0, [r2, #0]
 801b790:	7018      	strb	r0, [r3, #0]
 801b792:	f88e 0000 	strb.w	r0, [lr]
 801b796:	f88c 0000 	strb.w	r0, [ip]
 801b79a:	7030      	strb	r0, [r6, #0]
 801b79c:	6820      	ldr	r0, [r4, #0]
 801b79e:	8800      	ldrh	r0, [r0, #0]
 801b7a0:	b190      	cbz	r0, 801b7c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801b7a2:	282b      	cmp	r0, #43	; 0x2b
 801b7a4:	d001      	beq.n	801b7aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 801b7a6:	2820      	cmp	r0, #32
 801b7a8:	d104      	bne.n	801b7b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 801b7aa:	8008      	strh	r0, [r1, #0]
 801b7ac:	6820      	ldr	r0, [r4, #0]
 801b7ae:	3002      	adds	r0, #2
 801b7b0:	6020      	str	r0, [r4, #0]
 801b7b2:	e7f3      	b.n	801b79c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 801b7b4:	282d      	cmp	r0, #45	; 0x2d
 801b7b6:	d102      	bne.n	801b7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 801b7b8:	f882 8000 	strb.w	r8, [r2]
 801b7bc:	e7f6      	b.n	801b7ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801b7be:	2823      	cmp	r0, #35	; 0x23
 801b7c0:	d102      	bne.n	801b7c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801b7c2:	f883 8000 	strb.w	r8, [r3]
 801b7c6:	e7f1      	b.n	801b7ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801b7c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b7cc:	2b09      	cmp	r3, #9
 801b7ce:	d901      	bls.n	801b7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 801b7d0:	282a      	cmp	r0, #42	; 0x2a
 801b7d2:	d114      	bne.n	801b7fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801b7d4:	2201      	movs	r2, #1
 801b7d6:	f88c 2000 	strb.w	r2, [ip]
 801b7da:	6823      	ldr	r3, [r4, #0]
 801b7dc:	8819      	ldrh	r1, [r3, #0]
 801b7de:	2930      	cmp	r1, #48	; 0x30
 801b7e0:	bf02      	ittt	eq
 801b7e2:	3302      	addeq	r3, #2
 801b7e4:	6023      	streq	r3, [r4, #0]
 801b7e6:	f88e 2000 	strbeq.w	r2, [lr]
 801b7ea:	6820      	ldr	r0, [r4, #0]
 801b7ec:	8803      	ldrh	r3, [r0, #0]
 801b7ee:	2b2a      	cmp	r3, #42	; 0x2a
 801b7f0:	d11e      	bne.n	801b830 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 801b7f2:	f04f 33ff 	mov.w	r3, #4294967295
 801b7f6:	603b      	str	r3, [r7, #0]
 801b7f8:	6823      	ldr	r3, [r4, #0]
 801b7fa:	3302      	adds	r3, #2
 801b7fc:	6023      	str	r3, [r4, #0]
 801b7fe:	6823      	ldr	r3, [r4, #0]
 801b800:	881b      	ldrh	r3, [r3, #0]
 801b802:	2b2e      	cmp	r3, #46	; 0x2e
 801b804:	d112      	bne.n	801b82c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801b806:	2301      	movs	r3, #1
 801b808:	7033      	strb	r3, [r6, #0]
 801b80a:	6823      	ldr	r3, [r4, #0]
 801b80c:	1c98      	adds	r0, r3, #2
 801b80e:	6020      	str	r0, [r4, #0]
 801b810:	885b      	ldrh	r3, [r3, #2]
 801b812:	2b2a      	cmp	r3, #42	; 0x2a
 801b814:	d118      	bne.n	801b848 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 801b816:	f04f 33ff 	mov.w	r3, #4294967295
 801b81a:	602b      	str	r3, [r5, #0]
 801b81c:	6823      	ldr	r3, [r4, #0]
 801b81e:	3302      	adds	r3, #2
 801b820:	6023      	str	r3, [r4, #0]
 801b822:	682b      	ldr	r3, [r5, #0]
 801b824:	2b06      	cmp	r3, #6
 801b826:	bfa8      	it	ge
 801b828:	2306      	movge	r3, #6
 801b82a:	602b      	str	r3, [r5, #0]
 801b82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b830:	f7ff fee4 	bl	801b5fc <_ZN8touchgfx7Unicode4atoiEPKt>
 801b834:	6038      	str	r0, [r7, #0]
 801b836:	6822      	ldr	r2, [r4, #0]
 801b838:	8813      	ldrh	r3, [r2, #0]
 801b83a:	3b30      	subs	r3, #48	; 0x30
 801b83c:	b29b      	uxth	r3, r3
 801b83e:	2b09      	cmp	r3, #9
 801b840:	d8dd      	bhi.n	801b7fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801b842:	3202      	adds	r2, #2
 801b844:	6022      	str	r2, [r4, #0]
 801b846:	e7f6      	b.n	801b836 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 801b848:	f7ff fed8 	bl	801b5fc <_ZN8touchgfx7Unicode4atoiEPKt>
 801b84c:	6028      	str	r0, [r5, #0]
 801b84e:	6822      	ldr	r2, [r4, #0]
 801b850:	8813      	ldrh	r3, [r2, #0]
 801b852:	3b30      	subs	r3, #48	; 0x30
 801b854:	b29b      	uxth	r3, r3
 801b856:	2b09      	cmp	r3, #9
 801b858:	d8e3      	bhi.n	801b822 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 801b85a:	3202      	adds	r2, #2
 801b85c:	6022      	str	r2, [r4, #0]
 801b85e:	e7f6      	b.n	801b84e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>

0801b860 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b864:	b0a3      	sub	sp, #140	; 0x8c
 801b866:	2500      	movs	r5, #0
 801b868:	af11      	add	r7, sp, #68	; 0x44
 801b86a:	4606      	mov	r6, r0
 801b86c:	4689      	mov	r9, r1
 801b86e:	9209      	str	r2, [sp, #36]	; 0x24
 801b870:	4629      	mov	r1, r5
 801b872:	2242      	movs	r2, #66	; 0x42
 801b874:	4638      	mov	r0, r7
 801b876:	461c      	mov	r4, r3
 801b878:	950d      	str	r5, [sp, #52]	; 0x34
 801b87a:	f7fe fe2c 	bl	801a4d6 <_ZN8touchgfx6memsetEPvhm>
 801b87e:	b116      	cbz	r6, 801b886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801b880:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b882:	b921      	cbnz	r1, 801b88e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 801b884:	8031      	strh	r1, [r6, #0]
 801b886:	4630      	mov	r0, r6
 801b888:	b023      	add	sp, #140	; 0x8c
 801b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b88e:	f8df a250 	ldr.w	sl, [pc, #592]	; 801bae0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 801b892:	f8da 0000 	ldr.w	r0, [sl]
 801b896:	6803      	ldr	r3, [r0, #0]
 801b898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b89a:	4798      	blx	r3
 801b89c:	f109 3bff 	add.w	fp, r9, #4294967295
 801b8a0:	9009      	str	r0, [sp, #36]	; 0x24
 801b8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8a4:	881a      	ldrh	r2, [r3, #0]
 801b8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8a8:	2a00      	cmp	r2, #0
 801b8aa:	f000 80c1 	beq.w	801ba30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d0>
 801b8ae:	459b      	cmp	fp, r3
 801b8b0:	f340 80be 	ble.w	801ba30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d0>
 801b8b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b8b8:	f8b8 2000 	ldrh.w	r2, [r8]
 801b8bc:	2a00      	cmp	r2, #0
 801b8be:	d0f0      	beq.n	801b8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801b8c0:	2a25      	cmp	r2, #37	; 0x25
 801b8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8c4:	f000 80b8 	beq.w	801ba38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d8>
 801b8c8:	459b      	cmp	fp, r3
 801b8ca:	f340 80b5 	ble.w	801ba38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d8>
 801b8ce:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b8d2:	f108 0202 	add.w	r2, r8, #2
 801b8d6:	3301      	adds	r3, #1
 801b8d8:	9209      	str	r2, [sp, #36]	; 0x24
 801b8da:	930d      	str	r3, [sp, #52]	; 0x34
 801b8dc:	e7ea      	b.n	801b8b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 801b8de:	3b63      	subs	r3, #99	; 0x63
 801b8e0:	2b01      	cmp	r3, #1
 801b8e2:	f200 80f3 	bhi.w	801bacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26c>
 801b8e6:	9710      	str	r7, [sp, #64]	; 0x40
 801b8e8:	8813      	ldrh	r3, [r2, #0]
 801b8ea:	2b69      	cmp	r3, #105	; 0x69
 801b8ec:	d068      	beq.n	801b9c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801b8ee:	d81c      	bhi.n	801b92a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 801b8f0:	2b63      	cmp	r3, #99	; 0x63
 801b8f2:	d031      	beq.n	801b958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 801b8f4:	2b64      	cmp	r3, #100	; 0x64
 801b8f6:	d063      	beq.n	801b9c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801b8f8:	2b58      	cmp	r3, #88	; 0x58
 801b8fa:	f000 8082 	beq.w	801ba02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 801b8fe:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801b902:	46a0      	mov	r8, r4
 801b904:	e02f      	b.n	801b966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801b906:	2b73      	cmp	r3, #115	; 0x73
 801b908:	d0ed      	beq.n	801b8e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801b90a:	d803      	bhi.n	801b914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 801b90c:	2b6f      	cmp	r3, #111	; 0x6f
 801b90e:	f040 80dd 	bne.w	801bacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26c>
 801b912:	e7e8      	b.n	801b8e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801b914:	2b75      	cmp	r3, #117	; 0x75
 801b916:	d0e6      	beq.n	801b8e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801b918:	2b78      	cmp	r3, #120	; 0x78
 801b91a:	e7f8      	b.n	801b90e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 801b91c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b91e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b924:	3302      	adds	r3, #2
 801b926:	9309      	str	r3, [sp, #36]	; 0x24
 801b928:	e7bb      	b.n	801b8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801b92a:	2b73      	cmp	r3, #115	; 0x73
 801b92c:	d037      	beq.n	801b99e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 801b92e:	d808      	bhi.n	801b942 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 801b930:	2b6f      	cmp	r3, #111	; 0x6f
 801b932:	d1e4      	bne.n	801b8fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801b934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b936:	f104 0804 	add.w	r8, r4, #4
 801b93a:	eba9 0202 	sub.w	r2, r9, r2
 801b93e:	2308      	movs	r3, #8
 801b940:	e059      	b.n	801b9f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801b942:	2b75      	cmp	r3, #117	; 0x75
 801b944:	d051      	beq.n	801b9ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 801b946:	2b78      	cmp	r3, #120	; 0x78
 801b948:	d1d9      	bne.n	801b8fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801b94a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b94c:	f104 0804 	add.w	r8, r4, #4
 801b950:	eba9 0202 	sub.w	r2, r9, r2
 801b954:	2310      	movs	r3, #16
 801b956:	e04e      	b.n	801b9f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801b958:	7823      	ldrb	r3, [r4, #0]
 801b95a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b95e:	f104 0804 	add.w	r8, r4, #4
 801b962:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b966:	aa0d      	add	r2, sp, #52	; 0x34
 801b968:	9205      	str	r2, [sp, #20]
 801b96a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801b96e:	9204      	str	r2, [sp, #16]
 801b970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b972:	9203      	str	r2, [sp, #12]
 801b974:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801b978:	9202      	str	r2, [sp, #8]
 801b97a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b97c:	9201      	str	r2, [sp, #4]
 801b97e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801b982:	9200      	str	r2, [sp, #0]
 801b984:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b988:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b98c:	9607      	str	r6, [sp, #28]
 801b98e:	f8cd 9018 	str.w	r9, [sp, #24]
 801b992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b994:	a810      	add	r0, sp, #64	; 0x40
 801b996:	f7ff fe40 	bl	801b61a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b99a:	4644      	mov	r4, r8
 801b99c:	e7c1      	b.n	801b922 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801b99e:	f8da 0000 	ldr.w	r0, [sl]
 801b9a2:	6821      	ldr	r1, [r4, #0]
 801b9a4:	6803      	ldr	r3, [r0, #0]
 801b9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9a8:	4798      	blx	r3
 801b9aa:	9010      	str	r0, [sp, #64]	; 0x40
 801b9ac:	f8da 0000 	ldr.w	r0, [sl]
 801b9b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b9b2:	6803      	ldr	r3, [r0, #0]
 801b9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9b6:	4798      	blx	r3
 801b9b8:	f104 0804 	add.w	r8, r4, #4
 801b9bc:	9009      	str	r0, [sp, #36]	; 0x24
 801b9be:	e7d2      	b.n	801b966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801b9c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b9c2:	6820      	ldr	r0, [r4, #0]
 801b9c4:	eba9 0202 	sub.w	r2, r9, r2
 801b9c8:	230a      	movs	r3, #10
 801b9ca:	b292      	uxth	r2, r2
 801b9cc:	4639      	mov	r1, r7
 801b9ce:	f7ff fde2 	bl	801b596 <_ZN8touchgfx7Unicode4itoaElPtti>
 801b9d2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b9d6:	2b2d      	cmp	r3, #45	; 0x2d
 801b9d8:	f104 0804 	add.w	r8, r4, #4
 801b9dc:	d1c3      	bne.n	801b966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801b9de:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b9e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9e4:	3302      	adds	r3, #2
 801b9e6:	9310      	str	r3, [sp, #64]	; 0x40
 801b9e8:	e7bd      	b.n	801b966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801b9ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b9ec:	f104 0804 	add.w	r8, r4, #4
 801b9f0:	eba9 0202 	sub.w	r2, r9, r2
 801b9f4:	230a      	movs	r3, #10
 801b9f6:	b292      	uxth	r2, r2
 801b9f8:	4639      	mov	r1, r7
 801b9fa:	6820      	ldr	r0, [r4, #0]
 801b9fc:	f7ff fdae 	bl	801b55c <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801ba00:	e7b1      	b.n	801b966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ba02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ba04:	6820      	ldr	r0, [r4, #0]
 801ba06:	eba9 0202 	sub.w	r2, r9, r2
 801ba0a:	b292      	uxth	r2, r2
 801ba0c:	2310      	movs	r3, #16
 801ba0e:	4639      	mov	r1, r7
 801ba10:	f7ff fda4 	bl	801b55c <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801ba14:	f104 0804 	add.w	r8, r4, #4
 801ba18:	463a      	mov	r2, r7
 801ba1a:	8813      	ldrh	r3, [r2, #0]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d0a2      	beq.n	801b966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ba20:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ba24:	2919      	cmp	r1, #25
 801ba26:	bf9c      	itt	ls
 801ba28:	3b20      	subls	r3, #32
 801ba2a:	8013      	strhls	r3, [r2, #0]
 801ba2c:	3202      	adds	r2, #2
 801ba2e:	e7f4      	b.n	801ba1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 801ba30:	2200      	movs	r2, #0
 801ba32:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ba36:	e726      	b.n	801b886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801ba38:	459b      	cmp	fp, r3
 801ba3a:	f77f af32 	ble.w	801b8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801ba3e:	f108 0302 	add.w	r3, r8, #2
 801ba42:	9309      	str	r3, [sp, #36]	; 0x24
 801ba44:	ab0f      	add	r3, sp, #60	; 0x3c
 801ba46:	9304      	str	r3, [sp, #16]
 801ba48:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ba4c:	9303      	str	r3, [sp, #12]
 801ba4e:	ab0e      	add	r3, sp, #56	; 0x38
 801ba50:	9302      	str	r3, [sp, #8]
 801ba52:	ab0c      	add	r3, sp, #48	; 0x30
 801ba54:	9301      	str	r3, [sp, #4]
 801ba56:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ba5a:	9300      	str	r3, [sp, #0]
 801ba5c:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801ba60:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ba64:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801ba68:	a809      	add	r0, sp, #36	; 0x24
 801ba6a:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801ba6e:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801ba72:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801ba76:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801ba7a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801ba7e:	950e      	str	r5, [sp, #56]	; 0x38
 801ba80:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801ba84:	950f      	str	r5, [sp, #60]	; 0x3c
 801ba86:	f7ff fe74 	bl	801b772 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801ba8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	bfbe      	ittt	lt
 801ba92:	6823      	ldrlt	r3, [r4, #0]
 801ba94:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ba98:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ba9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ba9c:	bfb8      	it	lt
 801ba9e:	3404      	addlt	r4, #4
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	bfbe      	ittt	lt
 801baa4:	6823      	ldrlt	r3, [r4, #0]
 801baa6:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801baaa:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801baac:	8813      	ldrh	r3, [r2, #0]
 801baae:	bfb8      	it	lt
 801bab0:	3404      	addlt	r4, #4
 801bab2:	2b69      	cmp	r3, #105	; 0x69
 801bab4:	f43f af17 	beq.w	801b8e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801bab8:	f63f af25 	bhi.w	801b906 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 801babc:	2b58      	cmp	r3, #88	; 0x58
 801babe:	f43f af12 	beq.w	801b8e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801bac2:	f63f af0c 	bhi.w	801b8de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 801bac6:	2b25      	cmp	r3, #37	; 0x25
 801bac8:	f43f af28 	beq.w	801b91c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 801bacc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bace:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801bad2:	f8b8 2000 	ldrh.w	r2, [r8]
 801bad6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801bada:	3301      	adds	r3, #1
 801badc:	930d      	str	r3, [sp, #52]	; 0x34
 801bade:	e720      	b.n	801b922 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801bae0:	20009ac0 	.word	0x20009ac0

0801bae4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bae6:	4605      	mov	r5, r0
 801bae8:	b0a1      	sub	sp, #132	; 0x84
 801baea:	4610      	mov	r0, r2
 801baec:	460e      	mov	r6, r1
 801baee:	4614      	mov	r4, r2
 801baf0:	461f      	mov	r7, r3
 801baf2:	f7ff fd15 	bl	801b520 <_ZN8touchgfx7Unicode6strlenEPKc>
 801baf6:	283f      	cmp	r0, #63	; 0x3f
 801baf8:	dd06      	ble.n	801bb08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801bafa:	4b0a      	ldr	r3, [pc, #40]	; (801bb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801bafc:	4a0a      	ldr	r2, [pc, #40]	; (801bb28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801bafe:	480b      	ldr	r0, [pc, #44]	; (801bb2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801bb00:	f240 11bf 	movw	r1, #447	; 0x1bf
 801bb04:	f003 fe20 	bl	801f748 <__assert_func>
 801bb08:	4621      	mov	r1, r4
 801bb0a:	2240      	movs	r2, #64	; 0x40
 801bb0c:	4668      	mov	r0, sp
 801bb0e:	f7ff fd13 	bl	801b538 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801bb12:	463b      	mov	r3, r7
 801bb14:	466a      	mov	r2, sp
 801bb16:	4631      	mov	r1, r6
 801bb18:	4628      	mov	r0, r5
 801bb1a:	f7ff fea1 	bl	801b860 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801bb1e:	b021      	add	sp, #132	; 0x84
 801bb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb22:	bf00      	nop
 801bb24:	08023ccb 	.word	0x08023ccb
 801bb28:	08023d0e 	.word	0x08023d0e
 801bb2c:	08023ce8 	.word	0x08023ce8

0801bb30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801bb30:	b40c      	push	{r2, r3}
 801bb32:	b507      	push	{r0, r1, r2, lr}
 801bb34:	ab04      	add	r3, sp, #16
 801bb36:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb3a:	9301      	str	r3, [sp, #4]
 801bb3c:	f7ff ffd2 	bl	801bae4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801bb40:	b003      	add	sp, #12
 801bb42:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb46:	b002      	add	sp, #8
 801bb48:	4770      	bx	lr
	...

0801bb4c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bb4c:	4b01      	ldr	r3, [pc, #4]	; (801bb54 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bb4e:	6018      	str	r0, [r3, #0]
 801bb50:	4770      	bx	lr
 801bb52:	bf00      	nop
 801bb54:	20009b34 	.word	0x20009b34

0801bb58 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bb58:	4b07      	ldr	r3, [pc, #28]	; (801bb78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801bb5a:	881a      	ldrh	r2, [r3, #0]
 801bb5c:	4290      	cmp	r0, r2
 801bb5e:	db09      	blt.n	801bb74 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bb60:	4b06      	ldr	r3, [pc, #24]	; (801bb7c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801bb62:	881b      	ldrh	r3, [r3, #0]
 801bb64:	4413      	add	r3, r2
 801bb66:	4298      	cmp	r0, r3
 801bb68:	da04      	bge.n	801bb74 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bb6a:	4b05      	ldr	r3, [pc, #20]	; (801bb80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801bb72:	4770      	bx	lr
 801bb74:	2000      	movs	r0, #0
 801bb76:	4770      	bx	lr
 801bb78:	20009b54 	.word	0x20009b54
 801bb7c:	20009b58 	.word	0x20009b58
 801bb80:	20009b38 	.word	0x20009b38

0801bb84 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb88:	4e26      	ldr	r6, [pc, #152]	; (801bc24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801bb8a:	6833      	ldr	r3, [r6, #0]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d046      	beq.n	801bc1e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bb90:	4a25      	ldr	r2, [pc, #148]	; (801bc28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801bb92:	4d26      	ldr	r5, [pc, #152]	; (801bc2c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bb94:	8810      	ldrh	r0, [r2, #0]
 801bb96:	882c      	ldrh	r4, [r5, #0]
 801bb98:	4f25      	ldr	r7, [pc, #148]	; (801bc30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bb9a:	4420      	add	r0, r4
 801bb9c:	1c42      	adds	r2, r0, #1
 801bb9e:	f022 0201 	bic.w	r2, r2, #1
 801bba2:	0412      	lsls	r2, r2, #16
 801bba4:	0c12      	lsrs	r2, r2, #16
 801bba6:	0051      	lsls	r1, r2, #1
 801bba8:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801bbac:	220e      	movs	r2, #14
 801bbae:	fb02 fe04 	mul.w	lr, r2, r4
 801bbb2:	eb08 0c01 	add.w	ip, r8, r1
 801bbb6:	eb03 0208 	add.w	r2, r3, r8
 801bbba:	4c1e      	ldr	r4, [pc, #120]	; (801bc34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bbbc:	603a      	str	r2, [r7, #0]
 801bbbe:	eb03 020c 	add.w	r2, r3, ip
 801bbc2:	6022      	str	r2, [r4, #0]
 801bbc4:	44f4      	add	ip, lr
 801bbc6:	4a1c      	ldr	r2, [pc, #112]	; (801bc38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bbc8:	4463      	add	r3, ip
 801bbca:	6013      	str	r3, [r2, #0]
 801bbcc:	4a1b      	ldr	r2, [pc, #108]	; (801bc3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bbce:	2300      	movs	r3, #0
 801bbd0:	8013      	strh	r3, [r2, #0]
 801bbd2:	4a1b      	ldr	r2, [pc, #108]	; (801bc40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801bbd4:	6812      	ldr	r2, [r2, #0]
 801bbd6:	eba2 0208 	sub.w	r2, r2, r8
 801bbda:	1a52      	subs	r2, r2, r1
 801bbdc:	4919      	ldr	r1, [pc, #100]	; (801bc44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801bbde:	eba2 020e 	sub.w	r2, r2, lr
 801bbe2:	600a      	str	r2, [r1, #0]
 801bbe4:	4a18      	ldr	r2, [pc, #96]	; (801bc48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801bbe6:	469e      	mov	lr, r3
 801bbe8:	8013      	strh	r3, [r2, #0]
 801bbea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bbee:	4283      	cmp	r3, r0
 801bbf0:	d007      	beq.n	801bc02 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801bbf2:	6832      	ldr	r2, [r6, #0]
 801bbf4:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801bbf8:	683a      	ldr	r2, [r7, #0]
 801bbfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bbfe:	3301      	adds	r3, #1
 801bc00:	e7f5      	b.n	801bbee <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801bc02:	882d      	ldrh	r5, [r5, #0]
 801bc04:	6820      	ldr	r0, [r4, #0]
 801bc06:	2300      	movs	r3, #0
 801bc08:	240e      	movs	r4, #14
 801bc0a:	42ab      	cmp	r3, r5
 801bc0c:	d207      	bcs.n	801bc1e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bc0e:	fb04 0203 	mla	r2, r4, r3, r0
 801bc12:	3301      	adds	r3, #1
 801bc14:	7b11      	ldrb	r1, [r2, #12]
 801bc16:	f36f 1145 	bfc	r1, #5, #1
 801bc1a:	7311      	strb	r1, [r2, #12]
 801bc1c:	e7f5      	b.n	801bc0a <_ZN8touchgfx6Bitmap10clearCacheEv+0x86>
 801bc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc22:	bf00      	nop
 801bc24:	20009b38 	.word	0x20009b38
 801bc28:	20009b54 	.word	0x20009b54
 801bc2c:	20009b58 	.word	0x20009b58
 801bc30:	20009b4c 	.word	0x20009b4c
 801bc34:	20009b3c 	.word	0x20009b3c
 801bc38:	20009b44 	.word	0x20009b44
 801bc3c:	20009b56 	.word	0x20009b56
 801bc40:	20009b40 	.word	0x20009b40
 801bc44:	20009b50 	.word	0x20009b50
 801bc48:	20009b48 	.word	0x20009b48

0801bc4c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bc4c:	b510      	push	{r4, lr}
 801bc4e:	4b10      	ldr	r3, [pc, #64]	; (801bc90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	b9db      	cbnz	r3, 801bc8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bc54:	b1d1      	cbz	r1, 801bc8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bc56:	4b0f      	ldr	r3, [pc, #60]	; (801bc94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bc58:	801a      	strh	r2, [r3, #0]
 801bc5a:	4b0f      	ldr	r3, [pc, #60]	; (801bc98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bc5c:	881b      	ldrh	r3, [r3, #0]
 801bc5e:	b292      	uxth	r2, r2
 801bc60:	240e      	movs	r4, #14
 801bc62:	4413      	add	r3, r2
 801bc64:	4362      	muls	r2, r4
 801bc66:	2406      	movs	r4, #6
 801bc68:	fb04 2203 	mla	r2, r4, r3, r2
 801bc6c:	4291      	cmp	r1, r2
 801bc6e:	d805      	bhi.n	801bc7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bc70:	4b0a      	ldr	r3, [pc, #40]	; (801bc9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bc72:	4a0b      	ldr	r2, [pc, #44]	; (801bca0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bc74:	480b      	ldr	r0, [pc, #44]	; (801bca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bc76:	2137      	movs	r1, #55	; 0x37
 801bc78:	f003 fd66 	bl	801f748 <__assert_func>
 801bc7c:	4b0a      	ldr	r3, [pc, #40]	; (801bca8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bc7e:	6019      	str	r1, [r3, #0]
 801bc80:	4b0a      	ldr	r3, [pc, #40]	; (801bcac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bc82:	6018      	str	r0, [r3, #0]
 801bc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc88:	f7ff bf7c 	b.w	801bb84 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bc8c:	bd10      	pop	{r4, pc}
 801bc8e:	bf00      	nop
 801bc90:	20009b44 	.word	0x20009b44
 801bc94:	20009b58 	.word	0x20009b58
 801bc98:	20009b54 	.word	0x20009b54
 801bc9c:	08023df0 	.word	0x08023df0
 801bca0:	08023e85 	.word	0x08023e85
 801bca4:	08023dcb 	.word	0x08023dcb
 801bca8:	20009b40 	.word	0x20009b40
 801bcac:	20009b38 	.word	0x20009b38

0801bcb0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bcb0:	b470      	push	{r4, r5, r6}
 801bcb2:	4c07      	ldr	r4, [pc, #28]	; (801bcd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bcb4:	6826      	ldr	r6, [r4, #0]
 801bcb6:	4605      	mov	r5, r0
 801bcb8:	4610      	mov	r0, r2
 801bcba:	9a03      	ldr	r2, [sp, #12]
 801bcbc:	b936      	cbnz	r6, 801bccc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bcbe:	6025      	str	r5, [r4, #0]
 801bcc0:	4c04      	ldr	r4, [pc, #16]	; (801bcd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bcc2:	8021      	strh	r1, [r4, #0]
 801bcc4:	bc70      	pop	{r4, r5, r6}
 801bcc6:	4619      	mov	r1, r3
 801bcc8:	f7ff bfc0 	b.w	801bc4c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bccc:	bc70      	pop	{r4, r5, r6}
 801bcce:	4770      	bx	lr
 801bcd0:	20009b5c 	.word	0x20009b5c
 801bcd4:	20009b54 	.word	0x20009b54

0801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bcd8:	b508      	push	{r3, lr}
 801bcda:	4b14      	ldr	r3, [pc, #80]	; (801bd2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bcdc:	6819      	ldr	r1, [r3, #0]
 801bcde:	b931      	cbnz	r1, 801bcee <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bce0:	4b13      	ldr	r3, [pc, #76]	; (801bd30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bce2:	4a14      	ldr	r2, [pc, #80]	; (801bd34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bce4:	4814      	ldr	r0, [pc, #80]	; (801bd38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bce6:	f240 21e3 	movw	r1, #739	; 0x2e3
 801bcea:	f003 fd2d 	bl	801f748 <__assert_func>
 801bcee:	4a13      	ldr	r2, [pc, #76]	; (801bd3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bcf0:	8803      	ldrh	r3, [r0, #0]
 801bcf2:	8812      	ldrh	r2, [r2, #0]
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	da04      	bge.n	801bd02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bcf8:	2214      	movs	r2, #20
 801bcfa:	fb02 1303 	mla	r3, r2, r3, r1
 801bcfe:	8918      	ldrh	r0, [r3, #8]
 801bd00:	bd08      	pop	{r3, pc}
 801bd02:	490f      	ldr	r1, [pc, #60]	; (801bd40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801bd04:	8809      	ldrh	r1, [r1, #0]
 801bd06:	4411      	add	r1, r2
 801bd08:	428b      	cmp	r3, r1
 801bd0a:	da06      	bge.n	801bd1a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bd0c:	1a9b      	subs	r3, r3, r2
 801bd0e:	4a0d      	ldr	r2, [pc, #52]	; (801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bd10:	6812      	ldr	r2, [r2, #0]
 801bd12:	210e      	movs	r1, #14
 801bd14:	fb01 2303 	mla	r3, r1, r3, r2
 801bd18:	e7f1      	b.n	801bcfe <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bd1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd1e:	4293      	cmp	r3, r2
 801bd20:	bf06      	itte	eq
 801bd22:	4b09      	ldreq	r3, [pc, #36]	; (801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bd24:	8818      	ldrheq	r0, [r3, #0]
 801bd26:	2000      	movne	r0, #0
 801bd28:	bd08      	pop	{r3, pc}
 801bd2a:	bf00      	nop
 801bd2c:	20009b5c 	.word	0x20009b5c
 801bd30:	08023e49 	.word	0x08023e49
 801bd34:	08023f32 	.word	0x08023f32
 801bd38:	08023dcb 	.word	0x08023dcb
 801bd3c:	20009b54 	.word	0x20009b54
 801bd40:	20009b58 	.word	0x20009b58
 801bd44:	20009b3c 	.word	0x20009b3c
 801bd48:	20009ab2 	.word	0x20009ab2

0801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bd4c:	b508      	push	{r3, lr}
 801bd4e:	4b14      	ldr	r3, [pc, #80]	; (801bda0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bd50:	6819      	ldr	r1, [r3, #0]
 801bd52:	b931      	cbnz	r1, 801bd62 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bd54:	4b13      	ldr	r3, [pc, #76]	; (801bda4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bd56:	4a14      	ldr	r2, [pc, #80]	; (801bda8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bd58:	4814      	ldr	r0, [pc, #80]	; (801bdac <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bd5a:	f240 21f7 	movw	r1, #759	; 0x2f7
 801bd5e:	f003 fcf3 	bl	801f748 <__assert_func>
 801bd62:	4a13      	ldr	r2, [pc, #76]	; (801bdb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bd64:	8803      	ldrh	r3, [r0, #0]
 801bd66:	8812      	ldrh	r2, [r2, #0]
 801bd68:	4293      	cmp	r3, r2
 801bd6a:	da04      	bge.n	801bd76 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801bd6c:	2214      	movs	r2, #20
 801bd6e:	fb02 1303 	mla	r3, r2, r3, r1
 801bd72:	8958      	ldrh	r0, [r3, #10]
 801bd74:	bd08      	pop	{r3, pc}
 801bd76:	490f      	ldr	r1, [pc, #60]	; (801bdb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bd78:	8809      	ldrh	r1, [r1, #0]
 801bd7a:	4411      	add	r1, r2
 801bd7c:	428b      	cmp	r3, r1
 801bd7e:	da06      	bge.n	801bd8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bd80:	1a9b      	subs	r3, r3, r2
 801bd82:	4a0d      	ldr	r2, [pc, #52]	; (801bdb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bd84:	6812      	ldr	r2, [r2, #0]
 801bd86:	210e      	movs	r1, #14
 801bd88:	fb01 2303 	mla	r3, r1, r3, r2
 801bd8c:	e7f1      	b.n	801bd72 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bd8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd92:	4293      	cmp	r3, r2
 801bd94:	bf06      	itte	eq
 801bd96:	4b09      	ldreq	r3, [pc, #36]	; (801bdbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bd98:	8818      	ldrheq	r0, [r3, #0]
 801bd9a:	2000      	movne	r0, #0
 801bd9c:	bd08      	pop	{r3, pc}
 801bd9e:	bf00      	nop
 801bda0:	20009b5c 	.word	0x20009b5c
 801bda4:	08023e49 	.word	0x08023e49
 801bda8:	08023f5e 	.word	0x08023f5e
 801bdac:	08023dcb 	.word	0x08023dcb
 801bdb0:	20009b54 	.word	0x20009b54
 801bdb4:	20009b58 	.word	0x20009b58
 801bdb8:	20009b3c 	.word	0x20009b3c
 801bdbc:	20009ab4 	.word	0x20009ab4

0801bdc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bdc0:	b510      	push	{r4, lr}
 801bdc2:	4b23      	ldr	r3, [pc, #140]	; (801be50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bdc4:	681c      	ldr	r4, [r3, #0]
 801bdc6:	b934      	cbnz	r4, 801bdd6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801bdc8:	4b22      	ldr	r3, [pc, #136]	; (801be54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bdca:	4a23      	ldr	r2, [pc, #140]	; (801be58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bdcc:	4823      	ldr	r0, [pc, #140]	; (801be5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bdce:	f240 310b 	movw	r1, #779	; 0x30b
 801bdd2:	f003 fcb9 	bl	801f748 <__assert_func>
 801bdd6:	4a22      	ldr	r2, [pc, #136]	; (801be60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bdd8:	880b      	ldrh	r3, [r1, #0]
 801bdda:	8812      	ldrh	r2, [r2, #0]
 801bddc:	4293      	cmp	r3, r2
 801bdde:	da11      	bge.n	801be04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801bde0:	2214      	movs	r2, #20
 801bde2:	fb02 4303 	mla	r3, r2, r3, r4
 801bde6:	8a1a      	ldrh	r2, [r3, #16]
 801bde8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bdec:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bdf0:	8a5b      	ldrh	r3, [r3, #18]
 801bdf2:	8004      	strh	r4, [r0, #0]
 801bdf4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bdf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bdfc:	8041      	strh	r1, [r0, #2]
 801bdfe:	8082      	strh	r2, [r0, #4]
 801be00:	80c3      	strh	r3, [r0, #6]
 801be02:	bd10      	pop	{r4, pc}
 801be04:	4917      	ldr	r1, [pc, #92]	; (801be64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801be06:	8809      	ldrh	r1, [r1, #0]
 801be08:	4411      	add	r1, r2
 801be0a:	428b      	cmp	r3, r1
 801be0c:	da0a      	bge.n	801be24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801be0e:	1a9b      	subs	r3, r3, r2
 801be10:	4a15      	ldr	r2, [pc, #84]	; (801be68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801be12:	6812      	ldr	r2, [r2, #0]
 801be14:	210e      	movs	r1, #14
 801be16:	fb01 2303 	mla	r3, r1, r3, r2
 801be1a:	681a      	ldr	r2, [r3, #0]
 801be1c:	6002      	str	r2, [r0, #0]
 801be1e:	685a      	ldr	r2, [r3, #4]
 801be20:	6042      	str	r2, [r0, #4]
 801be22:	bd10      	pop	{r4, pc}
 801be24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be28:	4293      	cmp	r3, r2
 801be2a:	d10b      	bne.n	801be44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801be2c:	4b0f      	ldr	r3, [pc, #60]	; (801be6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801be2e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801be32:	4b0f      	ldr	r3, [pc, #60]	; (801be70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801be34:	8081      	strh	r1, [r0, #4]
 801be36:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be3a:	80c2      	strh	r2, [r0, #6]
 801be3c:	2300      	movs	r3, #0
 801be3e:	8003      	strh	r3, [r0, #0]
 801be40:	8043      	strh	r3, [r0, #2]
 801be42:	bd10      	pop	{r4, pc}
 801be44:	2300      	movs	r3, #0
 801be46:	8003      	strh	r3, [r0, #0]
 801be48:	8043      	strh	r3, [r0, #2]
 801be4a:	8083      	strh	r3, [r0, #4]
 801be4c:	e7d8      	b.n	801be00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801be4e:	bf00      	nop
 801be50:	20009b5c 	.word	0x20009b5c
 801be54:	08023e49 	.word	0x08023e49
 801be58:	08023ecb 	.word	0x08023ecb
 801be5c:	08023dcb 	.word	0x08023dcb
 801be60:	20009b54 	.word	0x20009b54
 801be64:	20009b58 	.word	0x20009b58
 801be68:	20009b3c 	.word	0x20009b3c
 801be6c:	20009ab2 	.word	0x20009ab2
 801be70:	20009ab4 	.word	0x20009ab4

0801be74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801be74:	4b18      	ldr	r3, [pc, #96]	; (801bed8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	b34b      	cbz	r3, 801bece <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801be7a:	4a18      	ldr	r2, [pc, #96]	; (801bedc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801be7c:	8800      	ldrh	r0, [r0, #0]
 801be7e:	8812      	ldrh	r2, [r2, #0]
 801be80:	4290      	cmp	r0, r2
 801be82:	da11      	bge.n	801bea8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801be84:	2214      	movs	r2, #20
 801be86:	fb02 3300 	mla	r3, r2, r0, r3
 801be8a:	8a1a      	ldrh	r2, [r3, #16]
 801be8c:	8919      	ldrh	r1, [r3, #8]
 801be8e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801be92:	428a      	cmp	r2, r1
 801be94:	db1d      	blt.n	801bed2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801be96:	8a58      	ldrh	r0, [r3, #18]
 801be98:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801be9c:	895b      	ldrh	r3, [r3, #10]
 801be9e:	4298      	cmp	r0, r3
 801bea0:	bfac      	ite	ge
 801bea2:	2000      	movge	r0, #0
 801bea4:	2001      	movlt	r0, #1
 801bea6:	4770      	bx	lr
 801bea8:	4b0d      	ldr	r3, [pc, #52]	; (801bee0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801beaa:	881b      	ldrh	r3, [r3, #0]
 801beac:	4413      	add	r3, r2
 801beae:	4298      	cmp	r0, r3
 801beb0:	da0d      	bge.n	801bece <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801beb2:	4b0c      	ldr	r3, [pc, #48]	; (801bee4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	1a80      	subs	r0, r0, r2
 801beb8:	220e      	movs	r2, #14
 801beba:	fb02 3300 	mla	r3, r2, r0, r3
 801bebe:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bec2:	891a      	ldrh	r2, [r3, #8]
 801bec4:	4291      	cmp	r1, r2
 801bec6:	db04      	blt.n	801bed2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bec8:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801becc:	e7e6      	b.n	801be9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801bece:	2000      	movs	r0, #0
 801bed0:	4770      	bx	lr
 801bed2:	2001      	movs	r0, #1
 801bed4:	4770      	bx	lr
 801bed6:	bf00      	nop
 801bed8:	20009b5c 	.word	0x20009b5c
 801bedc:	20009b54 	.word	0x20009b54
 801bee0:	20009b58 	.word	0x20009b58
 801bee4:	20009b3c 	.word	0x20009b3c

0801bee8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bee8:	b508      	push	{r3, lr}
 801beea:	4b11      	ldr	r3, [pc, #68]	; (801bf30 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801beec:	6819      	ldr	r1, [r3, #0]
 801beee:	b931      	cbnz	r1, 801befe <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bef0:	4b10      	ldr	r3, [pc, #64]	; (801bf34 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bef2:	4a11      	ldr	r2, [pc, #68]	; (801bf38 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bef4:	4811      	ldr	r0, [pc, #68]	; (801bf3c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bef6:	f240 312f 	movw	r1, #815	; 0x32f
 801befa:	f003 fc25 	bl	801f748 <__assert_func>
 801befe:	8803      	ldrh	r3, [r0, #0]
 801bf00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf04:	4293      	cmp	r3, r2
 801bf06:	d011      	beq.n	801bf2c <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801bf08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf0c:	4293      	cmp	r3, r2
 801bf0e:	d103      	bne.n	801bf18 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bf10:	4b0b      	ldr	r3, [pc, #44]	; (801bf40 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bf16:	bd08      	pop	{r3, pc}
 801bf18:	4a0a      	ldr	r2, [pc, #40]	; (801bf44 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bf1a:	6812      	ldr	r2, [r2, #0]
 801bf1c:	b112      	cbz	r2, 801bf24 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801bf1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bf22:	b920      	cbnz	r0, 801bf2e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bf24:	2214      	movs	r2, #20
 801bf26:	4353      	muls	r3, r2
 801bf28:	58c8      	ldr	r0, [r1, r3]
 801bf2a:	bd08      	pop	{r3, pc}
 801bf2c:	2000      	movs	r0, #0
 801bf2e:	bd08      	pop	{r3, pc}
 801bf30:	20009b5c 	.word	0x20009b5c
 801bf34:	08023e49 	.word	0x08023e49
 801bf38:	08023f01 	.word	0x08023f01
 801bf3c:	08023dcb 	.word	0x08023dcb
 801bf40:	20009ac0 	.word	0x20009ac0
 801bf44:	20009b38 	.word	0x20009b38

0801bf48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bf48:	8802      	ldrh	r2, [r0, #0]
 801bf4a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bf4e:	429a      	cmp	r2, r3
 801bf50:	dc40      	bgt.n	801bfd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bf52:	4b21      	ldr	r3, [pc, #132]	; (801bfd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bf54:	881b      	ldrh	r3, [r3, #0]
 801bf56:	429a      	cmp	r2, r3
 801bf58:	da20      	bge.n	801bf9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bf5a:	4b20      	ldr	r3, [pc, #128]	; (801bfdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bf5c:	6819      	ldr	r1, [r3, #0]
 801bf5e:	2314      	movs	r3, #20
 801bf60:	fb03 1302 	mla	r3, r3, r2, r1
 801bf64:	6858      	ldr	r0, [r3, #4]
 801bf66:	2800      	cmp	r0, #0
 801bf68:	d035      	beq.n	801bfd6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf6a:	491d      	ldr	r1, [pc, #116]	; (801bfe0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bf6c:	6809      	ldr	r1, [r1, #0]
 801bf6e:	2900      	cmp	r1, #0
 801bf70:	d031      	beq.n	801bfd6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bf76:	b371      	cbz	r1, 801bfd6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf78:	7c5a      	ldrb	r2, [r3, #17]
 801bf7a:	7cd8      	ldrb	r0, [r3, #19]
 801bf7c:	0952      	lsrs	r2, r2, #5
 801bf7e:	00d2      	lsls	r2, r2, #3
 801bf80:	ea42 1250 	orr.w	r2, r2, r0, lsr #5
 801bf84:	2a0b      	cmp	r2, #11
 801bf86:	8958      	ldrh	r0, [r3, #10]
 801bf88:	891a      	ldrh	r2, [r3, #8]
 801bf8a:	fb00 f002 	mul.w	r0, r0, r2
 801bf8e:	bf18      	it	ne
 801bf90:	0040      	lslne	r0, r0, #1
 801bf92:	3003      	adds	r0, #3
 801bf94:	f020 0003 	bic.w	r0, r0, #3
 801bf98:	4408      	add	r0, r1
 801bf9a:	4770      	bx	lr
 801bf9c:	4911      	ldr	r1, [pc, #68]	; (801bfe4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bf9e:	8809      	ldrh	r1, [r1, #0]
 801bfa0:	4419      	add	r1, r3
 801bfa2:	428a      	cmp	r2, r1
 801bfa4:	da16      	bge.n	801bfd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bfa6:	4910      	ldr	r1, [pc, #64]	; (801bfe8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bfa8:	6809      	ldr	r1, [r1, #0]
 801bfaa:	1ad3      	subs	r3, r2, r3
 801bfac:	200e      	movs	r0, #14
 801bfae:	fb00 1303 	mla	r3, r0, r3, r1
 801bfb2:	7b19      	ldrb	r1, [r3, #12]
 801bfb4:	f001 011f 	and.w	r1, r1, #31
 801bfb8:	290b      	cmp	r1, #11
 801bfba:	d10b      	bne.n	801bfd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bfbc:	8919      	ldrh	r1, [r3, #8]
 801bfbe:	8958      	ldrh	r0, [r3, #10]
 801bfc0:	4b07      	ldr	r3, [pc, #28]	; (801bfe0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bfc2:	4348      	muls	r0, r1
 801bfc4:	6819      	ldr	r1, [r3, #0]
 801bfc6:	3003      	adds	r0, #3
 801bfc8:	f020 0303 	bic.w	r3, r0, #3
 801bfcc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bfd0:	4418      	add	r0, r3
 801bfd2:	4770      	bx	lr
 801bfd4:	2000      	movs	r0, #0
 801bfd6:	4770      	bx	lr
 801bfd8:	20009b54 	.word	0x20009b54
 801bfdc:	20009b5c 	.word	0x20009b5c
 801bfe0:	20009b38 	.word	0x20009b38
 801bfe4:	20009b58 	.word	0x20009b58
 801bfe8:	20009b3c 	.word	0x20009b3c

0801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bfec:	4b18      	ldr	r3, [pc, #96]	; (801c050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801bfee:	6819      	ldr	r1, [r3, #0]
 801bff0:	8803      	ldrh	r3, [r0, #0]
 801bff2:	b1e1      	cbz	r1, 801c02e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801bff4:	4a17      	ldr	r2, [pc, #92]	; (801c054 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bff6:	8812      	ldrh	r2, [r2, #0]
 801bff8:	4293      	cmp	r3, r2
 801bffa:	da09      	bge.n	801c010 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bffc:	2214      	movs	r2, #20
 801bffe:	fb02 1303 	mla	r3, r2, r3, r1
 801c002:	7c58      	ldrb	r0, [r3, #17]
 801c004:	7cdb      	ldrb	r3, [r3, #19]
 801c006:	0940      	lsrs	r0, r0, #5
 801c008:	00c0      	lsls	r0, r0, #3
 801c00a:	ea40 1053 	orr.w	r0, r0, r3, lsr #5
 801c00e:	4770      	bx	lr
 801c010:	4911      	ldr	r1, [pc, #68]	; (801c058 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c012:	8809      	ldrh	r1, [r1, #0]
 801c014:	4411      	add	r1, r2
 801c016:	428b      	cmp	r3, r1
 801c018:	da09      	bge.n	801c02e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801c01a:	1a9b      	subs	r3, r3, r2
 801c01c:	4a0f      	ldr	r2, [pc, #60]	; (801c05c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801c01e:	6812      	ldr	r2, [r2, #0]
 801c020:	210e      	movs	r1, #14
 801c022:	fb01 2303 	mla	r3, r1, r3, r2
 801c026:	7b18      	ldrb	r0, [r3, #12]
 801c028:	f000 001f 	and.w	r0, r0, #31
 801c02c:	4770      	bx	lr
 801c02e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c032:	4293      	cmp	r3, r2
 801c034:	d10a      	bne.n	801c04c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801c036:	4b0a      	ldr	r3, [pc, #40]	; (801c060 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c03e:	b10a      	cbz	r2, 801c044 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801c040:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c042:	b900      	cbnz	r0, 801c046 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c044:	6898      	ldr	r0, [r3, #8]
 801c046:	6803      	ldr	r3, [r0, #0]
 801c048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c04a:	4718      	bx	r3
 801c04c:	2000      	movs	r0, #0
 801c04e:	4770      	bx	lr
 801c050:	20009b5c 	.word	0x20009b5c
 801c054:	20009b54 	.word	0x20009b54
 801c058:	20009b58 	.word	0x20009b58
 801c05c:	20009b3c 	.word	0x20009b3c
 801c060:	20009ac0 	.word	0x20009ac0

0801c064 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801c064:	2010      	movs	r0, #16
 801c066:	4770      	bx	lr

0801c068 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801c068:	2000      	movs	r0, #0
 801c06a:	4770      	bx	lr

0801c06c <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801c06c:	00d2      	lsls	r2, r2, #3
 801c06e:	0209      	lsls	r1, r1, #8
 801c070:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c074:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801c078:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801c07c:	4310      	orrs	r0, r2
 801c07e:	4770      	bx	lr

0801c080 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801c080:	1209      	asrs	r1, r1, #8
 801c082:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801c086:	4770      	bx	lr

0801c088 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801c088:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 801c08c:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801c090:	4770      	bx	lr

0801c092 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801c092:	00c9      	lsls	r1, r1, #3
 801c094:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801c098:	4770      	bx	lr

0801c09a <_ZN8touchgfx8LCD16bpp4initEv>:
 801c09a:	4770      	bx	lr

0801c09c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801c09c:	b508      	push	{r3, lr}
 801c09e:	4b06      	ldr	r3, [pc, #24]	; (801c0b8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801c0a0:	8818      	ldrh	r0, [r3, #0]
 801c0a2:	b928      	cbnz	r0, 801c0b0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801c0a4:	4b05      	ldr	r3, [pc, #20]	; (801c0bc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801c0a6:	4a06      	ldr	r2, [pc, #24]	; (801c0c0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801c0a8:	4806      	ldr	r0, [pc, #24]	; (801c0c4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801c0aa:	21d5      	movs	r1, #213	; 0xd5
 801c0ac:	f003 fb4c 	bl	801f748 <__assert_func>
 801c0b0:	0040      	lsls	r0, r0, #1
 801c0b2:	b280      	uxth	r0, r0
 801c0b4:	bd08      	pop	{r3, pc}
 801c0b6:	bf00      	nop
 801c0b8:	20009ab8 	.word	0x20009ab8
 801c0bc:	0802431a 	.word	0x0802431a
 801c0c0:	080245fd 	.word	0x080245fd
 801c0c4:	0802435c 	.word	0x0802435c

0801c0c8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0cc:	b099      	sub	sp, #100	; 0x64
 801c0ce:	461d      	mov	r5, r3
 801c0d0:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 801c0d4:	9307      	str	r3, [sp, #28]
 801c0d6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801c0da:	9306      	str	r3, [sp, #24]
 801c0dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c0de:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 801c0e2:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801c0e6:	2600      	movs	r6, #0
 801c0e8:	a816      	add	r0, sp, #88	; 0x58
 801c0ea:	4617      	mov	r7, r2
 801c0ec:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c0f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801c0f4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 801c0f8:	468a      	mov	sl, r1
 801c0fa:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
 801c0fe:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
 801c102:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
 801c106:	f7fd fb45 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c10a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c10c:	682c      	ldr	r4, [r5, #0]
 801c10e:	6818      	ldr	r0, [r3, #0]
 801c110:	f9b8 3000 	ldrsh.w	r3, [r8]
 801c114:	f9b9 e000 	ldrsh.w	lr, [r9]
 801c118:	18e1      	adds	r1, r4, r3
 801c11a:	1b00      	subs	r0, r0, r4
 801c11c:	ebae 0c01 	sub.w	ip, lr, r1
 801c120:	4560      	cmp	r0, ip
 801c122:	f341 85fb 	ble.w	801dd1c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801c126:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 801c12a:	44f1      	add	r9, lr
 801c12c:	fa0f f989 	sxth.w	r9, r9
 801c130:	4549      	cmp	r1, r9
 801c132:	f301 85f3 	bgt.w	801dd1c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801c136:	9a06      	ldr	r2, [sp, #24]
 801c138:	ed95 3a07 	vldr	s6, [r5, #28]
 801c13c:	f9b8 8002 	ldrsh.w	r8, [r8, #2]
 801c140:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801c144:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 801c148:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801c14c:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 801c150:	ed95 2a0d 	vldr	s4, [r5, #52]	; 0x34
 801c154:	f8da b000 	ldr.w	fp, [sl]
 801c158:	43d2      	mvns	r2, r2
 801c15a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801c15e:	b2d2      	uxtb	r2, r2
 801c160:	eec4 3a03 	vdiv.f32	s7, s8, s6
 801c164:	9208      	str	r2, [sp, #32]
 801c166:	696a      	ldr	r2, [r5, #20]
 801c168:	4442      	add	r2, r8
 801c16a:	f8da 8004 	ldr.w	r8, [sl, #4]
 801c16e:	fb08 4802 	mla	r8, r8, r2, r4
 801c172:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 801c176:	4282      	cmp	r2, r0
 801c178:	bfa8      	it	ge
 801c17a:	4602      	movge	r2, r0
 801c17c:	4498      	add	r8, r3
 801c17e:	458e      	cmp	lr, r1
 801c180:	ee07 2a10 	vmov	s14, r2
 801c184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c188:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 801c18c:	ee27 5a05 	vmul.f32	s10, s14, s10
 801c190:	ee67 4a24 	vmul.f32	s9, s14, s9
 801c194:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c198:	ee37 6aa4 	vadd.f32	s12, s15, s9
 801c19c:	ee72 5a07 	vadd.f32	s11, s4, s14
 801c1a0:	9209      	str	r2, [sp, #36]	; 0x24
 801c1a2:	ee73 6a05 	vadd.f32	s13, s6, s10
 801c1a6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801c1aa:	ee22 2a23 	vmul.f32	s4, s4, s7
 801c1ae:	dc01      	bgt.n	801c1b4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xec>
 801c1b0:	960b      	str	r6, [sp, #44]	; 0x2c
 801c1b2:	e02a      	b.n	801c20a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x142>
 801c1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1b6:	fb9c f1f2 	sdiv	r1, ip, r2
 801c1ba:	ee03 1a90 	vmov	s7, r1
 801c1be:	434a      	muls	r2, r1
 801c1c0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801c1c4:	ebac 0502 	sub.w	r5, ip, r2
 801c1c8:	2900      	cmp	r1, #0
 801c1ca:	950b      	str	r5, [sp, #44]	; 0x2c
 801c1cc:	eee5 6a23 	vfma.f32	s13, s10, s7
 801c1d0:	eea4 6aa3 	vfma.f32	s12, s9, s7
 801c1d4:	eee7 5a23 	vfma.f32	s11, s14, s7
 801c1d8:	dd13      	ble.n	801c202 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 801c1da:	ee76 7ac5 	vsub.f32	s15, s13, s10
 801c1de:	ee35 2ac7 	vsub.f32	s4, s11, s14
 801c1e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1ea:	bf18      	it	ne
 801c1ec:	eec4 3a27 	vdivne.f32	s7, s8, s15
 801c1f0:	ee76 7a64 	vsub.f32	s15, s12, s9
 801c1f4:	bf08      	it	eq
 801c1f6:	eef0 3a44 	vmoveq.f32	s7, s8
 801c1fa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801c1fe:	ee22 2a23 	vmul.f32	s4, s4, s7
 801c202:	1a80      	subs	r0, r0, r2
 801c204:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801c208:	4414      	add	r4, r2
 801c20a:	18e2      	adds	r2, r4, r3
 801c20c:	4402      	add	r2, r0
 801c20e:	4591      	cmp	r9, r2
 801c210:	bfbc      	itt	lt
 801c212:	eba9 0003 	sublt.w	r0, r9, r3
 801c216:	1b00      	sublt	r0, r0, r4
 801c218:	2800      	cmp	r0, #0
 801c21a:	f341 857f 	ble.w	801dd1c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801c21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c222:	fb90 f3f3 	sdiv	r3, r0, r3
 801c226:	930a      	str	r3, [sp, #40]	; 0x28
 801c228:	fb02 0313 	mls	r3, r2, r3, r0
 801c22c:	930d      	str	r3, [sp, #52]	; 0x34
 801c22e:	b91b      	cbnz	r3, 801c238 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x170>
 801c230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c232:	920d      	str	r2, [sp, #52]	; 0x34
 801c234:	3b01      	subs	r3, #1
 801c236:	930a      	str	r3, [sp, #40]	; 0x28
 801c238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c23a:	eddf 3a80 	vldr	s7, [pc, #512]	; 801c43c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x374>
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	9302      	str	r3, [sp, #8]
 801c242:	9b07      	ldr	r3, [sp, #28]
 801c244:	f003 0301 	and.w	r3, r3, #1
 801c248:	9315      	str	r3, [sp, #84]	; 0x54
 801c24a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801c24e:	9300      	str	r3, [sp, #0]
 801c250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c252:	2b00      	cmp	r3, #0
 801c254:	dc03      	bgt.n	801c25e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801c256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c258:	2b00      	cmp	r3, #0
 801c25a:	f341 855f 	ble.w	801dd1c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801c25e:	ee84 3a26 	vdiv.f32	s6, s8, s13
 801c262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c264:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c266:	eef0 1a67 	vmov.f32	s3, s15
 801c26a:	ee66 2a03 	vmul.f32	s5, s12, s6
 801c26e:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 801c272:	ee25 3a83 	vmul.f32	s6, s11, s6
 801c276:	ee72 7ae7 	vsub.f32	s15, s5, s15
 801c27a:	ee11 ca90 	vmov	ip, s3
 801c27e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801c282:	eef0 1a42 	vmov.f32	s3, s4
 801c286:	ee33 2a42 	vsub.f32	s4, s6, s4
 801c28a:	ee17 2a90 	vmov	r2, s15
 801c28e:	eebe 2ac8 	vcvt.s32.f32	s4, s4, #16
 801c292:	fb92 f3f3 	sdiv	r3, r2, r3
 801c296:	ee12 2a10 	vmov	r2, s4
 801c29a:	9304      	str	r3, [sp, #16]
 801c29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c29e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2a4:	9305      	str	r3, [sp, #20]
 801c2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2a8:	2900      	cmp	r1, #0
 801c2aa:	bfc8      	it	gt
 801c2ac:	4613      	movgt	r3, r2
 801c2ae:	9301      	str	r3, [sp, #4]
 801c2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2b2:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	ee11 aa90 	vmov	sl, s3
 801c2bc:	dd0d      	ble.n	801c2da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x212>
 801c2be:	9a04      	ldr	r2, [sp, #16]
 801c2c0:	fb02 cc03 	mla	ip, r2, r3, ip
 801c2c4:	9a05      	ldr	r2, [sp, #20]
 801c2c6:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 801c2ca:	fb02 aa03 	mla	sl, r2, r3, sl
 801c2ce:	9b01      	ldr	r3, [sp, #4]
 801c2d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c2d2:	1a9b      	subs	r3, r3, r2
 801c2d4:	9301      	str	r3, [sp, #4]
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	930b      	str	r3, [sp, #44]	; 0x2c
 801c2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c2dc:	b91b      	cbnz	r3, 801c2e6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x21e>
 801c2de:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
 801c2e2:	f50a 4a00 	add.w	sl, sl, #32768	; 0x8000
 801c2e6:	ea5f 432c 	movs.w	r3, ip, asr #16
 801c2ea:	d43e      	bmi.n	801c36a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801c2ec:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
 801c2f0:	4283      	cmp	r3, r0
 801c2f2:	da3a      	bge.n	801c36a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801c2f4:	ea5f 432a 	movs.w	r3, sl, asr #16
 801c2f8:	d437      	bmi.n	801c36a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801c2fa:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801c2fe:	428b      	cmp	r3, r1
 801c300:	da33      	bge.n	801c36a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801c302:	9b01      	ldr	r3, [sp, #4]
 801c304:	9a04      	ldr	r2, [sp, #16]
 801c306:	3b01      	subs	r3, #1
 801c308:	fb03 c202 	mla	r2, r3, r2, ip
 801c30c:	1412      	asrs	r2, r2, #16
 801c30e:	d42c      	bmi.n	801c36a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801c310:	4282      	cmp	r2, r0
 801c312:	da2a      	bge.n	801c36a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801c314:	9a05      	ldr	r2, [sp, #20]
 801c316:	fb03 a302 	mla	r3, r3, r2, sl
 801c31a:	141b      	asrs	r3, r3, #16
 801c31c:	d425      	bmi.n	801c36a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801c31e:	428b      	cmp	r3, r1
 801c320:	bfb4      	ite	lt
 801c322:	2300      	movlt	r3, #0
 801c324:	2301      	movge	r3, #1
 801c326:	9303      	str	r3, [sp, #12]
 801c328:	9b07      	ldr	r3, [sp, #28]
 801c32a:	2b09      	cmp	r3, #9
 801c32c:	f000 8446 	beq.w	801cbbc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xaf4>
 801c330:	f200 8086 	bhi.w	801c440 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x378>
 801c334:	2b02      	cmp	r3, #2
 801c336:	f000 869d 	beq.w	801d074 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfac>
 801c33a:	d818      	bhi.n	801c36e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	f001 8437 	beq.w	801dbb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ae8>
 801c342:	2b01      	cmp	r3, #1
 801c344:	f000 86ff 	beq.w	801d146 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x107e>
 801c348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c350:	ee36 6a24 	vadd.f32	s12, s12, s9
 801c354:	ee75 5a87 	vadd.f32	s11, s11, s14
 801c358:	f341 84e0 	ble.w	801dd1c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801c35c:	3b01      	subs	r3, #1
 801c35e:	930a      	str	r3, [sp, #40]	; 0x28
 801c360:	eeb0 2a43 	vmov.f32	s4, s6
 801c364:	eef0 7a62 	vmov.f32	s15, s5
 801c368:	e772      	b.n	801c250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 801c36a:	2301      	movs	r3, #1
 801c36c:	e7db      	b.n	801c326 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x25e>
 801c36e:	9b07      	ldr	r3, [sp, #28]
 801c370:	2b03      	cmp	r3, #3
 801c372:	f000 84cf 	beq.w	801cd14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc4c>
 801c376:	2b08      	cmp	r3, #8
 801c378:	d1e6      	bne.n	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801c37a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801c37e:	465c      	mov	r4, fp
 801c380:	2500      	movs	r5, #0
 801c382:	9b01      	ldr	r3, [sp, #4]
 801c384:	42ab      	cmp	r3, r5
 801c386:	f341 806d 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801c38a:	9b03      	ldr	r3, [sp, #12]
 801c38c:	ea4f 422c 	mov.w	r2, ip, asr #16
 801c390:	ea4f 412a 	mov.w	r1, sl, asr #16
 801c394:	b15b      	cbz	r3, 801c3ae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2e6>
 801c396:	2a00      	cmp	r2, #0
 801c398:	db48      	blt.n	801c42c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801c39a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801c39e:	429a      	cmp	r2, r3
 801c3a0:	da44      	bge.n	801c42c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801c3a2:	2900      	cmp	r1, #0
 801c3a4:	db42      	blt.n	801c42c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801c3a6:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801c3aa:	4299      	cmp	r1, r3
 801c3ac:	da3e      	bge.n	801c42c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801c3ae:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801c3b2:	fb01 2303 	mla	r3, r1, r3, r2
 801c3b6:	9a02      	ldr	r2, [sp, #8]
 801c3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c3bc:	9a06      	ldr	r2, [sp, #24]
 801c3be:	2aff      	cmp	r2, #255	; 0xff
 801c3c0:	f001 848a 	beq.w	801dcd8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c10>
 801c3c4:	8822      	ldrh	r2, [r4, #0]
 801c3c6:	f8bd 7000 	ldrh.w	r7, [sp]
 801c3ca:	f8bd e000 	ldrh.w	lr, [sp]
 801c3ce:	1210      	asrs	r0, r2, #8
 801c3d0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801c3d4:	fb11 f107 	smulbb	r1, r1, r7
 801c3d8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c3dc:	fb00 1006 	mla	r0, r0, r6, r1
 801c3e0:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801c3e4:	10d1      	asrs	r1, r2, #3
 801c3e6:	b2db      	uxtb	r3, r3
 801c3e8:	00d2      	lsls	r2, r2, #3
 801c3ea:	fb17 f70e 	smulbb	r7, r7, lr
 801c3ee:	b2d2      	uxtb	r2, r2
 801c3f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c3f4:	fb13 f30e 	smulbb	r3, r3, lr
 801c3f8:	b280      	uxth	r0, r0
 801c3fa:	fb01 7106 	mla	r1, r1, r6, r7
 801c3fe:	fb02 3306 	mla	r3, r2, r6, r3
 801c402:	b289      	uxth	r1, r1
 801c404:	b29b      	uxth	r3, r3
 801c406:	1c42      	adds	r2, r0, #1
 801c408:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c40c:	1c4f      	adds	r7, r1, #1
 801c40e:	1c5a      	adds	r2, r3, #1
 801c410:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c414:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801c418:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c41c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c420:	097f      	lsrs	r7, r7, #5
 801c422:	4318      	orrs	r0, r3
 801c424:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c428:	4338      	orrs	r0, r7
 801c42a:	8020      	strh	r0, [r4, #0]
 801c42c:	9b04      	ldr	r3, [sp, #16]
 801c42e:	449c      	add	ip, r3
 801c430:	9b05      	ldr	r3, [sp, #20]
 801c432:	3402      	adds	r4, #2
 801c434:	449a      	add	sl, r3
 801c436:	3501      	adds	r5, #1
 801c438:	e7a3      	b.n	801c382 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2ba>
 801c43a:	bf00      	nop
 801c43c:	37800000 	.word	0x37800000
 801c440:	9b07      	ldr	r3, [sp, #28]
 801c442:	2b2c      	cmp	r3, #44	; 0x2c
 801c444:	f001 81a3 	beq.w	801d78e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16c6>
 801c448:	f200 819d 	bhi.w	801c786 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6be>
 801c44c:	2b0a      	cmp	r3, #10
 801c44e:	f000 8349 	beq.w	801cae4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa1c>
 801c452:	2b0b      	cmp	r3, #11
 801c454:	f47f af78 	bne.w	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801c458:	2300      	movs	r3, #0
 801c45a:	465f      	mov	r7, fp
 801c45c:	930c      	str	r3, [sp, #48]	; 0x30
 801c45e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 801c462:	9b01      	ldr	r3, [sp, #4]
 801c464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c466:	4293      	cmp	r3, r2
 801c468:	f340 87fc 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801c46c:	9a03      	ldr	r2, [sp, #12]
 801c46e:	ea4f 412c 	mov.w	r1, ip, asr #16
 801c472:	ea4f 432a 	mov.w	r3, sl, asr #16
 801c476:	b17a      	cbz	r2, 801c498 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3d0>
 801c478:	2900      	cmp	r1, #0
 801c47a:	f2c0 817b 	blt.w	801c774 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801c47e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c482:	4291      	cmp	r1, r2
 801c484:	f280 8176 	bge.w	801c774 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801c488:	2b00      	cmp	r3, #0
 801c48a:	f2c0 8173 	blt.w	801c774 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801c48e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801c492:	4293      	cmp	r3, r2
 801c494:	f280 816e 	bge.w	801c774 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801c498:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c49c:	9802      	ldr	r0, [sp, #8]
 801c49e:	fb03 1102 	mla	r1, r3, r2, r1
 801c4a2:	9b02      	ldr	r3, [sp, #8]
 801c4a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c4a8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 801c4ac:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801c4b0:	685d      	ldr	r5, [r3, #4]
 801c4b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c4b6:	0e0e      	lsrs	r6, r1, #24
 801c4b8:	6858      	ldr	r0, [r3, #4]
 801c4ba:	0e23      	lsrs	r3, r4, #24
 801c4bc:	930e      	str	r3, [sp, #56]	; 0x38
 801c4be:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c4c2:	fa1f f38c 	uxth.w	r3, ip
 801c4c6:	ee01 3a10 	vmov	s2, r3
 801c4ca:	ee07 6a90 	vmov	s15, r6
 801c4ce:	ee02 8a10 	vmov	s4, r8
 801c4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c4d6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801c4da:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c4de:	ee21 1a23 	vmul.f32	s2, s2, s7
 801c4e2:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c4e6:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 801c4ea:	eee1 7a02 	vfma.f32	s15, s2, s4
 801c4ee:	fa1f f38a 	uxth.w	r3, sl
 801c4f2:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 801c4f6:	ee00 ea10 	vmov	s0, lr
 801c4fa:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c4fe:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c502:	ee00 3a90 	vmov	s1, r3
 801c506:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c50a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c50e:	eea1 2a00 	vfma.f32	s4, s2, s0
 801c512:	ee60 0aa3 	vmul.f32	s1, s1, s7
 801c516:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c51a:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c51e:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801c522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c526:	ee17 2a90 	vmov	r2, s15
 801c52a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801c52e:	f000 8121 	beq.w	801c774 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801c532:	f001 19ff 	and.w	r9, r1, #16711935	; 0xff00ff
 801c536:	fb06 f909 	mul.w	r9, r6, r9
 801c53a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c53e:	434e      	muls	r6, r1
 801c540:	ea4f 2119 	mov.w	r1, r9, lsr #8
 801c544:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801c548:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c54c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801c550:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801c554:	4449      	add	r1, r9
 801c556:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801c55a:	0a09      	lsrs	r1, r1, #8
 801c55c:	0a1b      	lsrs	r3, r3, #8
 801c55e:	fb08 f606 	mul.w	r6, r8, r6
 801c562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c566:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c56a:	4319      	orrs	r1, r3
 801c56c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c570:	0a33      	lsrs	r3, r6, #8
 801c572:	fb08 f805 	mul.w	r8, r8, r5
 801c576:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c57a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c57e:	441e      	add	r6, r3
 801c580:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801c584:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801c588:	0a36      	lsrs	r6, r6, #8
 801c58a:	0a1b      	lsrs	r3, r3, #8
 801c58c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c590:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c594:	431e      	orrs	r6, r3
 801c596:	0e25      	lsrs	r5, r4, #24
 801c598:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801c59c:	436b      	muls	r3, r5
 801c59e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c5a2:	fb05 f804 	mul.w	r8, r5, r4
 801c5a6:	0a1c      	lsrs	r4, r3, #8
 801c5a8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c5ac:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801c5b0:	f508 7580 	add.w	r5, r8, #256	; 0x100
 801c5b4:	4423      	add	r3, r4
 801c5b6:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801c5ba:	0a1b      	lsrs	r3, r3, #8
 801c5bc:	0a2d      	lsrs	r5, r5, #8
 801c5be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c5c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5c6:	432b      	orrs	r3, r5
 801c5c8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801c5cc:	fb0e f505 	mul.w	r5, lr, r5
 801c5d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c5d4:	fb0e fe00 	mul.w	lr, lr, r0
 801c5d8:	0a28      	lsrs	r0, r5, #8
 801c5da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c5de:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801c5e2:	4405      	add	r5, r0
 801c5e4:	0c08      	lsrs	r0, r1, #16
 801c5e6:	ee07 0a90 	vmov	s15, r0
 801c5ea:	0c30      	lsrs	r0, r6, #16
 801c5ec:	ee02 0a10 	vmov	s4, r0
 801c5f0:	f50e 7480 	add.w	r4, lr, #256	; 0x100
 801c5f4:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801c5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c5fc:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c600:	0a2d      	lsrs	r5, r5, #8
 801c602:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c606:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c60a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c60e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c612:	ea45 0e0e 	orr.w	lr, r5, lr
 801c616:	0c18      	lsrs	r0, r3, #16
 801c618:	eee1 7a02 	vfma.f32	s15, s2, s4
 801c61c:	2aff      	cmp	r2, #255	; 0xff
 801c61e:	ee02 0a10 	vmov	s4, r0
 801c622:	ea4f 401e 	mov.w	r0, lr, lsr #16
 801c626:	ee00 0a10 	vmov	s0, r0
 801c62a:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c62e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c632:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c636:	eea1 2a00 	vfma.f32	s4, s2, s0
 801c63a:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c63e:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c642:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801c646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c64a:	ee17 0a90 	vmov	r0, s15
 801c64e:	f000 04f8 	and.w	r4, r0, #248	; 0xf8
 801c652:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801c656:	ee07 0a90 	vmov	s15, r0
 801c65a:	f3c6 2007 	ubfx	r0, r6, #8, #8
 801c65e:	ee02 0a10 	vmov	s4, r0
 801c662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c666:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c66a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801c66e:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c672:	b2c9      	uxtb	r1, r1
 801c674:	eee1 7a02 	vfma.f32	s15, s2, s4
 801c678:	b2f6      	uxtb	r6, r6
 801c67a:	b2db      	uxtb	r3, r3
 801c67c:	ee02 0a10 	vmov	s4, r0
 801c680:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801c684:	ee00 0a10 	vmov	s0, r0
 801c688:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c68c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c690:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c694:	eea1 2a00 	vfma.f32	s4, s2, s0
 801c698:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c69c:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c6a0:	ee02 6a10 	vmov	s4, r6
 801c6a4:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801c6a8:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c6ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c6b0:	ee17 0a90 	vmov	r0, s15
 801c6b4:	ee07 1a90 	vmov	s15, r1
 801c6b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c6bc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c6c0:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c6c4:	eee1 7a02 	vfma.f32	s15, s2, s4
 801c6c8:	ee02 3a10 	vmov	s4, r3
 801c6cc:	fa5f f38e 	uxtb.w	r3, lr
 801c6d0:	ee00 3a10 	vmov	s0, r3
 801c6d4:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c6d8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c6dc:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c6e0:	eea1 2a00 	vfma.f32	s4, s2, s0
 801c6e4:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c6e8:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c6ec:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801c6f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c6f4:	ee17 3a90 	vmov	r3, s15
 801c6f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801c6fc:	d103      	bne.n	801c706 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x63e>
 801c6fe:	9906      	ldr	r1, [sp, #24]
 801c700:	29ff      	cmp	r1, #255	; 0xff
 801c702:	f001 82f6 	beq.w	801dcf2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c2a>
 801c706:	9d00      	ldr	r5, [sp, #0]
 801c708:	8839      	ldrh	r1, [r7, #0]
 801c70a:	436a      	muls	r2, r5
 801c70c:	1c55      	adds	r5, r2, #1
 801c70e:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c712:	f8bd 5000 	ldrh.w	r5, [sp]
 801c716:	120e      	asrs	r6, r1, #8
 801c718:	ea6f 2222 	mvn.w	r2, r2, asr #8
 801c71c:	b2d2      	uxtb	r2, r2
 801c71e:	fb14 f405 	smulbb	r4, r4, r5
 801c722:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c726:	fb06 4602 	mla	r6, r6, r2, r4
 801c72a:	f8bd 4000 	ldrh.w	r4, [sp]
 801c72e:	10cd      	asrs	r5, r1, #3
 801c730:	00c9      	lsls	r1, r1, #3
 801c732:	fb13 f304 	smulbb	r3, r3, r4
 801c736:	b2c9      	uxtb	r1, r1
 801c738:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c73c:	fb10 f004 	smulbb	r0, r0, r4
 801c740:	fb01 3102 	mla	r1, r1, r2, r3
 801c744:	b2b6      	uxth	r6, r6
 801c746:	fb05 0002 	mla	r0, r5, r2, r0
 801c74a:	b289      	uxth	r1, r1
 801c74c:	b285      	uxth	r5, r0
 801c74e:	1c74      	adds	r4, r6, #1
 801c750:	1c48      	adds	r0, r1, #1
 801c752:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c756:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801c75a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801c75e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c762:	4306      	orrs	r6, r0
 801c764:	1c68      	adds	r0, r5, #1
 801c766:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 801c76a:	0940      	lsrs	r0, r0, #5
 801c76c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c770:	4306      	orrs	r6, r0
 801c772:	803e      	strh	r6, [r7, #0]
 801c774:	9b04      	ldr	r3, [sp, #16]
 801c776:	449c      	add	ip, r3
 801c778:	9b05      	ldr	r3, [sp, #20]
 801c77a:	449a      	add	sl, r3
 801c77c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c77e:	3301      	adds	r3, #1
 801c780:	3702      	adds	r7, #2
 801c782:	930c      	str	r3, [sp, #48]	; 0x30
 801c784:	e66d      	b.n	801c462 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x39a>
 801c786:	9b07      	ldr	r3, [sp, #28]
 801c788:	2b2e      	cmp	r3, #46	; 0x2e
 801c78a:	f001 8188 	beq.w	801da9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19d6>
 801c78e:	f0c0 858e 	bcc.w	801d2ae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11e6>
 801c792:	2b2f      	cmp	r3, #47	; 0x2f
 801c794:	f47f add8 	bne.w	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801c798:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c79a:	685b      	ldr	r3, [r3, #4]
 801c79c:	781b      	ldrb	r3, [r3, #0]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	f47f add2 	bne.w	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801c7a4:	465f      	mov	r7, fp
 801c7a6:	930c      	str	r3, [sp, #48]	; 0x30
 801c7a8:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 801c7ac:	9b01      	ldr	r3, [sp, #4]
 801c7ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c7b0:	4293      	cmp	r3, r2
 801c7b2:	f340 8657 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801c7b6:	9a03      	ldr	r2, [sp, #12]
 801c7b8:	ea4f 432c 	mov.w	r3, ip, asr #16
 801c7bc:	ea4f 412a 	mov.w	r1, sl, asr #16
 801c7c0:	b17a      	cbz	r2, 801c7e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x71a>
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	f2c0 8185 	blt.w	801cad2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801c7c8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c7cc:	4293      	cmp	r3, r2
 801c7ce:	f280 8180 	bge.w	801cad2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801c7d2:	2900      	cmp	r1, #0
 801c7d4:	f2c0 817d 	blt.w	801cad2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801c7d8:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801c7dc:	4291      	cmp	r1, r2
 801c7de:	f280 8178 	bge.w	801cad2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801c7e2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c7e6:	9802      	ldr	r0, [sp, #8]
 801c7e8:	fb01 3102 	mla	r1, r1, r2, r3
 801c7ec:	9b02      	ldr	r3, [sp, #8]
 801c7ee:	185c      	adds	r4, r3, r1
 801c7f0:	5c41      	ldrb	r1, [r0, r1]
 801c7f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c7f4:	7860      	ldrb	r0, [r4, #1]
 801c7f6:	685b      	ldr	r3, [r3, #4]
 801c7f8:	3001      	adds	r0, #1
 801c7fa:	3101      	adds	r1, #1
 801c7fc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801c800:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801c804:	18a0      	adds	r0, r4, r2
 801c806:	5ca2      	ldrb	r2, [r4, r2]
 801c808:	3201      	adds	r2, #1
 801c80a:	0e0e      	lsrs	r6, r1, #24
 801c80c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801c810:	7842      	ldrb	r2, [r0, #1]
 801c812:	3201      	adds	r2, #1
 801c814:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c818:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c81c:	0e23      	lsrs	r3, r4, #24
 801c81e:	930e      	str	r3, [sp, #56]	; 0x38
 801c820:	fa1f f38c 	uxth.w	r3, ip
 801c824:	ee01 3a10 	vmov	s2, r3
 801c828:	ee07 6a90 	vmov	s15, r6
 801c82c:	ee02 8a10 	vmov	s4, r8
 801c830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c834:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801c838:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c83c:	ee21 1a23 	vmul.f32	s2, s2, s7
 801c840:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c844:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 801c848:	eee1 7a02 	vfma.f32	s15, s2, s4
 801c84c:	fa1f f38a 	uxth.w	r3, sl
 801c850:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 801c854:	ee00 ea10 	vmov	s0, lr
 801c858:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c85c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c860:	ee00 3a90 	vmov	s1, r3
 801c864:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c868:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c86c:	eea1 2a00 	vfma.f32	s4, s2, s0
 801c870:	ee60 0aa3 	vmul.f32	s1, s1, s7
 801c874:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c878:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c87c:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801c880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c884:	ee17 2a90 	vmov	r2, s15
 801c888:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801c88c:	f000 8121 	beq.w	801cad2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801c890:	f001 19ff 	and.w	r9, r1, #16711935	; 0xff00ff
 801c894:	fb06 f909 	mul.w	r9, r6, r9
 801c898:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c89c:	434e      	muls	r6, r1
 801c89e:	ea4f 2119 	mov.w	r1, r9, lsr #8
 801c8a2:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801c8a6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c8aa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801c8ae:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801c8b2:	4449      	add	r1, r9
 801c8b4:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801c8b8:	0a09      	lsrs	r1, r1, #8
 801c8ba:	0a1b      	lsrs	r3, r3, #8
 801c8bc:	fb08 f606 	mul.w	r6, r8, r6
 801c8c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c8c4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c8c8:	4319      	orrs	r1, r3
 801c8ca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c8ce:	0a33      	lsrs	r3, r6, #8
 801c8d0:	fb08 f805 	mul.w	r8, r8, r5
 801c8d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c8d8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c8dc:	441e      	add	r6, r3
 801c8de:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801c8e2:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801c8e6:	0a36      	lsrs	r6, r6, #8
 801c8e8:	0a1b      	lsrs	r3, r3, #8
 801c8ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c8ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c8f2:	431e      	orrs	r6, r3
 801c8f4:	0e25      	lsrs	r5, r4, #24
 801c8f6:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801c8fa:	436b      	muls	r3, r5
 801c8fc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c900:	fb05 f804 	mul.w	r8, r5, r4
 801c904:	0a1c      	lsrs	r4, r3, #8
 801c906:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c90a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801c90e:	f508 7580 	add.w	r5, r8, #256	; 0x100
 801c912:	4423      	add	r3, r4
 801c914:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801c918:	0a1b      	lsrs	r3, r3, #8
 801c91a:	0a2d      	lsrs	r5, r5, #8
 801c91c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c920:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c924:	432b      	orrs	r3, r5
 801c926:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801c92a:	fb0e f505 	mul.w	r5, lr, r5
 801c92e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c932:	fb0e fe00 	mul.w	lr, lr, r0
 801c936:	0a28      	lsrs	r0, r5, #8
 801c938:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c93c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801c940:	4405      	add	r5, r0
 801c942:	0c08      	lsrs	r0, r1, #16
 801c944:	ee07 0a90 	vmov	s15, r0
 801c948:	0c30      	lsrs	r0, r6, #16
 801c94a:	ee02 0a10 	vmov	s4, r0
 801c94e:	f50e 7480 	add.w	r4, lr, #256	; 0x100
 801c952:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801c956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c95a:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c95e:	0a2d      	lsrs	r5, r5, #8
 801c960:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c964:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c968:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c96c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c970:	ea45 0e0e 	orr.w	lr, r5, lr
 801c974:	0c18      	lsrs	r0, r3, #16
 801c976:	eee1 7a02 	vfma.f32	s15, s2, s4
 801c97a:	2aff      	cmp	r2, #255	; 0xff
 801c97c:	ee02 0a10 	vmov	s4, r0
 801c980:	ea4f 401e 	mov.w	r0, lr, lsr #16
 801c984:	ee00 0a10 	vmov	s0, r0
 801c988:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c98c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c990:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c994:	eea1 2a00 	vfma.f32	s4, s2, s0
 801c998:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c99c:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c9a0:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801c9a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c9a8:	ee17 0a90 	vmov	r0, s15
 801c9ac:	f000 04f8 	and.w	r4, r0, #248	; 0xf8
 801c9b0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801c9b4:	ee07 0a90 	vmov	s15, r0
 801c9b8:	f3c6 2007 	ubfx	r0, r6, #8, #8
 801c9bc:	ee02 0a10 	vmov	s4, r0
 801c9c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c9c4:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c9c8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801c9cc:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c9d0:	b2c9      	uxtb	r1, r1
 801c9d2:	eee1 7a02 	vfma.f32	s15, s2, s4
 801c9d6:	b2f6      	uxtb	r6, r6
 801c9d8:	b2db      	uxtb	r3, r3
 801c9da:	ee02 0a10 	vmov	s4, r0
 801c9de:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801c9e2:	ee00 0a10 	vmov	s0, r0
 801c9e6:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c9ea:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c9ee:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c9f2:	eea1 2a00 	vfma.f32	s4, s2, s0
 801c9f6:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c9fa:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c9fe:	ee02 6a10 	vmov	s4, r6
 801ca02:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801ca06:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801ca0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ca0e:	ee17 0a90 	vmov	r0, s15
 801ca12:	ee07 1a90 	vmov	s15, r1
 801ca16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ca1a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ca1e:	ee32 2a67 	vsub.f32	s4, s4, s15
 801ca22:	eee1 7a02 	vfma.f32	s15, s2, s4
 801ca26:	ee02 3a10 	vmov	s4, r3
 801ca2a:	fa5f f38e 	uxtb.w	r3, lr
 801ca2e:	ee00 3a10 	vmov	s0, r3
 801ca32:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801ca36:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801ca3a:	ee30 0a42 	vsub.f32	s0, s0, s4
 801ca3e:	eea1 2a00 	vfma.f32	s4, s2, s0
 801ca42:	ee32 2a67 	vsub.f32	s4, s4, s15
 801ca46:	eee0 7a82 	vfma.f32	s15, s1, s4
 801ca4a:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801ca4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ca52:	ee17 3a90 	vmov	r3, s15
 801ca56:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ca5a:	d103      	bne.n	801ca64 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x99c>
 801ca5c:	9906      	ldr	r1, [sp, #24]
 801ca5e:	29ff      	cmp	r1, #255	; 0xff
 801ca60:	f001 8015 	beq.w	801da8e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19c6>
 801ca64:	9d00      	ldr	r5, [sp, #0]
 801ca66:	8839      	ldrh	r1, [r7, #0]
 801ca68:	436a      	muls	r2, r5
 801ca6a:	1c55      	adds	r5, r2, #1
 801ca6c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ca70:	f8bd 5000 	ldrh.w	r5, [sp]
 801ca74:	120e      	asrs	r6, r1, #8
 801ca76:	ea6f 2222 	mvn.w	r2, r2, asr #8
 801ca7a:	b2d2      	uxtb	r2, r2
 801ca7c:	fb14 f405 	smulbb	r4, r4, r5
 801ca80:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ca84:	fb06 4602 	mla	r6, r6, r2, r4
 801ca88:	f8bd 4000 	ldrh.w	r4, [sp]
 801ca8c:	10cd      	asrs	r5, r1, #3
 801ca8e:	00c9      	lsls	r1, r1, #3
 801ca90:	fb13 f304 	smulbb	r3, r3, r4
 801ca94:	b2c9      	uxtb	r1, r1
 801ca96:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ca9a:	fb10 f004 	smulbb	r0, r0, r4
 801ca9e:	fb01 3102 	mla	r1, r1, r2, r3
 801caa2:	b2b6      	uxth	r6, r6
 801caa4:	fb05 0002 	mla	r0, r5, r2, r0
 801caa8:	b289      	uxth	r1, r1
 801caaa:	b285      	uxth	r5, r0
 801caac:	1c74      	adds	r4, r6, #1
 801caae:	1c48      	adds	r0, r1, #1
 801cab0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801cab4:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801cab8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801cabc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801cac0:	4306      	orrs	r6, r0
 801cac2:	1c68      	adds	r0, r5, #1
 801cac4:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 801cac8:	0940      	lsrs	r0, r0, #5
 801caca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cace:	4306      	orrs	r6, r0
 801cad0:	803e      	strh	r6, [r7, #0]
 801cad2:	9b04      	ldr	r3, [sp, #16]
 801cad4:	449c      	add	ip, r3
 801cad6:	9b05      	ldr	r3, [sp, #20]
 801cad8:	449a      	add	sl, r3
 801cada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cadc:	3301      	adds	r3, #1
 801cade:	3702      	adds	r7, #2
 801cae0:	930c      	str	r3, [sp, #48]	; 0x30
 801cae2:	e663      	b.n	801c7ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6e4>
 801cae4:	465d      	mov	r5, fp
 801cae6:	2600      	movs	r6, #0
 801cae8:	9b01      	ldr	r3, [sp, #4]
 801caea:	42b3      	cmp	r3, r6
 801caec:	f340 84ba 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801caf0:	9b03      	ldr	r3, [sp, #12]
 801caf2:	ea4f 422c 	mov.w	r2, ip, asr #16
 801caf6:	ea4f 412a 	mov.w	r1, sl, asr #16
 801cafa:	b15b      	cbz	r3, 801cb14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa4c>
 801cafc:	2a00      	cmp	r2, #0
 801cafe:	db56      	blt.n	801cbae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801cb00:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801cb04:	429a      	cmp	r2, r3
 801cb06:	da52      	bge.n	801cbae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801cb08:	2900      	cmp	r1, #0
 801cb0a:	db50      	blt.n	801cbae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801cb0c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801cb10:	4299      	cmp	r1, r3
 801cb12:	da4c      	bge.n	801cbae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801cb14:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801cb18:	fb01 2303 	mla	r3, r1, r3, r2
 801cb1c:	9a02      	ldr	r2, [sp, #8]
 801cb1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801cb22:	0e11      	lsrs	r1, r2, #24
 801cb24:	d043      	beq.n	801cbae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801cb26:	29ff      	cmp	r1, #255	; 0xff
 801cb28:	d103      	bne.n	801cb32 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa6a>
 801cb2a:	9b06      	ldr	r3, [sp, #24]
 801cb2c:	2bff      	cmp	r3, #255	; 0xff
 801cb2e:	f001 80c6 	beq.w	801dcbe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bf6>
 801cb32:	9b06      	ldr	r3, [sp, #24]
 801cb34:	882c      	ldrh	r4, [r5, #0]
 801cb36:	4359      	muls	r1, r3
 801cb38:	1c4b      	adds	r3, r1, #1
 801cb3a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801cb3e:	121b      	asrs	r3, r3, #8
 801cb40:	b29f      	uxth	r7, r3
 801cb42:	1220      	asrs	r0, r4, #8
 801cb44:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801cb48:	43db      	mvns	r3, r3
 801cb4a:	b2db      	uxtb	r3, r3
 801cb4c:	fb11 f107 	smulbb	r1, r1, r7
 801cb50:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cb54:	fb00 1003 	mla	r0, r0, r3, r1
 801cb58:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 801cb5c:	10e1      	asrs	r1, r4, #3
 801cb5e:	b2d2      	uxtb	r2, r2
 801cb60:	00e4      	lsls	r4, r4, #3
 801cb62:	b2e4      	uxtb	r4, r4
 801cb64:	fb12 f207 	smulbb	r2, r2, r7
 801cb68:	fb04 2203 	mla	r2, r4, r3, r2
 801cb6c:	b280      	uxth	r0, r0
 801cb6e:	fb1e fe07 	smulbb	lr, lr, r7
 801cb72:	b292      	uxth	r2, r2
 801cb74:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cb78:	fb01 e103 	mla	r1, r1, r3, lr
 801cb7c:	1c43      	adds	r3, r0, #1
 801cb7e:	f102 0e01 	add.w	lr, r2, #1
 801cb82:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cb86:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801cb8a:	b289      	uxth	r1, r1
 801cb8c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801cb90:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cb94:	ea40 000e 	orr.w	r0, r0, lr
 801cb98:	f101 0e01 	add.w	lr, r1, #1
 801cb9c:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 801cba0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801cba4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801cba8:	ea40 000e 	orr.w	r0, r0, lr
 801cbac:	8028      	strh	r0, [r5, #0]
 801cbae:	9b04      	ldr	r3, [sp, #16]
 801cbb0:	449c      	add	ip, r3
 801cbb2:	9b05      	ldr	r3, [sp, #20]
 801cbb4:	3502      	adds	r5, #2
 801cbb6:	449a      	add	sl, r3
 801cbb8:	3601      	adds	r6, #1
 801cbba:	e795      	b.n	801cae8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa20>
 801cbbc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801cbc0:	465f      	mov	r7, fp
 801cbc2:	f04f 0800 	mov.w	r8, #0
 801cbc6:	9b01      	ldr	r3, [sp, #4]
 801cbc8:	4543      	cmp	r3, r8
 801cbca:	f340 844b 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801cbce:	9903      	ldr	r1, [sp, #12]
 801cbd0:	ea4f 422c 	mov.w	r2, ip, asr #16
 801cbd4:	ea4f 432a 	mov.w	r3, sl, asr #16
 801cbd8:	b179      	cbz	r1, 801cbfa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb32>
 801cbda:	2a00      	cmp	r2, #0
 801cbdc:	f2c0 8092 	blt.w	801cd04 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801cbe0:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801cbe4:	428a      	cmp	r2, r1
 801cbe6:	f280 808d 	bge.w	801cd04 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	f2c0 808a 	blt.w	801cd04 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801cbf0:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801cbf4:	428b      	cmp	r3, r1
 801cbf6:	f280 8085 	bge.w	801cd04 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801cbfa:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801cbfe:	9802      	ldr	r0, [sp, #8]
 801cc00:	fb03 2301 	mla	r3, r3, r1, r2
 801cc04:	9a02      	ldr	r2, [sp, #8]
 801cc06:	f850 e023 	ldr.w	lr, [r0, r3, lsl #2]
 801cc0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801cc0e:	f3ca 2407 	ubfx	r4, sl, #8, #8
 801cc12:	6853      	ldr	r3, [r2, #4]
 801cc14:	930c      	str	r3, [sp, #48]	; 0x30
 801cc16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cc1a:	930e      	str	r3, [sp, #56]	; 0x38
 801cc1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801cc20:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801cc24:	fb04 f001 	mul.w	r0, r4, r1
 801cc28:	0a00      	lsrs	r0, r0, #8
 801cc2a:	6855      	ldr	r5, [r2, #4]
 801cc2c:	1a22      	subs	r2, r4, r0
 801cc2e:	920f      	str	r2, [sp, #60]	; 0x3c
 801cc30:	190a      	adds	r2, r1, r4
 801cc32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cc34:	1a0e      	subs	r6, r1, r0
 801cc36:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801cc3a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801cc3e:	4402      	add	r2, r0
 801cc40:	f00e 11ff 	and.w	r1, lr, #16711935	; 0xff00ff
 801cc44:	4374      	muls	r4, r6
 801cc46:	fb02 4401 	mla	r4, r2, r1, r4
 801cc4a:	f005 11ff 	and.w	r1, r5, #16711935	; 0xff00ff
 801cc4e:	fb00 4301 	mla	r3, r0, r1, r4
 801cc52:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cc54:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801cc58:	460c      	mov	r4, r1
 801cc5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cc5c:	fb01 3104 	mla	r1, r1, r4, r3
 801cc60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cc62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc64:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801cc68:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cc6c:	4374      	muls	r4, r6
 801cc6e:	fb02 4e0e 	mla	lr, r2, lr, r4
 801cc72:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801cc76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cc7c:	fb00 ee05 	mla	lr, r0, r5, lr
 801cc80:	fb02 ee03 	mla	lr, r2, r3, lr
 801cc84:	9b06      	ldr	r3, [sp, #24]
 801cc86:	0a09      	lsrs	r1, r1, #8
 801cc88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cc8c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801cc90:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cc94:	2bff      	cmp	r3, #255	; 0xff
 801cc96:	ea41 010e 	orr.w	r1, r1, lr
 801cc9a:	f001 8032 	beq.w	801dd02 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c3a>
 801cc9e:	883b      	ldrh	r3, [r7, #0]
 801cca0:	f8bd 4000 	ldrh.w	r4, [sp]
 801cca4:	f8bd 5000 	ldrh.w	r5, [sp]
 801cca8:	1218      	asrs	r0, r3, #8
 801ccaa:	0c0a      	lsrs	r2, r1, #16
 801ccac:	fb12 f204 	smulbb	r2, r2, r4
 801ccb0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ccb4:	fb00 2009 	mla	r0, r0, r9, r2
 801ccb8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801ccbc:	10da      	asrs	r2, r3, #3
 801ccbe:	b2c9      	uxtb	r1, r1
 801ccc0:	00db      	lsls	r3, r3, #3
 801ccc2:	fb14 f405 	smulbb	r4, r4, r5
 801ccc6:	b2db      	uxtb	r3, r3
 801ccc8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801cccc:	fb11 f105 	smulbb	r1, r1, r5
 801ccd0:	b280      	uxth	r0, r0
 801ccd2:	fb02 4209 	mla	r2, r2, r9, r4
 801ccd6:	fb03 1109 	mla	r1, r3, r9, r1
 801ccda:	b292      	uxth	r2, r2
 801ccdc:	b289      	uxth	r1, r1
 801ccde:	1c43      	adds	r3, r0, #1
 801cce0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cce4:	1c54      	adds	r4, r2, #1
 801cce6:	1c4b      	adds	r3, r1, #1
 801cce8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ccec:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801ccf0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ccf4:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801ccf8:	0964      	lsrs	r4, r4, #5
 801ccfa:	4308      	orrs	r0, r1
 801ccfc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801cd00:	4320      	orrs	r0, r4
 801cd02:	8038      	strh	r0, [r7, #0]
 801cd04:	9b04      	ldr	r3, [sp, #16]
 801cd06:	449c      	add	ip, r3
 801cd08:	9b05      	ldr	r3, [sp, #20]
 801cd0a:	3702      	adds	r7, #2
 801cd0c:	449a      	add	sl, r3
 801cd0e:	f108 0801 	add.w	r8, r8, #1
 801cd12:	e758      	b.n	801cbc6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xafe>
 801cd14:	2300      	movs	r3, #0
 801cd16:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801cd1a:	930e      	str	r3, [sp, #56]	; 0x38
 801cd1c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 801cd20:	9b01      	ldr	r3, [sp, #4]
 801cd22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd24:	4293      	cmp	r3, r2
 801cd26:	f340 839d 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801cd2a:	9903      	ldr	r1, [sp, #12]
 801cd2c:	ea4f 432c 	mov.w	r3, ip, asr #16
 801cd30:	ea4f 422a 	mov.w	r2, sl, asr #16
 801cd34:	b179      	cbz	r1, 801cd56 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8e>
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	f2c0 8191 	blt.w	801d05e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801cd3c:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801cd40:	428b      	cmp	r3, r1
 801cd42:	f280 818c 	bge.w	801d05e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801cd46:	2a00      	cmp	r2, #0
 801cd48:	f2c0 8189 	blt.w	801d05e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801cd4c:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801cd50:	428a      	cmp	r2, r1
 801cd52:	f280 8184 	bge.w	801d05e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801cd56:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801cd5a:	fb02 3301 	mla	r3, r2, r1, r3
 801cd5e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801cd60:	6850      	ldr	r0, [r2, #4]
 801cd62:	18c2      	adds	r2, r0, r3
 801cd64:	5cc0      	ldrb	r0, [r0, r3]
 801cd66:	f892 e001 	ldrb.w	lr, [r2, #1]
 801cd6a:	5c57      	ldrb	r7, [r2, r1]
 801cd6c:	440a      	add	r2, r1
 801cd6e:	ee07 0a90 	vmov	s15, r0
 801cd72:	7856      	ldrb	r6, [r2, #1]
 801cd74:	fa1f f28c 	uxth.w	r2, ip
 801cd78:	ee02 2a10 	vmov	s4, r2
 801cd7c:	ee00 ea90 	vmov	s1, lr
 801cd80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cd84:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801cd88:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801cd8c:	ee22 2a23 	vmul.f32	s4, s4, s7
 801cd90:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801cd94:	ee00 6a10 	vmov	s0, r6
 801cd98:	eee2 7a20 	vfma.f32	s15, s4, s1
 801cd9c:	fa1f f28a 	uxth.w	r2, sl
 801cda0:	ee00 7a90 	vmov	s1, r7
 801cda4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801cda8:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801cdac:	ee01 2a10 	vmov	s2, r2
 801cdb0:	ee30 0a60 	vsub.f32	s0, s0, s1
 801cdb4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801cdb8:	eee2 0a00 	vfma.f32	s1, s4, s0
 801cdbc:	ee21 1a23 	vmul.f32	s2, s2, s7
 801cdc0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801cdc4:	eee1 7a20 	vfma.f32	s15, s2, s1
 801cdc8:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801cdcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cdd0:	ee17 2a90 	vmov	r2, s15
 801cdd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801cdd8:	9211      	str	r2, [sp, #68]	; 0x44
 801cdda:	f000 8140 	beq.w	801d05e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801cdde:	9c02      	ldr	r4, [sp, #8]
 801cde0:	9a02      	ldr	r2, [sp, #8]
 801cde2:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
 801cde6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801cdea:	b283      	uxth	r3, r0
 801cdec:	930f      	str	r3, [sp, #60]	; 0x3c
 801cdee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801cdf0:	8854      	ldrh	r4, [r2, #2]
 801cdf2:	122b      	asrs	r3, r5, #8
 801cdf4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801cdf8:	4343      	muls	r3, r0
 801cdfa:	ea4f 2924 	mov.w	r9, r4, asr #8
 801cdfe:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 801ce02:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801ce06:	1c59      	adds	r1, r3, #1
 801ce08:	fa1f fe8e 	uxth.w	lr, lr
 801ce0c:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801ce10:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801ce14:	fb09 f90e 	mul.w	r9, r9, lr
 801ce18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ce1c:	ee07 3a90 	vmov	s15, r3
 801ce20:	f109 0301 	add.w	r3, r9, #1
 801ce24:	8852      	ldrh	r2, [r2, #2]
 801ce26:	9210      	str	r2, [sp, #64]	; 0x40
 801ce28:	eb03 2929 	add.w	r9, r3, r9, asr #8
 801ce2c:	ea4f 2820 	mov.w	r8, r0, asr #8
 801ce30:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ce34:	b2bf      	uxth	r7, r7
 801ce36:	ee00 9a90 	vmov	s1, r9
 801ce3a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801ce3e:	1212      	asrs	r2, r2, #8
 801ce40:	fb08 f807 	mul.w	r8, r8, r7
 801ce44:	b2b6      	uxth	r6, r6
 801ce46:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ce4a:	4372      	muls	r2, r6
 801ce4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce50:	f108 0301 	add.w	r3, r8, #1
 801ce54:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801ce58:	eb03 2828 	add.w	r8, r3, r8, asr #8
 801ce5c:	1c53      	adds	r3, r2, #1
 801ce5e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ce62:	eb03 2222 	add.w	r2, r3, r2, asr #8
 801ce66:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ce6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ce6e:	eee2 7a20 	vfma.f32	s15, s4, s1
 801ce72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ce74:	ee00 8a90 	vmov	s1, r8
 801ce78:	ee00 2a10 	vmov	s0, r2
 801ce7c:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801ce80:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801ce84:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ce88:	ee30 0a60 	vsub.f32	s0, s0, s1
 801ce8c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ce90:	eee2 0a00 	vfma.f32	s1, s4, s0
 801ce94:	ea4f 09e0 	mov.w	r9, r0, asr #3
 801ce98:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ce9c:	fb09 f907 	mul.w	r9, r9, r7
 801cea0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801cea4:	00e4      	lsls	r4, r4, #3
 801cea6:	eee1 7a20 	vfma.f32	s15, s2, s1
 801ceaa:	b2e4      	uxtb	r4, r4
 801ceac:	fb04 f40e 	mul.w	r4, r4, lr
 801ceb0:	00c0      	lsls	r0, r0, #3
 801ceb2:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801ceb6:	b2c0      	uxtb	r0, r0
 801ceb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cebc:	4378      	muls	r0, r7
 801cebe:	ee17 3a90 	vmov	r3, s15
 801cec2:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 801cec6:	10eb      	asrs	r3, r5, #3
 801cec8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801cecc:	434b      	muls	r3, r1
 801cece:	fb08 f10e 	mul.w	r1, r8, lr
 801ced2:	9112      	str	r1, [sp, #72]	; 0x48
 801ced4:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ced6:	ea4f 08e1 	mov.w	r8, r1, asr #3
 801ceda:	1c59      	adds	r1, r3, #1
 801cedc:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801cee0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cee4:	ee07 3a90 	vmov	s15, r3
 801cee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ceea:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ceec:	3301      	adds	r3, #1
 801ceee:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801cef2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cef6:	ee00 3a90 	vmov	s1, r3
 801cefa:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801cefe:	fb08 f806 	mul.w	r8, r8, r6
 801cf02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf06:	f109 0301 	add.w	r3, r9, #1
 801cf0a:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801cf0e:	eb03 2929 	add.w	r9, r3, r9, asr #8
 801cf12:	f108 0301 	add.w	r3, r8, #1
 801cf16:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801cf1a:	eb03 2828 	add.w	r8, r3, r8, asr #8
 801cf1e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801cf22:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801cf26:	eee2 7a20 	vfma.f32	s15, s4, s1
 801cf2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cf2c:	ee00 9a90 	vmov	s1, r9
 801cf30:	ee00 8a10 	vmov	s0, r8
 801cf34:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801cf38:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801cf3c:	00ed      	lsls	r5, r5, #3
 801cf3e:	ee30 0a60 	vsub.f32	s0, s0, s1
 801cf42:	b2ed      	uxtb	r5, r5
 801cf44:	eee2 0a00 	vfma.f32	s1, s4, s0
 801cf48:	434d      	muls	r5, r1
 801cf4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cf4c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801cf50:	00c9      	lsls	r1, r1, #3
 801cf52:	eee1 7a20 	vfma.f32	s15, s2, s1
 801cf56:	b2c9      	uxtb	r1, r1
 801cf58:	434e      	muls	r6, r1
 801cf5a:	f104 0e01 	add.w	lr, r4, #1
 801cf5e:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801cf62:	1c69      	adds	r1, r5, #1
 801cf64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cf68:	eb01 2525 	add.w	r5, r1, r5, asr #8
 801cf6c:	eb0e 2424 	add.w	r4, lr, r4, asr #8
 801cf70:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801cf74:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cf78:	ee17 3a90 	vmov	r3, s15
 801cf7c:	ee00 4a90 	vmov	s1, r4
 801cf80:	ee07 5a90 	vmov	s15, r5
 801cf84:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801cf88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf8c:	1c71      	adds	r1, r6, #1
 801cf8e:	1c47      	adds	r7, r0, #1
 801cf90:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801cf94:	eb01 2626 	add.w	r6, r1, r6, asr #8
 801cf98:	eb07 2020 	add.w	r0, r7, r0, asr #8
 801cf9c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cfa0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801cfa4:	eee2 7a20 	vfma.f32	s15, s4, s1
 801cfa8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801cfac:	ee00 0a90 	vmov	s1, r0
 801cfb0:	ee00 6a10 	vmov	s0, r6
 801cfb4:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801cfb8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801cfbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cfbe:	ee30 0a60 	vsub.f32	s0, s0, s1
 801cfc2:	28ff      	cmp	r0, #255	; 0xff
 801cfc4:	eee2 0a00 	vfma.f32	s1, s4, s0
 801cfc8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801cfcc:	eee1 7a20 	vfma.f32	s15, s2, s1
 801cfd0:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801cfd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cfd8:	ee17 1a90 	vmov	r1, s15
 801cfdc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cfe0:	d103      	bne.n	801cfea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf22>
 801cfe2:	9806      	ldr	r0, [sp, #24]
 801cfe4:	28ff      	cmp	r0, #255	; 0xff
 801cfe6:	f000 85da 	beq.w	801db9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ad6>
 801cfea:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cfec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cfee:	8804      	ldrh	r4, [r0, #0]
 801cff0:	9800      	ldr	r0, [sp, #0]
 801cff2:	4345      	muls	r5, r0
 801cff4:	1c68      	adds	r0, r5, #1
 801cff6:	eb00 2025 	add.w	r0, r0, r5, asr #8
 801cffa:	f8bd 5000 	ldrh.w	r5, [sp]
 801cffe:	1226      	asrs	r6, r4, #8
 801d000:	ea6f 2020 	mvn.w	r0, r0, asr #8
 801d004:	b2c0      	uxtb	r0, r0
 801d006:	fb12 f205 	smulbb	r2, r2, r5
 801d00a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d00e:	fb06 2600 	mla	r6, r6, r0, r2
 801d012:	f8bd 2000 	ldrh.w	r2, [sp]
 801d016:	10e5      	asrs	r5, r4, #3
 801d018:	00e4      	lsls	r4, r4, #3
 801d01a:	fb11 f102 	smulbb	r1, r1, r2
 801d01e:	b2e4      	uxtb	r4, r4
 801d020:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d024:	fb13 f302 	smulbb	r3, r3, r2
 801d028:	fb04 1400 	mla	r4, r4, r0, r1
 801d02c:	b2b6      	uxth	r6, r6
 801d02e:	fb05 3300 	mla	r3, r5, r0, r3
 801d032:	b2a4      	uxth	r4, r4
 801d034:	b29d      	uxth	r5, r3
 801d036:	1c72      	adds	r2, r6, #1
 801d038:	1c63      	adds	r3, r4, #1
 801d03a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801d03e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d042:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d046:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d04a:	431e      	orrs	r6, r3
 801d04c:	1c6b      	adds	r3, r5, #1
 801d04e:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801d052:	095b      	lsrs	r3, r3, #5
 801d054:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d058:	431e      	orrs	r6, r3
 801d05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d05c:	801e      	strh	r6, [r3, #0]
 801d05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d060:	3302      	adds	r3, #2
 801d062:	930c      	str	r3, [sp, #48]	; 0x30
 801d064:	9b04      	ldr	r3, [sp, #16]
 801d066:	449c      	add	ip, r3
 801d068:	9b05      	ldr	r3, [sp, #20]
 801d06a:	449a      	add	sl, r3
 801d06c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d06e:	3301      	adds	r3, #1
 801d070:	930e      	str	r3, [sp, #56]	; 0x38
 801d072:	e655      	b.n	801cd20 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc58>
 801d074:	2500      	movs	r5, #0
 801d076:	9b01      	ldr	r3, [sp, #4]
 801d078:	42ab      	cmp	r3, r5
 801d07a:	f340 81f3 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d07e:	9903      	ldr	r1, [sp, #12]
 801d080:	ea4f 432c 	mov.w	r3, ip, asr #16
 801d084:	ea4f 422a 	mov.w	r2, sl, asr #16
 801d088:	b159      	cbz	r1, 801d0a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfda>
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	db55      	blt.n	801d13a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801d08e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801d092:	428b      	cmp	r3, r1
 801d094:	da51      	bge.n	801d13a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801d096:	2a00      	cmp	r2, #0
 801d098:	db4f      	blt.n	801d13a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801d09a:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801d09e:	428a      	cmp	r2, r1
 801d0a0:	da4b      	bge.n	801d13a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801d0a2:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801d0a6:	fb02 3101 	mla	r1, r2, r1, r3
 801d0aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d0ac:	685b      	ldr	r3, [r3, #4]
 801d0ae:	5c5a      	ldrb	r2, [r3, r1]
 801d0b0:	2a00      	cmp	r2, #0
 801d0b2:	d042      	beq.n	801d13a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801d0b4:	9b02      	ldr	r3, [sp, #8]
 801d0b6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801d0ba:	9906      	ldr	r1, [sp, #24]
 801d0bc:	434a      	muls	r2, r1
 801d0be:	1c51      	adds	r1, r2, #1
 801d0c0:	eb01 2222 	add.w	r2, r1, r2, asr #8
 801d0c4:	1212      	asrs	r2, r2, #8
 801d0c6:	2aff      	cmp	r2, #255	; 0xff
 801d0c8:	d035      	beq.n	801d136 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x106e>
 801d0ca:	f83b 4015 	ldrh.w	r4, [fp, r5, lsl #1]
 801d0ce:	1219      	asrs	r1, r3, #8
 801d0d0:	b297      	uxth	r7, r2
 801d0d2:	1220      	asrs	r0, r4, #8
 801d0d4:	43d2      	mvns	r2, r2
 801d0d6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d0da:	b2d2      	uxtb	r2, r2
 801d0dc:	fb11 f107 	smulbb	r1, r1, r7
 801d0e0:	10de      	asrs	r6, r3, #3
 801d0e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d0e6:	00db      	lsls	r3, r3, #3
 801d0e8:	fb00 1002 	mla	r0, r0, r2, r1
 801d0ec:	b2db      	uxtb	r3, r3
 801d0ee:	10e1      	asrs	r1, r4, #3
 801d0f0:	00e4      	lsls	r4, r4, #3
 801d0f2:	b2e4      	uxtb	r4, r4
 801d0f4:	fb13 f307 	smulbb	r3, r3, r7
 801d0f8:	fb04 3302 	mla	r3, r4, r2, r3
 801d0fc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d100:	b280      	uxth	r0, r0
 801d102:	fb16 f607 	smulbb	r6, r6, r7
 801d106:	b29b      	uxth	r3, r3
 801d108:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d10c:	fb01 6102 	mla	r1, r1, r2, r6
 801d110:	1c5c      	adds	r4, r3, #1
 801d112:	1c42      	adds	r2, r0, #1
 801d114:	b289      	uxth	r1, r1
 801d116:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d11a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d11e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d122:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d126:	1c4e      	adds	r6, r1, #1
 801d128:	4318      	orrs	r0, r3
 801d12a:	eb06 2311 	add.w	r3, r6, r1, lsr #8
 801d12e:	095b      	lsrs	r3, r3, #5
 801d130:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d134:	4303      	orrs	r3, r0
 801d136:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 801d13a:	9b04      	ldr	r3, [sp, #16]
 801d13c:	449c      	add	ip, r3
 801d13e:	9b05      	ldr	r3, [sp, #20]
 801d140:	3501      	adds	r5, #1
 801d142:	449a      	add	sl, r3
 801d144:	e797      	b.n	801d076 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfae>
 801d146:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d14a:	930c      	str	r3, [sp, #48]	; 0x30
 801d14c:	2000      	movs	r0, #0
 801d14e:	9b01      	ldr	r3, [sp, #4]
 801d150:	4283      	cmp	r3, r0
 801d152:	f340 8187 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d156:	9b03      	ldr	r3, [sp, #12]
 801d158:	ea4f 422c 	mov.w	r2, ip, asr #16
 801d15c:	ea4f 412a 	mov.w	r1, sl, asr #16
 801d160:	b17b      	cbz	r3, 801d182 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ba>
 801d162:	2a00      	cmp	r2, #0
 801d164:	f2c0 809d 	blt.w	801d2a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801d168:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801d16c:	429a      	cmp	r2, r3
 801d16e:	f280 8098 	bge.w	801d2a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801d172:	2900      	cmp	r1, #0
 801d174:	f2c0 8095 	blt.w	801d2a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801d178:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801d17c:	4299      	cmp	r1, r3
 801d17e:	f280 8090 	bge.w	801d2a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801d182:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801d186:	9d02      	ldr	r5, [sp, #8]
 801d188:	fb01 2103 	mla	r1, r1, r3, r2
 801d18c:	9a02      	ldr	r2, [sp, #8]
 801d18e:	f835 5011 	ldrh.w	r5, [r5, r1, lsl #1]
 801d192:	eb02 0641 	add.w	r6, r2, r1, lsl #1
 801d196:	f3ca 3403 	ubfx	r4, sl, #12, #4
 801d19a:	f836 7013 	ldrh.w	r7, [r6, r3, lsl #1]
 801d19e:	8871      	ldrh	r1, [r6, #2]
 801d1a0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d1a4:	f3cc 3203 	ubfx	r2, ip, #12, #4
 801d1a8:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 801d1ac:	042e      	lsls	r6, r5, #16
 801d1ae:	fb04 f302 	mul.w	r3, r4, r2
 801d1b2:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 801d1b6:	ea4f 4801 	mov.w	r8, r1, lsl #16
 801d1ba:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801d1be:	10db      	asrs	r3, r3, #3
 801d1c0:	4335      	orrs	r5, r6
 801d1c2:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801d1c6:	f1c4 0610 	rsb	r6, r4, #16
 801d1ca:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d1ce:	1ab6      	subs	r6, r6, r2
 801d1d0:	ea48 0101 	orr.w	r1, r8, r1
 801d1d4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801d1d8:	ea4f 490e 	mov.w	r9, lr, lsl #16
 801d1dc:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 801d1e0:	4351      	muls	r1, r2
 801d1e2:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 801d1e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d1ea:	ea49 0e0e 	orr.w	lr, r9, lr
 801d1ee:	fb06 1105 	mla	r1, r6, r5, r1
 801d1f2:	fb03 110e 	mla	r1, r3, lr, r1
 801d1f6:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801d1fa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d1fe:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801d202:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 801d206:	ea4e 0707 	orr.w	r7, lr, r7
 801d20a:	fb03 1107 	mla	r1, r3, r7, r1
 801d20e:	ea4f 5851 	mov.w	r8, r1, lsr #21
 801d212:	094b      	lsrs	r3, r1, #5
 801d214:	9a06      	ldr	r2, [sp, #24]
 801d216:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d21a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d21e:	ea48 0303 	orr.w	r3, r8, r3
 801d222:	2aff      	cmp	r2, #255	; 0xff
 801d224:	b29b      	uxth	r3, r3
 801d226:	d03a      	beq.n	801d29e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11d6>
 801d228:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]
 801d22c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801d230:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801d234:	1211      	asrs	r1, r2, #8
 801d236:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d23a:	fb11 f105 	smulbb	r1, r1, r5
 801d23e:	121c      	asrs	r4, r3, #8
 801d240:	9d00      	ldr	r5, [sp, #0]
 801d242:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d246:	fb04 1405 	mla	r4, r4, r5, r1
 801d24a:	10d5      	asrs	r5, r2, #3
 801d24c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d250:	fb15 f506 	smulbb	r5, r5, r6
 801d254:	10d9      	asrs	r1, r3, #3
 801d256:	9e00      	ldr	r6, [sp, #0]
 801d258:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d25c:	fb01 5106 	mla	r1, r1, r6, r5
 801d260:	00d2      	lsls	r2, r2, #3
 801d262:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801d266:	00db      	lsls	r3, r3, #3
 801d268:	b2d2      	uxtb	r2, r2
 801d26a:	fb12 f205 	smulbb	r2, r2, r5
 801d26e:	b2db      	uxtb	r3, r3
 801d270:	fb03 2306 	mla	r3, r3, r6, r2
 801d274:	b2a4      	uxth	r4, r4
 801d276:	b29b      	uxth	r3, r3
 801d278:	1c62      	adds	r2, r4, #1
 801d27a:	1c5d      	adds	r5, r3, #1
 801d27c:	b289      	uxth	r1, r1
 801d27e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801d282:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d286:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d28a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d28e:	1c4a      	adds	r2, r1, #1
 801d290:	431c      	orrs	r4, r3
 801d292:	eb02 2311 	add.w	r3, r2, r1, lsr #8
 801d296:	095b      	lsrs	r3, r3, #5
 801d298:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d29c:	4323      	orrs	r3, r4
 801d29e:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 801d2a2:	9b04      	ldr	r3, [sp, #16]
 801d2a4:	449c      	add	ip, r3
 801d2a6:	9b05      	ldr	r3, [sp, #20]
 801d2a8:	3001      	adds	r0, #1
 801d2aa:	449a      	add	sl, r3
 801d2ac:	e74f      	b.n	801d14e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1086>
 801d2ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d2b0:	685b      	ldr	r3, [r3, #4]
 801d2b2:	781b      	ldrb	r3, [r3, #0]
 801d2b4:	2b01      	cmp	r3, #1
 801d2b6:	f000 80c6 	beq.w	801d446 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x137e>
 801d2ba:	f0c0 80d9 	bcc.w	801d470 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a8>
 801d2be:	2b02      	cmp	r3, #2
 801d2c0:	f47f a842 	bne.w	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801d2c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d2c8:	930c      	str	r3, [sp, #48]	; 0x30
 801d2ca:	2000      	movs	r0, #0
 801d2cc:	9b01      	ldr	r3, [sp, #4]
 801d2ce:	4283      	cmp	r3, r0
 801d2d0:	f340 80c8 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d2d4:	9a03      	ldr	r2, [sp, #12]
 801d2d6:	ea4f 432c 	mov.w	r3, ip, asr #16
 801d2da:	ea4f 412a 	mov.w	r1, sl, asr #16
 801d2de:	b17a      	cbz	r2, 801d300 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1238>
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	f2c0 80aa 	blt.w	801d43a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801d2e6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d2ea:	4293      	cmp	r3, r2
 801d2ec:	f280 80a5 	bge.w	801d43a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801d2f0:	2900      	cmp	r1, #0
 801d2f2:	f2c0 80a2 	blt.w	801d43a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801d2f6:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801d2fa:	4291      	cmp	r1, r2
 801d2fc:	f280 809d 	bge.w	801d43a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801d300:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 801d304:	9e02      	ldr	r6, [sp, #8]
 801d306:	fb01 3107 	mla	r1, r1, r7, r3
 801d30a:	9b02      	ldr	r3, [sp, #8]
 801d30c:	eb03 0e01 	add.w	lr, r3, r1
 801d310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d312:	5c71      	ldrb	r1, [r6, r1]
 801d314:	685d      	ldr	r5, [r3, #4]
 801d316:	3102      	adds	r1, #2
 801d318:	eb0e 0307 	add.w	r3, lr, r7
 801d31c:	f835 6011 	ldrh.w	r6, [r5, r1, lsl #1]
 801d320:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801d324:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801d328:	785b      	ldrb	r3, [r3, #1]
 801d32a:	3102      	adds	r1, #2
 801d32c:	3302      	adds	r3, #2
 801d32e:	3702      	adds	r7, #2
 801d330:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 801d334:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 801d338:	f835 7017 	ldrh.w	r7, [r5, r7, lsl #1]
 801d33c:	f3cc 3203 	ubfx	r2, ip, #12, #4
 801d340:	f3ca 3403 	ubfx	r4, sl, #12, #4
 801d344:	0435      	lsls	r5, r6, #16
 801d346:	fb04 f302 	mul.w	r3, r4, r2
 801d34a:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801d34e:	ea4f 4801 	mov.w	r8, r1, lsl #16
 801d352:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801d356:	10db      	asrs	r3, r3, #3
 801d358:	4335      	orrs	r5, r6
 801d35a:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801d35e:	f1c4 0610 	rsb	r6, r4, #16
 801d362:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d366:	1ab6      	subs	r6, r6, r2
 801d368:	ea48 0101 	orr.w	r1, r8, r1
 801d36c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801d370:	ea4f 490e 	mov.w	r9, lr, lsl #16
 801d374:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 801d378:	4351      	muls	r1, r2
 801d37a:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 801d37e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d382:	ea49 0e0e 	orr.w	lr, r9, lr
 801d386:	fb06 1105 	mla	r1, r6, r5, r1
 801d38a:	fb03 110e 	mla	r1, r3, lr, r1
 801d38e:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801d392:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d396:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801d39a:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 801d39e:	ea4e 0707 	orr.w	r7, lr, r7
 801d3a2:	fb03 1107 	mla	r1, r3, r7, r1
 801d3a6:	ea4f 5851 	mov.w	r8, r1, lsr #21
 801d3aa:	094b      	lsrs	r3, r1, #5
 801d3ac:	9a06      	ldr	r2, [sp, #24]
 801d3ae:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d3b2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d3b6:	ea48 0303 	orr.w	r3, r8, r3
 801d3ba:	2aff      	cmp	r2, #255	; 0xff
 801d3bc:	b29b      	uxth	r3, r3
 801d3be:	d03a      	beq.n	801d436 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x136e>
 801d3c0:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]
 801d3c4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801d3c8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801d3cc:	1211      	asrs	r1, r2, #8
 801d3ce:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d3d2:	fb11 f105 	smulbb	r1, r1, r5
 801d3d6:	121c      	asrs	r4, r3, #8
 801d3d8:	9d00      	ldr	r5, [sp, #0]
 801d3da:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d3de:	fb04 1405 	mla	r4, r4, r5, r1
 801d3e2:	10d5      	asrs	r5, r2, #3
 801d3e4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d3e8:	fb15 f506 	smulbb	r5, r5, r6
 801d3ec:	10d9      	asrs	r1, r3, #3
 801d3ee:	9e00      	ldr	r6, [sp, #0]
 801d3f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d3f4:	fb01 5106 	mla	r1, r1, r6, r5
 801d3f8:	00d2      	lsls	r2, r2, #3
 801d3fa:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801d3fe:	00db      	lsls	r3, r3, #3
 801d400:	b2d2      	uxtb	r2, r2
 801d402:	fb12 f205 	smulbb	r2, r2, r5
 801d406:	b2db      	uxtb	r3, r3
 801d408:	fb03 2306 	mla	r3, r3, r6, r2
 801d40c:	b2a4      	uxth	r4, r4
 801d40e:	b29b      	uxth	r3, r3
 801d410:	1c62      	adds	r2, r4, #1
 801d412:	1c5d      	adds	r5, r3, #1
 801d414:	b289      	uxth	r1, r1
 801d416:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801d41a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d41e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d422:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d426:	1c4a      	adds	r2, r1, #1
 801d428:	431c      	orrs	r4, r3
 801d42a:	eb02 2311 	add.w	r3, r2, r1, lsr #8
 801d42e:	095b      	lsrs	r3, r3, #5
 801d430:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d434:	4323      	orrs	r3, r4
 801d436:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 801d43a:	9b04      	ldr	r3, [sp, #16]
 801d43c:	449c      	add	ip, r3
 801d43e:	9b05      	ldr	r3, [sp, #20]
 801d440:	3001      	adds	r0, #1
 801d442:	449a      	add	sl, r3
 801d444:	e742      	b.n	801d2cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1204>
 801d446:	2300      	movs	r3, #0
 801d448:	930c      	str	r3, [sp, #48]	; 0x30
 801d44a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d44e:	930e      	str	r3, [sp, #56]	; 0x38
 801d450:	465d      	mov	r5, fp
 801d452:	f04f 0903 	mov.w	r9, #3
 801d456:	f04f 0804 	mov.w	r8, #4
 801d45a:	9b01      	ldr	r3, [sp, #4]
 801d45c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d45e:	4293      	cmp	r3, r2
 801d460:	f300 80bb 	bgt.w	801d5da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1512>
 801d464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d468:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 801d46c:	f7fe bf6c 	b.w	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801d470:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801d474:	465f      	mov	r7, fp
 801d476:	f04f 0800 	mov.w	r8, #0
 801d47a:	9b01      	ldr	r3, [sp, #4]
 801d47c:	4543      	cmp	r3, r8
 801d47e:	ddf1      	ble.n	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d480:	9b03      	ldr	r3, [sp, #12]
 801d482:	ea4f 422c 	mov.w	r2, ip, asr #16
 801d486:	ea4f 412a 	mov.w	r1, sl, asr #16
 801d48a:	b17b      	cbz	r3, 801d4ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e4>
 801d48c:	2a00      	cmp	r2, #0
 801d48e:	f2c0 809c 	blt.w	801d5ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801d492:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801d496:	429a      	cmp	r2, r3
 801d498:	f280 8097 	bge.w	801d5ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801d49c:	2900      	cmp	r1, #0
 801d49e:	f2c0 8094 	blt.w	801d5ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801d4a2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801d4a6:	4299      	cmp	r1, r3
 801d4a8:	f280 808f 	bge.w	801d5ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801d4ac:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801d4b0:	9c02      	ldr	r4, [sp, #8]
 801d4b2:	fb01 2103 	mla	r1, r1, r3, r2
 801d4b6:	9a02      	ldr	r2, [sp, #8]
 801d4b8:	1850      	adds	r0, r2, r1
 801d4ba:	5c61      	ldrb	r1, [r4, r1]
 801d4bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d4be:	3101      	adds	r1, #1
 801d4c0:	6852      	ldr	r2, [r2, #4]
 801d4c2:	f852 e021 	ldr.w	lr, [r2, r1, lsl #2]
 801d4c6:	7841      	ldrb	r1, [r0, #1]
 801d4c8:	3101      	adds	r1, #1
 801d4ca:	f3ca 2407 	ubfx	r4, sl, #8, #8
 801d4ce:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801d4d2:	910e      	str	r1, [sp, #56]	; 0x38
 801d4d4:	18c1      	adds	r1, r0, r3
 801d4d6:	5cc3      	ldrb	r3, [r0, r3]
 801d4d8:	7849      	ldrb	r1, [r1, #1]
 801d4da:	3101      	adds	r1, #1
 801d4dc:	3301      	adds	r3, #1
 801d4de:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801d4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d4e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d4e8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801d4ec:	fb04 f001 	mul.w	r0, r4, r1
 801d4f0:	0a00      	lsrs	r0, r0, #8
 801d4f2:	1a22      	subs	r2, r4, r0
 801d4f4:	920c      	str	r2, [sp, #48]	; 0x30
 801d4f6:	190a      	adds	r2, r1, r4
 801d4f8:	1a0e      	subs	r6, r1, r0
 801d4fa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d4fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d500:	4402      	add	r2, r0
 801d502:	f00e 14ff 	and.w	r4, lr, #16711935	; 0xff00ff
 801d506:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d50a:	4354      	muls	r4, r2
 801d50c:	fb06 4401 	mla	r4, r6, r1, r4
 801d510:	f005 11ff 	and.w	r1, r5, #16711935	; 0xff00ff
 801d514:	fb00 4301 	mla	r3, r0, r1, r4
 801d518:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d51a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d51e:	460c      	mov	r4, r1
 801d520:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d522:	fb01 3104 	mla	r1, r1, r4, r3
 801d526:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d52a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d52e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d532:	4374      	muls	r4, r6
 801d534:	fb02 4e0e 	mla	lr, r2, lr, r4
 801d538:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d53e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d542:	fb00 ee05 	mla	lr, r0, r5, lr
 801d546:	fb02 ee03 	mla	lr, r2, r3, lr
 801d54a:	9b06      	ldr	r3, [sp, #24]
 801d54c:	0a09      	lsrs	r1, r1, #8
 801d54e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d552:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d556:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d55a:	2bff      	cmp	r3, #255	; 0xff
 801d55c:	ea41 010e 	orr.w	r1, r1, lr
 801d560:	f000 8109 	beq.w	801d776 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16ae>
 801d564:	883b      	ldrh	r3, [r7, #0]
 801d566:	f8bd 4000 	ldrh.w	r4, [sp]
 801d56a:	f8bd 5000 	ldrh.w	r5, [sp]
 801d56e:	1218      	asrs	r0, r3, #8
 801d570:	0c0a      	lsrs	r2, r1, #16
 801d572:	fb12 f204 	smulbb	r2, r2, r4
 801d576:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d57a:	fb00 2009 	mla	r0, r0, r9, r2
 801d57e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801d582:	10da      	asrs	r2, r3, #3
 801d584:	b2c9      	uxtb	r1, r1
 801d586:	00db      	lsls	r3, r3, #3
 801d588:	fb14 f405 	smulbb	r4, r4, r5
 801d58c:	b2db      	uxtb	r3, r3
 801d58e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d592:	fb11 f105 	smulbb	r1, r1, r5
 801d596:	b280      	uxth	r0, r0
 801d598:	fb02 4209 	mla	r2, r2, r9, r4
 801d59c:	fb03 1109 	mla	r1, r3, r9, r1
 801d5a0:	b292      	uxth	r2, r2
 801d5a2:	b289      	uxth	r1, r1
 801d5a4:	1c43      	adds	r3, r0, #1
 801d5a6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d5aa:	1c54      	adds	r4, r2, #1
 801d5ac:	1c4b      	adds	r3, r1, #1
 801d5ae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d5b2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801d5b6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d5ba:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801d5be:	0964      	lsrs	r4, r4, #5
 801d5c0:	4308      	orrs	r0, r1
 801d5c2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d5c6:	4320      	orrs	r0, r4
 801d5c8:	8038      	strh	r0, [r7, #0]
 801d5ca:	9b04      	ldr	r3, [sp, #16]
 801d5cc:	449c      	add	ip, r3
 801d5ce:	9b05      	ldr	r3, [sp, #20]
 801d5d0:	3702      	adds	r7, #2
 801d5d2:	449a      	add	sl, r3
 801d5d4:	f108 0801 	add.w	r8, r8, #1
 801d5d8:	e74f      	b.n	801d47a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13b2>
 801d5da:	9a03      	ldr	r2, [sp, #12]
 801d5dc:	ea4f 432c 	mov.w	r3, ip, asr #16
 801d5e0:	ea4f 412a 	mov.w	r1, sl, asr #16
 801d5e4:	b17a      	cbz	r2, 801d606 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x153e>
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	f2c0 80b0 	blt.w	801d74c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801d5ec:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d5f0:	4293      	cmp	r3, r2
 801d5f2:	f280 80ab 	bge.w	801d74c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801d5f6:	2900      	cmp	r1, #0
 801d5f8:	f2c0 80a8 	blt.w	801d74c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801d5fc:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801d600:	4291      	cmp	r1, r2
 801d602:	f280 80a3 	bge.w	801d74c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801d606:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d60a:	9c02      	ldr	r4, [sp, #8]
 801d60c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d60e:	fb01 3302 	mla	r3, r1, r2, r3
 801d612:	9902      	ldr	r1, [sp, #8]
 801d614:	5ce6      	ldrb	r6, [r4, r3]
 801d616:	6840      	ldr	r0, [r0, #4]
 801d618:	4419      	add	r1, r3
 801d61a:	fb19 8606 	smlabb	r6, r9, r6, r8
 801d61e:	1983      	adds	r3, r0, r6
 801d620:	930f      	str	r3, [sp, #60]	; 0x3c
 801d622:	784b      	ldrb	r3, [r1, #1]
 801d624:	f811 e002 	ldrb.w	lr, [r1, r2]
 801d628:	5d86      	ldrb	r6, [r0, r6]
 801d62a:	fb19 8303 	smlabb	r3, r9, r3, r8
 801d62e:	9313      	str	r3, [sp, #76]	; 0x4c
 801d630:	18c3      	adds	r3, r0, r3
 801d632:	9310      	str	r3, [sp, #64]	; 0x40
 801d634:	188b      	adds	r3, r1, r2
 801d636:	fb19 8e0e 	smlabb	lr, r9, lr, r8
 801d63a:	785f      	ldrb	r7, [r3, #1]
 801d63c:	eb00 020e 	add.w	r2, r0, lr
 801d640:	fb19 8307 	smlabb	r3, r9, r7, r8
 801d644:	9211      	str	r2, [sp, #68]	; 0x44
 801d646:	9314      	str	r3, [sp, #80]	; 0x50
 801d648:	f3cc 3203 	ubfx	r2, ip, #12, #4
 801d64c:	18c3      	adds	r3, r0, r3
 801d64e:	f3ca 3403 	ubfx	r4, sl, #12, #4
 801d652:	9312      	str	r3, [sp, #72]	; 0x48
 801d654:	fb04 f102 	mul.w	r1, r4, r2
 801d658:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801d65a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d65e:	5dc7      	ldrb	r7, [r0, r7]
 801d660:	f1c4 0310 	rsb	r3, r4, #16
 801d664:	10c9      	asrs	r1, r1, #3
 801d666:	1a9b      	subs	r3, r3, r2
 801d668:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801d66c:	ebc1 0242 	rsb	r2, r1, r2, lsl #1
 801d670:	435e      	muls	r6, r3
 801d672:	fb02 6607 	mla	r6, r2, r7, r6
 801d676:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801d678:	ebc1 0444 	rsb	r4, r1, r4, lsl #1
 801d67c:	5dc0      	ldrb	r0, [r0, r7]
 801d67e:	fb04 660e 	mla	r6, r4, lr, r6
 801d682:	fb01 6000 	mla	r0, r1, r0, r6
 801d686:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d688:	9013      	str	r0, [sp, #76]	; 0x4c
 801d68a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d68c:	7876      	ldrb	r6, [r6, #1]
 801d68e:	7840      	ldrb	r0, [r0, #1]
 801d690:	435e      	muls	r6, r3
 801d692:	fb02 6600 	mla	r6, r2, r0, r6
 801d696:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d698:	7840      	ldrb	r0, [r0, #1]
 801d69a:	fb04 6600 	mla	r6, r4, r0, r6
 801d69e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d6a0:	7840      	ldrb	r0, [r0, #1]
 801d6a2:	fb01 6000 	mla	r0, r1, r0, r6
 801d6a6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d6a8:	78b6      	ldrb	r6, [r6, #2]
 801d6aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d6ac:	78bf      	ldrb	r7, [r7, #2]
 801d6ae:	437b      	muls	r3, r7
 801d6b0:	fb02 3306 	mla	r3, r2, r6, r3
 801d6b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d6b6:	7897      	ldrb	r7, [r2, #2]
 801d6b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d6ba:	fb04 3307 	mla	r3, r4, r7, r3
 801d6be:	7897      	ldrb	r7, [r2, #2]
 801d6c0:	fb01 3307 	mla	r3, r1, r7, r3
 801d6c4:	1159      	asrs	r1, r3, #5
 801d6c6:	9b06      	ldr	r3, [sp, #24]
 801d6c8:	2bff      	cmp	r3, #255	; 0xff
 801d6ca:	ea4f 1060 	mov.w	r0, r0, asr #5
 801d6ce:	d046      	beq.n	801d75e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1696>
 801d6d0:	f8b5 e000 	ldrh.w	lr, [r5]
 801d6d4:	f8bd 2000 	ldrh.w	r2, [sp]
 801d6d8:	b2c9      	uxtb	r1, r1
 801d6da:	ea4f 232e 	mov.w	r3, lr, asr #8
 801d6de:	fb11 f102 	smulbb	r1, r1, r2
 801d6e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d6e4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d6e8:	fb03 1102 	mla	r1, r3, r2, r1
 801d6ec:	f8bd 2000 	ldrh.w	r2, [sp]
 801d6f0:	b2c0      	uxtb	r0, r0
 801d6f2:	fb10 f002 	smulbb	r0, r0, r2
 801d6f6:	ea4f 03ee 	mov.w	r3, lr, asr #3
 801d6fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d6fc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d700:	fb03 0302 	mla	r3, r3, r2, r0
 801d704:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d708:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801d70c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d70e:	fa5f fe8e 	uxtb.w	lr, lr
 801d712:	fb1e fe00 	smulbb	lr, lr, r0
 801d716:	9800      	ldr	r0, [sp, #0]
 801d718:	f3c2 1247 	ubfx	r2, r2, #5, #8
 801d71c:	b289      	uxth	r1, r1
 801d71e:	fb02 e200 	mla	r2, r2, r0, lr
 801d722:	b290      	uxth	r0, r2
 801d724:	1c4a      	adds	r2, r1, #1
 801d726:	b29b      	uxth	r3, r3
 801d728:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d72c:	1c42      	adds	r2, r0, #1
 801d72e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d732:	1c58      	adds	r0, r3, #1
 801d734:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d738:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d73c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d740:	0940      	lsrs	r0, r0, #5
 801d742:	4311      	orrs	r1, r2
 801d744:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d748:	4301      	orrs	r1, r0
 801d74a:	8029      	strh	r1, [r5, #0]
 801d74c:	9b04      	ldr	r3, [sp, #16]
 801d74e:	449c      	add	ip, r3
 801d750:	9b05      	ldr	r3, [sp, #20]
 801d752:	449a      	add	sl, r3
 801d754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d756:	3301      	adds	r3, #1
 801d758:	3502      	adds	r5, #2
 801d75a:	930c      	str	r3, [sp, #48]	; 0x30
 801d75c:	e67d      	b.n	801d45a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1392>
 801d75e:	4b9a      	ldr	r3, [pc, #616]	; (801d9c8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801d760:	ea03 2101 	and.w	r1, r3, r1, lsl #8
 801d764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d766:	00c0      	lsls	r0, r0, #3
 801d768:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801d76c:	4319      	orrs	r1, r3
 801d76e:	f400 63fc 	and.w	r3, r0, #2016	; 0x7e0
 801d772:	4319      	orrs	r1, r3
 801d774:	e7e9      	b.n	801d74a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1682>
 801d776:	4b94      	ldr	r3, [pc, #592]	; (801d9c8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801d778:	ea03 2211 	and.w	r2, r3, r1, lsr #8
 801d77c:	094b      	lsrs	r3, r1, #5
 801d77e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d782:	4313      	orrs	r3, r2
 801d784:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d788:	4319      	orrs	r1, r3
 801d78a:	8039      	strh	r1, [r7, #0]
 801d78c:	e71d      	b.n	801d5ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801d78e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d790:	685b      	ldr	r3, [r3, #4]
 801d792:	781b      	ldrb	r3, [r3, #0]
 801d794:	2b01      	cmp	r3, #1
 801d796:	d032      	beq.n	801d7fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1736>
 801d798:	f0c0 8098 	bcc.w	801d8cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1804>
 801d79c:	2b02      	cmp	r3, #2
 801d79e:	f47e add3 	bne.w	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801d7a2:	9b06      	ldr	r3, [sp, #24]
 801d7a4:	2bff      	cmp	r3, #255	; 0xff
 801d7a6:	f040 8111 	bne.w	801d9cc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1904>
 801d7aa:	2200      	movs	r2, #0
 801d7ac:	9b01      	ldr	r3, [sp, #4]
 801d7ae:	4293      	cmp	r3, r2
 801d7b0:	f77f ae58 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d7b4:	9903      	ldr	r1, [sp, #12]
 801d7b6:	ea4f 432c 	mov.w	r3, ip, asr #16
 801d7ba:	ea4f 402a 	mov.w	r0, sl, asr #16
 801d7be:	b159      	cbz	r1, 801d7d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1710>
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	db16      	blt.n	801d7f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801d7c4:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801d7c8:	428b      	cmp	r3, r1
 801d7ca:	da12      	bge.n	801d7f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801d7cc:	2800      	cmp	r0, #0
 801d7ce:	db10      	blt.n	801d7f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801d7d0:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801d7d4:	4288      	cmp	r0, r1
 801d7d6:	da0c      	bge.n	801d7f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801d7d8:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801d7dc:	9c02      	ldr	r4, [sp, #8]
 801d7de:	fb00 4101 	mla	r1, r0, r1, r4
 801d7e2:	5cc9      	ldrb	r1, [r1, r3]
 801d7e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d7e6:	3102      	adds	r1, #2
 801d7e8:	685b      	ldr	r3, [r3, #4]
 801d7ea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801d7ee:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
 801d7f2:	9b04      	ldr	r3, [sp, #16]
 801d7f4:	449c      	add	ip, r3
 801d7f6:	9b05      	ldr	r3, [sp, #20]
 801d7f8:	3201      	adds	r2, #1
 801d7fa:	449a      	add	sl, r3
 801d7fc:	e7d6      	b.n	801d7ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16e4>
 801d7fe:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801d802:	4658      	mov	r0, fp
 801d804:	2600      	movs	r6, #0
 801d806:	f04f 0903 	mov.w	r9, #3
 801d80a:	9b01      	ldr	r3, [sp, #4]
 801d80c:	42b3      	cmp	r3, r6
 801d80e:	f77f ae29 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d812:	9a03      	ldr	r2, [sp, #12]
 801d814:	ea4f 432c 	mov.w	r3, ip, asr #16
 801d818:	ea4f 412a 	mov.w	r1, sl, asr #16
 801d81c:	b15a      	cbz	r2, 801d836 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x176e>
 801d81e:	2b00      	cmp	r3, #0
 801d820:	db4d      	blt.n	801d8be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801d822:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d826:	4293      	cmp	r3, r2
 801d828:	da49      	bge.n	801d8be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801d82a:	2900      	cmp	r1, #0
 801d82c:	db47      	blt.n	801d8be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801d82e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801d832:	4291      	cmp	r1, r2
 801d834:	da43      	bge.n	801d8be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801d836:	9c02      	ldr	r4, [sp, #8]
 801d838:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d83c:	fb01 4202 	mla	r2, r1, r2, r4
 801d840:	5cd4      	ldrb	r4, [r2, r3]
 801d842:	2304      	movs	r3, #4
 801d844:	fb19 3404 	smlabb	r4, r9, r4, r3
 801d848:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d84a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801d84e:	9b06      	ldr	r3, [sp, #24]
 801d850:	2bff      	cmp	r3, #255	; 0xff
 801d852:	eb0e 0504 	add.w	r5, lr, r4
 801d856:	f000 809c 	beq.w	801d992 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18ca>
 801d85a:	8801      	ldrh	r1, [r0, #0]
 801d85c:	78ab      	ldrb	r3, [r5, #2]
 801d85e:	f8bd 8000 	ldrh.w	r8, [sp]
 801d862:	786d      	ldrb	r5, [r5, #1]
 801d864:	f81e 4004 	ldrb.w	r4, [lr, r4]
 801d868:	120a      	asrs	r2, r1, #8
 801d86a:	fb13 f308 	smulbb	r3, r3, r8
 801d86e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d872:	fb02 3207 	mla	r2, r2, r7, r3
 801d876:	10cb      	asrs	r3, r1, #3
 801d878:	fb15 f508 	smulbb	r5, r5, r8
 801d87c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d880:	00c9      	lsls	r1, r1, #3
 801d882:	fb03 5307 	mla	r3, r3, r7, r5
 801d886:	b2c9      	uxtb	r1, r1
 801d888:	9d00      	ldr	r5, [sp, #0]
 801d88a:	fb11 f107 	smulbb	r1, r1, r7
 801d88e:	fb04 1405 	mla	r4, r4, r5, r1
 801d892:	b292      	uxth	r2, r2
 801d894:	b29b      	uxth	r3, r3
 801d896:	b2a4      	uxth	r4, r4
 801d898:	1c51      	adds	r1, r2, #1
 801d89a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d89e:	1c5d      	adds	r5, r3, #1
 801d8a0:	1c61      	adds	r1, r4, #1
 801d8a2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 801d8a6:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 801d8aa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801d8ae:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801d8b2:	096d      	lsrs	r5, r5, #5
 801d8b4:	430a      	orrs	r2, r1
 801d8b6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d8ba:	432a      	orrs	r2, r5
 801d8bc:	8002      	strh	r2, [r0, #0]
 801d8be:	9b04      	ldr	r3, [sp, #16]
 801d8c0:	449c      	add	ip, r3
 801d8c2:	9b05      	ldr	r3, [sp, #20]
 801d8c4:	3002      	adds	r0, #2
 801d8c6:	449a      	add	sl, r3
 801d8c8:	3601      	adds	r6, #1
 801d8ca:	e79e      	b.n	801d80a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1742>
 801d8cc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801d8d0:	465c      	mov	r4, fp
 801d8d2:	2500      	movs	r5, #0
 801d8d4:	9b01      	ldr	r3, [sp, #4]
 801d8d6:	42ab      	cmp	r3, r5
 801d8d8:	f77f adc4 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d8dc:	9a03      	ldr	r2, [sp, #12]
 801d8de:	ea4f 432c 	mov.w	r3, ip, asr #16
 801d8e2:	ea4f 412a 	mov.w	r1, sl, asr #16
 801d8e6:	b15a      	cbz	r2, 801d900 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1838>
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	db4b      	blt.n	801d984 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801d8ec:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d8f0:	4293      	cmp	r3, r2
 801d8f2:	da47      	bge.n	801d984 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801d8f4:	2900      	cmp	r1, #0
 801d8f6:	db45      	blt.n	801d984 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801d8f8:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801d8fc:	4291      	cmp	r1, r2
 801d8fe:	da41      	bge.n	801d984 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801d900:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d904:	9802      	ldr	r0, [sp, #8]
 801d906:	fb01 0202 	mla	r2, r1, r2, r0
 801d90a:	5cd2      	ldrb	r2, [r2, r3]
 801d90c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d90e:	3201      	adds	r2, #1
 801d910:	685b      	ldr	r3, [r3, #4]
 801d912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d916:	9a06      	ldr	r2, [sp, #24]
 801d918:	2aff      	cmp	r2, #255	; 0xff
 801d91a:	d049      	beq.n	801d9b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18e8>
 801d91c:	8822      	ldrh	r2, [r4, #0]
 801d91e:	f8bd 7000 	ldrh.w	r7, [sp]
 801d922:	f8bd e000 	ldrh.w	lr, [sp]
 801d926:	1210      	asrs	r0, r2, #8
 801d928:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801d92c:	fb11 f107 	smulbb	r1, r1, r7
 801d930:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d934:	fb00 1006 	mla	r0, r0, r6, r1
 801d938:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801d93c:	10d1      	asrs	r1, r2, #3
 801d93e:	b2db      	uxtb	r3, r3
 801d940:	00d2      	lsls	r2, r2, #3
 801d942:	fb17 f70e 	smulbb	r7, r7, lr
 801d946:	b2d2      	uxtb	r2, r2
 801d948:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d94c:	fb13 f30e 	smulbb	r3, r3, lr
 801d950:	b280      	uxth	r0, r0
 801d952:	fb01 7106 	mla	r1, r1, r6, r7
 801d956:	fb02 3306 	mla	r3, r2, r6, r3
 801d95a:	b289      	uxth	r1, r1
 801d95c:	b29b      	uxth	r3, r3
 801d95e:	1c42      	adds	r2, r0, #1
 801d960:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d964:	1c4f      	adds	r7, r1, #1
 801d966:	1c5a      	adds	r2, r3, #1
 801d968:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d96c:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801d970:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d974:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d978:	097f      	lsrs	r7, r7, #5
 801d97a:	4318      	orrs	r0, r3
 801d97c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d980:	4338      	orrs	r0, r7
 801d982:	8020      	strh	r0, [r4, #0]
 801d984:	9b04      	ldr	r3, [sp, #16]
 801d986:	449c      	add	ip, r3
 801d988:	9b05      	ldr	r3, [sp, #20]
 801d98a:	3402      	adds	r4, #2
 801d98c:	449a      	add	sl, r3
 801d98e:	3501      	adds	r5, #1
 801d990:	e7a0      	b.n	801d8d4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x180c>
 801d992:	78ab      	ldrb	r3, [r5, #2]
 801d994:	4a0c      	ldr	r2, [pc, #48]	; (801d9c8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801d996:	ea02 2303 	and.w	r3, r2, r3, lsl #8
 801d99a:	786a      	ldrb	r2, [r5, #1]
 801d99c:	00d2      	lsls	r2, r2, #3
 801d99e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d9a2:	4313      	orrs	r3, r2
 801d9a4:	f81e 2004 	ldrb.w	r2, [lr, r4]
 801d9a8:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801d9ac:	8003      	strh	r3, [r0, #0]
 801d9ae:	e786      	b.n	801d8be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801d9b0:	4a05      	ldr	r2, [pc, #20]	; (801d9c8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801d9b2:	ea02 2113 	and.w	r1, r2, r3, lsr #8
 801d9b6:	095a      	lsrs	r2, r3, #5
 801d9b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d9bc:	430a      	orrs	r2, r1
 801d9be:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801d9c2:	431a      	orrs	r2, r3
 801d9c4:	8022      	strh	r2, [r4, #0]
 801d9c6:	e7dd      	b.n	801d984 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801d9c8:	fffff800 	.word	0xfffff800
 801d9cc:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 801d9d0:	2400      	movs	r4, #0
 801d9d2:	9b01      	ldr	r3, [sp, #4]
 801d9d4:	42a3      	cmp	r3, r4
 801d9d6:	f77f ad45 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d9da:	9a03      	ldr	r2, [sp, #12]
 801d9dc:	ea4f 432c 	mov.w	r3, ip, asr #16
 801d9e0:	ea4f 402a 	mov.w	r0, sl, asr #16
 801d9e4:	b15a      	cbz	r2, 801d9fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1936>
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	db4b      	blt.n	801da82 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801d9ea:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d9ee:	4293      	cmp	r3, r2
 801d9f0:	da47      	bge.n	801da82 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801d9f2:	2800      	cmp	r0, #0
 801d9f4:	db45      	blt.n	801da82 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801d9f6:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801d9fa:	4290      	cmp	r0, r2
 801d9fc:	da41      	bge.n	801da82 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801d9fe:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801da02:	9e02      	ldr	r6, [sp, #8]
 801da04:	f83b 2014 	ldrh.w	r2, [fp, r4, lsl #1]
 801da08:	9f00      	ldr	r7, [sp, #0]
 801da0a:	fb00 6101 	mla	r1, r0, r1, r6
 801da0e:	9e00      	ldr	r6, [sp, #0]
 801da10:	5cc9      	ldrb	r1, [r1, r3]
 801da12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801da14:	3102      	adds	r1, #2
 801da16:	685b      	ldr	r3, [r3, #4]
 801da18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801da1c:	1211      	asrs	r1, r2, #8
 801da1e:	1218      	asrs	r0, r3, #8
 801da20:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801da24:	fb11 f105 	smulbb	r1, r1, r5
 801da28:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801da2c:	fb00 1006 	mla	r0, r0, r6, r1
 801da30:	10d6      	asrs	r6, r2, #3
 801da32:	00d2      	lsls	r2, r2, #3
 801da34:	10d9      	asrs	r1, r3, #3
 801da36:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801da3a:	00db      	lsls	r3, r3, #3
 801da3c:	b2d2      	uxtb	r2, r2
 801da3e:	fb16 f605 	smulbb	r6, r6, r5
 801da42:	fb12 f205 	smulbb	r2, r2, r5
 801da46:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801da4a:	b2db      	uxtb	r3, r3
 801da4c:	b280      	uxth	r0, r0
 801da4e:	fb01 6107 	mla	r1, r1, r7, r6
 801da52:	fb03 2307 	mla	r3, r3, r7, r2
 801da56:	b289      	uxth	r1, r1
 801da58:	b29b      	uxth	r3, r3
 801da5a:	1c42      	adds	r2, r0, #1
 801da5c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801da60:	1c4e      	adds	r6, r1, #1
 801da62:	1c5a      	adds	r2, r3, #1
 801da64:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801da68:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801da6c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801da70:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801da74:	0976      	lsrs	r6, r6, #5
 801da76:	4310      	orrs	r0, r2
 801da78:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801da7c:	4330      	orrs	r0, r6
 801da7e:	f82b 0014 	strh.w	r0, [fp, r4, lsl #1]
 801da82:	9b04      	ldr	r3, [sp, #16]
 801da84:	449c      	add	ip, r3
 801da86:	9b05      	ldr	r3, [sp, #20]
 801da88:	3401      	adds	r4, #1
 801da8a:	449a      	add	sl, r3
 801da8c:	e7a1      	b.n	801d9d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190a>
 801da8e:	00c0      	lsls	r0, r0, #3
 801da90:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 801da94:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801da98:	8038      	strh	r0, [r7, #0]
 801da9a:	f7ff b81a 	b.w	801cad2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801da9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801daa0:	685b      	ldr	r3, [r3, #4]
 801daa2:	781d      	ldrb	r5, [r3, #0]
 801daa4:	2d00      	cmp	r5, #0
 801daa6:	f47e ac4f 	bne.w	801c348 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801daaa:	465e      	mov	r6, fp
 801daac:	9b01      	ldr	r3, [sp, #4]
 801daae:	42ab      	cmp	r3, r5
 801dab0:	f77f acd8 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801dab4:	9a03      	ldr	r2, [sp, #12]
 801dab6:	ea4f 432c 	mov.w	r3, ip, asr #16
 801daba:	ea4f 412a 	mov.w	r1, sl, asr #16
 801dabe:	b15a      	cbz	r2, 801dad8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a10>
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	db59      	blt.n	801db78 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801dac4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dac8:	4293      	cmp	r3, r2
 801daca:	da55      	bge.n	801db78 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801dacc:	2900      	cmp	r1, #0
 801dace:	db53      	blt.n	801db78 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801dad0:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801dad4:	4291      	cmp	r1, r2
 801dad6:	da4f      	bge.n	801db78 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801dad8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dadc:	9802      	ldr	r0, [sp, #8]
 801dade:	fb01 0202 	mla	r2, r1, r2, r0
 801dae2:	5cd2      	ldrb	r2, [r2, r3]
 801dae4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801dae6:	3201      	adds	r2, #1
 801dae8:	685b      	ldr	r3, [r3, #4]
 801daea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801daee:	0e11      	lsrs	r1, r2, #24
 801daf0:	d042      	beq.n	801db78 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801daf2:	29ff      	cmp	r1, #255	; 0xff
 801daf4:	d102      	bne.n	801dafc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a34>
 801daf6:	9b06      	ldr	r3, [sp, #24]
 801daf8:	2bff      	cmp	r3, #255	; 0xff
 801dafa:	d044      	beq.n	801db86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1abe>
 801dafc:	9b06      	ldr	r3, [sp, #24]
 801dafe:	8834      	ldrh	r4, [r6, #0]
 801db00:	4359      	muls	r1, r3
 801db02:	1c4b      	adds	r3, r1, #1
 801db04:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801db08:	121b      	asrs	r3, r3, #8
 801db0a:	b29f      	uxth	r7, r3
 801db0c:	1220      	asrs	r0, r4, #8
 801db0e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801db12:	43db      	mvns	r3, r3
 801db14:	b2db      	uxtb	r3, r3
 801db16:	fb11 f107 	smulbb	r1, r1, r7
 801db1a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801db1e:	fb00 1003 	mla	r0, r0, r3, r1
 801db22:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 801db26:	10e1      	asrs	r1, r4, #3
 801db28:	b2d2      	uxtb	r2, r2
 801db2a:	00e4      	lsls	r4, r4, #3
 801db2c:	b2e4      	uxtb	r4, r4
 801db2e:	fb12 f207 	smulbb	r2, r2, r7
 801db32:	fb04 2203 	mla	r2, r4, r3, r2
 801db36:	b280      	uxth	r0, r0
 801db38:	fb1e fe07 	smulbb	lr, lr, r7
 801db3c:	b292      	uxth	r2, r2
 801db3e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801db42:	fb01 e103 	mla	r1, r1, r3, lr
 801db46:	1c43      	adds	r3, r0, #1
 801db48:	f102 0e01 	add.w	lr, r2, #1
 801db4c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801db50:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801db54:	b289      	uxth	r1, r1
 801db56:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801db5a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801db5e:	ea40 000e 	orr.w	r0, r0, lr
 801db62:	f101 0e01 	add.w	lr, r1, #1
 801db66:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 801db6a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801db6e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801db72:	ea40 000e 	orr.w	r0, r0, lr
 801db76:	8030      	strh	r0, [r6, #0]
 801db78:	9b04      	ldr	r3, [sp, #16]
 801db7a:	449c      	add	ip, r3
 801db7c:	9b05      	ldr	r3, [sp, #20]
 801db7e:	3602      	adds	r6, #2
 801db80:	449a      	add	sl, r3
 801db82:	3501      	adds	r5, #1
 801db84:	e792      	b.n	801daac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19e4>
 801db86:	4b67      	ldr	r3, [pc, #412]	; (801dd24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801db88:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 801db8c:	0953      	lsrs	r3, r2, #5
 801db8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801db92:	430b      	orrs	r3, r1
 801db94:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801db98:	4313      	orrs	r3, r2
 801db9a:	8033      	strh	r3, [r6, #0]
 801db9c:	e7ec      	b.n	801db78 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801db9e:	00db      	lsls	r3, r3, #3
 801dba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801dba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dba6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801dbaa:	8013      	strh	r3, [r2, #0]
 801dbac:	f7ff ba57 	b.w	801d05e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801dbb0:	9b06      	ldr	r3, [sp, #24]
 801dbb2:	2bff      	cmp	r3, #255	; 0xff
 801dbb4:	d105      	bne.n	801dbc2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afa>
 801dbb6:	9b07      	ldr	r3, [sp, #28]
 801dbb8:	9a01      	ldr	r2, [sp, #4]
 801dbba:	429a      	cmp	r2, r3
 801dbbc:	dc5e      	bgt.n	801dc7c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bb4>
 801dbbe:	4613      	mov	r3, r2
 801dbc0:	e450      	b.n	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801dbc2:	9c07      	ldr	r4, [sp, #28]
 801dbc4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801dbc8:	9b01      	ldr	r3, [sp, #4]
 801dbca:	42a3      	cmp	r3, r4
 801dbcc:	f77f ac4a 	ble.w	801d464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801dbd0:	9b03      	ldr	r3, [sp, #12]
 801dbd2:	ea4f 422c 	mov.w	r2, ip, asr #16
 801dbd6:	ea4f 412a 	mov.w	r1, sl, asr #16
 801dbda:	b15b      	cbz	r3, 801dbf4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b2c>
 801dbdc:	2a00      	cmp	r2, #0
 801dbde:	db47      	blt.n	801dc70 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801dbe0:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801dbe4:	429a      	cmp	r2, r3
 801dbe6:	da43      	bge.n	801dc70 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801dbe8:	2900      	cmp	r1, #0
 801dbea:	db41      	blt.n	801dc70 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801dbec:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801dbf0:	4299      	cmp	r1, r3
 801dbf2:	da3d      	bge.n	801dc70 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801dbf4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801dbf8:	9d00      	ldr	r5, [sp, #0]
 801dbfa:	9f00      	ldr	r7, [sp, #0]
 801dbfc:	fb01 2303 	mla	r3, r1, r3, r2
 801dc00:	9a02      	ldr	r2, [sp, #8]
 801dc02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dc06:	f83b 2014 	ldrh.w	r2, [fp, r4, lsl #1]
 801dc0a:	1211      	asrs	r1, r2, #8
 801dc0c:	1218      	asrs	r0, r3, #8
 801dc0e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801dc12:	fb11 f106 	smulbb	r1, r1, r6
 801dc16:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dc1a:	fb00 1005 	mla	r0, r0, r5, r1
 801dc1e:	10d5      	asrs	r5, r2, #3
 801dc20:	00d2      	lsls	r2, r2, #3
 801dc22:	10d9      	asrs	r1, r3, #3
 801dc24:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dc28:	00db      	lsls	r3, r3, #3
 801dc2a:	b2d2      	uxtb	r2, r2
 801dc2c:	fb15 f506 	smulbb	r5, r5, r6
 801dc30:	fb12 f206 	smulbb	r2, r2, r6
 801dc34:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dc38:	b2db      	uxtb	r3, r3
 801dc3a:	b280      	uxth	r0, r0
 801dc3c:	fb01 5107 	mla	r1, r1, r7, r5
 801dc40:	fb03 2307 	mla	r3, r3, r7, r2
 801dc44:	b289      	uxth	r1, r1
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	1c42      	adds	r2, r0, #1
 801dc4a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801dc4e:	1c4d      	adds	r5, r1, #1
 801dc50:	1c5a      	adds	r2, r3, #1
 801dc52:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dc56:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801dc5a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801dc5e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801dc62:	096d      	lsrs	r5, r5, #5
 801dc64:	4310      	orrs	r0, r2
 801dc66:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dc6a:	4328      	orrs	r0, r5
 801dc6c:	f82b 0014 	strh.w	r0, [fp, r4, lsl #1]
 801dc70:	9b04      	ldr	r3, [sp, #16]
 801dc72:	449c      	add	ip, r3
 801dc74:	9b05      	ldr	r3, [sp, #20]
 801dc76:	3401      	adds	r4, #1
 801dc78:	449a      	add	sl, r3
 801dc7a:	e7a5      	b.n	801dbc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b00>
 801dc7c:	9a03      	ldr	r2, [sp, #12]
 801dc7e:	ea4f 412c 	mov.w	r1, ip, asr #16
 801dc82:	ea4f 402a 	mov.w	r0, sl, asr #16
 801dc86:	b15a      	cbz	r2, 801dca0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bd8>
 801dc88:	2900      	cmp	r1, #0
 801dc8a:	db12      	blt.n	801dcb2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801dc8c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dc90:	4291      	cmp	r1, r2
 801dc92:	da0e      	bge.n	801dcb2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801dc94:	2800      	cmp	r0, #0
 801dc96:	db0c      	blt.n	801dcb2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801dc98:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801dc9c:	4290      	cmp	r0, r2
 801dc9e:	da08      	bge.n	801dcb2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801dca0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801dca4:	fb00 1202 	mla	r2, r0, r2, r1
 801dca8:	9902      	ldr	r1, [sp, #8]
 801dcaa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 801dcae:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
 801dcb2:	9a04      	ldr	r2, [sp, #16]
 801dcb4:	4494      	add	ip, r2
 801dcb6:	9a05      	ldr	r2, [sp, #20]
 801dcb8:	3301      	adds	r3, #1
 801dcba:	4492      	add	sl, r2
 801dcbc:	e77c      	b.n	801dbb8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1af0>
 801dcbe:	4b19      	ldr	r3, [pc, #100]	; (801dd24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801dcc0:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 801dcc4:	0953      	lsrs	r3, r2, #5
 801dcc6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dcca:	430b      	orrs	r3, r1
 801dccc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801dcd0:	4313      	orrs	r3, r2
 801dcd2:	802b      	strh	r3, [r5, #0]
 801dcd4:	f7fe bf6b 	b.w	801cbae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801dcd8:	4a12      	ldr	r2, [pc, #72]	; (801dd24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801dcda:	ea02 2113 	and.w	r1, r2, r3, lsr #8
 801dcde:	095a      	lsrs	r2, r3, #5
 801dce0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dce4:	430a      	orrs	r2, r1
 801dce6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dcea:	431a      	orrs	r2, r3
 801dcec:	8022      	strh	r2, [r4, #0]
 801dcee:	f7fe bb9d 	b.w	801c42c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801dcf2:	00c0      	lsls	r0, r0, #3
 801dcf4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 801dcf8:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801dcfc:	8038      	strh	r0, [r7, #0]
 801dcfe:	f7fe bd39 	b.w	801c774 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801dd02:	4b08      	ldr	r3, [pc, #32]	; (801dd24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801dd04:	ea03 2211 	and.w	r2, r3, r1, lsr #8
 801dd08:	094b      	lsrs	r3, r1, #5
 801dd0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dd0e:	4313      	orrs	r3, r2
 801dd10:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801dd14:	4319      	orrs	r1, r3
 801dd16:	8039      	strh	r1, [r7, #0]
 801dd18:	f7fe bff4 	b.w	801cd04 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801dd1c:	b019      	add	sp, #100	; 0x64
 801dd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd22:	bf00      	nop
 801dd24:	fffff800 	.word	0xfffff800

0801dd28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801dd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd2c:	b08d      	sub	sp, #52	; 0x34
 801dd2e:	460f      	mov	r7, r1
 801dd30:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801dd34:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801dd38:	4616      	mov	r6, r2
 801dd3a:	f1b9 0f00 	cmp.w	r9, #0
 801dd3e:	d047      	beq.n	801ddd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa8>
 801dd40:	6810      	ldr	r0, [r2, #0]
 801dd42:	6851      	ldr	r1, [r2, #4]
 801dd44:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801df10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801dd48:	ad08      	add	r5, sp, #32
 801dd4a:	c503      	stmia	r5!, {r0, r1}
 801dd4c:	6818      	ldr	r0, [r3, #0]
 801dd4e:	6859      	ldr	r1, [r3, #4]
 801dd50:	ad0a      	add	r5, sp, #40	; 0x28
 801dd52:	c503      	stmia	r5!, {r0, r1}
 801dd54:	a808      	add	r0, sp, #32
 801dd56:	f7fb fd1d 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd5a:	4631      	mov	r1, r6
 801dd5c:	a80a      	add	r0, sp, #40	; 0x28
 801dd5e:	f7fb fd01 	bl	8019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd62:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dd66:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801dd6a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801dd6e:	f8d8 0000 	ldr.w	r0, [r8]
 801dd72:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801dd76:	fb16 2103 	smlabb	r1, r6, r3, r2
 801dd7a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801dd7e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801dd82:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 801dd86:	440a      	add	r2, r1
 801dd88:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801dd8c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dd90:	4413      	add	r3, r2
 801dd92:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801dd96:	6803      	ldr	r3, [r0, #0]
 801dd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd9a:	4798      	blx	r3
 801dd9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dda0:	d019      	beq.n	801ddd6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801dda2:	f010 0f04 	tst.w	r0, #4
 801dda6:	d01a      	beq.n	801ddde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb6>
 801dda8:	f8d8 0000 	ldr.w	r0, [r8]
 801ddac:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ddb0:	6801      	ldr	r1, [r0, #0]
 801ddb2:	9404      	str	r4, [sp, #16]
 801ddb4:	b2bf      	uxth	r7, r7
 801ddb6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801ddba:	f8cd 900c 	str.w	r9, [sp, #12]
 801ddbe:	b2ad      	uxth	r5, r5
 801ddc0:	9402      	str	r4, [sp, #8]
 801ddc2:	9701      	str	r7, [sp, #4]
 801ddc4:	9500      	str	r5, [sp, #0]
 801ddc6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801ddc8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ddcc:	4631      	mov	r1, r6
 801ddce:	47a0      	blx	r4
 801ddd0:	b00d      	add	sp, #52	; 0x34
 801ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddd6:	b914      	cbnz	r4, 801ddde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb6>
 801ddd8:	f010 0f01 	tst.w	r0, #1
 801dddc:	e7e3      	b.n	801dda6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801ddde:	f8d8 0000 	ldr.w	r0, [r8]
 801dde2:	6803      	ldr	r3, [r0, #0]
 801dde4:	6a1b      	ldr	r3, [r3, #32]
 801dde6:	4798      	blx	r3
 801dde8:	4a48      	ldr	r2, [pc, #288]	; (801df0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801ddea:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801ddee:	8814      	ldrh	r4, [r2, #0]
 801ddf0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ddf4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ddf8:	fb01 3404 	mla	r4, r1, r4, r3
 801ddfc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801de00:	4692      	mov	sl, r2
 801de02:	d064      	beq.n	801dece <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a6>
 801de04:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 801de08:	005b      	lsls	r3, r3, #1
 801de0a:	f1c9 0cff 	rsb	ip, r9, #255	; 0xff
 801de0e:	9306      	str	r3, [sp, #24]
 801de10:	f04f 0a00 	mov.w	sl, #0
 801de14:	fa1f f389 	uxth.w	r3, r9
 801de18:	fa1f fc8c 	uxth.w	ip, ip
 801de1c:	9207      	str	r2, [sp, #28]
 801de1e:	45ba      	cmp	sl, r7
 801de20:	da6e      	bge.n	801df00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>
 801de22:	46a3      	mov	fp, r4
 801de24:	f04f 0900 	mov.w	r9, #0
 801de28:	45a9      	cmp	r9, r5
 801de2a:	da40      	bge.n	801deae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x186>
 801de2c:	f8bb 1000 	ldrh.w	r1, [fp]
 801de30:	f836 2019 	ldrh.w	r2, [r6, r9, lsl #1]
 801de34:	1208      	asrs	r0, r1, #8
 801de36:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801de3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801de3e:	fb10 f00c 	smulbb	r0, r0, ip
 801de42:	ea4f 08e1 	mov.w	r8, r1, asr #3
 801de46:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801de4a:	00c9      	lsls	r1, r1, #3
 801de4c:	fb0e 0e03 	mla	lr, lr, r3, r0
 801de50:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801de54:	10d0      	asrs	r0, r2, #3
 801de56:	b2c9      	uxtb	r1, r1
 801de58:	00d2      	lsls	r2, r2, #3
 801de5a:	fb18 f80c 	smulbb	r8, r8, ip
 801de5e:	fb11 f10c 	smulbb	r1, r1, ip
 801de62:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801de66:	b2d2      	uxtb	r2, r2
 801de68:	fa1f fe8e 	uxth.w	lr, lr
 801de6c:	fb00 8003 	mla	r0, r0, r3, r8
 801de70:	fb02 1203 	mla	r2, r2, r3, r1
 801de74:	b280      	uxth	r0, r0
 801de76:	b292      	uxth	r2, r2
 801de78:	f10e 0101 	add.w	r1, lr, #1
 801de7c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 801de80:	f100 0801 	add.w	r8, r0, #1
 801de84:	1c51      	adds	r1, r2, #1
 801de86:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801de8a:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801de8e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801de92:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801de96:	0940      	lsrs	r0, r0, #5
 801de98:	ea4e 0e01 	orr.w	lr, lr, r1
 801de9c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dea0:	ea4e 0e00 	orr.w	lr, lr, r0
 801dea4:	f82b eb02 	strh.w	lr, [fp], #2
 801dea8:	f109 0901 	add.w	r9, r9, #1
 801deac:	e7bc      	b.n	801de28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x100>
 801deae:	9a07      	ldr	r2, [sp, #28]
 801deb0:	9906      	ldr	r1, [sp, #24]
 801deb2:	8812      	ldrh	r2, [r2, #0]
 801deb4:	1b52      	subs	r2, r2, r5
 801deb6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801deba:	4414      	add	r4, r2
 801debc:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801dec0:	1b52      	subs	r2, r2, r5
 801dec2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801dec6:	4416      	add	r6, r2
 801dec8:	f10a 0a01 	add.w	sl, sl, #1
 801decc:	e7a7      	b.n	801de1e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf6>
 801dece:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801ded2:	f04f 0900 	mov.w	r9, #0
 801ded6:	45b9      	cmp	r9, r7
 801ded8:	da12      	bge.n	801df00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>
 801deda:	f8d8 0000 	ldr.w	r0, [r8]
 801dede:	6803      	ldr	r3, [r0, #0]
 801dee0:	4632      	mov	r2, r6
 801dee2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 801dee4:	4621      	mov	r1, r4
 801dee6:	465b      	mov	r3, fp
 801dee8:	47a8      	blx	r5
 801deea:	f8ba 3000 	ldrh.w	r3, [sl]
 801deee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801def2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801def6:	f109 0901 	add.w	r9, r9, #1
 801defa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801defe:	e7ea      	b.n	801ded6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 801df00:	4b03      	ldr	r3, [pc, #12]	; (801df10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>)
 801df02:	6818      	ldr	r0, [r3, #0]
 801df04:	6803      	ldr	r3, [r0, #0]
 801df06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df08:	4798      	blx	r3
 801df0a:	e761      	b.n	801ddd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa8>
 801df0c:	20009ab8 	.word	0x20009ab8
 801df10:	20009ac0 	.word	0x20009ac0

0801df14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df18:	4615      	mov	r5, r2
 801df1a:	b08b      	sub	sp, #44	; 0x2c
 801df1c:	461c      	mov	r4, r3
 801df1e:	b13b      	cbz	r3, 801df30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801df20:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801df24:	b123      	cbz	r3, 801df30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801df26:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	f040 809d 	bne.w	801e06a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 801df30:	b00b      	add	sp, #44	; 0x2c
 801df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df36:	f010 0f08 	tst.w	r0, #8
 801df3a:	d010      	beq.n	801df5e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4a>
 801df3c:	6830      	ldr	r0, [r6, #0]
 801df3e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801df42:	6801      	ldr	r1, [r0, #0]
 801df44:	9402      	str	r4, [sp, #8]
 801df46:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801df4a:	9401      	str	r4, [sp, #4]
 801df4c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801df50:	9400      	str	r4, [sp, #0]
 801df52:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801df54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801df58:	4629      	mov	r1, r5
 801df5a:	47a0      	blx	r4
 801df5c:	e7e8      	b.n	801df30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801df5e:	6830      	ldr	r0, [r6, #0]
 801df60:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801df64:	6803      	ldr	r3, [r0, #0]
 801df66:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801df6a:	6a1b      	ldr	r3, [r3, #32]
 801df6c:	4798      	blx	r3
 801df6e:	4a48      	ldr	r2, [pc, #288]	; (801e090 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>)
 801df70:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801df74:	8816      	ldrh	r6, [r2, #0]
 801df76:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801df7a:	2cff      	cmp	r4, #255	; 0xff
 801df7c:	fb06 1303 	mla	r3, r6, r3, r1
 801df80:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801df84:	4616      	mov	r6, r2
 801df86:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801df8a:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 801df8e:	d054      	beq.n	801e03a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x126>
 801df90:	122b      	asrs	r3, r5, #8
 801df92:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 801df96:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801df9a:	b2a4      	uxth	r4, r4
 801df9c:	4363      	muls	r3, r4
 801df9e:	9305      	str	r3, [sp, #20]
 801dfa0:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 801dfa4:	00eb      	lsls	r3, r5, #3
 801dfa6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dfaa:	b2db      	uxtb	r3, r3
 801dfac:	0049      	lsls	r1, r1, #1
 801dfae:	4366      	muls	r6, r4
 801dfb0:	4363      	muls	r3, r4
 801dfb2:	9106      	str	r1, [sp, #24]
 801dfb4:	f04f 0e00 	mov.w	lr, #0
 801dfb8:	b2bf      	uxth	r7, r7
 801dfba:	9207      	str	r2, [sp, #28]
 801dfbc:	45ce      	cmp	lr, r9
 801dfbe:	da4e      	bge.n	801e05e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801dfc0:	4682      	mov	sl, r0
 801dfc2:	f04f 0c00 	mov.w	ip, #0
 801dfc6:	45c4      	cmp	ip, r8
 801dfc8:	da2d      	bge.n	801e026 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x112>
 801dfca:	f8ba 2000 	ldrh.w	r2, [sl]
 801dfce:	9905      	ldr	r1, [sp, #20]
 801dfd0:	1214      	asrs	r4, r2, #8
 801dfd2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801dfd6:	fb14 f407 	smulbb	r4, r4, r7
 801dfda:	440c      	add	r4, r1
 801dfdc:	10d1      	asrs	r1, r2, #3
 801dfde:	00d2      	lsls	r2, r2, #3
 801dfe0:	b2d2      	uxtb	r2, r2
 801dfe2:	fb12 f207 	smulbb	r2, r2, r7
 801dfe6:	b2a4      	uxth	r4, r4
 801dfe8:	441a      	add	r2, r3
 801dfea:	b292      	uxth	r2, r2
 801dfec:	1c65      	adds	r5, r4, #1
 801dfee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dff2:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801dff6:	fb11 f107 	smulbb	r1, r1, r7
 801dffa:	1c55      	adds	r5, r2, #1
 801dffc:	4431      	add	r1, r6
 801dffe:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801e002:	b289      	uxth	r1, r1
 801e004:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e008:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e00c:	4314      	orrs	r4, r2
 801e00e:	1c4a      	adds	r2, r1, #1
 801e010:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e014:	0949      	lsrs	r1, r1, #5
 801e016:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e01a:	430c      	orrs	r4, r1
 801e01c:	f82a 4b02 	strh.w	r4, [sl], #2
 801e020:	f10c 0c01 	add.w	ip, ip, #1
 801e024:	e7cf      	b.n	801dfc6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801e026:	9a07      	ldr	r2, [sp, #28]
 801e028:	9906      	ldr	r1, [sp, #24]
 801e02a:	8812      	ldrh	r2, [r2, #0]
 801e02c:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 801e030:	440a      	add	r2, r1
 801e032:	4410      	add	r0, r2
 801e034:	f10e 0e01 	add.w	lr, lr, #1
 801e038:	e7c0      	b.n	801dfbc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa8>
 801e03a:	0049      	lsls	r1, r1, #1
 801e03c:	2200      	movs	r2, #0
 801e03e:	454a      	cmp	r2, r9
 801e040:	da0d      	bge.n	801e05e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801e042:	2300      	movs	r3, #0
 801e044:	4543      	cmp	r3, r8
 801e046:	da03      	bge.n	801e050 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x13c>
 801e048:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801e04c:	3301      	adds	r3, #1
 801e04e:	e7f9      	b.n	801e044 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x130>
 801e050:	8833      	ldrh	r3, [r6, #0]
 801e052:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 801e056:	440b      	add	r3, r1
 801e058:	4418      	add	r0, r3
 801e05a:	3201      	adds	r2, #1
 801e05c:	e7ef      	b.n	801e03e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x12a>
 801e05e:	4b0d      	ldr	r3, [pc, #52]	; (801e094 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>)
 801e060:	6818      	ldr	r0, [r3, #0]
 801e062:	6803      	ldr	r3, [r0, #0]
 801e064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e066:	4798      	blx	r3
 801e068:	e762      	b.n	801df30 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801e06a:	6808      	ldr	r0, [r1, #0]
 801e06c:	6849      	ldr	r1, [r1, #4]
 801e06e:	4e09      	ldr	r6, [pc, #36]	; (801e094 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>)
 801e070:	ab08      	add	r3, sp, #32
 801e072:	c303      	stmia	r3!, {r0, r1}
 801e074:	a808      	add	r0, sp, #32
 801e076:	f7fb fb8d 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e07a:	6830      	ldr	r0, [r6, #0]
 801e07c:	6803      	ldr	r3, [r0, #0]
 801e07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e080:	4798      	blx	r3
 801e082:	2cff      	cmp	r4, #255	; 0xff
 801e084:	f47f af57 	bne.w	801df36 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 801e088:	f010 0f02 	tst.w	r0, #2
 801e08c:	e755      	b.n	801df3a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 801e08e:	bf00      	nop
 801e090:	20009ab8 	.word	0x20009ab8
 801e094:	20009ac0 	.word	0x20009ac0

0801e098 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e09c:	4ea1      	ldr	r6, [pc, #644]	; (801e324 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801e09e:	4690      	mov	r8, r2
 801e0a0:	6832      	ldr	r2, [r6, #0]
 801e0a2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e0a6:	2a02      	cmp	r2, #2
 801e0a8:	b08f      	sub	sp, #60	; 0x3c
 801e0aa:	4605      	mov	r5, r0
 801e0ac:	4689      	mov	r9, r1
 801e0ae:	d106      	bne.n	801e0be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e0b0:	4b9d      	ldr	r3, [pc, #628]	; (801e328 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801e0b2:	4a9e      	ldr	r2, [pc, #632]	; (801e32c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801e0b4:	f240 21a2 	movw	r1, #674	; 0x2a2
 801e0b8:	489d      	ldr	r0, [pc, #628]	; (801e330 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801e0ba:	f001 fb45 	bl	801f748 <__assert_func>
 801e0be:	af0e      	add	r7, sp, #56	; 0x38
 801e0c0:	f827 3d24 	strh.w	r3, [r7, #-36]!
 801e0c4:	4638      	mov	r0, r7
 801e0c6:	f7fd ff91 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e0ca:	682b      	ldr	r3, [r5, #0]
 801e0cc:	4604      	mov	r4, r0
 801e0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0d0:	4628      	mov	r0, r5
 801e0d2:	4798      	blx	r3
 801e0d4:	4284      	cmp	r4, r0
 801e0d6:	d004      	beq.n	801e0e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e0d8:	4b96      	ldr	r3, [pc, #600]	; (801e334 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801e0da:	4a94      	ldr	r2, [pc, #592]	; (801e32c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801e0dc:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 801e0e0:	e7ea      	b.n	801e0b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e0e2:	4638      	mov	r0, r7
 801e0e4:	f7fd ff00 	bl	801bee8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e0e8:	4604      	mov	r4, r0
 801e0ea:	b920      	cbnz	r0, 801e0f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e0ec:	4b92      	ldr	r3, [pc, #584]	; (801e338 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801e0ee:	4a8f      	ldr	r2, [pc, #572]	; (801e32c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801e0f0:	f240 21a6 	movw	r1, #678	; 0x2a6
 801e0f4:	e7e0      	b.n	801e0b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e0f6:	f8d8 0000 	ldr.w	r0, [r8]
 801e0fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e0fe:	f9b8 a000 	ldrsh.w	sl, [r8]
 801e102:	ab06      	add	r3, sp, #24
 801e104:	c303      	stmia	r3!, {r0, r1}
 801e106:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e10a:	f8d9 0000 	ldr.w	r0, [r9]
 801e10e:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801e112:	ab08      	add	r3, sp, #32
 801e114:	c303      	stmia	r3!, {r0, r1}
 801e116:	4638      	mov	r0, r7
 801e118:	f7fd fdde 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e11c:	4680      	mov	r8, r0
 801e11e:	4638      	mov	r0, r7
 801e120:	f7fd fe14 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e124:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e128:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e12c:	f10d 0a20 	add.w	sl, sp, #32
 801e130:	a806      	add	r0, sp, #24
 801e132:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e136:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801e13a:	f7fb fb2b 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e13e:	4650      	mov	r0, sl
 801e140:	f7fb fb28 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e144:	4f7d      	ldr	r7, [pc, #500]	; (801e33c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 801e146:	a80a      	add	r0, sp, #40	; 0x28
 801e148:	f7fb fb24 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e14c:	4b7c      	ldr	r3, [pc, #496]	; (801e340 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a8>)
 801e14e:	f9b7 1000 	ldrsh.w	r1, [r7]
 801e152:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e156:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 801e15a:	2300      	movs	r3, #0
 801e15c:	a90c      	add	r1, sp, #48	; 0x30
 801e15e:	4650      	mov	r0, sl
 801e160:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801e164:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e168:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801e16c:	f7ee fa30 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801e170:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801e174:	f1bc 0f00 	cmp.w	ip, #0
 801e178:	d005      	beq.n	801e186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801e17a:	f9bd e026 	ldrsh.w	lr, [sp, #38]	; 0x26
 801e17e:	f1be 0f00 	cmp.w	lr, #0
 801e182:	f040 80c2 	bne.w	801e30a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x272>
 801e186:	4620      	mov	r0, r4
 801e188:	b00f      	add	sp, #60	; 0x3c
 801e18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e18e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e192:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e196:	429a      	cmp	r2, r3
 801e198:	f2c0 80be 	blt.w	801e318 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e19c:	4460      	add	r0, ip
 801e19e:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801e1a2:	4461      	add	r1, ip
 801e1a4:	b200      	sxth	r0, r0
 801e1a6:	b209      	sxth	r1, r1
 801e1a8:	4288      	cmp	r0, r1
 801e1aa:	f300 80b5 	bgt.w	801e318 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e1ae:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e1b2:	4472      	add	r2, lr
 801e1b4:	440b      	add	r3, r1
 801e1b6:	b212      	sxth	r2, r2
 801e1b8:	b21b      	sxth	r3, r3
 801e1ba:	429a      	cmp	r2, r3
 801e1bc:	f300 80ac 	bgt.w	801e318 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e1c0:	682b      	ldr	r3, [r5, #0]
 801e1c2:	4628      	mov	r0, r5
 801e1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1c6:	4798      	blx	r3
 801e1c8:	4681      	mov	r9, r0
 801e1ca:	6830      	ldr	r0, [r6, #0]
 801e1cc:	6803      	ldr	r3, [r0, #0]
 801e1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1d0:	4798      	blx	r3
 801e1d2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e1d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e1da:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e1de:	1a9b      	subs	r3, r3, r2
 801e1e0:	b29b      	uxth	r3, r3
 801e1e2:	b21d      	sxth	r5, r3
 801e1e4:	2d00      	cmp	r5, #0
 801e1e6:	dc09      	bgt.n	801e1fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801e1e8:	b135      	cbz	r5, 801e1f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801e1ea:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e1ee:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801e1f2:	4413      	add	r3, r2
 801e1f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801e1f8:	4625      	mov	r5, r4
 801e1fa:	e005      	b.n	801e208 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 801e1fc:	ebab 0303 	sub.w	r3, fp, r3
 801e200:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e204:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e208:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801e20c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e210:	1a5b      	subs	r3, r3, r1
 801e212:	b29b      	uxth	r3, r3
 801e214:	b21a      	sxth	r2, r3
 801e216:	2a00      	cmp	r2, #0
 801e218:	dd4d      	ble.n	801e2b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x21e>
 801e21a:	fb0b f202 	mul.w	r2, fp, r2
 801e21e:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801e222:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e226:	1ad3      	subs	r3, r2, r3
 801e228:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e22c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e230:	2b00      	cmp	r3, #0
 801e232:	dda8      	ble.n	801e186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801e234:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
 801e238:	f1be 0f00 	cmp.w	lr, #0
 801e23c:	dda3      	ble.n	801e186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801e23e:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e242:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e246:	fb09 f801 	mul.w	r8, r9, r1
 801e24a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801e24e:	4480      	add	r8, r0
 801e250:	8838      	ldrh	r0, [r7, #0]
 801e252:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e256:	42bb      	cmp	r3, r7
 801e258:	bfa8      	it	ge
 801e25a:	463b      	movge	r3, r7
 801e25c:	1a82      	subs	r2, r0, r2
 801e25e:	4293      	cmp	r3, r2
 801e260:	bfa8      	it	ge
 801e262:	4613      	movge	r3, r2
 801e264:	4a36      	ldr	r2, [pc, #216]	; (801e340 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a8>)
 801e266:	f9bd 7026 	ldrsh.w	r7, [sp, #38]	; 0x26
 801e26a:	8812      	ldrh	r2, [r2, #0]
 801e26c:	4577      	cmp	r7, lr
 801e26e:	eba2 0101 	sub.w	r1, r2, r1
 801e272:	bfa8      	it	ge
 801e274:	4677      	movge	r7, lr
 801e276:	428f      	cmp	r7, r1
 801e278:	463a      	mov	r2, r7
 801e27a:	bfa8      	it	ge
 801e27c:	460a      	movge	r2, r1
 801e27e:	4298      	cmp	r0, r3
 801e280:	9202      	str	r2, [sp, #8]
 801e282:	d12b      	bne.n	801e2dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x244>
 801e284:	4583      	cmp	fp, r0
 801e286:	d129      	bne.n	801e2dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x244>
 801e288:	6830      	ldr	r0, [r6, #0]
 801e28a:	6803      	ldr	r3, [r0, #0]
 801e28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e28e:	4798      	blx	r3
 801e290:	07c3      	lsls	r3, r0, #31
 801e292:	d519      	bpl.n	801e2c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801e294:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e298:	6830      	ldr	r0, [r6, #0]
 801e29a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801e29e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801e2a2:	6803      	ldr	r3, [r0, #0]
 801e2a4:	f8cd b000 	str.w	fp, [sp]
 801e2a8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e2aa:	e89a 0006 	ldmia.w	sl, {r1, r2}
 801e2ae:	462b      	mov	r3, r5
 801e2b0:	47a0      	blx	r4
 801e2b2:	4604      	mov	r4, r0
 801e2b4:	e767      	b.n	801e186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801e2b6:	bf1f      	itttt	ne
 801e2b8:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801e2bc:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 801e2c0:	189b      	addne	r3, r3, r2
 801e2c2:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e2c6:	e7b1      	b.n	801e22c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 801e2c8:	6830      	ldr	r0, [r6, #0]
 801e2ca:	6803      	ldr	r3, [r0, #0]
 801e2cc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801e2ce:	9b02      	ldr	r3, [sp, #8]
 801e2d0:	4642      	mov	r2, r8
 801e2d2:	fb03 f309 	mul.w	r3, r3, r9
 801e2d6:	4629      	mov	r1, r5
 801e2d8:	47b0      	blx	r6
 801e2da:	e754      	b.n	801e186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801e2dc:	005b      	lsls	r3, r3, #1
 801e2de:	9303      	str	r3, [sp, #12]
 801e2e0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801e2e4:	f04f 0a00 	mov.w	sl, #0
 801e2e8:	9b02      	ldr	r3, [sp, #8]
 801e2ea:	459a      	cmp	sl, r3
 801e2ec:	f6bf af4b 	bge.w	801e186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801e2f0:	6830      	ldr	r0, [r6, #0]
 801e2f2:	6803      	ldr	r3, [r0, #0]
 801e2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e2f6:	4642      	mov	r2, r8
 801e2f8:	461f      	mov	r7, r3
 801e2fa:	4629      	mov	r1, r5
 801e2fc:	9b03      	ldr	r3, [sp, #12]
 801e2fe:	47b8      	blx	r7
 801e300:	44c8      	add	r8, r9
 801e302:	445d      	add	r5, fp
 801e304:	f10a 0a01 	add.w	sl, sl, #1
 801e308:	e7ee      	b.n	801e2e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x250>
 801e30a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e30e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e312:	4288      	cmp	r0, r1
 801e314:	f6bf af3b 	bge.w	801e18e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf6>
 801e318:	4b0a      	ldr	r3, [pc, #40]	; (801e344 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ac>)
 801e31a:	4a04      	ldr	r2, [pc, #16]	; (801e32c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801e31c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 801e320:	e6ca      	b.n	801e0b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e322:	bf00      	nop
 801e324:	20009ac0 	.word	0x20009ac0
 801e328:	0802411d 	.word	0x0802411d
 801e32c:	08024638 	.word	0x08024638
 801e330:	080241d1 	.word	0x080241d1
 801e334:	08024203 	.word	0x08024203
 801e338:	08024258 	.word	0x08024258
 801e33c:	20009ab8 	.word	0x20009ab8
 801e340:	20009aba 	.word	0x20009aba
 801e344:	08024296 	.word	0x08024296

0801e348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e34c:	460c      	mov	r4, r1
 801e34e:	b08d      	sub	sp, #52	; 0x34
 801e350:	4680      	mov	r8, r0
 801e352:	6808      	ldr	r0, [r1, #0]
 801e354:	6849      	ldr	r1, [r1, #4]
 801e356:	4699      	mov	r9, r3
 801e358:	ab08      	add	r3, sp, #32
 801e35a:	c303      	stmia	r3!, {r0, r1}
 801e35c:	6810      	ldr	r0, [r2, #0]
 801e35e:	6851      	ldr	r1, [r2, #4]
 801e360:	ab0a      	add	r3, sp, #40	; 0x28
 801e362:	c303      	stmia	r3!, {r0, r1}
 801e364:	a808      	add	r0, sp, #32
 801e366:	f7fb fa15 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e36a:	4621      	mov	r1, r4
 801e36c:	a80a      	add	r0, sp, #40	; 0x28
 801e36e:	f7fb f9f9 	bl	8019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e372:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e376:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e37a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e37e:	4c63      	ldr	r4, [pc, #396]	; (801e50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801e380:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 801e384:	6820      	ldr	r0, [r4, #0]
 801e386:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e38a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e38e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801e392:	440a      	add	r2, r1
 801e394:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e398:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e39c:	4413      	add	r3, r2
 801e39e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e3a2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801e3a6:	9304      	str	r3, [sp, #16]
 801e3a8:	6803      	ldr	r3, [r0, #0]
 801e3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3ac:	4798      	blx	r3
 801e3ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e3b2:	d118      	bne.n	801e3e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801e3b4:	f010 0f20 	tst.w	r0, #32
 801e3b8:	6820      	ldr	r0, [r4, #0]
 801e3ba:	d017      	beq.n	801e3ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801e3bc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801e3c0:	6801      	ldr	r1, [r0, #0]
 801e3c2:	9402      	str	r4, [sp, #8]
 801e3c4:	b2bf      	uxth	r7, r7
 801e3c6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801e3ca:	f8cd 900c 	str.w	r9, [sp, #12]
 801e3ce:	9401      	str	r4, [sp, #4]
 801e3d0:	9700      	str	r7, [sp, #0]
 801e3d2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801e3d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e3d8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e3dc:	4641      	mov	r1, r8
 801e3de:	47a0      	blx	r4
 801e3e0:	b00d      	add	sp, #52	; 0x34
 801e3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e3ea:	e7e5      	b.n	801e3b8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 801e3ec:	6803      	ldr	r3, [r0, #0]
 801e3ee:	6a1b      	ldr	r3, [r3, #32]
 801e3f0:	4798      	blx	r3
 801e3f2:	4a47      	ldr	r2, [pc, #284]	; (801e510 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801e3f4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801e3f8:	8813      	ldrh	r3, [r2, #0]
 801e3fa:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 801e3fe:	9207      	str	r2, [sp, #28]
 801e400:	fb04 1303 	mla	r3, r4, r3, r1
 801e404:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e408:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801e40c:	0099      	lsls	r1, r3, #2
 801e40e:	005b      	lsls	r3, r3, #1
 801e410:	9106      	str	r1, [sp, #24]
 801e412:	9305      	str	r3, [sp, #20]
 801e414:	f04f 0c00 	mov.w	ip, #0
 801e418:	9b04      	ldr	r3, [sp, #16]
 801e41a:	459c      	cmp	ip, r3
 801e41c:	da70      	bge.n	801e500 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>
 801e41e:	4601      	mov	r1, r0
 801e420:	2300      	movs	r3, #0
 801e422:	42bb      	cmp	r3, r7
 801e424:	da5b      	bge.n	801e4de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x196>
 801e426:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
 801e42a:	0e25      	lsrs	r5, r4, #24
 801e42c:	d00f      	beq.n	801e44e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e42e:	2dff      	cmp	r5, #255	; 0xff
 801e430:	d110      	bne.n	801e454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e432:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e436:	d10d      	bne.n	801e454 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e438:	4a36      	ldr	r2, [pc, #216]	; (801e514 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1cc>)
 801e43a:	ea02 2514 	and.w	r5, r2, r4, lsr #8
 801e43e:	0962      	lsrs	r2, r4, #5
 801e440:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e444:	432a      	orrs	r2, r5
 801e446:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e44a:	4322      	orrs	r2, r4
 801e44c:	800a      	strh	r2, [r1, #0]
 801e44e:	3102      	adds	r1, #2
 801e450:	3301      	adds	r3, #1
 801e452:	e7e6      	b.n	801e422 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801e454:	fb09 f505 	mul.w	r5, r9, r5
 801e458:	1c6a      	adds	r2, r5, #1
 801e45a:	f8b1 e000 	ldrh.w	lr, [r1]
 801e45e:	eb02 2225 	add.w	r2, r2, r5, asr #8
 801e462:	1212      	asrs	r2, r2, #8
 801e464:	fa1f fa82 	uxth.w	sl, r2
 801e468:	ea4f 262e 	mov.w	r6, lr, asr #8
 801e46c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801e470:	43d2      	mvns	r2, r2
 801e472:	b2d2      	uxtb	r2, r2
 801e474:	fb15 f50a 	smulbb	r5, r5, sl
 801e478:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e47c:	fb06 5602 	mla	r6, r6, r2, r5
 801e480:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 801e484:	ea4f 05ee 	mov.w	r5, lr, asr #3
 801e488:	b2e4      	uxtb	r4, r4
 801e48a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e48e:	fa5f fe8e 	uxtb.w	lr, lr
 801e492:	fb14 f40a 	smulbb	r4, r4, sl
 801e496:	fb0e 4402 	mla	r4, lr, r2, r4
 801e49a:	b2b6      	uxth	r6, r6
 801e49c:	fb1b fb0a 	smulbb	fp, fp, sl
 801e4a0:	b2a4      	uxth	r4, r4
 801e4a2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e4a6:	fb05 b502 	mla	r5, r5, r2, fp
 801e4aa:	1c72      	adds	r2, r6, #1
 801e4ac:	f104 0b01 	add.w	fp, r4, #1
 801e4b0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e4b4:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 801e4b8:	b2ad      	uxth	r5, r5
 801e4ba:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801e4be:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e4c2:	ea46 060b 	orr.w	r6, r6, fp
 801e4c6:	f105 0b01 	add.w	fp, r5, #1
 801e4ca:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 801e4ce:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e4d2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e4d6:	ea46 060b 	orr.w	r6, r6, fp
 801e4da:	800e      	strh	r6, [r1, #0]
 801e4dc:	e7b7      	b.n	801e44e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e4de:	9b07      	ldr	r3, [sp, #28]
 801e4e0:	9a05      	ldr	r2, [sp, #20]
 801e4e2:	881b      	ldrh	r3, [r3, #0]
 801e4e4:	1bdb      	subs	r3, r3, r7
 801e4e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e4ea:	4418      	add	r0, r3
 801e4ec:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e4f0:	9a06      	ldr	r2, [sp, #24]
 801e4f2:	1bdb      	subs	r3, r3, r7
 801e4f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e4f8:	4498      	add	r8, r3
 801e4fa:	f10c 0c01 	add.w	ip, ip, #1
 801e4fe:	e78b      	b.n	801e418 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e500:	4b02      	ldr	r3, [pc, #8]	; (801e50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801e502:	6818      	ldr	r0, [r3, #0]
 801e504:	6803      	ldr	r3, [r0, #0]
 801e506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e508:	4798      	blx	r3
 801e50a:	e769      	b.n	801e3e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801e50c:	20009ac0 	.word	0x20009ac0
 801e510:	20009ab8 	.word	0x20009ab8
 801e514:	fffff800 	.word	0xfffff800

0801e518 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e518:	b570      	push	{r4, r5, r6, lr}
 801e51a:	9d04      	ldr	r5, [sp, #16]
 801e51c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801e520:	460c      	mov	r4, r1
 801e522:	4619      	mov	r1, r3
 801e524:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e528:	2a0b      	cmp	r2, #11
 801e52a:	d81f      	bhi.n	801e56c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x54>
 801e52c:	e8df f002 	tbb	[pc, r2]
 801e530:	17111706 	.word	0x17111706
 801e534:	17171717 	.word	0x17171717
 801e538:	17171717 	.word	0x17171717
 801e53c:	6802      	ldr	r2, [r0, #0]
 801e53e:	9304      	str	r3, [sp, #16]
 801e540:	9605      	str	r6, [sp, #20]
 801e542:	6916      	ldr	r6, [r2, #16]
 801e544:	462b      	mov	r3, r5
 801e546:	460a      	mov	r2, r1
 801e548:	46b4      	mov	ip, r6
 801e54a:	4621      	mov	r1, r4
 801e54c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e550:	4760      	bx	ip
 801e552:	462a      	mov	r2, r5
 801e554:	4620      	mov	r0, r4
 801e556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e55a:	f7ff bef5 	b.w	801e348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e55e:	4b04      	ldr	r3, [pc, #16]	; (801e570 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801e560:	4a04      	ldr	r2, [pc, #16]	; (801e574 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801e562:	4805      	ldr	r0, [pc, #20]	; (801e578 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e564:	f240 219b 	movw	r1, #667	; 0x29b
 801e568:	f001 f8ee 	bl	801f748 <__assert_func>
 801e56c:	bd70      	pop	{r4, r5, r6, pc}
 801e56e:	bf00      	nop
 801e570:	080242e5 	.word	0x080242e5
 801e574:	080246be 	.word	0x080246be
 801e578:	080241d1 	.word	0x080241d1

0801e57c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e580:	b095      	sub	sp, #84	; 0x54
 801e582:	880d      	ldrh	r5, [r1, #0]
 801e584:	4617      	mov	r7, r2
 801e586:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 801e58a:	920b      	str	r2, [sp, #44]	; 0x2c
 801e58c:	4606      	mov	r6, r0
 801e58e:	4688      	mov	r8, r1
 801e590:	b12d      	cbz	r5, 801e59e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801e592:	4b75      	ldr	r3, [pc, #468]	; (801e768 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 801e594:	4a75      	ldr	r2, [pc, #468]	; (801e76c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f0>)
 801e596:	4876      	ldr	r0, [pc, #472]	; (801e770 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801e598:	21cc      	movs	r1, #204	; 0xcc
 801e59a:	f001 f8d5 	bl	801f748 <__assert_func>
 801e59e:	6838      	ldr	r0, [r7, #0]
 801e5a0:	6879      	ldr	r1, [r7, #4]
 801e5a2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801e778 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1fc>
 801e5a6:	ac10      	add	r4, sp, #64	; 0x40
 801e5a8:	c403      	stmia	r4!, {r0, r1}
 801e5aa:	6818      	ldr	r0, [r3, #0]
 801e5ac:	6859      	ldr	r1, [r3, #4]
 801e5ae:	ac12      	add	r4, sp, #72	; 0x48
 801e5b0:	c403      	stmia	r4!, {r0, r1}
 801e5b2:	a810      	add	r0, sp, #64	; 0x40
 801e5b4:	f7fb f8ee 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e5b8:	4639      	mov	r1, r7
 801e5ba:	a812      	add	r0, sp, #72	; 0x48
 801e5bc:	f7fb f8d2 	bl	8019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e5c0:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801e5c4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 801e5c8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 801e5cc:	f8da 0000 	ldr.w	r0, [sl]
 801e5d0:	f9bd 704c 	ldrsh.w	r7, [sp, #76]	; 0x4c
 801e5d4:	4c67      	ldr	r4, [pc, #412]	; (801e774 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801e5d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e5da:	440e      	add	r6, r1
 801e5dc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801e5e0:	440a      	add	r2, r1
 801e5e2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 801e5e6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e5ea:	4413      	add	r3, r2
 801e5ec:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801e5f0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e5f4:	930c      	str	r3, [sp, #48]	; 0x30
 801e5f6:	6803      	ldr	r3, [r0, #0]
 801e5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e5fc:	4798      	blx	r3
 801e5fe:	2801      	cmp	r0, #1
 801e600:	d11d      	bne.n	801e63e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e602:	220b      	movs	r2, #11
 801e604:	9508      	str	r5, [sp, #32]
 801e606:	9207      	str	r2, [sp, #28]
 801e608:	8822      	ldrh	r2, [r4, #0]
 801e60a:	9206      	str	r2, [sp, #24]
 801e60c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e60e:	9204      	str	r2, [sp, #16]
 801e610:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801e614:	9203      	str	r2, [sp, #12]
 801e616:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e61a:	9202      	str	r2, [sp, #8]
 801e61c:	b2bf      	uxth	r7, r7
 801e61e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 801e622:	9200      	str	r2, [sp, #0]
 801e624:	9005      	str	r0, [sp, #20]
 801e626:	9701      	str	r7, [sp, #4]
 801e628:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e62c:	f8da 0000 	ldr.w	r0, [sl]
 801e630:	4642      	mov	r2, r8
 801e632:	4631      	mov	r1, r6
 801e634:	f7f9 ffa0 	bl	8018578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e638:	b015      	add	sp, #84	; 0x54
 801e63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e63e:	f8da 0000 	ldr.w	r0, [sl]
 801e642:	6803      	ldr	r3, [r0, #0]
 801e644:	6a1b      	ldr	r3, [r3, #32]
 801e646:	4798      	blx	r3
 801e648:	8823      	ldrh	r3, [r4, #0]
 801e64a:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 801e64e:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801e652:	940f      	str	r4, [sp, #60]	; 0x3c
 801e654:	fb01 2303 	mla	r3, r1, r3, r2
 801e658:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e65c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801e660:	930d      	str	r3, [sp, #52]	; 0x34
 801e662:	005b      	lsls	r3, r3, #1
 801e664:	930e      	str	r3, [sp, #56]	; 0x38
 801e666:	46a9      	mov	r9, r5
 801e668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e66a:	4599      	cmp	r9, r3
 801e66c:	da76      	bge.n	801e75c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>
 801e66e:	46b4      	mov	ip, r6
 801e670:	4686      	mov	lr, r0
 801e672:	ebac 0306 	sub.w	r3, ip, r6
 801e676:	429f      	cmp	r7, r3
 801e678:	dd60      	ble.n	801e73c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e67a:	f81c 3b01 	ldrb.w	r3, [ip], #1
 801e67e:	2204      	movs	r2, #4
 801e680:	2104      	movs	r1, #4
 801e682:	fb12 1303 	smlabb	r3, r2, r3, r1
 801e686:	f858 2003 	ldr.w	r2, [r8, r3]
 801e68a:	0e14      	lsrs	r4, r2, #24
 801e68c:	d011      	beq.n	801e6b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x136>
 801e68e:	2cff      	cmp	r4, #255	; 0xff
 801e690:	d112      	bne.n	801e6b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e694:	2bff      	cmp	r3, #255	; 0xff
 801e696:	d10f      	bne.n	801e6b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e698:	f6a3 03ff 	subw	r3, r3, #2303	; 0x8ff
 801e69c:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 801e6a0:	0953      	lsrs	r3, r2, #5
 801e6a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e6a6:	430b      	orrs	r3, r1
 801e6a8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e6ac:	4313      	orrs	r3, r2
 801e6ae:	f8ae 3000 	strh.w	r3, [lr]
 801e6b2:	f10e 0e02 	add.w	lr, lr, #2
 801e6b6:	e7dc      	b.n	801e672 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 801e6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6ba:	f8be 1000 	ldrh.w	r1, [lr]
 801e6be:	435c      	muls	r4, r3
 801e6c0:	1c63      	adds	r3, r4, #1
 801e6c2:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801e6c6:	121b      	asrs	r3, r3, #8
 801e6c8:	fa1f fa83 	uxth.w	sl, r3
 801e6cc:	120d      	asrs	r5, r1, #8
 801e6ce:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801e6d2:	43db      	mvns	r3, r3
 801e6d4:	b2db      	uxtb	r3, r3
 801e6d6:	fb14 f40a 	smulbb	r4, r4, sl
 801e6da:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e6de:	fb05 4503 	mla	r5, r5, r3, r4
 801e6e2:	f3c2 2b07 	ubfx	fp, r2, #8, #8
 801e6e6:	10cc      	asrs	r4, r1, #3
 801e6e8:	b2d2      	uxtb	r2, r2
 801e6ea:	00c9      	lsls	r1, r1, #3
 801e6ec:	b2c9      	uxtb	r1, r1
 801e6ee:	fb12 f20a 	smulbb	r2, r2, sl
 801e6f2:	fb01 2203 	mla	r2, r1, r3, r2
 801e6f6:	b2ad      	uxth	r5, r5
 801e6f8:	fb1b fb0a 	smulbb	fp, fp, sl
 801e6fc:	b292      	uxth	r2, r2
 801e6fe:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e702:	fb04 b403 	mla	r4, r4, r3, fp
 801e706:	1c6b      	adds	r3, r5, #1
 801e708:	f102 0b01 	add.w	fp, r2, #1
 801e70c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e710:	eb0b 2b12 	add.w	fp, fp, r2, lsr #8
 801e714:	b2a4      	uxth	r4, r4
 801e716:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801e71a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e71e:	ea45 050b 	orr.w	r5, r5, fp
 801e722:	f104 0b01 	add.w	fp, r4, #1
 801e726:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 801e72a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e72e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e732:	ea45 050b 	orr.w	r5, r5, fp
 801e736:	f8ae 5000 	strh.w	r5, [lr]
 801e73a:	e7ba      	b.n	801e6b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x136>
 801e73c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e73e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e740:	881b      	ldrh	r3, [r3, #0]
 801e742:	1bdb      	subs	r3, r3, r7
 801e744:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e748:	4418      	add	r0, r3
 801e74a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801e74e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e750:	1bdb      	subs	r3, r3, r7
 801e752:	4413      	add	r3, r2
 801e754:	441e      	add	r6, r3
 801e756:	f109 0901 	add.w	r9, r9, #1
 801e75a:	e785      	b.n	801e668 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801e75c:	4b06      	ldr	r3, [pc, #24]	; (801e778 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801e75e:	6818      	ldr	r0, [r3, #0]
 801e760:	6803      	ldr	r3, [r0, #0]
 801e762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e764:	4798      	blx	r3
 801e766:	e767      	b.n	801e638 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 801e768:	080240cd 	.word	0x080240cd
 801e76c:	08024572 	.word	0x08024572
 801e770:	080241d1 	.word	0x080241d1
 801e774:	20009ab8 	.word	0x20009ab8
 801e778:	20009ac0 	.word	0x20009ac0

0801e77c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e780:	4614      	mov	r4, r2
 801e782:	880a      	ldrh	r2, [r1, #0]
 801e784:	b093      	sub	sp, #76	; 0x4c
 801e786:	2a02      	cmp	r2, #2
 801e788:	4606      	mov	r6, r0
 801e78a:	4689      	mov	r9, r1
 801e78c:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 801e790:	d006      	beq.n	801e7a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801e792:	4b7a      	ldr	r3, [pc, #488]	; (801e97c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801e794:	4a7a      	ldr	r2, [pc, #488]	; (801e980 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801e796:	487b      	ldr	r0, [pc, #492]	; (801e984 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 801e798:	f240 1127 	movw	r1, #295	; 0x127
 801e79c:	f000 ffd4 	bl	801f748 <__assert_func>
 801e7a0:	2f00      	cmp	r7, #0
 801e7a2:	d04b      	beq.n	801e83c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801e7a4:	6820      	ldr	r0, [r4, #0]
 801e7a6:	6861      	ldr	r1, [r4, #4]
 801e7a8:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 801e98c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 801e7ac:	ad0e      	add	r5, sp, #56	; 0x38
 801e7ae:	c503      	stmia	r5!, {r0, r1}
 801e7b0:	6818      	ldr	r0, [r3, #0]
 801e7b2:	6859      	ldr	r1, [r3, #4]
 801e7b4:	ad10      	add	r5, sp, #64	; 0x40
 801e7b6:	c503      	stmia	r5!, {r0, r1}
 801e7b8:	a80e      	add	r0, sp, #56	; 0x38
 801e7ba:	f7fa ffeb 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e7be:	4621      	mov	r1, r4
 801e7c0:	a810      	add	r0, sp, #64	; 0x40
 801e7c2:	f7fa ffcf 	bl	8019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e7c6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e7ca:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e7ce:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e7d2:	f8da 0000 	ldr.w	r0, [sl]
 801e7d6:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 801e7da:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 801e7de:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e7e2:	1874      	adds	r4, r6, r1
 801e7e4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e7e8:	4e67      	ldr	r6, [pc, #412]	; (801e988 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 801e7ea:	440a      	add	r2, r1
 801e7ec:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e7f0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e7f4:	4413      	add	r3, r2
 801e7f6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e7fa:	6803      	ldr	r3, [r0, #0]
 801e7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e800:	4798      	blx	r3
 801e802:	2801      	cmp	r0, #1
 801e804:	d11d      	bne.n	801e842 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801e806:	2200      	movs	r2, #0
 801e808:	210b      	movs	r1, #11
 801e80a:	9208      	str	r2, [sp, #32]
 801e80c:	9107      	str	r1, [sp, #28]
 801e80e:	8831      	ldrh	r1, [r6, #0]
 801e810:	9205      	str	r2, [sp, #20]
 801e812:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e816:	9203      	str	r2, [sp, #12]
 801e818:	fa1f f288 	uxth.w	r2, r8
 801e81c:	9202      	str	r2, [sp, #8]
 801e81e:	b2ad      	uxth	r5, r5
 801e820:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e824:	9106      	str	r1, [sp, #24]
 801e826:	9200      	str	r2, [sp, #0]
 801e828:	9704      	str	r7, [sp, #16]
 801e82a:	9501      	str	r5, [sp, #4]
 801e82c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e830:	f8da 0000 	ldr.w	r0, [sl]
 801e834:	464a      	mov	r2, r9
 801e836:	4621      	mov	r1, r4
 801e838:	f7f9 fe9e 	bl	8018578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e83c:	b013      	add	sp, #76	; 0x4c
 801e83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e842:	f8da 0000 	ldr.w	r0, [sl]
 801e846:	6803      	ldr	r3, [r0, #0]
 801e848:	6a1b      	ldr	r3, [r3, #32]
 801e84a:	4798      	blx	r3
 801e84c:	8833      	ldrh	r3, [r6, #0]
 801e84e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e852:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e856:	fb01 2303 	mla	r3, r1, r3, r2
 801e85a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e85e:	2fff      	cmp	r7, #255	; 0xff
 801e860:	f109 0304 	add.w	r3, r9, #4
 801e864:	930a      	str	r3, [sp, #40]	; 0x28
 801e866:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 801e86a:	d062      	beq.n	801e932 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 801e86c:	b21b      	sxth	r3, r3
 801e86e:	f1c7 0eff 	rsb	lr, r7, #255	; 0xff
 801e872:	930b      	str	r3, [sp, #44]	; 0x2c
 801e874:	005b      	lsls	r3, r3, #1
 801e876:	930c      	str	r3, [sp, #48]	; 0x30
 801e878:	f04f 0900 	mov.w	r9, #0
 801e87c:	b2ba      	uxth	r2, r7
 801e87e:	fa1f fe8e 	uxth.w	lr, lr
 801e882:	960d      	str	r6, [sp, #52]	; 0x34
 801e884:	45c1      	cmp	r9, r8
 801e886:	da72      	bge.n	801e96e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801e888:	46a3      	mov	fp, r4
 801e88a:	4682      	mov	sl, r0
 801e88c:	ebab 0304 	sub.w	r3, fp, r4
 801e890:	429d      	cmp	r5, r3
 801e892:	dd3e      	ble.n	801e912 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x196>
 801e894:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801e898:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e89a:	f8ba 1000 	ldrh.w	r1, [sl]
 801e89e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e8a2:	120e      	asrs	r6, r1, #8
 801e8a4:	121f      	asrs	r7, r3, #8
 801e8a6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e8aa:	fb16 f60e 	smulbb	r6, r6, lr
 801e8ae:	ea4f 0ce1 	mov.w	ip, r1, asr #3
 801e8b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e8b6:	00c9      	lsls	r1, r1, #3
 801e8b8:	fb07 6702 	mla	r7, r7, r2, r6
 801e8bc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e8c0:	10de      	asrs	r6, r3, #3
 801e8c2:	b2c9      	uxtb	r1, r1
 801e8c4:	00db      	lsls	r3, r3, #3
 801e8c6:	fb1c fc0e 	smulbb	ip, ip, lr
 801e8ca:	fb11 f10e 	smulbb	r1, r1, lr
 801e8ce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e8d2:	b2db      	uxtb	r3, r3
 801e8d4:	b2bf      	uxth	r7, r7
 801e8d6:	fb06 c602 	mla	r6, r6, r2, ip
 801e8da:	fb03 1302 	mla	r3, r3, r2, r1
 801e8de:	b2b6      	uxth	r6, r6
 801e8e0:	b29b      	uxth	r3, r3
 801e8e2:	1c79      	adds	r1, r7, #1
 801e8e4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801e8e8:	f106 0c01 	add.w	ip, r6, #1
 801e8ec:	1c59      	adds	r1, r3, #1
 801e8ee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e8f2:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801e8f6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e8fa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801e8fe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e902:	430f      	orrs	r7, r1
 801e904:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e908:	ea47 070c 	orr.w	r7, r7, ip
 801e90c:	f82a 7b02 	strh.w	r7, [sl], #2
 801e910:	e7bc      	b.n	801e88c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x110>
 801e912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e914:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e916:	881b      	ldrh	r3, [r3, #0]
 801e918:	1b5b      	subs	r3, r3, r5
 801e91a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e91e:	4418      	add	r0, r3
 801e920:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e926:	1b5b      	subs	r3, r3, r5
 801e928:	440b      	add	r3, r1
 801e92a:	441c      	add	r4, r3
 801e92c:	f109 0901 	add.w	r9, r9, #1
 801e930:	e7a8      	b.n	801e884 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x108>
 801e932:	b21b      	sxth	r3, r3
 801e934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801e938:	2100      	movs	r1, #0
 801e93a:	4541      	cmp	r1, r8
 801e93c:	da17      	bge.n	801e96e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801e93e:	2200      	movs	r2, #0
 801e940:	42aa      	cmp	r2, r5
 801e942:	da08      	bge.n	801e956 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 801e944:	f814 e002 	ldrb.w	lr, [r4, r2]
 801e948:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e94a:	f837 e01e 	ldrh.w	lr, [r7, lr, lsl #1]
 801e94e:	f820 e012 	strh.w	lr, [r0, r2, lsl #1]
 801e952:	3201      	adds	r2, #1
 801e954:	e7f4      	b.n	801e940 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>
 801e956:	8832      	ldrh	r2, [r6, #0]
 801e958:	1b52      	subs	r2, r2, r5
 801e95a:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 801e95e:	4410      	add	r0, r2
 801e960:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801e964:	1b52      	subs	r2, r2, r5
 801e966:	441a      	add	r2, r3
 801e968:	4414      	add	r4, r2
 801e96a:	3101      	adds	r1, #1
 801e96c:	e7e5      	b.n	801e93a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 801e96e:	4b07      	ldr	r3, [pc, #28]	; (801e98c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 801e970:	6818      	ldr	r0, [r3, #0]
 801e972:	6803      	ldr	r3, [r0, #0]
 801e974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e976:	4798      	blx	r3
 801e978:	e760      	b.n	801e83c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801e97a:	bf00      	nop
 801e97c:	08023f8b 	.word	0x08023f8b
 801e980:	080243dc 	.word	0x080243dc
 801e984:	080241d1 	.word	0x080241d1
 801e988:	20009ab8 	.word	0x20009ab8
 801e98c:	20009ac0 	.word	0x20009ac0

0801e990 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e994:	4615      	mov	r5, r2
 801e996:	880a      	ldrh	r2, [r1, #0]
 801e998:	b095      	sub	sp, #84	; 0x54
 801e99a:	2a01      	cmp	r2, #1
 801e99c:	4606      	mov	r6, r0
 801e99e:	460f      	mov	r7, r1
 801e9a0:	f89d 8078 	ldrb.w	r8, [sp, #120]	; 0x78
 801e9a4:	d006      	beq.n	801e9b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801e9a6:	4b78      	ldr	r3, [pc, #480]	; (801eb88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801e9a8:	4a78      	ldr	r2, [pc, #480]	; (801eb8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801e9aa:	4879      	ldr	r0, [pc, #484]	; (801eb90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x200>)
 801e9ac:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801e9b0:	f000 feca 	bl	801f748 <__assert_func>
 801e9b4:	f1b8 0f00 	cmp.w	r8, #0
 801e9b8:	d04d      	beq.n	801ea56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801e9ba:	6828      	ldr	r0, [r5, #0]
 801e9bc:	6869      	ldr	r1, [r5, #4]
 801e9be:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801eb98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>
 801e9c2:	ac10      	add	r4, sp, #64	; 0x40
 801e9c4:	c403      	stmia	r4!, {r0, r1}
 801e9c6:	6818      	ldr	r0, [r3, #0]
 801e9c8:	6859      	ldr	r1, [r3, #4]
 801e9ca:	ac12      	add	r4, sp, #72	; 0x48
 801e9cc:	c403      	stmia	r4!, {r0, r1}
 801e9ce:	a810      	add	r0, sp, #64	; 0x40
 801e9d0:	f7fa fee0 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e9d4:	4629      	mov	r1, r5
 801e9d6:	a812      	add	r0, sp, #72	; 0x48
 801e9d8:	f7fa fec4 	bl	8019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e9dc:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801e9e0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 801e9e4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 801e9e8:	f8d9 0000 	ldr.w	r0, [r9]
 801e9ec:	4c69      	ldr	r4, [pc, #420]	; (801eb94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x204>)
 801e9ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e9f2:	1875      	adds	r5, r6, r1
 801e9f4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801e9f8:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 801e9fc:	440a      	add	r2, r1
 801e9fe:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 801ea02:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ea06:	4413      	add	r3, r2
 801ea08:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801ea0c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801ea10:	930c      	str	r3, [sp, #48]	; 0x30
 801ea12:	6803      	ldr	r3, [r0, #0]
 801ea14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ea18:	4798      	blx	r3
 801ea1a:	2801      	cmp	r0, #1
 801ea1c:	d11e      	bne.n	801ea5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801ea1e:	2200      	movs	r2, #0
 801ea20:	9208      	str	r2, [sp, #32]
 801ea22:	220b      	movs	r2, #11
 801ea24:	9207      	str	r2, [sp, #28]
 801ea26:	8822      	ldrh	r2, [r4, #0]
 801ea28:	9206      	str	r2, [sp, #24]
 801ea2a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801ea2e:	9203      	str	r2, [sp, #12]
 801ea30:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ea34:	9202      	str	r2, [sp, #8]
 801ea36:	b2b6      	uxth	r6, r6
 801ea38:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 801ea3c:	9200      	str	r2, [sp, #0]
 801ea3e:	9005      	str	r0, [sp, #20]
 801ea40:	f8cd 8010 	str.w	r8, [sp, #16]
 801ea44:	9601      	str	r6, [sp, #4]
 801ea46:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ea4a:	f8d9 0000 	ldr.w	r0, [r9]
 801ea4e:	463a      	mov	r2, r7
 801ea50:	4629      	mov	r1, r5
 801ea52:	f7f9 fd91 	bl	8018578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ea56:	b015      	add	sp, #84	; 0x54
 801ea58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea5c:	f8d9 0000 	ldr.w	r0, [r9]
 801ea60:	6803      	ldr	r3, [r0, #0]
 801ea62:	6a1b      	ldr	r3, [r3, #32]
 801ea64:	4798      	blx	r3
 801ea66:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 801ea6a:	8823      	ldrh	r3, [r4, #0]
 801ea6c:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801ea70:	940f      	str	r4, [sp, #60]	; 0x3c
 801ea72:	fb01 2303 	mla	r3, r1, r3, r2
 801ea76:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ea7a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801ea7e:	930d      	str	r3, [sp, #52]	; 0x34
 801ea80:	ea6f 0108 	mvn.w	r1, r8
 801ea84:	005b      	lsls	r3, r3, #1
 801ea86:	930e      	str	r3, [sp, #56]	; 0x38
 801ea88:	f04f 0a00 	mov.w	sl, #0
 801ea8c:	b2c9      	uxtb	r1, r1
 801ea8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea90:	459a      	cmp	sl, r3
 801ea92:	da72      	bge.n	801eb7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 801ea94:	950b      	str	r5, [sp, #44]	; 0x2c
 801ea96:	4686      	mov	lr, r0
 801ea98:	fa1f fb88 	uxth.w	fp, r8
 801ea9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea9e:	1b5b      	subs	r3, r3, r5
 801eaa0:	429e      	cmp	r6, r3
 801eaa2:	dd5a      	ble.n	801eb5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ca>
 801eaa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eaa6:	f813 cb01 	ldrb.w	ip, [r3], #1
 801eaaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801eaac:	2204      	movs	r2, #4
 801eaae:	2303      	movs	r3, #3
 801eab0:	fb13 2c0c 	smlabb	ip, r3, ip, r2
 801eab4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801eab8:	eb07 090c 	add.w	r9, r7, ip
 801eabc:	d114      	bne.n	801eae8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x158>
 801eabe:	f899 3002 	ldrb.w	r3, [r9, #2]
 801eac2:	f6a2 0204 	subw	r2, r2, #2052	; 0x804
 801eac6:	ea02 2303 	and.w	r3, r2, r3, lsl #8
 801eaca:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eace:	00d2      	lsls	r2, r2, #3
 801ead0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ead4:	4313      	orrs	r3, r2
 801ead6:	f817 200c 	ldrb.w	r2, [r7, ip]
 801eada:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801eade:	f8ae 3000 	strh.w	r3, [lr]
 801eae2:	f10e 0e02 	add.w	lr, lr, #2
 801eae6:	e7d9      	b.n	801ea9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801eae8:	f8be 3000 	ldrh.w	r3, [lr]
 801eaec:	f899 2002 	ldrb.w	r2, [r9, #2]
 801eaf0:	f899 9001 	ldrb.w	r9, [r9, #1]
 801eaf4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801eaf8:	121c      	asrs	r4, r3, #8
 801eafa:	fb12 f20b 	smulbb	r2, r2, fp
 801eafe:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801eb02:	fb04 2401 	mla	r4, r4, r1, r2
 801eb06:	10da      	asrs	r2, r3, #3
 801eb08:	00db      	lsls	r3, r3, #3
 801eb0a:	b2db      	uxtb	r3, r3
 801eb0c:	fb19 f90b 	smulbb	r9, r9, fp
 801eb10:	fb13 f301 	smulbb	r3, r3, r1
 801eb14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801eb18:	b2a4      	uxth	r4, r4
 801eb1a:	fb02 9201 	mla	r2, r2, r1, r9
 801eb1e:	fb0c 3c0b 	mla	ip, ip, fp, r3
 801eb22:	b292      	uxth	r2, r2
 801eb24:	fa1f fc8c 	uxth.w	ip, ip
 801eb28:	1c63      	adds	r3, r4, #1
 801eb2a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801eb2e:	f102 0901 	add.w	r9, r2, #1
 801eb32:	f10c 0301 	add.w	r3, ip, #1
 801eb36:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801eb3a:	eb09 2912 	add.w	r9, r9, r2, lsr #8
 801eb3e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801eb42:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801eb46:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801eb4a:	431c      	orrs	r4, r3
 801eb4c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801eb50:	ea44 0409 	orr.w	r4, r4, r9
 801eb54:	f8ae 4000 	strh.w	r4, [lr]
 801eb58:	e7c3      	b.n	801eae2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x152>
 801eb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb5e:	881b      	ldrh	r3, [r3, #0]
 801eb60:	1b9b      	subs	r3, r3, r6
 801eb62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eb66:	4418      	add	r0, r3
 801eb68:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801eb6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb6e:	1b9b      	subs	r3, r3, r6
 801eb70:	4413      	add	r3, r2
 801eb72:	441d      	add	r5, r3
 801eb74:	f10a 0a01 	add.w	sl, sl, #1
 801eb78:	e789      	b.n	801ea8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 801eb7a:	4b07      	ldr	r3, [pc, #28]	; (801eb98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 801eb7c:	6818      	ldr	r0, [r3, #0]
 801eb7e:	6803      	ldr	r3, [r0, #0]
 801eb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb82:	4798      	blx	r3
 801eb84:	e767      	b.n	801ea56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801eb86:	bf00      	nop
 801eb88:	08023fd9 	.word	0x08023fd9
 801eb8c:	08024465 	.word	0x08024465
 801eb90:	080241d1 	.word	0x080241d1
 801eb94:	20009ab8 	.word	0x20009ab8
 801eb98:	20009ac0 	.word	0x20009ac0

0801eb9c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801eb9c:	b430      	push	{r4, r5}
 801eb9e:	780d      	ldrb	r5, [r1, #0]
 801eba0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801eba4:	2d01      	cmp	r5, #1
 801eba6:	d00a      	beq.n	801ebbe <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801eba8:	d305      	bcc.n	801ebb6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801ebaa:	2d02      	cmp	r5, #2
 801ebac:	d10b      	bne.n	801ebc6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801ebae:	9402      	str	r4, [sp, #8]
 801ebb0:	bc30      	pop	{r4, r5}
 801ebb2:	f7ff bde3 	b.w	801e77c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801ebb6:	9402      	str	r4, [sp, #8]
 801ebb8:	bc30      	pop	{r4, r5}
 801ebba:	f7ff bcdf 	b.w	801e57c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ebbe:	9402      	str	r4, [sp, #8]
 801ebc0:	bc30      	pop	{r4, r5}
 801ebc2:	f7ff bee5 	b.w	801e990 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801ebc6:	bc30      	pop	{r4, r5}
 801ebc8:	4770      	bx	lr
	...

0801ebcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801ebcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebd0:	4605      	mov	r5, r0
 801ebd2:	b089      	sub	sp, #36	; 0x24
 801ebd4:	6810      	ldr	r0, [r2, #0]
 801ebd6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801ebda:	460c      	mov	r4, r1
 801ebdc:	6851      	ldr	r1, [r2, #4]
 801ebde:	ae04      	add	r6, sp, #16
 801ebe0:	c603      	stmia	r6!, {r0, r1}
 801ebe2:	6818      	ldr	r0, [r3, #0]
 801ebe4:	6859      	ldr	r1, [r3, #4]
 801ebe6:	ae06      	add	r6, sp, #24
 801ebe8:	4617      	mov	r7, r2
 801ebea:	c603      	stmia	r6!, {r0, r1}
 801ebec:	a804      	add	r0, sp, #16
 801ebee:	f7fa fdd1 	bl	8019794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebf2:	4639      	mov	r1, r7
 801ebf4:	a806      	add	r0, sp, #24
 801ebf6:	f7fa fdb5 	bl	8019764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ebfa:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ebfe:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ec02:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ec06:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 801ec0a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ec0e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801ec12:	440c      	add	r4, r1
 801ec14:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801ec18:	440a      	add	r2, r1
 801ec1a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ec1e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ec22:	4413      	add	r3, r2
 801ec24:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ec28:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801ec2c:	9300      	str	r3, [sp, #0]
 801ec2e:	4b81      	ldr	r3, [pc, #516]	; (801ee34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 801ec30:	6818      	ldr	r0, [r3, #0]
 801ec32:	6803      	ldr	r3, [r0, #0]
 801ec34:	6a1b      	ldr	r3, [r3, #32]
 801ec36:	4798      	blx	r3
 801ec38:	4b7f      	ldr	r3, [pc, #508]	; (801ee38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x26c>)
 801ec3a:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801ec3e:	881a      	ldrh	r2, [r3, #0]
 801ec40:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801ec44:	fb06 1202 	mla	r2, r6, r2, r1
 801ec48:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ec4c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ec50:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801ec54:	b212      	sxth	r2, r2
 801ec56:	d071      	beq.n	801ed3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x170>
 801ec58:	9201      	str	r2, [sp, #4]
 801ec5a:	0052      	lsls	r2, r2, #1
 801ec5c:	9202      	str	r2, [sp, #8]
 801ec5e:	f04f 0a00 	mov.w	sl, #0
 801ec62:	9303      	str	r3, [sp, #12]
 801ec64:	9b00      	ldr	r3, [sp, #0]
 801ec66:	459a      	cmp	sl, r3
 801ec68:	f280 80db 	bge.w	801ee22 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x256>
 801ec6c:	f04f 0e00 	mov.w	lr, #0
 801ec70:	45be      	cmp	lr, r7
 801ec72:	da50      	bge.n	801ed16 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801ec74:	f814 300e 	ldrb.w	r3, [r4, lr]
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d049      	beq.n	801ed10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ec7c:	fb08 f303 	mul.w	r3, r8, r3
 801ec80:	1c5a      	adds	r2, r3, #1
 801ec82:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801ec86:	121b      	asrs	r3, r3, #8
 801ec88:	d042      	beq.n	801ed10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ec8a:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801ec8e:	f830 c01e 	ldrh.w	ip, [r0, lr, lsl #1]
 801ec92:	1211      	asrs	r1, r2, #8
 801ec94:	fa1f fb83 	uxth.w	fp, r3
 801ec98:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ec9c:	43db      	mvns	r3, r3
 801ec9e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801eca2:	b2db      	uxtb	r3, r3
 801eca4:	fb11 f10b 	smulbb	r1, r1, fp
 801eca8:	ea4f 09e2 	mov.w	r9, r2, asr #3
 801ecac:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ecb0:	00d2      	lsls	r2, r2, #3
 801ecb2:	fb06 1603 	mla	r6, r6, r3, r1
 801ecb6:	b2d2      	uxtb	r2, r2
 801ecb8:	ea4f 01ec 	mov.w	r1, ip, asr #3
 801ecbc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ecc0:	fb12 f20b 	smulbb	r2, r2, fp
 801ecc4:	fa5f fc8c 	uxtb.w	ip, ip
 801ecc8:	fb0c 2203 	mla	r2, ip, r3, r2
 801eccc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ecd0:	b2b6      	uxth	r6, r6
 801ecd2:	fb19 f90b 	smulbb	r9, r9, fp
 801ecd6:	b292      	uxth	r2, r2
 801ecd8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ecdc:	fb01 9103 	mla	r1, r1, r3, r9
 801ece0:	1c73      	adds	r3, r6, #1
 801ece2:	f102 0901 	add.w	r9, r2, #1
 801ece6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ecea:	eb09 2912 	add.w	r9, r9, r2, lsr #8
 801ecee:	b289      	uxth	r1, r1
 801ecf0:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801ecf4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ecf8:	ea46 0609 	orr.w	r6, r6, r9
 801ecfc:	f101 0901 	add.w	r9, r1, #1
 801ed00:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801ed04:	0949      	lsrs	r1, r1, #5
 801ed06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ed0a:	430e      	orrs	r6, r1
 801ed0c:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
 801ed10:	f10e 0e01 	add.w	lr, lr, #1
 801ed14:	e7ac      	b.n	801ec70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801ed16:	9b03      	ldr	r3, [sp, #12]
 801ed18:	9a02      	ldr	r2, [sp, #8]
 801ed1a:	881b      	ldrh	r3, [r3, #0]
 801ed1c:	1bdb      	subs	r3, r3, r7
 801ed1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ed22:	4418      	add	r0, r3
 801ed24:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ed28:	1bdb      	subs	r3, r3, r7
 801ed2a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801ed2e:	4415      	add	r5, r2
 801ed30:	9a01      	ldr	r2, [sp, #4]
 801ed32:	4413      	add	r3, r2
 801ed34:	441c      	add	r4, r3
 801ed36:	f10a 0a01 	add.w	sl, sl, #1
 801ed3a:	e793      	b.n	801ec64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 801ed3c:	9202      	str	r2, [sp, #8]
 801ed3e:	0052      	lsls	r2, r2, #1
 801ed40:	9201      	str	r2, [sp, #4]
 801ed42:	f04f 0b00 	mov.w	fp, #0
 801ed46:	9303      	str	r3, [sp, #12]
 801ed48:	9b00      	ldr	r3, [sp, #0]
 801ed4a:	459b      	cmp	fp, r3
 801ed4c:	da69      	bge.n	801ee22 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x256>
 801ed4e:	4681      	mov	r9, r0
 801ed50:	f04f 0800 	mov.w	r8, #0
 801ed54:	45b8      	cmp	r8, r7
 801ed56:	da51      	bge.n	801edfc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x230>
 801ed58:	f814 3008 	ldrb.w	r3, [r4, r8]
 801ed5c:	b12b      	cbz	r3, 801ed6a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x19e>
 801ed5e:	2bff      	cmp	r3, #255	; 0xff
 801ed60:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
 801ed64:	d106      	bne.n	801ed74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a8>
 801ed66:	f8a9 c000 	strh.w	ip, [r9]
 801ed6a:	f109 0902 	add.w	r9, r9, #2
 801ed6e:	f108 0801 	add.w	r8, r8, #1
 801ed72:	e7ef      	b.n	801ed54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x188>
 801ed74:	f8b9 2000 	ldrh.w	r2, [r9]
 801ed78:	b29e      	uxth	r6, r3
 801ed7a:	1211      	asrs	r1, r2, #8
 801ed7c:	43db      	mvns	r3, r3
 801ed7e:	b2db      	uxtb	r3, r3
 801ed80:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801ed84:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ed88:	fb11 f103 	smulbb	r1, r1, r3
 801ed8c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801ed90:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ed94:	00d2      	lsls	r2, r2, #3
 801ed96:	fb0e 1e06 	mla	lr, lr, r6, r1
 801ed9a:	b2d2      	uxtb	r2, r2
 801ed9c:	ea4f 01ec 	mov.w	r1, ip, asr #3
 801eda0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eda4:	fb12 f203 	smulbb	r2, r2, r3
 801eda8:	fa5f fc8c 	uxtb.w	ip, ip
 801edac:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801edb0:	fb0c 2206 	mla	r2, ip, r6, r2
 801edb4:	fb1a fa03 	smulbb	sl, sl, r3
 801edb8:	fa1f fe8e 	uxth.w	lr, lr
 801edbc:	b292      	uxth	r2, r2
 801edbe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801edc2:	fb01 a106 	mla	r1, r1, r6, sl
 801edc6:	f10e 0301 	add.w	r3, lr, #1
 801edca:	f102 0a01 	add.w	sl, r2, #1
 801edce:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801edd2:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 801edd6:	b289      	uxth	r1, r1
 801edd8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eddc:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ede0:	ea4e 0e0a 	orr.w	lr, lr, sl
 801ede4:	f101 0a01 	add.w	sl, r1, #1
 801ede8:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801edec:	0949      	lsrs	r1, r1, #5
 801edee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801edf2:	ea4e 0e01 	orr.w	lr, lr, r1
 801edf6:	f8a9 e000 	strh.w	lr, [r9]
 801edfa:	e7b6      	b.n	801ed6a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x19e>
 801edfc:	9b03      	ldr	r3, [sp, #12]
 801edfe:	9a01      	ldr	r2, [sp, #4]
 801ee00:	881b      	ldrh	r3, [r3, #0]
 801ee02:	1bdb      	subs	r3, r3, r7
 801ee04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ee08:	4418      	add	r0, r3
 801ee0a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ee0e:	1bdb      	subs	r3, r3, r7
 801ee10:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801ee14:	4415      	add	r5, r2
 801ee16:	9a02      	ldr	r2, [sp, #8]
 801ee18:	4413      	add	r3, r2
 801ee1a:	441c      	add	r4, r3
 801ee1c:	f10b 0b01 	add.w	fp, fp, #1
 801ee20:	e792      	b.n	801ed48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x17c>
 801ee22:	4b04      	ldr	r3, [pc, #16]	; (801ee34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 801ee24:	6818      	ldr	r0, [r3, #0]
 801ee26:	6803      	ldr	r3, [r0, #0]
 801ee28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee2a:	4798      	blx	r3
 801ee2c:	b009      	add	sp, #36	; 0x24
 801ee2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee32:	bf00      	nop
 801ee34:	20009ac0 	.word	0x20009ac0
 801ee38:	20009ab8 	.word	0x20009ab8

0801ee3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ee3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee40:	b089      	sub	sp, #36	; 0x24
 801ee42:	4682      	mov	sl, r0
 801ee44:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801ee48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ee4a:	460d      	mov	r5, r1
 801ee4c:	4691      	mov	r9, r2
 801ee4e:	4698      	mov	r8, r3
 801ee50:	b3ae      	cbz	r6, 801eebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801ee52:	4608      	mov	r0, r1
 801ee54:	f7fc ff40 	bl	801bcd8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ee58:	4607      	mov	r7, r0
 801ee5a:	4628      	mov	r0, r5
 801ee5c:	f7fc ff76 	bl	801bd4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ee60:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ee64:	4628      	mov	r0, r5
 801ee66:	f8ad 9008 	strh.w	r9, [sp, #8]
 801ee6a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ee6e:	f8ad 700c 	strh.w	r7, [sp, #12]
 801ee72:	f7fd f8bb 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ee76:	b178      	cbz	r0, 801ee98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ee78:	4628      	mov	r0, r5
 801ee7a:	f7fd f8b7 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ee7e:	2802      	cmp	r0, #2
 801ee80:	d00a      	beq.n	801ee98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ee82:	4628      	mov	r0, r5
 801ee84:	f7fd f8b2 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ee88:	280b      	cmp	r0, #11
 801ee8a:	d005      	beq.n	801ee98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ee8c:	4b6a      	ldr	r3, [pc, #424]	; (801f038 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801ee8e:	4a6b      	ldr	r2, [pc, #428]	; (801f03c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801ee90:	486b      	ldr	r0, [pc, #428]	; (801f040 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>)
 801ee92:	212e      	movs	r1, #46	; 0x2e
 801ee94:	f000 fc58 	bl	801f748 <__assert_func>
 801ee98:	4628      	mov	r0, r5
 801ee9a:	f7fd f825 	bl	801bee8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ee9e:	4607      	mov	r7, r0
 801eea0:	4628      	mov	r0, r5
 801eea2:	f7fd f851 	bl	801bf48 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801eea6:	4681      	mov	r9, r0
 801eea8:	4628      	mov	r0, r5
 801eeaa:	f7fd f89f 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eeae:	2802      	cmp	r0, #2
 801eeb0:	d108      	bne.n	801eec4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801eeb2:	4633      	mov	r3, r6
 801eeb4:	4622      	mov	r2, r4
 801eeb6:	a902      	add	r1, sp, #8
 801eeb8:	4638      	mov	r0, r7
 801eeba:	f7ff fa45 	bl	801e348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eebe:	b009      	add	sp, #36	; 0x24
 801eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eec4:	4628      	mov	r0, r5
 801eec6:	f7fd f891 	bl	801bfec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eeca:	280b      	cmp	r0, #11
 801eecc:	d107      	bne.n	801eede <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801eece:	9600      	str	r6, [sp, #0]
 801eed0:	4623      	mov	r3, r4
 801eed2:	aa02      	add	r2, sp, #8
 801eed4:	4649      	mov	r1, r9
 801eed6:	4638      	mov	r0, r7
 801eed8:	f7ff fe60 	bl	801eb9c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801eedc:	e7ef      	b.n	801eebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801eede:	4628      	mov	r0, r5
 801eee0:	f7fc ffc8 	bl	801be74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801eee4:	b950      	cbnz	r0, 801eefc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801eee6:	f8da 3000 	ldr.w	r3, [sl]
 801eeea:	9001      	str	r0, [sp, #4]
 801eeec:	9600      	str	r6, [sp, #0]
 801eeee:	691d      	ldr	r5, [r3, #16]
 801eef0:	aa02      	add	r2, sp, #8
 801eef2:	4623      	mov	r3, r4
 801eef4:	4639      	mov	r1, r7
 801eef6:	4650      	mov	r0, sl
 801eef8:	47a8      	blx	r5
 801eefa:	e7e0      	b.n	801eebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801eefc:	f10d 0818 	add.w	r8, sp, #24
 801ef00:	4629      	mov	r1, r5
 801ef02:	4640      	mov	r0, r8
 801ef04:	f7fc ff5c 	bl	801bdc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ef08:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ef0c:	ad04      	add	r5, sp, #16
 801ef0e:	e885 0003 	stmia.w	r5, {r0, r1}
 801ef12:	4621      	mov	r1, r4
 801ef14:	4628      	mov	r0, r5
 801ef16:	f7ed fb5b 	bl	800c5d0 <_ZN8touchgfx4RectaNERKS0_>
 801ef1a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ef1e:	b113      	cbz	r3, 801ef26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801ef20:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ef24:	b913      	cbnz	r3, 801ef2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf0>
 801ef26:	9600      	str	r6, [sp, #0]
 801ef28:	4623      	mov	r3, r4
 801ef2a:	e07f      	b.n	801f02c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f0>
 801ef2c:	f8da 3000 	ldr.w	r3, [sl]
 801ef30:	9600      	str	r6, [sp, #0]
 801ef32:	2200      	movs	r2, #0
 801ef34:	9201      	str	r2, [sp, #4]
 801ef36:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801ef3a:	aa02      	add	r2, sp, #8
 801ef3c:	462b      	mov	r3, r5
 801ef3e:	4639      	mov	r1, r7
 801ef40:	4650      	mov	r0, sl
 801ef42:	47d8      	blx	fp
 801ef44:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ef48:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ef4c:	4293      	cmp	r3, r2
 801ef4e:	dd13      	ble.n	801ef78 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13c>
 801ef50:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ef54:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ef58:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ef5c:	1a9b      	subs	r3, r3, r2
 801ef5e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ef62:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ef66:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ef6a:	9600      	str	r6, [sp, #0]
 801ef6c:	4643      	mov	r3, r8
 801ef6e:	aa02      	add	r2, sp, #8
 801ef70:	4649      	mov	r1, r9
 801ef72:	4638      	mov	r0, r7
 801ef74:	f7ff fe2a 	bl	801ebcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ef78:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ef7c:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ef80:	4293      	cmp	r3, r2
 801ef82:	dd13      	ble.n	801efac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x170>
 801ef84:	1a9b      	subs	r3, r3, r2
 801ef86:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ef8a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ef8e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ef92:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ef96:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ef9a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ef9e:	9600      	str	r6, [sp, #0]
 801efa0:	4643      	mov	r3, r8
 801efa2:	aa02      	add	r2, sp, #8
 801efa4:	4649      	mov	r1, r9
 801efa6:	4638      	mov	r0, r7
 801efa8:	f7ff fe10 	bl	801ebcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801efac:	88a2      	ldrh	r2, [r4, #4]
 801efae:	8823      	ldrh	r3, [r4, #0]
 801efb0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801efb4:	4413      	add	r3, r2
 801efb6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801efba:	440a      	add	r2, r1
 801efbc:	b29b      	uxth	r3, r3
 801efbe:	b292      	uxth	r2, r2
 801efc0:	b211      	sxth	r1, r2
 801efc2:	b218      	sxth	r0, r3
 801efc4:	4288      	cmp	r0, r1
 801efc6:	dd13      	ble.n	801eff0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b4>
 801efc8:	1a9b      	subs	r3, r3, r2
 801efca:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801efce:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801efd2:	f8ad 1018 	strh.w	r1, [sp, #24]
 801efd6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801efda:	f8ad 001e 	strh.w	r0, [sp, #30]
 801efde:	9600      	str	r6, [sp, #0]
 801efe0:	4643      	mov	r3, r8
 801efe2:	aa02      	add	r2, sp, #8
 801efe4:	4649      	mov	r1, r9
 801efe6:	4638      	mov	r0, r7
 801efe8:	f8ad 501a 	strh.w	r5, [sp, #26]
 801efec:	f7ff fdee 	bl	801ebcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801eff0:	88e2      	ldrh	r2, [r4, #6]
 801eff2:	8863      	ldrh	r3, [r4, #2]
 801eff4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801eff8:	4413      	add	r3, r2
 801effa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801effe:	440a      	add	r2, r1
 801f000:	b29b      	uxth	r3, r3
 801f002:	b292      	uxth	r2, r2
 801f004:	b211      	sxth	r1, r2
 801f006:	b218      	sxth	r0, r3
 801f008:	4288      	cmp	r0, r1
 801f00a:	f77f af58 	ble.w	801eebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801f00e:	f9b4 5000 	ldrsh.w	r5, [r4]
 801f012:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f016:	f8ad 5018 	strh.w	r5, [sp, #24]
 801f01a:	1a9b      	subs	r3, r3, r2
 801f01c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f020:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f024:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f028:	9600      	str	r6, [sp, #0]
 801f02a:	4643      	mov	r3, r8
 801f02c:	aa02      	add	r2, sp, #8
 801f02e:	4649      	mov	r1, r9
 801f030:	4638      	mov	r0, r7
 801f032:	f7ff fdcb 	bl	801ebcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f036:	e742      	b.n	801eebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801f038:	08024027 	.word	0x08024027
 801f03c:	080244ee 	.word	0x080244ee
 801f040:	080241d1 	.word	0x080241d1

0801f044 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801f044:	b508      	push	{r3, lr}
 801f046:	b180      	cbz	r0, 801f06a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f048:	2902      	cmp	r1, #2
 801f04a:	d014      	beq.n	801f076 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801f04c:	2903      	cmp	r1, #3
 801f04e:	d019      	beq.n	801f084 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801f050:	2901      	cmp	r1, #1
 801f052:	d101      	bne.n	801f058 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801f054:	2001      	movs	r0, #1
 801f056:	bd08      	pop	{r3, pc}
 801f058:	4b0e      	ldr	r3, [pc, #56]	; (801f094 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801f05a:	8818      	ldrh	r0, [r3, #0]
 801f05c:	b9a8      	cbnz	r0, 801f08a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x46>
 801f05e:	4b0e      	ldr	r3, [pc, #56]	; (801f098 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801f060:	4a0e      	ldr	r2, [pc, #56]	; (801f09c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801f062:	480f      	ldr	r0, [pc, #60]	; (801f0a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801f064:	21d5      	movs	r1, #213	; 0xd5
 801f066:	f000 fb6f 	bl	801f748 <__assert_func>
 801f06a:	2902      	cmp	r1, #2
 801f06c:	d00a      	beq.n	801f084 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801f06e:	2903      	cmp	r1, #3
 801f070:	d0f2      	beq.n	801f058 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801f072:	2901      	cmp	r1, #1
 801f074:	d1ee      	bne.n	801f054 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801f076:	4b07      	ldr	r3, [pc, #28]	; (801f094 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801f078:	8818      	ldrh	r0, [r3, #0]
 801f07a:	2800      	cmp	r0, #0
 801f07c:	d0ef      	beq.n	801f05e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f07e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f082:	bd08      	pop	{r3, pc}
 801f084:	f04f 30ff 	mov.w	r0, #4294967295
 801f088:	bd08      	pop	{r3, pc}
 801f08a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f08e:	4240      	negs	r0, r0
 801f090:	bd08      	pop	{r3, pc}
 801f092:	bf00      	nop
 801f094:	20009ab8 	.word	0x20009ab8
 801f098:	0802431a 	.word	0x0802431a
 801f09c:	080245fd 	.word	0x080245fd
 801f0a0:	0802435c 	.word	0x0802435c

0801f0a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801f0a4:	b508      	push	{r3, lr}
 801f0a6:	b170      	cbz	r0, 801f0c6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x22>
 801f0a8:	2902      	cmp	r1, #2
 801f0aa:	d012      	beq.n	801f0d2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801f0ac:	2903      	cmp	r1, #3
 801f0ae:	d016      	beq.n	801f0de <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3a>
 801f0b0:	2901      	cmp	r1, #1
 801f0b2:	d11c      	bne.n	801f0ee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x4a>
 801f0b4:	4b0f      	ldr	r3, [pc, #60]	; (801f0f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801f0b6:	8818      	ldrh	r0, [r3, #0]
 801f0b8:	b970      	cbnz	r0, 801f0d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>
 801f0ba:	4b0f      	ldr	r3, [pc, #60]	; (801f0f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801f0bc:	4a0f      	ldr	r2, [pc, #60]	; (801f0fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801f0be:	4810      	ldr	r0, [pc, #64]	; (801f100 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801f0c0:	21d5      	movs	r1, #213	; 0xd5
 801f0c2:	f000 fb41 	bl	801f748 <__assert_func>
 801f0c6:	2902      	cmp	r1, #2
 801f0c8:	d009      	beq.n	801f0de <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3a>
 801f0ca:	2903      	cmp	r1, #3
 801f0cc:	d00f      	beq.n	801f0ee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x4a>
 801f0ce:	2901      	cmp	r1, #1
 801f0d0:	d1f0      	bne.n	801f0b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801f0d2:	f04f 30ff 	mov.w	r0, #4294967295
 801f0d6:	bd08      	pop	{r3, pc}
 801f0d8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f0dc:	bd08      	pop	{r3, pc}
 801f0de:	4b05      	ldr	r3, [pc, #20]	; (801f0f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801f0e0:	8818      	ldrh	r0, [r3, #0]
 801f0e2:	2800      	cmp	r0, #0
 801f0e4:	d0e9      	beq.n	801f0ba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x16>
 801f0e6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f0ea:	4240      	negs	r0, r0
 801f0ec:	bd08      	pop	{r3, pc}
 801f0ee:	2001      	movs	r0, #1
 801f0f0:	bd08      	pop	{r3, pc}
 801f0f2:	bf00      	nop
 801f0f4:	20009ab8 	.word	0x20009ab8
 801f0f8:	0802431a 	.word	0x0802431a
 801f0fc:	080245fd 	.word	0x080245fd
 801f100:	0802435c 	.word	0x0802435c

0801f104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f108:	b097      	sub	sp, #92	; 0x5c
 801f10a:	910b      	str	r1, [sp, #44]	; 0x2c
 801f10c:	a912      	add	r1, sp, #72	; 0x48
 801f10e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f112:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f114:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
 801f118:	7b56      	ldrb	r6, [r2, #13]
 801f11a:	9110      	str	r1, [sp, #64]	; 0x40
 801f11c:	f89d 10a8 	ldrb.w	r1, [sp, #168]	; 0xa8
 801f120:	910c      	str	r1, [sp, #48]	; 0x30
 801f122:	f016 0f08 	tst.w	r6, #8
 801f126:	7991      	ldrb	r1, [r2, #6]
 801f128:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801f12c:	9308      	str	r3, [sp, #32]
 801f12e:	bf14      	ite	ne
 801f130:	f44f 7080 	movne.w	r0, #256	; 0x100
 801f134:	2000      	moveq	r0, #0
 801f136:	f016 0f10 	tst.w	r6, #16
 801f13a:	bf14      	ite	ne
 801f13c:	f44f 7680 	movne.w	r6, #256	; 0x100
 801f140:	2600      	moveq	r6, #0
 801f142:	4301      	orrs	r1, r0
 801f144:	f9bd 9080 	ldrsh.w	r9, [sp, #128]	; 0x80
 801f148:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801f14c:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801f150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f152:	f89d 50a4 	ldrb.w	r5, [sp, #164]	; 0xa4
 801f156:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801f15a:	910a      	str	r1, [sp, #40]	; 0x28
 801f15c:	f000 814d 	beq.w	801f3fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801f160:	79d1      	ldrb	r1, [r2, #7]
 801f162:	430e      	orrs	r6, r1
 801f164:	f000 8149 	beq.w	801f3fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801f168:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801f16c:	2f00      	cmp	r7, #0
 801f16e:	f000 80ec 	beq.w	801f34a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 801f172:	1a79      	subs	r1, r7, r1
 801f174:	b28f      	uxth	r7, r1
 801f176:	043a      	lsls	r2, r7, #16
 801f178:	d504      	bpl.n	801f184 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 801f17a:	eba9 0707 	sub.w	r7, r9, r7
 801f17e:	fa0f f987 	sxth.w	r9, r7
 801f182:	2700      	movs	r7, #0
 801f184:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f188:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 801f18c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 801f190:	4581      	cmp	r9, r0
 801f192:	b282      	uxth	r2, r0
 801f194:	bfbe      	ittt	lt
 801f196:	18b9      	addlt	r1, r7, r2
 801f198:	eba1 0109 	sublt.w	r1, r1, r9
 801f19c:	b28f      	uxthlt	r7, r1
 801f19e:	8899      	ldrh	r1, [r3, #4]
 801f1a0:	88db      	ldrh	r3, [r3, #6]
 801f1a2:	449c      	add	ip, r3
 801f1a4:	fa0f f38c 	sxth.w	r3, ip
 801f1a8:	930e      	str	r3, [sp, #56]	; 0x38
 801f1aa:	b2b3      	uxth	r3, r6
 801f1ac:	9307      	str	r3, [sp, #28]
 801f1ae:	4bbc      	ldr	r3, [pc, #752]	; (801f4a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801f1b0:	f893 a000 	ldrb.w	sl, [r3]
 801f1b4:	f10a 3eff 	add.w	lr, sl, #4294967295
 801f1b8:	bfb8      	it	lt
 801f1ba:	4681      	movlt	r9, r0
 801f1bc:	440a      	add	r2, r1
 801f1be:	f1de 0300 	rsbs	r3, lr, #0
 801f1c2:	eb43 030e 	adc.w	r3, r3, lr
 801f1c6:	b212      	sxth	r2, r2
 801f1c8:	920f      	str	r2, [sp, #60]	; 0x3c
 801f1ca:	930d      	str	r3, [sp, #52]	; 0x34
 801f1cc:	9a08      	ldr	r2, [sp, #32]
 801f1ce:	465b      	mov	r3, fp
 801f1d0:	4649      	mov	r1, r9
 801f1d2:	a812      	add	r0, sp, #72	; 0x48
 801f1d4:	f7fa f9ce 	bl	8019574 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f1d8:	4649      	mov	r1, r9
 801f1da:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801f1de:	465b      	mov	r3, fp
 801f1e0:	9a08      	ldr	r2, [sp, #32]
 801f1e2:	a812      	add	r0, sp, #72	; 0x48
 801f1e4:	f7fa f9e1 	bl	80195aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f1e8:	a916      	add	r1, sp, #88	; 0x58
 801f1ea:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f1ee:	a815      	add	r0, sp, #84	; 0x54
 801f1f0:	f7fa fa9e 	bl	8019730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f1f4:	f1bb 0f00 	cmp.w	fp, #0
 801f1f8:	f040 80ab 	bne.w	801f352 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24e>
 801f1fc:	f1ba 0f01 	cmp.w	sl, #1
 801f200:	f040 80af 	bne.w	801f362 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x25e>
 801f204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f206:	2b00      	cmp	r3, #0
 801f208:	f040 80fc 	bne.w	801f404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 801f20c:	4ba5      	ldr	r3, [pc, #660]	; (801f4a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801f20e:	6818      	ldr	r0, [r3, #0]
 801f210:	6803      	ldr	r3, [r0, #0]
 801f212:	6a1b      	ldr	r3, [r3, #32]
 801f214:	4798      	blx	r3
 801f216:	4aa4      	ldr	r2, [pc, #656]	; (801f4a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801f218:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801f21c:	8811      	ldrh	r1, [r2, #0]
 801f21e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f222:	fb01 2303 	mla	r3, r1, r3, r2
 801f226:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f22a:	2601      	movs	r6, #1
 801f22c:	9309      	str	r3, [sp, #36]	; 0x24
 801f22e:	fa06 f305 	lsl.w	r3, r6, r5
 801f232:	3b01      	subs	r3, #1
 801f234:	b2db      	uxtb	r3, r3
 801f236:	42b5      	cmp	r5, r6
 801f238:	9311      	str	r3, [sp, #68]	; 0x44
 801f23a:	f000 80e5 	beq.w	801f408 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801f23e:	2d02      	cmp	r5, #2
 801f240:	f000 8161 	beq.w	801f506 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x402>
 801f244:	2d04      	cmp	r5, #4
 801f246:	f000 8153 	beq.w	801f4f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>
 801f24a:	b907      	cbnz	r7, 801f24e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14a>
 801f24c:	b184      	cbz	r4, 801f270 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x16c>
 801f24e:	fb18 7304 	smlabb	r3, r8, r4, r7
 801f252:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f254:	fb13 f305 	smulbb	r3, r3, r5
 801f258:	b29b      	uxth	r3, r3
 801f25a:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f25e:	9226      	str	r2, [sp, #152]	; 0x98
 801f260:	9a07      	ldr	r2, [sp, #28]
 801f262:	eba2 0c04 	sub.w	ip, r2, r4
 801f266:	fa1f f28c 	uxth.w	r2, ip
 801f26a:	9207      	str	r2, [sp, #28]
 801f26c:	f003 0407 	and.w	r4, r3, #7
 801f270:	4659      	mov	r1, fp
 801f272:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f274:	f7ff fee6 	bl	801f044 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801f278:	4659      	mov	r1, fp
 801f27a:	4682      	mov	sl, r0
 801f27c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f27e:	f7ff ff11 	bl	801f0a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801f282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f284:	9a08      	ldr	r2, [sp, #32]
 801f286:	eba3 0c02 	sub.w	ip, r3, r2
 801f28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f28c:	eba9 0107 	sub.w	r1, r9, r7
 801f290:	1a59      	subs	r1, r3, r1
 801f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f294:	4299      	cmp	r1, r3
 801f296:	bfd4      	ite	le
 801f298:	ebc7 0101 	rsble	r1, r7, r1
 801f29c:	ebc7 0103 	rsbgt	r1, r7, r3
 801f2a0:	eba8 0801 	sub.w	r8, r8, r1
 801f2a4:	fb05 f308 	mul.w	r3, r5, r8
 801f2a8:	9308      	str	r3, [sp, #32]
 801f2aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2ac:	781a      	ldrb	r2, [r3, #0]
 801f2ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2b0:	121b      	asrs	r3, r3, #8
 801f2b2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f2b6:	930d      	str	r3, [sp, #52]	; 0x34
 801f2b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2ba:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 801f2be:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f2c2:	930e      	str	r3, [sp, #56]	; 0x38
 801f2c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2c6:	00db      	lsls	r3, r3, #3
 801f2c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f2cc:	fb0a 0011 	mls	r0, sl, r1, r0
 801f2d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801f2d2:	ea4f 034a 	mov.w	r3, sl, lsl #1
 801f2d6:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801f2da:	fb03 fa0a 	mul.w	sl, r3, sl
 801f2de:	930a      	str	r3, [sp, #40]	; 0x28
 801f2e0:	9b07      	ldr	r3, [sp, #28]
 801f2e2:	459c      	cmp	ip, r3
 801f2e4:	bfa8      	it	ge
 801f2e6:	469c      	movge	ip, r3
 801f2e8:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 801f2ec:	9307      	str	r3, [sp, #28]
 801f2ee:	4122      	asrs	r2, r4
 801f2f0:	eb0a 0340 	add.w	r3, sl, r0, lsl #1
 801f2f4:	b2d2      	uxtb	r2, r2
 801f2f6:	9310      	str	r3, [sp, #64]	; 0x40
 801f2f8:	f1bc 0f00 	cmp.w	ip, #0
 801f2fc:	f340 80ea 	ble.w	801f4d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d0>
 801f300:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f304:	468a      	mov	sl, r1
 801f306:	f1ba 0f00 	cmp.w	sl, #0
 801f30a:	f340 80cf 	ble.w	801f4ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801f30e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f310:	4013      	ands	r3, r2
 801f312:	d009      	beq.n	801f328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x224>
 801f314:	fb13 f306 	smulbb	r3, r3, r6
 801f318:	2bfe      	cmp	r3, #254	; 0xfe
 801f31a:	dd77      	ble.n	801f40c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 801f31c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f31e:	28ff      	cmp	r0, #255	; 0xff
 801f320:	d174      	bne.n	801f40c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 801f322:	9f07      	ldr	r7, [sp, #28]
 801f324:	f8a9 7000 	strh.w	r7, [r9]
 801f328:	442c      	add	r4, r5
 801f32a:	b2a4      	uxth	r4, r4
 801f32c:	2c07      	cmp	r4, #7
 801f32e:	bf81      	itttt	hi
 801f330:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801f332:	785a      	ldrbhi	r2, [r3, #1]
 801f334:	3301      	addhi	r3, #1
 801f336:	9326      	strhi	r3, [sp, #152]	; 0x98
 801f338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f33a:	bf9a      	itte	ls
 801f33c:	412a      	asrls	r2, r5
 801f33e:	b2d2      	uxtbls	r2, r2
 801f340:	2400      	movhi	r4, #0
 801f342:	4499      	add	r9, r3
 801f344:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f348:	e7dd      	b.n	801f306 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 801f34a:	4489      	add	r9, r1
 801f34c:	fa0f f989 	sxth.w	r9, r9
 801f350:	e718      	b.n	801f184 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 801f352:	f1bb 0f01 	cmp.w	fp, #1
 801f356:	f47f af55 	bne.w	801f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 801f35a:	f1ba 0f01 	cmp.w	sl, #1
 801f35e:	f47f af51 	bne.w	801f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 801f362:	f8df a140 	ldr.w	sl, [pc, #320]	; 801f4a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801f366:	f8da 0000 	ldr.w	r0, [sl]
 801f36a:	6803      	ldr	r3, [r0, #0]
 801f36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f36e:	4798      	blx	r3
 801f370:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801f374:	4652      	mov	r2, sl
 801f376:	d005      	beq.n	801f384 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x280>
 801f378:	2d04      	cmp	r5, #4
 801f37a:	d141      	bne.n	801f400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fc>
 801f37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f37e:	3300      	adds	r3, #0
 801f380:	bf18      	it	ne
 801f382:	2301      	movne	r3, #1
 801f384:	05c0      	lsls	r0, r0, #23
 801f386:	f140 80ae 	bpl.w	801f4e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e2>
 801f38a:	2d08      	cmp	r5, #8
 801f38c:	f040 80ab 	bne.w	801f4e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e2>
 801f390:	2b00      	cmp	r3, #0
 801f392:	bf14      	ite	ne
 801f394:	2180      	movne	r1, #128	; 0x80
 801f396:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801f39a:	2f00      	cmp	r7, #0
 801f39c:	f47f af32 	bne.w	801f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 801f3a0:	2c00      	cmp	r4, #0
 801f3a2:	f47f af2f 	bne.w	801f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 801f3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f3aa:	444b      	add	r3, r9
 801f3ac:	4298      	cmp	r0, r3
 801f3ae:	f6ff af29 	blt.w	801f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 801f3b2:	9b08      	ldr	r3, [sp, #32]
 801f3b4:	441e      	add	r6, r3
 801f3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3b8:	42b3      	cmp	r3, r6
 801f3ba:	f6ff af23 	blt.w	801f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 801f3be:	6810      	ldr	r0, [r2, #0]
 801f3c0:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801f3c4:	6804      	ldr	r4, [r0, #0]
 801f3c6:	9105      	str	r1, [sp, #20]
 801f3c8:	2d08      	cmp	r5, #8
 801f3ca:	bf18      	it	ne
 801f3cc:	f108 0801 	addne.w	r8, r8, #1
 801f3d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f3d2:	9104      	str	r1, [sp, #16]
 801f3d4:	bf18      	it	ne
 801f3d6:	f028 0801 	bicne.w	r8, r8, #1
 801f3da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f3dc:	9103      	str	r1, [sp, #12]
 801f3de:	bf18      	it	ne
 801f3e0:	fa1f f888 	uxthne.w	r8, r8
 801f3e4:	9907      	ldr	r1, [sp, #28]
 801f3e6:	9101      	str	r1, [sp, #4]
 801f3e8:	f8cd 8008 	str.w	r8, [sp, #8]
 801f3ec:	f8cd 8000 	str.w	r8, [sp]
 801f3f0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801f3f4:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
 801f3f6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f3f8:	47a0      	blx	r4
 801f3fa:	b017      	add	sp, #92	; 0x5c
 801f3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f400:	2300      	movs	r3, #0
 801f402:	e7bf      	b.n	801f384 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x280>
 801f404:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f406:	e706      	b.n	801f216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801f408:	26ff      	movs	r6, #255	; 0xff
 801f40a:	e71e      	b.n	801f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x146>
 801f40c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801f410:	f8b9 e000 	ldrh.w	lr, [r9]
 801f414:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 801f418:	fb10 f303 	smulbb	r3, r0, r3
 801f41c:	b29b      	uxth	r3, r3
 801f41e:	1c58      	adds	r0, r3, #1
 801f420:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f424:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f428:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801f42c:	fa1f f883 	uxth.w	r8, r3
 801f430:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f434:	43db      	mvns	r3, r3
 801f436:	b2db      	uxtb	r3, r3
 801f438:	fb10 f008 	smulbb	r0, r0, r8
 801f43c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f440:	fb07 0703 	mla	r7, r7, r3, r0
 801f444:	ea4f 00ee 	mov.w	r0, lr, asr #3
 801f448:	fb18 fb0b 	smulbb	fp, r8, fp
 801f44c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f450:	fb00 b003 	mla	r0, r0, r3, fp
 801f454:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 801f458:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f45c:	fb18 f80b 	smulbb	r8, r8, fp
 801f460:	fa5f fe8e 	uxtb.w	lr, lr
 801f464:	fb0e 8803 	mla	r8, lr, r3, r8
 801f468:	b2bf      	uxth	r7, r7
 801f46a:	fa1f f888 	uxth.w	r8, r8
 801f46e:	1c7b      	adds	r3, r7, #1
 801f470:	f108 0b01 	add.w	fp, r8, #1
 801f474:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f478:	eb0b 2b18 	add.w	fp, fp, r8, lsr #8
 801f47c:	b280      	uxth	r0, r0
 801f47e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801f482:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f486:	ea47 070b 	orr.w	r7, r7, fp
 801f48a:	f100 0b01 	add.w	fp, r0, #1
 801f48e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801f492:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f496:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f49a:	ea47 070b 	orr.w	r7, r7, fp
 801f49e:	e741      	b.n	801f324 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 801f4a0:	20009ab6 	.word	0x20009ab6
 801f4a4:	20009ac0 	.word	0x20009ac0
 801f4a8:	20009ab8 	.word	0x20009ab8
 801f4ac:	9b08      	ldr	r3, [sp, #32]
 801f4ae:	b153      	cbz	r3, 801f4c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c2>
 801f4b0:	441c      	add	r4, r3
 801f4b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f4b4:	b2a4      	uxth	r4, r4
 801f4b6:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801f4ba:	f004 0407 	and.w	r4, r4, #7
 801f4be:	781a      	ldrb	r2, [r3, #0]
 801f4c0:	9326      	str	r3, [sp, #152]	; 0x98
 801f4c2:	4122      	asrs	r2, r4
 801f4c4:	b2d2      	uxtb	r2, r2
 801f4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f4ca:	4403      	add	r3, r0
 801f4cc:	9309      	str	r3, [sp, #36]	; 0x24
 801f4ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f4d2:	e711      	b.n	801f2f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 801f4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d18f      	bne.n	801f3fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801f4da:	4b0c      	ldr	r3, [pc, #48]	; (801f50c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x408>)
 801f4dc:	6818      	ldr	r0, [r3, #0]
 801f4de:	6803      	ldr	r3, [r0, #0]
 801f4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4e2:	4798      	blx	r3
 801f4e4:	e789      	b.n	801f3fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	f43f ae8c 	beq.w	801f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 801f4ec:	2180      	movs	r1, #128	; 0x80
 801f4ee:	e754      	b.n	801f39a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x296>
 801f4f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4f2:	b133      	cbz	r3, 801f502 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fe>
 801f4f4:	f018 0f01 	tst.w	r8, #1
 801f4f8:	d003      	beq.n	801f502 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fe>
 801f4fa:	f108 0801 	add.w	r8, r8, #1
 801f4fe:	fa1f f888 	uxth.w	r8, r8
 801f502:	2611      	movs	r6, #17
 801f504:	e6a1      	b.n	801f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x146>
 801f506:	2655      	movs	r6, #85	; 0x55
 801f508:	e69f      	b.n	801f24a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x146>
 801f50a:	bf00      	nop
 801f50c:	20009ac0 	.word	0x20009ac0

0801f510 <CRC_Lock>:
 801f510:	b530      	push	{r4, r5, lr}
 801f512:	4a1f      	ldr	r2, [pc, #124]	; (801f590 <CRC_Lock+0x80>)
 801f514:	6813      	ldr	r3, [r2, #0]
 801f516:	f023 0301 	bic.w	r3, r3, #1
 801f51a:	6013      	str	r3, [r2, #0]
 801f51c:	4b1d      	ldr	r3, [pc, #116]	; (801f594 <CRC_Lock+0x84>)
 801f51e:	681a      	ldr	r2, [r3, #0]
 801f520:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801f524:	4022      	ands	r2, r4
 801f526:	f24c 2540 	movw	r5, #49728	; 0xc240
 801f52a:	42aa      	cmp	r2, r5
 801f52c:	d005      	beq.n	801f53a <CRC_Lock+0x2a>
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	f24c 2270 	movw	r2, #49776	; 0xc270
 801f534:	4023      	ands	r3, r4
 801f536:	4293      	cmp	r3, r2
 801f538:	d11e      	bne.n	801f578 <CRC_Lock+0x68>
 801f53a:	4b17      	ldr	r3, [pc, #92]	; (801f598 <CRC_Lock+0x88>)
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	b9db      	cbnz	r3, 801f578 <CRC_Lock+0x68>
 801f540:	4a16      	ldr	r2, [pc, #88]	; (801f59c <CRC_Lock+0x8c>)
 801f542:	6813      	ldr	r3, [r2, #0]
 801f544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f548:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801f54c:	d006      	beq.n	801f55c <CRC_Lock+0x4c>
 801f54e:	6813      	ldr	r3, [r2, #0]
 801f550:	f240 4283 	movw	r2, #1155	; 0x483
 801f554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f558:	4293      	cmp	r3, r2
 801f55a:	d10d      	bne.n	801f578 <CRC_Lock+0x68>
 801f55c:	4b10      	ldr	r3, [pc, #64]	; (801f5a0 <CRC_Lock+0x90>)
 801f55e:	2201      	movs	r2, #1
 801f560:	601a      	str	r2, [r3, #0]
 801f562:	681a      	ldr	r2, [r3, #0]
 801f564:	2a00      	cmp	r2, #0
 801f566:	d1fc      	bne.n	801f562 <CRC_Lock+0x52>
 801f568:	4b0e      	ldr	r3, [pc, #56]	; (801f5a4 <CRC_Lock+0x94>)
 801f56a:	6018      	str	r0, [r3, #0]
 801f56c:	6818      	ldr	r0, [r3, #0]
 801f56e:	4288      	cmp	r0, r1
 801f570:	bf14      	ite	ne
 801f572:	2000      	movne	r0, #0
 801f574:	2001      	moveq	r0, #1
 801f576:	bd30      	pop	{r4, r5, pc}
 801f578:	4b0b      	ldr	r3, [pc, #44]	; (801f5a8 <CRC_Lock+0x98>)
 801f57a:	2201      	movs	r2, #1
 801f57c:	601a      	str	r2, [r3, #0]
 801f57e:	681a      	ldr	r2, [r3, #0]
 801f580:	2a00      	cmp	r2, #0
 801f582:	d1fc      	bne.n	801f57e <CRC_Lock+0x6e>
 801f584:	4b09      	ldr	r3, [pc, #36]	; (801f5ac <CRC_Lock+0x9c>)
 801f586:	6018      	str	r0, [r3, #0]
 801f588:	6818      	ldr	r0, [r3, #0]
 801f58a:	4281      	cmp	r1, r0
 801f58c:	e7f0      	b.n	801f570 <CRC_Lock+0x60>
 801f58e:	bf00      	nop
 801f590:	e0002000 	.word	0xe0002000
 801f594:	e000ed00 	.word	0xe000ed00
 801f598:	e0042000 	.word	0xe0042000
 801f59c:	5c001000 	.word	0x5c001000
 801f5a0:	58024c08 	.word	0x58024c08
 801f5a4:	58024c00 	.word	0x58024c00
 801f5a8:	40023008 	.word	0x40023008
 801f5ac:	40023000 	.word	0x40023000

0801f5b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801f5b0:	6101      	str	r1, [r0, #16]
 801f5b2:	4770      	bx	lr

0801f5b4 <_ZN8touchgfx8Gestures4tickEv>:
 801f5b4:	7b83      	ldrb	r3, [r0, #14]
 801f5b6:	b14b      	cbz	r3, 801f5cc <_ZN8touchgfx8Gestures4tickEv+0x18>
 801f5b8:	8903      	ldrh	r3, [r0, #8]
 801f5ba:	3301      	adds	r3, #1
 801f5bc:	b29b      	uxth	r3, r3
 801f5be:	2b07      	cmp	r3, #7
 801f5c0:	8103      	strh	r3, [r0, #8]
 801f5c2:	bf81      	itttt	hi
 801f5c4:	2300      	movhi	r3, #0
 801f5c6:	8143      	strhhi	r3, [r0, #10]
 801f5c8:	8183      	strhhi	r3, [r0, #12]
 801f5ca:	7383      	strbhi	r3, [r0, #14]
 801f5cc:	4770      	bx	lr
	...

0801f5d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801f5d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f5d4:	4604      	mov	r4, r0
 801f5d6:	8880      	ldrh	r0, [r0, #4]
 801f5d8:	f8ad 0006 	strh.w	r0, [sp, #6]
 801f5dc:	4698      	mov	r8, r3
 801f5de:	eba8 0000 	sub.w	r0, r8, r0
 801f5e2:	4b1c      	ldr	r3, [pc, #112]	; (801f654 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801f5e4:	9300      	str	r3, [sp, #0]
 801f5e6:	b280      	uxth	r0, r0
 801f5e8:	2300      	movs	r3, #0
 801f5ea:	f88d 3004 	strb.w	r3, [sp, #4]
 801f5ee:	b203      	sxth	r3, r0
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	bfb8      	it	lt
 801f5f4:	4240      	neglt	r0, r0
 801f5f6:	4617      	mov	r7, r2
 801f5f8:	8aa2      	ldrh	r2, [r4, #20]
 801f5fa:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801f5fe:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f602:	bfb8      	it	lt
 801f604:	b203      	sxthlt	r3, r0
 801f606:	460e      	mov	r6, r1
 801f608:	4293      	cmp	r3, r2
 801f60a:	88e1      	ldrh	r1, [r4, #6]
 801f60c:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f610:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f614:	dc0c      	bgt.n	801f630 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801f616:	1a69      	subs	r1, r5, r1
 801f618:	b289      	uxth	r1, r1
 801f61a:	b20b      	sxth	r3, r1
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	bfbc      	itt	lt
 801f620:	4249      	neglt	r1, r1
 801f622:	b20b      	sxthlt	r3, r1
 801f624:	429a      	cmp	r2, r3
 801f626:	db03      	blt.n	801f630 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801f628:	2000      	movs	r0, #0
 801f62a:	b004      	add	sp, #16
 801f62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f630:	6920      	ldr	r0, [r4, #16]
 801f632:	6803      	ldr	r3, [r0, #0]
 801f634:	4669      	mov	r1, sp
 801f636:	685b      	ldr	r3, [r3, #4]
 801f638:	4798      	blx	r3
 801f63a:	eba8 0606 	sub.w	r6, r8, r6
 801f63e:	2300      	movs	r3, #0
 801f640:	1bef      	subs	r7, r5, r7
 801f642:	2001      	movs	r0, #1
 801f644:	8123      	strh	r3, [r4, #8]
 801f646:	8166      	strh	r6, [r4, #10]
 801f648:	81a7      	strh	r7, [r4, #12]
 801f64a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801f64e:	80e5      	strh	r5, [r4, #6]
 801f650:	73a0      	strb	r0, [r4, #14]
 801f652:	e7ea      	b.n	801f62a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 801f654:	08021690 	.word	0x08021690

0801f658 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801f658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f65a:	461e      	mov	r6, r3
 801f65c:	1e4b      	subs	r3, r1, #1
 801f65e:	2b01      	cmp	r3, #1
 801f660:	b085      	sub	sp, #20
 801f662:	4604      	mov	r4, r0
 801f664:	460d      	mov	r5, r1
 801f666:	4617      	mov	r7, r2
 801f668:	d845      	bhi.n	801f6f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 801f66a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f66e:	1cd3      	adds	r3, r2, #3
 801f670:	b29b      	uxth	r3, r3
 801f672:	2b06      	cmp	r3, #6
 801f674:	d913      	bls.n	801f69e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 801f676:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801f67a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801f67e:	4820      	ldr	r0, [pc, #128]	; (801f700 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801f680:	9001      	str	r0, [sp, #4]
 801f682:	2000      	movs	r0, #0
 801f684:	f88d 0008 	strb.w	r0, [sp, #8]
 801f688:	6920      	ldr	r0, [r4, #16]
 801f68a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f68e:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f692:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f696:	6803      	ldr	r3, [r0, #0]
 801f698:	a901      	add	r1, sp, #4
 801f69a:	689b      	ldr	r3, [r3, #8]
 801f69c:	4798      	blx	r3
 801f69e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f6a2:	1cd3      	adds	r3, r2, #3
 801f6a4:	b29b      	uxth	r3, r3
 801f6a6:	2b06      	cmp	r3, #6
 801f6a8:	d913      	bls.n	801f6d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801f6aa:	4815      	ldr	r0, [pc, #84]	; (801f700 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801f6ac:	9001      	str	r0, [sp, #4]
 801f6ae:	2001      	movs	r0, #1
 801f6b0:	f88d 0008 	strb.w	r0, [sp, #8]
 801f6b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f6b8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f6bc:	6920      	ldr	r0, [r4, #16]
 801f6be:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f6c2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f6c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f6ca:	6803      	ldr	r3, [r0, #0]
 801f6cc:	a901      	add	r1, sp, #4
 801f6ce:	689b      	ldr	r3, [r3, #8]
 801f6d0:	4798      	blx	r3
 801f6d2:	4b0c      	ldr	r3, [pc, #48]	; (801f704 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 801f6d4:	9301      	str	r3, [sp, #4]
 801f6d6:	6920      	ldr	r0, [r4, #16]
 801f6d8:	f88d 5008 	strb.w	r5, [sp, #8]
 801f6dc:	2300      	movs	r3, #0
 801f6de:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f6e2:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f6e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f6ea:	6803      	ldr	r3, [r0, #0]
 801f6ec:	a901      	add	r1, sp, #4
 801f6ee:	681b      	ldr	r3, [r3, #0]
 801f6f0:	4798      	blx	r3
 801f6f2:	b005      	add	sp, #20
 801f6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6f6:	2900      	cmp	r1, #0
 801f6f8:	d1eb      	bne.n	801f6d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801f6fa:	80a2      	strh	r2, [r4, #4]
 801f6fc:	80c6      	strh	r6, [r0, #6]
 801f6fe:	e7e8      	b.n	801f6d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801f700:	08023528 	.word	0x08023528
 801f704:	080216a4 	.word	0x080216a4

0801f708 <__cxa_pure_virtual>:
 801f708:	b508      	push	{r3, lr}
 801f70a:	f000 f811 	bl	801f730 <_ZSt9terminatev>

0801f70e <_ZdlPvj>:
 801f70e:	f000 b800 	b.w	801f712 <_ZdlPv>

0801f712 <_ZdlPv>:
 801f712:	f000 b881 	b.w	801f818 <free>

0801f716 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f716:	b508      	push	{r3, lr}
 801f718:	4780      	blx	r0
 801f71a:	f000 f80e 	bl	801f73a <abort>
	...

0801f720 <_ZSt13get_terminatev>:
 801f720:	4b02      	ldr	r3, [pc, #8]	; (801f72c <_ZSt13get_terminatev+0xc>)
 801f722:	6818      	ldr	r0, [r3, #0]
 801f724:	f3bf 8f5b 	dmb	ish
 801f728:	4770      	bx	lr
 801f72a:	bf00      	nop
 801f72c:	20000084 	.word	0x20000084

0801f730 <_ZSt9terminatev>:
 801f730:	b508      	push	{r3, lr}
 801f732:	f7ff fff5 	bl	801f720 <_ZSt13get_terminatev>
 801f736:	f7ff ffee 	bl	801f716 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f73a <abort>:
 801f73a:	b508      	push	{r3, lr}
 801f73c:	2006      	movs	r0, #6
 801f73e:	f000 fc2f 	bl	801ffa0 <raise>
 801f742:	2001      	movs	r0, #1
 801f744:	f7e1 fd62 	bl	800120c <_exit>

0801f748 <__assert_func>:
 801f748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f74a:	461c      	mov	r4, r3
 801f74c:	4b09      	ldr	r3, [pc, #36]	; (801f774 <__assert_func+0x2c>)
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	4605      	mov	r5, r0
 801f752:	68d8      	ldr	r0, [r3, #12]
 801f754:	b152      	cbz	r2, 801f76c <__assert_func+0x24>
 801f756:	4b08      	ldr	r3, [pc, #32]	; (801f778 <__assert_func+0x30>)
 801f758:	9100      	str	r1, [sp, #0]
 801f75a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801f75e:	4907      	ldr	r1, [pc, #28]	; (801f77c <__assert_func+0x34>)
 801f760:	462b      	mov	r3, r5
 801f762:	4622      	mov	r2, r4
 801f764:	f000 f81a 	bl	801f79c <fiprintf>
 801f768:	f7ff ffe7 	bl	801f73a <abort>
 801f76c:	4b04      	ldr	r3, [pc, #16]	; (801f780 <__assert_func+0x38>)
 801f76e:	461a      	mov	r2, r3
 801f770:	e7f2      	b.n	801f758 <__assert_func+0x10>
 801f772:	bf00      	nop
 801f774:	20000088 	.word	0x20000088
 801f778:	08024755 	.word	0x08024755
 801f77c:	08024762 	.word	0x08024762
 801f780:	08024790 	.word	0x08024790

0801f784 <atexit>:
 801f784:	2300      	movs	r3, #0
 801f786:	4601      	mov	r1, r0
 801f788:	461a      	mov	r2, r3
 801f78a:	4618      	mov	r0, r3
 801f78c:	f000 bce4 	b.w	8020158 <__register_exitproc>

0801f790 <__errno>:
 801f790:	4b01      	ldr	r3, [pc, #4]	; (801f798 <__errno+0x8>)
 801f792:	6818      	ldr	r0, [r3, #0]
 801f794:	4770      	bx	lr
 801f796:	bf00      	nop
 801f798:	20000088 	.word	0x20000088

0801f79c <fiprintf>:
 801f79c:	b40e      	push	{r1, r2, r3}
 801f79e:	b503      	push	{r0, r1, lr}
 801f7a0:	4601      	mov	r1, r0
 801f7a2:	ab03      	add	r3, sp, #12
 801f7a4:	4805      	ldr	r0, [pc, #20]	; (801f7bc <fiprintf+0x20>)
 801f7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f7aa:	6800      	ldr	r0, [r0, #0]
 801f7ac:	9301      	str	r3, [sp, #4]
 801f7ae:	f000 f921 	bl	801f9f4 <_vfiprintf_r>
 801f7b2:	b002      	add	sp, #8
 801f7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f7b8:	b003      	add	sp, #12
 801f7ba:	4770      	bx	lr
 801f7bc:	20000088 	.word	0x20000088

0801f7c0 <__libc_init_array>:
 801f7c0:	b570      	push	{r4, r5, r6, lr}
 801f7c2:	4e0d      	ldr	r6, [pc, #52]	; (801f7f8 <__libc_init_array+0x38>)
 801f7c4:	4c0d      	ldr	r4, [pc, #52]	; (801f7fc <__libc_init_array+0x3c>)
 801f7c6:	1ba4      	subs	r4, r4, r6
 801f7c8:	10a4      	asrs	r4, r4, #2
 801f7ca:	2500      	movs	r5, #0
 801f7cc:	42a5      	cmp	r5, r4
 801f7ce:	d109      	bne.n	801f7e4 <__libc_init_array+0x24>
 801f7d0:	4e0b      	ldr	r6, [pc, #44]	; (801f800 <__libc_init_array+0x40>)
 801f7d2:	4c0c      	ldr	r4, [pc, #48]	; (801f804 <__libc_init_array+0x44>)
 801f7d4:	f000 ffb0 	bl	8020738 <_init>
 801f7d8:	1ba4      	subs	r4, r4, r6
 801f7da:	10a4      	asrs	r4, r4, #2
 801f7dc:	2500      	movs	r5, #0
 801f7de:	42a5      	cmp	r5, r4
 801f7e0:	d105      	bne.n	801f7ee <__libc_init_array+0x2e>
 801f7e2:	bd70      	pop	{r4, r5, r6, pc}
 801f7e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f7e8:	4798      	blx	r3
 801f7ea:	3501      	adds	r5, #1
 801f7ec:	e7ee      	b.n	801f7cc <__libc_init_array+0xc>
 801f7ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f7f2:	4798      	blx	r3
 801f7f4:	3501      	adds	r5, #1
 801f7f6:	e7f2      	b.n	801f7de <__libc_init_array+0x1e>
 801f7f8:	080cea28 	.word	0x080cea28
 801f7fc:	080cea28 	.word	0x080cea28
 801f800:	080cea28 	.word	0x080cea28
 801f804:	080cea34 	.word	0x080cea34

0801f808 <malloc>:
 801f808:	4b02      	ldr	r3, [pc, #8]	; (801f814 <malloc+0xc>)
 801f80a:	4601      	mov	r1, r0
 801f80c:	6818      	ldr	r0, [r3, #0]
 801f80e:	f000 b86d 	b.w	801f8ec <_malloc_r>
 801f812:	bf00      	nop
 801f814:	20000088 	.word	0x20000088

0801f818 <free>:
 801f818:	4b02      	ldr	r3, [pc, #8]	; (801f824 <free+0xc>)
 801f81a:	4601      	mov	r1, r0
 801f81c:	6818      	ldr	r0, [r3, #0]
 801f81e:	f000 b817 	b.w	801f850 <_free_r>
 801f822:	bf00      	nop
 801f824:	20000088 	.word	0x20000088

0801f828 <memcpy>:
 801f828:	b510      	push	{r4, lr}
 801f82a:	1e43      	subs	r3, r0, #1
 801f82c:	440a      	add	r2, r1
 801f82e:	4291      	cmp	r1, r2
 801f830:	d100      	bne.n	801f834 <memcpy+0xc>
 801f832:	bd10      	pop	{r4, pc}
 801f834:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f838:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f83c:	e7f7      	b.n	801f82e <memcpy+0x6>

0801f83e <memset>:
 801f83e:	4402      	add	r2, r0
 801f840:	4603      	mov	r3, r0
 801f842:	4293      	cmp	r3, r2
 801f844:	d100      	bne.n	801f848 <memset+0xa>
 801f846:	4770      	bx	lr
 801f848:	f803 1b01 	strb.w	r1, [r3], #1
 801f84c:	e7f9      	b.n	801f842 <memset+0x4>
	...

0801f850 <_free_r>:
 801f850:	b538      	push	{r3, r4, r5, lr}
 801f852:	4605      	mov	r5, r0
 801f854:	2900      	cmp	r1, #0
 801f856:	d045      	beq.n	801f8e4 <_free_r+0x94>
 801f858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f85c:	1f0c      	subs	r4, r1, #4
 801f85e:	2b00      	cmp	r3, #0
 801f860:	bfb8      	it	lt
 801f862:	18e4      	addlt	r4, r4, r3
 801f864:	f000 feba 	bl	80205dc <__malloc_lock>
 801f868:	4a1f      	ldr	r2, [pc, #124]	; (801f8e8 <_free_r+0x98>)
 801f86a:	6813      	ldr	r3, [r2, #0]
 801f86c:	4610      	mov	r0, r2
 801f86e:	b933      	cbnz	r3, 801f87e <_free_r+0x2e>
 801f870:	6063      	str	r3, [r4, #4]
 801f872:	6014      	str	r4, [r2, #0]
 801f874:	4628      	mov	r0, r5
 801f876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f87a:	f000 beb0 	b.w	80205de <__malloc_unlock>
 801f87e:	42a3      	cmp	r3, r4
 801f880:	d90c      	bls.n	801f89c <_free_r+0x4c>
 801f882:	6821      	ldr	r1, [r4, #0]
 801f884:	1862      	adds	r2, r4, r1
 801f886:	4293      	cmp	r3, r2
 801f888:	bf04      	itt	eq
 801f88a:	681a      	ldreq	r2, [r3, #0]
 801f88c:	685b      	ldreq	r3, [r3, #4]
 801f88e:	6063      	str	r3, [r4, #4]
 801f890:	bf04      	itt	eq
 801f892:	1852      	addeq	r2, r2, r1
 801f894:	6022      	streq	r2, [r4, #0]
 801f896:	6004      	str	r4, [r0, #0]
 801f898:	e7ec      	b.n	801f874 <_free_r+0x24>
 801f89a:	4613      	mov	r3, r2
 801f89c:	685a      	ldr	r2, [r3, #4]
 801f89e:	b10a      	cbz	r2, 801f8a4 <_free_r+0x54>
 801f8a0:	42a2      	cmp	r2, r4
 801f8a2:	d9fa      	bls.n	801f89a <_free_r+0x4a>
 801f8a4:	6819      	ldr	r1, [r3, #0]
 801f8a6:	1858      	adds	r0, r3, r1
 801f8a8:	42a0      	cmp	r0, r4
 801f8aa:	d10b      	bne.n	801f8c4 <_free_r+0x74>
 801f8ac:	6820      	ldr	r0, [r4, #0]
 801f8ae:	4401      	add	r1, r0
 801f8b0:	1858      	adds	r0, r3, r1
 801f8b2:	4282      	cmp	r2, r0
 801f8b4:	6019      	str	r1, [r3, #0]
 801f8b6:	d1dd      	bne.n	801f874 <_free_r+0x24>
 801f8b8:	6810      	ldr	r0, [r2, #0]
 801f8ba:	6852      	ldr	r2, [r2, #4]
 801f8bc:	605a      	str	r2, [r3, #4]
 801f8be:	4401      	add	r1, r0
 801f8c0:	6019      	str	r1, [r3, #0]
 801f8c2:	e7d7      	b.n	801f874 <_free_r+0x24>
 801f8c4:	d902      	bls.n	801f8cc <_free_r+0x7c>
 801f8c6:	230c      	movs	r3, #12
 801f8c8:	602b      	str	r3, [r5, #0]
 801f8ca:	e7d3      	b.n	801f874 <_free_r+0x24>
 801f8cc:	6820      	ldr	r0, [r4, #0]
 801f8ce:	1821      	adds	r1, r4, r0
 801f8d0:	428a      	cmp	r2, r1
 801f8d2:	bf04      	itt	eq
 801f8d4:	6811      	ldreq	r1, [r2, #0]
 801f8d6:	6852      	ldreq	r2, [r2, #4]
 801f8d8:	6062      	str	r2, [r4, #4]
 801f8da:	bf04      	itt	eq
 801f8dc:	1809      	addeq	r1, r1, r0
 801f8de:	6021      	streq	r1, [r4, #0]
 801f8e0:	605c      	str	r4, [r3, #4]
 801f8e2:	e7c7      	b.n	801f874 <_free_r+0x24>
 801f8e4:	bd38      	pop	{r3, r4, r5, pc}
 801f8e6:	bf00      	nop
 801f8e8:	20009b60 	.word	0x20009b60

0801f8ec <_malloc_r>:
 801f8ec:	b570      	push	{r4, r5, r6, lr}
 801f8ee:	1ccd      	adds	r5, r1, #3
 801f8f0:	f025 0503 	bic.w	r5, r5, #3
 801f8f4:	3508      	adds	r5, #8
 801f8f6:	2d0c      	cmp	r5, #12
 801f8f8:	bf38      	it	cc
 801f8fa:	250c      	movcc	r5, #12
 801f8fc:	2d00      	cmp	r5, #0
 801f8fe:	4606      	mov	r6, r0
 801f900:	db01      	blt.n	801f906 <_malloc_r+0x1a>
 801f902:	42a9      	cmp	r1, r5
 801f904:	d903      	bls.n	801f90e <_malloc_r+0x22>
 801f906:	230c      	movs	r3, #12
 801f908:	6033      	str	r3, [r6, #0]
 801f90a:	2000      	movs	r0, #0
 801f90c:	bd70      	pop	{r4, r5, r6, pc}
 801f90e:	f000 fe65 	bl	80205dc <__malloc_lock>
 801f912:	4a21      	ldr	r2, [pc, #132]	; (801f998 <_malloc_r+0xac>)
 801f914:	6814      	ldr	r4, [r2, #0]
 801f916:	4621      	mov	r1, r4
 801f918:	b991      	cbnz	r1, 801f940 <_malloc_r+0x54>
 801f91a:	4c20      	ldr	r4, [pc, #128]	; (801f99c <_malloc_r+0xb0>)
 801f91c:	6823      	ldr	r3, [r4, #0]
 801f91e:	b91b      	cbnz	r3, 801f928 <_malloc_r+0x3c>
 801f920:	4630      	mov	r0, r6
 801f922:	f000 fb05 	bl	801ff30 <_sbrk_r>
 801f926:	6020      	str	r0, [r4, #0]
 801f928:	4629      	mov	r1, r5
 801f92a:	4630      	mov	r0, r6
 801f92c:	f000 fb00 	bl	801ff30 <_sbrk_r>
 801f930:	1c43      	adds	r3, r0, #1
 801f932:	d124      	bne.n	801f97e <_malloc_r+0x92>
 801f934:	230c      	movs	r3, #12
 801f936:	6033      	str	r3, [r6, #0]
 801f938:	4630      	mov	r0, r6
 801f93a:	f000 fe50 	bl	80205de <__malloc_unlock>
 801f93e:	e7e4      	b.n	801f90a <_malloc_r+0x1e>
 801f940:	680b      	ldr	r3, [r1, #0]
 801f942:	1b5b      	subs	r3, r3, r5
 801f944:	d418      	bmi.n	801f978 <_malloc_r+0x8c>
 801f946:	2b0b      	cmp	r3, #11
 801f948:	d90f      	bls.n	801f96a <_malloc_r+0x7e>
 801f94a:	600b      	str	r3, [r1, #0]
 801f94c:	50cd      	str	r5, [r1, r3]
 801f94e:	18cc      	adds	r4, r1, r3
 801f950:	4630      	mov	r0, r6
 801f952:	f000 fe44 	bl	80205de <__malloc_unlock>
 801f956:	f104 000b 	add.w	r0, r4, #11
 801f95a:	1d23      	adds	r3, r4, #4
 801f95c:	f020 0007 	bic.w	r0, r0, #7
 801f960:	1ac3      	subs	r3, r0, r3
 801f962:	d0d3      	beq.n	801f90c <_malloc_r+0x20>
 801f964:	425a      	negs	r2, r3
 801f966:	50e2      	str	r2, [r4, r3]
 801f968:	e7d0      	b.n	801f90c <_malloc_r+0x20>
 801f96a:	428c      	cmp	r4, r1
 801f96c:	684b      	ldr	r3, [r1, #4]
 801f96e:	bf16      	itet	ne
 801f970:	6063      	strne	r3, [r4, #4]
 801f972:	6013      	streq	r3, [r2, #0]
 801f974:	460c      	movne	r4, r1
 801f976:	e7eb      	b.n	801f950 <_malloc_r+0x64>
 801f978:	460c      	mov	r4, r1
 801f97a:	6849      	ldr	r1, [r1, #4]
 801f97c:	e7cc      	b.n	801f918 <_malloc_r+0x2c>
 801f97e:	1cc4      	adds	r4, r0, #3
 801f980:	f024 0403 	bic.w	r4, r4, #3
 801f984:	42a0      	cmp	r0, r4
 801f986:	d005      	beq.n	801f994 <_malloc_r+0xa8>
 801f988:	1a21      	subs	r1, r4, r0
 801f98a:	4630      	mov	r0, r6
 801f98c:	f000 fad0 	bl	801ff30 <_sbrk_r>
 801f990:	3001      	adds	r0, #1
 801f992:	d0cf      	beq.n	801f934 <_malloc_r+0x48>
 801f994:	6025      	str	r5, [r4, #0]
 801f996:	e7db      	b.n	801f950 <_malloc_r+0x64>
 801f998:	20009b60 	.word	0x20009b60
 801f99c:	20009b64 	.word	0x20009b64

0801f9a0 <__sfputc_r>:
 801f9a0:	6893      	ldr	r3, [r2, #8]
 801f9a2:	3b01      	subs	r3, #1
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	b410      	push	{r4}
 801f9a8:	6093      	str	r3, [r2, #8]
 801f9aa:	da08      	bge.n	801f9be <__sfputc_r+0x1e>
 801f9ac:	6994      	ldr	r4, [r2, #24]
 801f9ae:	42a3      	cmp	r3, r4
 801f9b0:	db01      	blt.n	801f9b6 <__sfputc_r+0x16>
 801f9b2:	290a      	cmp	r1, #10
 801f9b4:	d103      	bne.n	801f9be <__sfputc_r+0x1e>
 801f9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f9ba:	f000 bb0d 	b.w	801ffd8 <__swbuf_r>
 801f9be:	6813      	ldr	r3, [r2, #0]
 801f9c0:	1c58      	adds	r0, r3, #1
 801f9c2:	6010      	str	r0, [r2, #0]
 801f9c4:	7019      	strb	r1, [r3, #0]
 801f9c6:	4608      	mov	r0, r1
 801f9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f9cc:	4770      	bx	lr

0801f9ce <__sfputs_r>:
 801f9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9d0:	4606      	mov	r6, r0
 801f9d2:	460f      	mov	r7, r1
 801f9d4:	4614      	mov	r4, r2
 801f9d6:	18d5      	adds	r5, r2, r3
 801f9d8:	42ac      	cmp	r4, r5
 801f9da:	d101      	bne.n	801f9e0 <__sfputs_r+0x12>
 801f9dc:	2000      	movs	r0, #0
 801f9de:	e007      	b.n	801f9f0 <__sfputs_r+0x22>
 801f9e0:	463a      	mov	r2, r7
 801f9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f9e6:	4630      	mov	r0, r6
 801f9e8:	f7ff ffda 	bl	801f9a0 <__sfputc_r>
 801f9ec:	1c43      	adds	r3, r0, #1
 801f9ee:	d1f3      	bne.n	801f9d8 <__sfputs_r+0xa>
 801f9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f9f4 <_vfiprintf_r>:
 801f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9f8:	460c      	mov	r4, r1
 801f9fa:	b09d      	sub	sp, #116	; 0x74
 801f9fc:	4617      	mov	r7, r2
 801f9fe:	461d      	mov	r5, r3
 801fa00:	4606      	mov	r6, r0
 801fa02:	b118      	cbz	r0, 801fa0c <_vfiprintf_r+0x18>
 801fa04:	6983      	ldr	r3, [r0, #24]
 801fa06:	b90b      	cbnz	r3, 801fa0c <_vfiprintf_r+0x18>
 801fa08:	f000 fcfa 	bl	8020400 <__sinit>
 801fa0c:	4b7c      	ldr	r3, [pc, #496]	; (801fc00 <_vfiprintf_r+0x20c>)
 801fa0e:	429c      	cmp	r4, r3
 801fa10:	d158      	bne.n	801fac4 <_vfiprintf_r+0xd0>
 801fa12:	6874      	ldr	r4, [r6, #4]
 801fa14:	89a3      	ldrh	r3, [r4, #12]
 801fa16:	0718      	lsls	r0, r3, #28
 801fa18:	d55e      	bpl.n	801fad8 <_vfiprintf_r+0xe4>
 801fa1a:	6923      	ldr	r3, [r4, #16]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d05b      	beq.n	801fad8 <_vfiprintf_r+0xe4>
 801fa20:	2300      	movs	r3, #0
 801fa22:	9309      	str	r3, [sp, #36]	; 0x24
 801fa24:	2320      	movs	r3, #32
 801fa26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fa2a:	2330      	movs	r3, #48	; 0x30
 801fa2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fa30:	9503      	str	r5, [sp, #12]
 801fa32:	f04f 0b01 	mov.w	fp, #1
 801fa36:	46b8      	mov	r8, r7
 801fa38:	4645      	mov	r5, r8
 801fa3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fa3e:	b10b      	cbz	r3, 801fa44 <_vfiprintf_r+0x50>
 801fa40:	2b25      	cmp	r3, #37	; 0x25
 801fa42:	d154      	bne.n	801faee <_vfiprintf_r+0xfa>
 801fa44:	ebb8 0a07 	subs.w	sl, r8, r7
 801fa48:	d00b      	beq.n	801fa62 <_vfiprintf_r+0x6e>
 801fa4a:	4653      	mov	r3, sl
 801fa4c:	463a      	mov	r2, r7
 801fa4e:	4621      	mov	r1, r4
 801fa50:	4630      	mov	r0, r6
 801fa52:	f7ff ffbc 	bl	801f9ce <__sfputs_r>
 801fa56:	3001      	adds	r0, #1
 801fa58:	f000 80c2 	beq.w	801fbe0 <_vfiprintf_r+0x1ec>
 801fa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa5e:	4453      	add	r3, sl
 801fa60:	9309      	str	r3, [sp, #36]	; 0x24
 801fa62:	f898 3000 	ldrb.w	r3, [r8]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	f000 80ba 	beq.w	801fbe0 <_vfiprintf_r+0x1ec>
 801fa6c:	2300      	movs	r3, #0
 801fa6e:	f04f 32ff 	mov.w	r2, #4294967295
 801fa72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fa76:	9304      	str	r3, [sp, #16]
 801fa78:	9307      	str	r3, [sp, #28]
 801fa7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fa7e:	931a      	str	r3, [sp, #104]	; 0x68
 801fa80:	46a8      	mov	r8, r5
 801fa82:	2205      	movs	r2, #5
 801fa84:	f818 1b01 	ldrb.w	r1, [r8], #1
 801fa88:	485e      	ldr	r0, [pc, #376]	; (801fc04 <_vfiprintf_r+0x210>)
 801fa8a:	f7e0 fbb9 	bl	8000200 <memchr>
 801fa8e:	9b04      	ldr	r3, [sp, #16]
 801fa90:	bb78      	cbnz	r0, 801faf2 <_vfiprintf_r+0xfe>
 801fa92:	06d9      	lsls	r1, r3, #27
 801fa94:	bf44      	itt	mi
 801fa96:	2220      	movmi	r2, #32
 801fa98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fa9c:	071a      	lsls	r2, r3, #28
 801fa9e:	bf44      	itt	mi
 801faa0:	222b      	movmi	r2, #43	; 0x2b
 801faa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801faa6:	782a      	ldrb	r2, [r5, #0]
 801faa8:	2a2a      	cmp	r2, #42	; 0x2a
 801faaa:	d02a      	beq.n	801fb02 <_vfiprintf_r+0x10e>
 801faac:	9a07      	ldr	r2, [sp, #28]
 801faae:	46a8      	mov	r8, r5
 801fab0:	2000      	movs	r0, #0
 801fab2:	250a      	movs	r5, #10
 801fab4:	4641      	mov	r1, r8
 801fab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801faba:	3b30      	subs	r3, #48	; 0x30
 801fabc:	2b09      	cmp	r3, #9
 801fabe:	d969      	bls.n	801fb94 <_vfiprintf_r+0x1a0>
 801fac0:	b360      	cbz	r0, 801fb1c <_vfiprintf_r+0x128>
 801fac2:	e024      	b.n	801fb0e <_vfiprintf_r+0x11a>
 801fac4:	4b50      	ldr	r3, [pc, #320]	; (801fc08 <_vfiprintf_r+0x214>)
 801fac6:	429c      	cmp	r4, r3
 801fac8:	d101      	bne.n	801face <_vfiprintf_r+0xda>
 801faca:	68b4      	ldr	r4, [r6, #8]
 801facc:	e7a2      	b.n	801fa14 <_vfiprintf_r+0x20>
 801face:	4b4f      	ldr	r3, [pc, #316]	; (801fc0c <_vfiprintf_r+0x218>)
 801fad0:	429c      	cmp	r4, r3
 801fad2:	bf08      	it	eq
 801fad4:	68f4      	ldreq	r4, [r6, #12]
 801fad6:	e79d      	b.n	801fa14 <_vfiprintf_r+0x20>
 801fad8:	4621      	mov	r1, r4
 801fada:	4630      	mov	r0, r6
 801fadc:	f000 face 	bl	802007c <__swsetup_r>
 801fae0:	2800      	cmp	r0, #0
 801fae2:	d09d      	beq.n	801fa20 <_vfiprintf_r+0x2c>
 801fae4:	f04f 30ff 	mov.w	r0, #4294967295
 801fae8:	b01d      	add	sp, #116	; 0x74
 801faea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faee:	46a8      	mov	r8, r5
 801faf0:	e7a2      	b.n	801fa38 <_vfiprintf_r+0x44>
 801faf2:	4a44      	ldr	r2, [pc, #272]	; (801fc04 <_vfiprintf_r+0x210>)
 801faf4:	1a80      	subs	r0, r0, r2
 801faf6:	fa0b f000 	lsl.w	r0, fp, r0
 801fafa:	4318      	orrs	r0, r3
 801fafc:	9004      	str	r0, [sp, #16]
 801fafe:	4645      	mov	r5, r8
 801fb00:	e7be      	b.n	801fa80 <_vfiprintf_r+0x8c>
 801fb02:	9a03      	ldr	r2, [sp, #12]
 801fb04:	1d11      	adds	r1, r2, #4
 801fb06:	6812      	ldr	r2, [r2, #0]
 801fb08:	9103      	str	r1, [sp, #12]
 801fb0a:	2a00      	cmp	r2, #0
 801fb0c:	db01      	blt.n	801fb12 <_vfiprintf_r+0x11e>
 801fb0e:	9207      	str	r2, [sp, #28]
 801fb10:	e004      	b.n	801fb1c <_vfiprintf_r+0x128>
 801fb12:	4252      	negs	r2, r2
 801fb14:	f043 0302 	orr.w	r3, r3, #2
 801fb18:	9207      	str	r2, [sp, #28]
 801fb1a:	9304      	str	r3, [sp, #16]
 801fb1c:	f898 3000 	ldrb.w	r3, [r8]
 801fb20:	2b2e      	cmp	r3, #46	; 0x2e
 801fb22:	d10e      	bne.n	801fb42 <_vfiprintf_r+0x14e>
 801fb24:	f898 3001 	ldrb.w	r3, [r8, #1]
 801fb28:	2b2a      	cmp	r3, #42	; 0x2a
 801fb2a:	d138      	bne.n	801fb9e <_vfiprintf_r+0x1aa>
 801fb2c:	9b03      	ldr	r3, [sp, #12]
 801fb2e:	1d1a      	adds	r2, r3, #4
 801fb30:	681b      	ldr	r3, [r3, #0]
 801fb32:	9203      	str	r2, [sp, #12]
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	bfb8      	it	lt
 801fb38:	f04f 33ff 	movlt.w	r3, #4294967295
 801fb3c:	f108 0802 	add.w	r8, r8, #2
 801fb40:	9305      	str	r3, [sp, #20]
 801fb42:	4d33      	ldr	r5, [pc, #204]	; (801fc10 <_vfiprintf_r+0x21c>)
 801fb44:	f898 1000 	ldrb.w	r1, [r8]
 801fb48:	2203      	movs	r2, #3
 801fb4a:	4628      	mov	r0, r5
 801fb4c:	f7e0 fb58 	bl	8000200 <memchr>
 801fb50:	b140      	cbz	r0, 801fb64 <_vfiprintf_r+0x170>
 801fb52:	2340      	movs	r3, #64	; 0x40
 801fb54:	1b40      	subs	r0, r0, r5
 801fb56:	fa03 f000 	lsl.w	r0, r3, r0
 801fb5a:	9b04      	ldr	r3, [sp, #16]
 801fb5c:	4303      	orrs	r3, r0
 801fb5e:	f108 0801 	add.w	r8, r8, #1
 801fb62:	9304      	str	r3, [sp, #16]
 801fb64:	f898 1000 	ldrb.w	r1, [r8]
 801fb68:	482a      	ldr	r0, [pc, #168]	; (801fc14 <_vfiprintf_r+0x220>)
 801fb6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fb6e:	2206      	movs	r2, #6
 801fb70:	f108 0701 	add.w	r7, r8, #1
 801fb74:	f7e0 fb44 	bl	8000200 <memchr>
 801fb78:	2800      	cmp	r0, #0
 801fb7a:	d037      	beq.n	801fbec <_vfiprintf_r+0x1f8>
 801fb7c:	4b26      	ldr	r3, [pc, #152]	; (801fc18 <_vfiprintf_r+0x224>)
 801fb7e:	bb1b      	cbnz	r3, 801fbc8 <_vfiprintf_r+0x1d4>
 801fb80:	9b03      	ldr	r3, [sp, #12]
 801fb82:	3307      	adds	r3, #7
 801fb84:	f023 0307 	bic.w	r3, r3, #7
 801fb88:	3308      	adds	r3, #8
 801fb8a:	9303      	str	r3, [sp, #12]
 801fb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb8e:	444b      	add	r3, r9
 801fb90:	9309      	str	r3, [sp, #36]	; 0x24
 801fb92:	e750      	b.n	801fa36 <_vfiprintf_r+0x42>
 801fb94:	fb05 3202 	mla	r2, r5, r2, r3
 801fb98:	2001      	movs	r0, #1
 801fb9a:	4688      	mov	r8, r1
 801fb9c:	e78a      	b.n	801fab4 <_vfiprintf_r+0xc0>
 801fb9e:	2300      	movs	r3, #0
 801fba0:	f108 0801 	add.w	r8, r8, #1
 801fba4:	9305      	str	r3, [sp, #20]
 801fba6:	4619      	mov	r1, r3
 801fba8:	250a      	movs	r5, #10
 801fbaa:	4640      	mov	r0, r8
 801fbac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fbb0:	3a30      	subs	r2, #48	; 0x30
 801fbb2:	2a09      	cmp	r2, #9
 801fbb4:	d903      	bls.n	801fbbe <_vfiprintf_r+0x1ca>
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d0c3      	beq.n	801fb42 <_vfiprintf_r+0x14e>
 801fbba:	9105      	str	r1, [sp, #20]
 801fbbc:	e7c1      	b.n	801fb42 <_vfiprintf_r+0x14e>
 801fbbe:	fb05 2101 	mla	r1, r5, r1, r2
 801fbc2:	2301      	movs	r3, #1
 801fbc4:	4680      	mov	r8, r0
 801fbc6:	e7f0      	b.n	801fbaa <_vfiprintf_r+0x1b6>
 801fbc8:	ab03      	add	r3, sp, #12
 801fbca:	9300      	str	r3, [sp, #0]
 801fbcc:	4622      	mov	r2, r4
 801fbce:	4b13      	ldr	r3, [pc, #76]	; (801fc1c <_vfiprintf_r+0x228>)
 801fbd0:	a904      	add	r1, sp, #16
 801fbd2:	4630      	mov	r0, r6
 801fbd4:	f3af 8000 	nop.w
 801fbd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801fbdc:	4681      	mov	r9, r0
 801fbde:	d1d5      	bne.n	801fb8c <_vfiprintf_r+0x198>
 801fbe0:	89a3      	ldrh	r3, [r4, #12]
 801fbe2:	065b      	lsls	r3, r3, #25
 801fbe4:	f53f af7e 	bmi.w	801fae4 <_vfiprintf_r+0xf0>
 801fbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fbea:	e77d      	b.n	801fae8 <_vfiprintf_r+0xf4>
 801fbec:	ab03      	add	r3, sp, #12
 801fbee:	9300      	str	r3, [sp, #0]
 801fbf0:	4622      	mov	r2, r4
 801fbf2:	4b0a      	ldr	r3, [pc, #40]	; (801fc1c <_vfiprintf_r+0x228>)
 801fbf4:	a904      	add	r1, sp, #16
 801fbf6:	4630      	mov	r0, r6
 801fbf8:	f000 f888 	bl	801fd0c <_printf_i>
 801fbfc:	e7ec      	b.n	801fbd8 <_vfiprintf_r+0x1e4>
 801fbfe:	bf00      	nop
 801fc00:	080247ec 	.word	0x080247ec
 801fc04:	08024798 	.word	0x08024798
 801fc08:	0802480c 	.word	0x0802480c
 801fc0c:	080247cc 	.word	0x080247cc
 801fc10:	0802479e 	.word	0x0802479e
 801fc14:	080247a2 	.word	0x080247a2
 801fc18:	00000000 	.word	0x00000000
 801fc1c:	0801f9cf 	.word	0x0801f9cf

0801fc20 <_printf_common>:
 801fc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc24:	4691      	mov	r9, r2
 801fc26:	461f      	mov	r7, r3
 801fc28:	688a      	ldr	r2, [r1, #8]
 801fc2a:	690b      	ldr	r3, [r1, #16]
 801fc2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fc30:	4293      	cmp	r3, r2
 801fc32:	bfb8      	it	lt
 801fc34:	4613      	movlt	r3, r2
 801fc36:	f8c9 3000 	str.w	r3, [r9]
 801fc3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fc3e:	4606      	mov	r6, r0
 801fc40:	460c      	mov	r4, r1
 801fc42:	b112      	cbz	r2, 801fc4a <_printf_common+0x2a>
 801fc44:	3301      	adds	r3, #1
 801fc46:	f8c9 3000 	str.w	r3, [r9]
 801fc4a:	6823      	ldr	r3, [r4, #0]
 801fc4c:	0699      	lsls	r1, r3, #26
 801fc4e:	bf42      	ittt	mi
 801fc50:	f8d9 3000 	ldrmi.w	r3, [r9]
 801fc54:	3302      	addmi	r3, #2
 801fc56:	f8c9 3000 	strmi.w	r3, [r9]
 801fc5a:	6825      	ldr	r5, [r4, #0]
 801fc5c:	f015 0506 	ands.w	r5, r5, #6
 801fc60:	d107      	bne.n	801fc72 <_printf_common+0x52>
 801fc62:	f104 0a19 	add.w	sl, r4, #25
 801fc66:	68e3      	ldr	r3, [r4, #12]
 801fc68:	f8d9 2000 	ldr.w	r2, [r9]
 801fc6c:	1a9b      	subs	r3, r3, r2
 801fc6e:	42ab      	cmp	r3, r5
 801fc70:	dc28      	bgt.n	801fcc4 <_printf_common+0xa4>
 801fc72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801fc76:	6822      	ldr	r2, [r4, #0]
 801fc78:	3300      	adds	r3, #0
 801fc7a:	bf18      	it	ne
 801fc7c:	2301      	movne	r3, #1
 801fc7e:	0692      	lsls	r2, r2, #26
 801fc80:	d42d      	bmi.n	801fcde <_printf_common+0xbe>
 801fc82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fc86:	4639      	mov	r1, r7
 801fc88:	4630      	mov	r0, r6
 801fc8a:	47c0      	blx	r8
 801fc8c:	3001      	adds	r0, #1
 801fc8e:	d020      	beq.n	801fcd2 <_printf_common+0xb2>
 801fc90:	6823      	ldr	r3, [r4, #0]
 801fc92:	68e5      	ldr	r5, [r4, #12]
 801fc94:	f8d9 2000 	ldr.w	r2, [r9]
 801fc98:	f003 0306 	and.w	r3, r3, #6
 801fc9c:	2b04      	cmp	r3, #4
 801fc9e:	bf08      	it	eq
 801fca0:	1aad      	subeq	r5, r5, r2
 801fca2:	68a3      	ldr	r3, [r4, #8]
 801fca4:	6922      	ldr	r2, [r4, #16]
 801fca6:	bf0c      	ite	eq
 801fca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fcac:	2500      	movne	r5, #0
 801fcae:	4293      	cmp	r3, r2
 801fcb0:	bfc4      	itt	gt
 801fcb2:	1a9b      	subgt	r3, r3, r2
 801fcb4:	18ed      	addgt	r5, r5, r3
 801fcb6:	f04f 0900 	mov.w	r9, #0
 801fcba:	341a      	adds	r4, #26
 801fcbc:	454d      	cmp	r5, r9
 801fcbe:	d11a      	bne.n	801fcf6 <_printf_common+0xd6>
 801fcc0:	2000      	movs	r0, #0
 801fcc2:	e008      	b.n	801fcd6 <_printf_common+0xb6>
 801fcc4:	2301      	movs	r3, #1
 801fcc6:	4652      	mov	r2, sl
 801fcc8:	4639      	mov	r1, r7
 801fcca:	4630      	mov	r0, r6
 801fccc:	47c0      	blx	r8
 801fcce:	3001      	adds	r0, #1
 801fcd0:	d103      	bne.n	801fcda <_printf_common+0xba>
 801fcd2:	f04f 30ff 	mov.w	r0, #4294967295
 801fcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fcda:	3501      	adds	r5, #1
 801fcdc:	e7c3      	b.n	801fc66 <_printf_common+0x46>
 801fcde:	18e1      	adds	r1, r4, r3
 801fce0:	1c5a      	adds	r2, r3, #1
 801fce2:	2030      	movs	r0, #48	; 0x30
 801fce4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fce8:	4422      	add	r2, r4
 801fcea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fcee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fcf2:	3302      	adds	r3, #2
 801fcf4:	e7c5      	b.n	801fc82 <_printf_common+0x62>
 801fcf6:	2301      	movs	r3, #1
 801fcf8:	4622      	mov	r2, r4
 801fcfa:	4639      	mov	r1, r7
 801fcfc:	4630      	mov	r0, r6
 801fcfe:	47c0      	blx	r8
 801fd00:	3001      	adds	r0, #1
 801fd02:	d0e6      	beq.n	801fcd2 <_printf_common+0xb2>
 801fd04:	f109 0901 	add.w	r9, r9, #1
 801fd08:	e7d8      	b.n	801fcbc <_printf_common+0x9c>
	...

0801fd0c <_printf_i>:
 801fd0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801fd14:	460c      	mov	r4, r1
 801fd16:	7e09      	ldrb	r1, [r1, #24]
 801fd18:	b085      	sub	sp, #20
 801fd1a:	296e      	cmp	r1, #110	; 0x6e
 801fd1c:	4617      	mov	r7, r2
 801fd1e:	4606      	mov	r6, r0
 801fd20:	4698      	mov	r8, r3
 801fd22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd24:	f000 80b3 	beq.w	801fe8e <_printf_i+0x182>
 801fd28:	d822      	bhi.n	801fd70 <_printf_i+0x64>
 801fd2a:	2963      	cmp	r1, #99	; 0x63
 801fd2c:	d036      	beq.n	801fd9c <_printf_i+0x90>
 801fd2e:	d80a      	bhi.n	801fd46 <_printf_i+0x3a>
 801fd30:	2900      	cmp	r1, #0
 801fd32:	f000 80b9 	beq.w	801fea8 <_printf_i+0x19c>
 801fd36:	2958      	cmp	r1, #88	; 0x58
 801fd38:	f000 8083 	beq.w	801fe42 <_printf_i+0x136>
 801fd3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fd40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801fd44:	e032      	b.n	801fdac <_printf_i+0xa0>
 801fd46:	2964      	cmp	r1, #100	; 0x64
 801fd48:	d001      	beq.n	801fd4e <_printf_i+0x42>
 801fd4a:	2969      	cmp	r1, #105	; 0x69
 801fd4c:	d1f6      	bne.n	801fd3c <_printf_i+0x30>
 801fd4e:	6820      	ldr	r0, [r4, #0]
 801fd50:	6813      	ldr	r3, [r2, #0]
 801fd52:	0605      	lsls	r5, r0, #24
 801fd54:	f103 0104 	add.w	r1, r3, #4
 801fd58:	d52a      	bpl.n	801fdb0 <_printf_i+0xa4>
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	6011      	str	r1, [r2, #0]
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	da03      	bge.n	801fd6a <_printf_i+0x5e>
 801fd62:	222d      	movs	r2, #45	; 0x2d
 801fd64:	425b      	negs	r3, r3
 801fd66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801fd6a:	486f      	ldr	r0, [pc, #444]	; (801ff28 <_printf_i+0x21c>)
 801fd6c:	220a      	movs	r2, #10
 801fd6e:	e039      	b.n	801fde4 <_printf_i+0xd8>
 801fd70:	2973      	cmp	r1, #115	; 0x73
 801fd72:	f000 809d 	beq.w	801feb0 <_printf_i+0x1a4>
 801fd76:	d808      	bhi.n	801fd8a <_printf_i+0x7e>
 801fd78:	296f      	cmp	r1, #111	; 0x6f
 801fd7a:	d020      	beq.n	801fdbe <_printf_i+0xb2>
 801fd7c:	2970      	cmp	r1, #112	; 0x70
 801fd7e:	d1dd      	bne.n	801fd3c <_printf_i+0x30>
 801fd80:	6823      	ldr	r3, [r4, #0]
 801fd82:	f043 0320 	orr.w	r3, r3, #32
 801fd86:	6023      	str	r3, [r4, #0]
 801fd88:	e003      	b.n	801fd92 <_printf_i+0x86>
 801fd8a:	2975      	cmp	r1, #117	; 0x75
 801fd8c:	d017      	beq.n	801fdbe <_printf_i+0xb2>
 801fd8e:	2978      	cmp	r1, #120	; 0x78
 801fd90:	d1d4      	bne.n	801fd3c <_printf_i+0x30>
 801fd92:	2378      	movs	r3, #120	; 0x78
 801fd94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fd98:	4864      	ldr	r0, [pc, #400]	; (801ff2c <_printf_i+0x220>)
 801fd9a:	e055      	b.n	801fe48 <_printf_i+0x13c>
 801fd9c:	6813      	ldr	r3, [r2, #0]
 801fd9e:	1d19      	adds	r1, r3, #4
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	6011      	str	r1, [r2, #0]
 801fda4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fda8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fdac:	2301      	movs	r3, #1
 801fdae:	e08c      	b.n	801feca <_printf_i+0x1be>
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	6011      	str	r1, [r2, #0]
 801fdb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fdb8:	bf18      	it	ne
 801fdba:	b21b      	sxthne	r3, r3
 801fdbc:	e7cf      	b.n	801fd5e <_printf_i+0x52>
 801fdbe:	6813      	ldr	r3, [r2, #0]
 801fdc0:	6825      	ldr	r5, [r4, #0]
 801fdc2:	1d18      	adds	r0, r3, #4
 801fdc4:	6010      	str	r0, [r2, #0]
 801fdc6:	0628      	lsls	r0, r5, #24
 801fdc8:	d501      	bpl.n	801fdce <_printf_i+0xc2>
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	e002      	b.n	801fdd4 <_printf_i+0xc8>
 801fdce:	0668      	lsls	r0, r5, #25
 801fdd0:	d5fb      	bpl.n	801fdca <_printf_i+0xbe>
 801fdd2:	881b      	ldrh	r3, [r3, #0]
 801fdd4:	4854      	ldr	r0, [pc, #336]	; (801ff28 <_printf_i+0x21c>)
 801fdd6:	296f      	cmp	r1, #111	; 0x6f
 801fdd8:	bf14      	ite	ne
 801fdda:	220a      	movne	r2, #10
 801fddc:	2208      	moveq	r2, #8
 801fdde:	2100      	movs	r1, #0
 801fde0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fde4:	6865      	ldr	r5, [r4, #4]
 801fde6:	60a5      	str	r5, [r4, #8]
 801fde8:	2d00      	cmp	r5, #0
 801fdea:	f2c0 8095 	blt.w	801ff18 <_printf_i+0x20c>
 801fdee:	6821      	ldr	r1, [r4, #0]
 801fdf0:	f021 0104 	bic.w	r1, r1, #4
 801fdf4:	6021      	str	r1, [r4, #0]
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d13d      	bne.n	801fe76 <_printf_i+0x16a>
 801fdfa:	2d00      	cmp	r5, #0
 801fdfc:	f040 808e 	bne.w	801ff1c <_printf_i+0x210>
 801fe00:	4665      	mov	r5, ip
 801fe02:	2a08      	cmp	r2, #8
 801fe04:	d10b      	bne.n	801fe1e <_printf_i+0x112>
 801fe06:	6823      	ldr	r3, [r4, #0]
 801fe08:	07db      	lsls	r3, r3, #31
 801fe0a:	d508      	bpl.n	801fe1e <_printf_i+0x112>
 801fe0c:	6923      	ldr	r3, [r4, #16]
 801fe0e:	6862      	ldr	r2, [r4, #4]
 801fe10:	429a      	cmp	r2, r3
 801fe12:	bfde      	ittt	le
 801fe14:	2330      	movle	r3, #48	; 0x30
 801fe16:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fe1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fe1e:	ebac 0305 	sub.w	r3, ip, r5
 801fe22:	6123      	str	r3, [r4, #16]
 801fe24:	f8cd 8000 	str.w	r8, [sp]
 801fe28:	463b      	mov	r3, r7
 801fe2a:	aa03      	add	r2, sp, #12
 801fe2c:	4621      	mov	r1, r4
 801fe2e:	4630      	mov	r0, r6
 801fe30:	f7ff fef6 	bl	801fc20 <_printf_common>
 801fe34:	3001      	adds	r0, #1
 801fe36:	d14d      	bne.n	801fed4 <_printf_i+0x1c8>
 801fe38:	f04f 30ff 	mov.w	r0, #4294967295
 801fe3c:	b005      	add	sp, #20
 801fe3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe42:	4839      	ldr	r0, [pc, #228]	; (801ff28 <_printf_i+0x21c>)
 801fe44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801fe48:	6813      	ldr	r3, [r2, #0]
 801fe4a:	6821      	ldr	r1, [r4, #0]
 801fe4c:	1d1d      	adds	r5, r3, #4
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	6015      	str	r5, [r2, #0]
 801fe52:	060a      	lsls	r2, r1, #24
 801fe54:	d50b      	bpl.n	801fe6e <_printf_i+0x162>
 801fe56:	07ca      	lsls	r2, r1, #31
 801fe58:	bf44      	itt	mi
 801fe5a:	f041 0120 	orrmi.w	r1, r1, #32
 801fe5e:	6021      	strmi	r1, [r4, #0]
 801fe60:	b91b      	cbnz	r3, 801fe6a <_printf_i+0x15e>
 801fe62:	6822      	ldr	r2, [r4, #0]
 801fe64:	f022 0220 	bic.w	r2, r2, #32
 801fe68:	6022      	str	r2, [r4, #0]
 801fe6a:	2210      	movs	r2, #16
 801fe6c:	e7b7      	b.n	801fdde <_printf_i+0xd2>
 801fe6e:	064d      	lsls	r5, r1, #25
 801fe70:	bf48      	it	mi
 801fe72:	b29b      	uxthmi	r3, r3
 801fe74:	e7ef      	b.n	801fe56 <_printf_i+0x14a>
 801fe76:	4665      	mov	r5, ip
 801fe78:	fbb3 f1f2 	udiv	r1, r3, r2
 801fe7c:	fb02 3311 	mls	r3, r2, r1, r3
 801fe80:	5cc3      	ldrb	r3, [r0, r3]
 801fe82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801fe86:	460b      	mov	r3, r1
 801fe88:	2900      	cmp	r1, #0
 801fe8a:	d1f5      	bne.n	801fe78 <_printf_i+0x16c>
 801fe8c:	e7b9      	b.n	801fe02 <_printf_i+0xf6>
 801fe8e:	6813      	ldr	r3, [r2, #0]
 801fe90:	6825      	ldr	r5, [r4, #0]
 801fe92:	6961      	ldr	r1, [r4, #20]
 801fe94:	1d18      	adds	r0, r3, #4
 801fe96:	6010      	str	r0, [r2, #0]
 801fe98:	0628      	lsls	r0, r5, #24
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	d501      	bpl.n	801fea2 <_printf_i+0x196>
 801fe9e:	6019      	str	r1, [r3, #0]
 801fea0:	e002      	b.n	801fea8 <_printf_i+0x19c>
 801fea2:	066a      	lsls	r2, r5, #25
 801fea4:	d5fb      	bpl.n	801fe9e <_printf_i+0x192>
 801fea6:	8019      	strh	r1, [r3, #0]
 801fea8:	2300      	movs	r3, #0
 801feaa:	6123      	str	r3, [r4, #16]
 801feac:	4665      	mov	r5, ip
 801feae:	e7b9      	b.n	801fe24 <_printf_i+0x118>
 801feb0:	6813      	ldr	r3, [r2, #0]
 801feb2:	1d19      	adds	r1, r3, #4
 801feb4:	6011      	str	r1, [r2, #0]
 801feb6:	681d      	ldr	r5, [r3, #0]
 801feb8:	6862      	ldr	r2, [r4, #4]
 801feba:	2100      	movs	r1, #0
 801febc:	4628      	mov	r0, r5
 801febe:	f7e0 f99f 	bl	8000200 <memchr>
 801fec2:	b108      	cbz	r0, 801fec8 <_printf_i+0x1bc>
 801fec4:	1b40      	subs	r0, r0, r5
 801fec6:	6060      	str	r0, [r4, #4]
 801fec8:	6863      	ldr	r3, [r4, #4]
 801feca:	6123      	str	r3, [r4, #16]
 801fecc:	2300      	movs	r3, #0
 801fece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fed2:	e7a7      	b.n	801fe24 <_printf_i+0x118>
 801fed4:	6923      	ldr	r3, [r4, #16]
 801fed6:	462a      	mov	r2, r5
 801fed8:	4639      	mov	r1, r7
 801feda:	4630      	mov	r0, r6
 801fedc:	47c0      	blx	r8
 801fede:	3001      	adds	r0, #1
 801fee0:	d0aa      	beq.n	801fe38 <_printf_i+0x12c>
 801fee2:	6823      	ldr	r3, [r4, #0]
 801fee4:	079b      	lsls	r3, r3, #30
 801fee6:	d413      	bmi.n	801ff10 <_printf_i+0x204>
 801fee8:	68e0      	ldr	r0, [r4, #12]
 801feea:	9b03      	ldr	r3, [sp, #12]
 801feec:	4298      	cmp	r0, r3
 801feee:	bfb8      	it	lt
 801fef0:	4618      	movlt	r0, r3
 801fef2:	e7a3      	b.n	801fe3c <_printf_i+0x130>
 801fef4:	2301      	movs	r3, #1
 801fef6:	464a      	mov	r2, r9
 801fef8:	4639      	mov	r1, r7
 801fefa:	4630      	mov	r0, r6
 801fefc:	47c0      	blx	r8
 801fefe:	3001      	adds	r0, #1
 801ff00:	d09a      	beq.n	801fe38 <_printf_i+0x12c>
 801ff02:	3501      	adds	r5, #1
 801ff04:	68e3      	ldr	r3, [r4, #12]
 801ff06:	9a03      	ldr	r2, [sp, #12]
 801ff08:	1a9b      	subs	r3, r3, r2
 801ff0a:	42ab      	cmp	r3, r5
 801ff0c:	dcf2      	bgt.n	801fef4 <_printf_i+0x1e8>
 801ff0e:	e7eb      	b.n	801fee8 <_printf_i+0x1dc>
 801ff10:	2500      	movs	r5, #0
 801ff12:	f104 0919 	add.w	r9, r4, #25
 801ff16:	e7f5      	b.n	801ff04 <_printf_i+0x1f8>
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d1ac      	bne.n	801fe76 <_printf_i+0x16a>
 801ff1c:	7803      	ldrb	r3, [r0, #0]
 801ff1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ff22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ff26:	e76c      	b.n	801fe02 <_printf_i+0xf6>
 801ff28:	080247a9 	.word	0x080247a9
 801ff2c:	080247ba 	.word	0x080247ba

0801ff30 <_sbrk_r>:
 801ff30:	b538      	push	{r3, r4, r5, lr}
 801ff32:	4c06      	ldr	r4, [pc, #24]	; (801ff4c <_sbrk_r+0x1c>)
 801ff34:	2300      	movs	r3, #0
 801ff36:	4605      	mov	r5, r0
 801ff38:	4608      	mov	r0, r1
 801ff3a:	6023      	str	r3, [r4, #0]
 801ff3c:	f7e1 f9de 	bl	80012fc <_sbrk>
 801ff40:	1c43      	adds	r3, r0, #1
 801ff42:	d102      	bne.n	801ff4a <_sbrk_r+0x1a>
 801ff44:	6823      	ldr	r3, [r4, #0]
 801ff46:	b103      	cbz	r3, 801ff4a <_sbrk_r+0x1a>
 801ff48:	602b      	str	r3, [r5, #0]
 801ff4a:	bd38      	pop	{r3, r4, r5, pc}
 801ff4c:	2000a32c 	.word	0x2000a32c

0801ff50 <_raise_r>:
 801ff50:	291f      	cmp	r1, #31
 801ff52:	b538      	push	{r3, r4, r5, lr}
 801ff54:	4604      	mov	r4, r0
 801ff56:	460d      	mov	r5, r1
 801ff58:	d904      	bls.n	801ff64 <_raise_r+0x14>
 801ff5a:	2316      	movs	r3, #22
 801ff5c:	6003      	str	r3, [r0, #0]
 801ff5e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff62:	bd38      	pop	{r3, r4, r5, pc}
 801ff64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ff66:	b112      	cbz	r2, 801ff6e <_raise_r+0x1e>
 801ff68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ff6c:	b94b      	cbnz	r3, 801ff82 <_raise_r+0x32>
 801ff6e:	4620      	mov	r0, r4
 801ff70:	f000 f830 	bl	801ffd4 <_getpid_r>
 801ff74:	462a      	mov	r2, r5
 801ff76:	4601      	mov	r1, r0
 801ff78:	4620      	mov	r0, r4
 801ff7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ff7e:	f000 b817 	b.w	801ffb0 <_kill_r>
 801ff82:	2b01      	cmp	r3, #1
 801ff84:	d00a      	beq.n	801ff9c <_raise_r+0x4c>
 801ff86:	1c59      	adds	r1, r3, #1
 801ff88:	d103      	bne.n	801ff92 <_raise_r+0x42>
 801ff8a:	2316      	movs	r3, #22
 801ff8c:	6003      	str	r3, [r0, #0]
 801ff8e:	2001      	movs	r0, #1
 801ff90:	e7e7      	b.n	801ff62 <_raise_r+0x12>
 801ff92:	2400      	movs	r4, #0
 801ff94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ff98:	4628      	mov	r0, r5
 801ff9a:	4798      	blx	r3
 801ff9c:	2000      	movs	r0, #0
 801ff9e:	e7e0      	b.n	801ff62 <_raise_r+0x12>

0801ffa0 <raise>:
 801ffa0:	4b02      	ldr	r3, [pc, #8]	; (801ffac <raise+0xc>)
 801ffa2:	4601      	mov	r1, r0
 801ffa4:	6818      	ldr	r0, [r3, #0]
 801ffa6:	f7ff bfd3 	b.w	801ff50 <_raise_r>
 801ffaa:	bf00      	nop
 801ffac:	20000088 	.word	0x20000088

0801ffb0 <_kill_r>:
 801ffb0:	b538      	push	{r3, r4, r5, lr}
 801ffb2:	4c07      	ldr	r4, [pc, #28]	; (801ffd0 <_kill_r+0x20>)
 801ffb4:	2300      	movs	r3, #0
 801ffb6:	4605      	mov	r5, r0
 801ffb8:	4608      	mov	r0, r1
 801ffba:	4611      	mov	r1, r2
 801ffbc:	6023      	str	r3, [r4, #0]
 801ffbe:	f7e1 f915 	bl	80011ec <_kill>
 801ffc2:	1c43      	adds	r3, r0, #1
 801ffc4:	d102      	bne.n	801ffcc <_kill_r+0x1c>
 801ffc6:	6823      	ldr	r3, [r4, #0]
 801ffc8:	b103      	cbz	r3, 801ffcc <_kill_r+0x1c>
 801ffca:	602b      	str	r3, [r5, #0]
 801ffcc:	bd38      	pop	{r3, r4, r5, pc}
 801ffce:	bf00      	nop
 801ffd0:	2000a32c 	.word	0x2000a32c

0801ffd4 <_getpid_r>:
 801ffd4:	f7e1 b902 	b.w	80011dc <_getpid>

0801ffd8 <__swbuf_r>:
 801ffd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffda:	460e      	mov	r6, r1
 801ffdc:	4614      	mov	r4, r2
 801ffde:	4605      	mov	r5, r0
 801ffe0:	b118      	cbz	r0, 801ffea <__swbuf_r+0x12>
 801ffe2:	6983      	ldr	r3, [r0, #24]
 801ffe4:	b90b      	cbnz	r3, 801ffea <__swbuf_r+0x12>
 801ffe6:	f000 fa0b 	bl	8020400 <__sinit>
 801ffea:	4b21      	ldr	r3, [pc, #132]	; (8020070 <__swbuf_r+0x98>)
 801ffec:	429c      	cmp	r4, r3
 801ffee:	d12a      	bne.n	8020046 <__swbuf_r+0x6e>
 801fff0:	686c      	ldr	r4, [r5, #4]
 801fff2:	69a3      	ldr	r3, [r4, #24]
 801fff4:	60a3      	str	r3, [r4, #8]
 801fff6:	89a3      	ldrh	r3, [r4, #12]
 801fff8:	071a      	lsls	r2, r3, #28
 801fffa:	d52e      	bpl.n	802005a <__swbuf_r+0x82>
 801fffc:	6923      	ldr	r3, [r4, #16]
 801fffe:	b363      	cbz	r3, 802005a <__swbuf_r+0x82>
 8020000:	6923      	ldr	r3, [r4, #16]
 8020002:	6820      	ldr	r0, [r4, #0]
 8020004:	1ac0      	subs	r0, r0, r3
 8020006:	6963      	ldr	r3, [r4, #20]
 8020008:	b2f6      	uxtb	r6, r6
 802000a:	4283      	cmp	r3, r0
 802000c:	4637      	mov	r7, r6
 802000e:	dc04      	bgt.n	802001a <__swbuf_r+0x42>
 8020010:	4621      	mov	r1, r4
 8020012:	4628      	mov	r0, r5
 8020014:	f000 f98a 	bl	802032c <_fflush_r>
 8020018:	bb28      	cbnz	r0, 8020066 <__swbuf_r+0x8e>
 802001a:	68a3      	ldr	r3, [r4, #8]
 802001c:	3b01      	subs	r3, #1
 802001e:	60a3      	str	r3, [r4, #8]
 8020020:	6823      	ldr	r3, [r4, #0]
 8020022:	1c5a      	adds	r2, r3, #1
 8020024:	6022      	str	r2, [r4, #0]
 8020026:	701e      	strb	r6, [r3, #0]
 8020028:	6963      	ldr	r3, [r4, #20]
 802002a:	3001      	adds	r0, #1
 802002c:	4283      	cmp	r3, r0
 802002e:	d004      	beq.n	802003a <__swbuf_r+0x62>
 8020030:	89a3      	ldrh	r3, [r4, #12]
 8020032:	07db      	lsls	r3, r3, #31
 8020034:	d519      	bpl.n	802006a <__swbuf_r+0x92>
 8020036:	2e0a      	cmp	r6, #10
 8020038:	d117      	bne.n	802006a <__swbuf_r+0x92>
 802003a:	4621      	mov	r1, r4
 802003c:	4628      	mov	r0, r5
 802003e:	f000 f975 	bl	802032c <_fflush_r>
 8020042:	b190      	cbz	r0, 802006a <__swbuf_r+0x92>
 8020044:	e00f      	b.n	8020066 <__swbuf_r+0x8e>
 8020046:	4b0b      	ldr	r3, [pc, #44]	; (8020074 <__swbuf_r+0x9c>)
 8020048:	429c      	cmp	r4, r3
 802004a:	d101      	bne.n	8020050 <__swbuf_r+0x78>
 802004c:	68ac      	ldr	r4, [r5, #8]
 802004e:	e7d0      	b.n	801fff2 <__swbuf_r+0x1a>
 8020050:	4b09      	ldr	r3, [pc, #36]	; (8020078 <__swbuf_r+0xa0>)
 8020052:	429c      	cmp	r4, r3
 8020054:	bf08      	it	eq
 8020056:	68ec      	ldreq	r4, [r5, #12]
 8020058:	e7cb      	b.n	801fff2 <__swbuf_r+0x1a>
 802005a:	4621      	mov	r1, r4
 802005c:	4628      	mov	r0, r5
 802005e:	f000 f80d 	bl	802007c <__swsetup_r>
 8020062:	2800      	cmp	r0, #0
 8020064:	d0cc      	beq.n	8020000 <__swbuf_r+0x28>
 8020066:	f04f 37ff 	mov.w	r7, #4294967295
 802006a:	4638      	mov	r0, r7
 802006c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802006e:	bf00      	nop
 8020070:	080247ec 	.word	0x080247ec
 8020074:	0802480c 	.word	0x0802480c
 8020078:	080247cc 	.word	0x080247cc

0802007c <__swsetup_r>:
 802007c:	4b32      	ldr	r3, [pc, #200]	; (8020148 <__swsetup_r+0xcc>)
 802007e:	b570      	push	{r4, r5, r6, lr}
 8020080:	681d      	ldr	r5, [r3, #0]
 8020082:	4606      	mov	r6, r0
 8020084:	460c      	mov	r4, r1
 8020086:	b125      	cbz	r5, 8020092 <__swsetup_r+0x16>
 8020088:	69ab      	ldr	r3, [r5, #24]
 802008a:	b913      	cbnz	r3, 8020092 <__swsetup_r+0x16>
 802008c:	4628      	mov	r0, r5
 802008e:	f000 f9b7 	bl	8020400 <__sinit>
 8020092:	4b2e      	ldr	r3, [pc, #184]	; (802014c <__swsetup_r+0xd0>)
 8020094:	429c      	cmp	r4, r3
 8020096:	d10f      	bne.n	80200b8 <__swsetup_r+0x3c>
 8020098:	686c      	ldr	r4, [r5, #4]
 802009a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802009e:	b29a      	uxth	r2, r3
 80200a0:	0715      	lsls	r5, r2, #28
 80200a2:	d42c      	bmi.n	80200fe <__swsetup_r+0x82>
 80200a4:	06d0      	lsls	r0, r2, #27
 80200a6:	d411      	bmi.n	80200cc <__swsetup_r+0x50>
 80200a8:	2209      	movs	r2, #9
 80200aa:	6032      	str	r2, [r6, #0]
 80200ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80200b0:	81a3      	strh	r3, [r4, #12]
 80200b2:	f04f 30ff 	mov.w	r0, #4294967295
 80200b6:	e03e      	b.n	8020136 <__swsetup_r+0xba>
 80200b8:	4b25      	ldr	r3, [pc, #148]	; (8020150 <__swsetup_r+0xd4>)
 80200ba:	429c      	cmp	r4, r3
 80200bc:	d101      	bne.n	80200c2 <__swsetup_r+0x46>
 80200be:	68ac      	ldr	r4, [r5, #8]
 80200c0:	e7eb      	b.n	802009a <__swsetup_r+0x1e>
 80200c2:	4b24      	ldr	r3, [pc, #144]	; (8020154 <__swsetup_r+0xd8>)
 80200c4:	429c      	cmp	r4, r3
 80200c6:	bf08      	it	eq
 80200c8:	68ec      	ldreq	r4, [r5, #12]
 80200ca:	e7e6      	b.n	802009a <__swsetup_r+0x1e>
 80200cc:	0751      	lsls	r1, r2, #29
 80200ce:	d512      	bpl.n	80200f6 <__swsetup_r+0x7a>
 80200d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80200d2:	b141      	cbz	r1, 80200e6 <__swsetup_r+0x6a>
 80200d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80200d8:	4299      	cmp	r1, r3
 80200da:	d002      	beq.n	80200e2 <__swsetup_r+0x66>
 80200dc:	4630      	mov	r0, r6
 80200de:	f7ff fbb7 	bl	801f850 <_free_r>
 80200e2:	2300      	movs	r3, #0
 80200e4:	6363      	str	r3, [r4, #52]	; 0x34
 80200e6:	89a3      	ldrh	r3, [r4, #12]
 80200e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80200ec:	81a3      	strh	r3, [r4, #12]
 80200ee:	2300      	movs	r3, #0
 80200f0:	6063      	str	r3, [r4, #4]
 80200f2:	6923      	ldr	r3, [r4, #16]
 80200f4:	6023      	str	r3, [r4, #0]
 80200f6:	89a3      	ldrh	r3, [r4, #12]
 80200f8:	f043 0308 	orr.w	r3, r3, #8
 80200fc:	81a3      	strh	r3, [r4, #12]
 80200fe:	6923      	ldr	r3, [r4, #16]
 8020100:	b94b      	cbnz	r3, 8020116 <__swsetup_r+0x9a>
 8020102:	89a3      	ldrh	r3, [r4, #12]
 8020104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802010c:	d003      	beq.n	8020116 <__swsetup_r+0x9a>
 802010e:	4621      	mov	r1, r4
 8020110:	4630      	mov	r0, r6
 8020112:	f000 fa23 	bl	802055c <__smakebuf_r>
 8020116:	89a2      	ldrh	r2, [r4, #12]
 8020118:	f012 0301 	ands.w	r3, r2, #1
 802011c:	d00c      	beq.n	8020138 <__swsetup_r+0xbc>
 802011e:	2300      	movs	r3, #0
 8020120:	60a3      	str	r3, [r4, #8]
 8020122:	6963      	ldr	r3, [r4, #20]
 8020124:	425b      	negs	r3, r3
 8020126:	61a3      	str	r3, [r4, #24]
 8020128:	6923      	ldr	r3, [r4, #16]
 802012a:	b953      	cbnz	r3, 8020142 <__swsetup_r+0xc6>
 802012c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020130:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8020134:	d1ba      	bne.n	80200ac <__swsetup_r+0x30>
 8020136:	bd70      	pop	{r4, r5, r6, pc}
 8020138:	0792      	lsls	r2, r2, #30
 802013a:	bf58      	it	pl
 802013c:	6963      	ldrpl	r3, [r4, #20]
 802013e:	60a3      	str	r3, [r4, #8]
 8020140:	e7f2      	b.n	8020128 <__swsetup_r+0xac>
 8020142:	2000      	movs	r0, #0
 8020144:	e7f7      	b.n	8020136 <__swsetup_r+0xba>
 8020146:	bf00      	nop
 8020148:	20000088 	.word	0x20000088
 802014c:	080247ec 	.word	0x080247ec
 8020150:	0802480c 	.word	0x0802480c
 8020154:	080247cc 	.word	0x080247cc

08020158 <__register_exitproc>:
 8020158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802015c:	4d2c      	ldr	r5, [pc, #176]	; (8020210 <__register_exitproc+0xb8>)
 802015e:	682c      	ldr	r4, [r5, #0]
 8020160:	4607      	mov	r7, r0
 8020162:	460e      	mov	r6, r1
 8020164:	4691      	mov	r9, r2
 8020166:	4698      	mov	r8, r3
 8020168:	b934      	cbnz	r4, 8020178 <__register_exitproc+0x20>
 802016a:	4b2a      	ldr	r3, [pc, #168]	; (8020214 <__register_exitproc+0xbc>)
 802016c:	4c2a      	ldr	r4, [pc, #168]	; (8020218 <__register_exitproc+0xc0>)
 802016e:	602c      	str	r4, [r5, #0]
 8020170:	b113      	cbz	r3, 8020178 <__register_exitproc+0x20>
 8020172:	681b      	ldr	r3, [r3, #0]
 8020174:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8020178:	6863      	ldr	r3, [r4, #4]
 802017a:	2b1f      	cmp	r3, #31
 802017c:	dd3d      	ble.n	80201fa <__register_exitproc+0xa2>
 802017e:	4b27      	ldr	r3, [pc, #156]	; (802021c <__register_exitproc+0xc4>)
 8020180:	b91b      	cbnz	r3, 802018a <__register_exitproc+0x32>
 8020182:	f04f 30ff 	mov.w	r0, #4294967295
 8020186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802018a:	208c      	movs	r0, #140	; 0x8c
 802018c:	f7ff fb3c 	bl	801f808 <malloc>
 8020190:	4604      	mov	r4, r0
 8020192:	2800      	cmp	r0, #0
 8020194:	d0f5      	beq.n	8020182 <__register_exitproc+0x2a>
 8020196:	2300      	movs	r3, #0
 8020198:	682a      	ldr	r2, [r5, #0]
 802019a:	6002      	str	r2, [r0, #0]
 802019c:	6043      	str	r3, [r0, #4]
 802019e:	6028      	str	r0, [r5, #0]
 80201a0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80201a4:	b30f      	cbz	r7, 80201ea <__register_exitproc+0x92>
 80201a6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80201aa:	f7ff fb2d 	bl	801f808 <malloc>
 80201ae:	2800      	cmp	r0, #0
 80201b0:	d0e7      	beq.n	8020182 <__register_exitproc+0x2a>
 80201b2:	2300      	movs	r3, #0
 80201b4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80201b8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80201bc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80201c0:	6862      	ldr	r2, [r4, #4]
 80201c2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80201c6:	2301      	movs	r3, #1
 80201c8:	4093      	lsls	r3, r2
 80201ca:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80201ce:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80201d2:	431a      	orrs	r2, r3
 80201d4:	2f02      	cmp	r7, #2
 80201d6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80201da:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80201de:	bf02      	ittt	eq
 80201e0:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80201e4:	4313      	orreq	r3, r2
 80201e6:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80201ea:	6863      	ldr	r3, [r4, #4]
 80201ec:	1c5a      	adds	r2, r3, #1
 80201ee:	3302      	adds	r3, #2
 80201f0:	6062      	str	r2, [r4, #4]
 80201f2:	2000      	movs	r0, #0
 80201f4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80201f8:	e7c5      	b.n	8020186 <__register_exitproc+0x2e>
 80201fa:	2f00      	cmp	r7, #0
 80201fc:	d0f5      	beq.n	80201ea <__register_exitproc+0x92>
 80201fe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8020202:	2800      	cmp	r0, #0
 8020204:	d1dc      	bne.n	80201c0 <__register_exitproc+0x68>
 8020206:	4b05      	ldr	r3, [pc, #20]	; (802021c <__register_exitproc+0xc4>)
 8020208:	2b00      	cmp	r3, #0
 802020a:	d0ba      	beq.n	8020182 <__register_exitproc+0x2a>
 802020c:	e7cb      	b.n	80201a6 <__register_exitproc+0x4e>
 802020e:	bf00      	nop
 8020210:	20009bf4 	.word	0x20009bf4
 8020214:	00000000 	.word	0x00000000
 8020218:	20009b68 	.word	0x20009b68
 802021c:	0801f809 	.word	0x0801f809

08020220 <__sflush_r>:
 8020220:	898a      	ldrh	r2, [r1, #12]
 8020222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020226:	4605      	mov	r5, r0
 8020228:	0710      	lsls	r0, r2, #28
 802022a:	460c      	mov	r4, r1
 802022c:	d458      	bmi.n	80202e0 <__sflush_r+0xc0>
 802022e:	684b      	ldr	r3, [r1, #4]
 8020230:	2b00      	cmp	r3, #0
 8020232:	dc05      	bgt.n	8020240 <__sflush_r+0x20>
 8020234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020236:	2b00      	cmp	r3, #0
 8020238:	dc02      	bgt.n	8020240 <__sflush_r+0x20>
 802023a:	2000      	movs	r0, #0
 802023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020242:	2e00      	cmp	r6, #0
 8020244:	d0f9      	beq.n	802023a <__sflush_r+0x1a>
 8020246:	2300      	movs	r3, #0
 8020248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802024c:	682f      	ldr	r7, [r5, #0]
 802024e:	6a21      	ldr	r1, [r4, #32]
 8020250:	602b      	str	r3, [r5, #0]
 8020252:	d032      	beq.n	80202ba <__sflush_r+0x9a>
 8020254:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020256:	89a3      	ldrh	r3, [r4, #12]
 8020258:	075a      	lsls	r2, r3, #29
 802025a:	d505      	bpl.n	8020268 <__sflush_r+0x48>
 802025c:	6863      	ldr	r3, [r4, #4]
 802025e:	1ac0      	subs	r0, r0, r3
 8020260:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020262:	b10b      	cbz	r3, 8020268 <__sflush_r+0x48>
 8020264:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020266:	1ac0      	subs	r0, r0, r3
 8020268:	2300      	movs	r3, #0
 802026a:	4602      	mov	r2, r0
 802026c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802026e:	6a21      	ldr	r1, [r4, #32]
 8020270:	4628      	mov	r0, r5
 8020272:	47b0      	blx	r6
 8020274:	1c43      	adds	r3, r0, #1
 8020276:	89a3      	ldrh	r3, [r4, #12]
 8020278:	d106      	bne.n	8020288 <__sflush_r+0x68>
 802027a:	6829      	ldr	r1, [r5, #0]
 802027c:	291d      	cmp	r1, #29
 802027e:	d848      	bhi.n	8020312 <__sflush_r+0xf2>
 8020280:	4a29      	ldr	r2, [pc, #164]	; (8020328 <__sflush_r+0x108>)
 8020282:	40ca      	lsrs	r2, r1
 8020284:	07d6      	lsls	r6, r2, #31
 8020286:	d544      	bpl.n	8020312 <__sflush_r+0xf2>
 8020288:	2200      	movs	r2, #0
 802028a:	6062      	str	r2, [r4, #4]
 802028c:	04d9      	lsls	r1, r3, #19
 802028e:	6922      	ldr	r2, [r4, #16]
 8020290:	6022      	str	r2, [r4, #0]
 8020292:	d504      	bpl.n	802029e <__sflush_r+0x7e>
 8020294:	1c42      	adds	r2, r0, #1
 8020296:	d101      	bne.n	802029c <__sflush_r+0x7c>
 8020298:	682b      	ldr	r3, [r5, #0]
 802029a:	b903      	cbnz	r3, 802029e <__sflush_r+0x7e>
 802029c:	6560      	str	r0, [r4, #84]	; 0x54
 802029e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80202a0:	602f      	str	r7, [r5, #0]
 80202a2:	2900      	cmp	r1, #0
 80202a4:	d0c9      	beq.n	802023a <__sflush_r+0x1a>
 80202a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80202aa:	4299      	cmp	r1, r3
 80202ac:	d002      	beq.n	80202b4 <__sflush_r+0x94>
 80202ae:	4628      	mov	r0, r5
 80202b0:	f7ff face 	bl	801f850 <_free_r>
 80202b4:	2000      	movs	r0, #0
 80202b6:	6360      	str	r0, [r4, #52]	; 0x34
 80202b8:	e7c0      	b.n	802023c <__sflush_r+0x1c>
 80202ba:	2301      	movs	r3, #1
 80202bc:	4628      	mov	r0, r5
 80202be:	47b0      	blx	r6
 80202c0:	1c41      	adds	r1, r0, #1
 80202c2:	d1c8      	bne.n	8020256 <__sflush_r+0x36>
 80202c4:	682b      	ldr	r3, [r5, #0]
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d0c5      	beq.n	8020256 <__sflush_r+0x36>
 80202ca:	2b1d      	cmp	r3, #29
 80202cc:	d001      	beq.n	80202d2 <__sflush_r+0xb2>
 80202ce:	2b16      	cmp	r3, #22
 80202d0:	d101      	bne.n	80202d6 <__sflush_r+0xb6>
 80202d2:	602f      	str	r7, [r5, #0]
 80202d4:	e7b1      	b.n	802023a <__sflush_r+0x1a>
 80202d6:	89a3      	ldrh	r3, [r4, #12]
 80202d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80202dc:	81a3      	strh	r3, [r4, #12]
 80202de:	e7ad      	b.n	802023c <__sflush_r+0x1c>
 80202e0:	690f      	ldr	r7, [r1, #16]
 80202e2:	2f00      	cmp	r7, #0
 80202e4:	d0a9      	beq.n	802023a <__sflush_r+0x1a>
 80202e6:	0793      	lsls	r3, r2, #30
 80202e8:	680e      	ldr	r6, [r1, #0]
 80202ea:	bf08      	it	eq
 80202ec:	694b      	ldreq	r3, [r1, #20]
 80202ee:	600f      	str	r7, [r1, #0]
 80202f0:	bf18      	it	ne
 80202f2:	2300      	movne	r3, #0
 80202f4:	eba6 0807 	sub.w	r8, r6, r7
 80202f8:	608b      	str	r3, [r1, #8]
 80202fa:	f1b8 0f00 	cmp.w	r8, #0
 80202fe:	dd9c      	ble.n	802023a <__sflush_r+0x1a>
 8020300:	4643      	mov	r3, r8
 8020302:	463a      	mov	r2, r7
 8020304:	6a21      	ldr	r1, [r4, #32]
 8020306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020308:	4628      	mov	r0, r5
 802030a:	47b0      	blx	r6
 802030c:	2800      	cmp	r0, #0
 802030e:	dc06      	bgt.n	802031e <__sflush_r+0xfe>
 8020310:	89a3      	ldrh	r3, [r4, #12]
 8020312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020316:	81a3      	strh	r3, [r4, #12]
 8020318:	f04f 30ff 	mov.w	r0, #4294967295
 802031c:	e78e      	b.n	802023c <__sflush_r+0x1c>
 802031e:	4407      	add	r7, r0
 8020320:	eba8 0800 	sub.w	r8, r8, r0
 8020324:	e7e9      	b.n	80202fa <__sflush_r+0xda>
 8020326:	bf00      	nop
 8020328:	20400001 	.word	0x20400001

0802032c <_fflush_r>:
 802032c:	b538      	push	{r3, r4, r5, lr}
 802032e:	690b      	ldr	r3, [r1, #16]
 8020330:	4605      	mov	r5, r0
 8020332:	460c      	mov	r4, r1
 8020334:	b1db      	cbz	r3, 802036e <_fflush_r+0x42>
 8020336:	b118      	cbz	r0, 8020340 <_fflush_r+0x14>
 8020338:	6983      	ldr	r3, [r0, #24]
 802033a:	b90b      	cbnz	r3, 8020340 <_fflush_r+0x14>
 802033c:	f000 f860 	bl	8020400 <__sinit>
 8020340:	4b0c      	ldr	r3, [pc, #48]	; (8020374 <_fflush_r+0x48>)
 8020342:	429c      	cmp	r4, r3
 8020344:	d109      	bne.n	802035a <_fflush_r+0x2e>
 8020346:	686c      	ldr	r4, [r5, #4]
 8020348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802034c:	b17b      	cbz	r3, 802036e <_fflush_r+0x42>
 802034e:	4621      	mov	r1, r4
 8020350:	4628      	mov	r0, r5
 8020352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020356:	f7ff bf63 	b.w	8020220 <__sflush_r>
 802035a:	4b07      	ldr	r3, [pc, #28]	; (8020378 <_fflush_r+0x4c>)
 802035c:	429c      	cmp	r4, r3
 802035e:	d101      	bne.n	8020364 <_fflush_r+0x38>
 8020360:	68ac      	ldr	r4, [r5, #8]
 8020362:	e7f1      	b.n	8020348 <_fflush_r+0x1c>
 8020364:	4b05      	ldr	r3, [pc, #20]	; (802037c <_fflush_r+0x50>)
 8020366:	429c      	cmp	r4, r3
 8020368:	bf08      	it	eq
 802036a:	68ec      	ldreq	r4, [r5, #12]
 802036c:	e7ec      	b.n	8020348 <_fflush_r+0x1c>
 802036e:	2000      	movs	r0, #0
 8020370:	bd38      	pop	{r3, r4, r5, pc}
 8020372:	bf00      	nop
 8020374:	080247ec 	.word	0x080247ec
 8020378:	0802480c 	.word	0x0802480c
 802037c:	080247cc 	.word	0x080247cc

08020380 <std>:
 8020380:	2300      	movs	r3, #0
 8020382:	b510      	push	{r4, lr}
 8020384:	4604      	mov	r4, r0
 8020386:	e9c0 3300 	strd	r3, r3, [r0]
 802038a:	6083      	str	r3, [r0, #8]
 802038c:	8181      	strh	r1, [r0, #12]
 802038e:	6643      	str	r3, [r0, #100]	; 0x64
 8020390:	81c2      	strh	r2, [r0, #14]
 8020392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020396:	6183      	str	r3, [r0, #24]
 8020398:	4619      	mov	r1, r3
 802039a:	2208      	movs	r2, #8
 802039c:	305c      	adds	r0, #92	; 0x5c
 802039e:	f7ff fa4e 	bl	801f83e <memset>
 80203a2:	4b05      	ldr	r3, [pc, #20]	; (80203b8 <std+0x38>)
 80203a4:	6263      	str	r3, [r4, #36]	; 0x24
 80203a6:	4b05      	ldr	r3, [pc, #20]	; (80203bc <std+0x3c>)
 80203a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80203aa:	4b05      	ldr	r3, [pc, #20]	; (80203c0 <std+0x40>)
 80203ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80203ae:	4b05      	ldr	r3, [pc, #20]	; (80203c4 <std+0x44>)
 80203b0:	6224      	str	r4, [r4, #32]
 80203b2:	6323      	str	r3, [r4, #48]	; 0x30
 80203b4:	bd10      	pop	{r4, pc}
 80203b6:	bf00      	nop
 80203b8:	080205e1 	.word	0x080205e1
 80203bc:	08020603 	.word	0x08020603
 80203c0:	0802063b 	.word	0x0802063b
 80203c4:	0802065f 	.word	0x0802065f

080203c8 <_cleanup_r>:
 80203c8:	4901      	ldr	r1, [pc, #4]	; (80203d0 <_cleanup_r+0x8>)
 80203ca:	f000 b885 	b.w	80204d8 <_fwalk_reent>
 80203ce:	bf00      	nop
 80203d0:	0802032d 	.word	0x0802032d

080203d4 <__sfmoreglue>:
 80203d4:	b570      	push	{r4, r5, r6, lr}
 80203d6:	1e4a      	subs	r2, r1, #1
 80203d8:	2568      	movs	r5, #104	; 0x68
 80203da:	4355      	muls	r5, r2
 80203dc:	460e      	mov	r6, r1
 80203de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80203e2:	f7ff fa83 	bl	801f8ec <_malloc_r>
 80203e6:	4604      	mov	r4, r0
 80203e8:	b140      	cbz	r0, 80203fc <__sfmoreglue+0x28>
 80203ea:	2100      	movs	r1, #0
 80203ec:	e9c0 1600 	strd	r1, r6, [r0]
 80203f0:	300c      	adds	r0, #12
 80203f2:	60a0      	str	r0, [r4, #8]
 80203f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80203f8:	f7ff fa21 	bl	801f83e <memset>
 80203fc:	4620      	mov	r0, r4
 80203fe:	bd70      	pop	{r4, r5, r6, pc}

08020400 <__sinit>:
 8020400:	6983      	ldr	r3, [r0, #24]
 8020402:	b510      	push	{r4, lr}
 8020404:	4604      	mov	r4, r0
 8020406:	bb33      	cbnz	r3, 8020456 <__sinit+0x56>
 8020408:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802040c:	6503      	str	r3, [r0, #80]	; 0x50
 802040e:	4b12      	ldr	r3, [pc, #72]	; (8020458 <__sinit+0x58>)
 8020410:	4a12      	ldr	r2, [pc, #72]	; (802045c <__sinit+0x5c>)
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	6282      	str	r2, [r0, #40]	; 0x28
 8020416:	4298      	cmp	r0, r3
 8020418:	bf04      	itt	eq
 802041a:	2301      	moveq	r3, #1
 802041c:	6183      	streq	r3, [r0, #24]
 802041e:	f000 f81f 	bl	8020460 <__sfp>
 8020422:	6060      	str	r0, [r4, #4]
 8020424:	4620      	mov	r0, r4
 8020426:	f000 f81b 	bl	8020460 <__sfp>
 802042a:	60a0      	str	r0, [r4, #8]
 802042c:	4620      	mov	r0, r4
 802042e:	f000 f817 	bl	8020460 <__sfp>
 8020432:	2200      	movs	r2, #0
 8020434:	60e0      	str	r0, [r4, #12]
 8020436:	2104      	movs	r1, #4
 8020438:	6860      	ldr	r0, [r4, #4]
 802043a:	f7ff ffa1 	bl	8020380 <std>
 802043e:	2201      	movs	r2, #1
 8020440:	2109      	movs	r1, #9
 8020442:	68a0      	ldr	r0, [r4, #8]
 8020444:	f7ff ff9c 	bl	8020380 <std>
 8020448:	2202      	movs	r2, #2
 802044a:	2112      	movs	r1, #18
 802044c:	68e0      	ldr	r0, [r4, #12]
 802044e:	f7ff ff97 	bl	8020380 <std>
 8020452:	2301      	movs	r3, #1
 8020454:	61a3      	str	r3, [r4, #24]
 8020456:	bd10      	pop	{r4, pc}
 8020458:	08024794 	.word	0x08024794
 802045c:	080203c9 	.word	0x080203c9

08020460 <__sfp>:
 8020460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020462:	4b1b      	ldr	r3, [pc, #108]	; (80204d0 <__sfp+0x70>)
 8020464:	681e      	ldr	r6, [r3, #0]
 8020466:	69b3      	ldr	r3, [r6, #24]
 8020468:	4607      	mov	r7, r0
 802046a:	b913      	cbnz	r3, 8020472 <__sfp+0x12>
 802046c:	4630      	mov	r0, r6
 802046e:	f7ff ffc7 	bl	8020400 <__sinit>
 8020472:	3648      	adds	r6, #72	; 0x48
 8020474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020478:	3b01      	subs	r3, #1
 802047a:	d503      	bpl.n	8020484 <__sfp+0x24>
 802047c:	6833      	ldr	r3, [r6, #0]
 802047e:	b133      	cbz	r3, 802048e <__sfp+0x2e>
 8020480:	6836      	ldr	r6, [r6, #0]
 8020482:	e7f7      	b.n	8020474 <__sfp+0x14>
 8020484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020488:	b16d      	cbz	r5, 80204a6 <__sfp+0x46>
 802048a:	3468      	adds	r4, #104	; 0x68
 802048c:	e7f4      	b.n	8020478 <__sfp+0x18>
 802048e:	2104      	movs	r1, #4
 8020490:	4638      	mov	r0, r7
 8020492:	f7ff ff9f 	bl	80203d4 <__sfmoreglue>
 8020496:	6030      	str	r0, [r6, #0]
 8020498:	2800      	cmp	r0, #0
 802049a:	d1f1      	bne.n	8020480 <__sfp+0x20>
 802049c:	230c      	movs	r3, #12
 802049e:	603b      	str	r3, [r7, #0]
 80204a0:	4604      	mov	r4, r0
 80204a2:	4620      	mov	r0, r4
 80204a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80204a6:	4b0b      	ldr	r3, [pc, #44]	; (80204d4 <__sfp+0x74>)
 80204a8:	6665      	str	r5, [r4, #100]	; 0x64
 80204aa:	e9c4 5500 	strd	r5, r5, [r4]
 80204ae:	60a5      	str	r5, [r4, #8]
 80204b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80204b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80204b8:	2208      	movs	r2, #8
 80204ba:	4629      	mov	r1, r5
 80204bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80204c0:	f7ff f9bd 	bl	801f83e <memset>
 80204c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80204c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80204cc:	e7e9      	b.n	80204a2 <__sfp+0x42>
 80204ce:	bf00      	nop
 80204d0:	08024794 	.word	0x08024794
 80204d4:	ffff0001 	.word	0xffff0001

080204d8 <_fwalk_reent>:
 80204d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204dc:	4680      	mov	r8, r0
 80204de:	4689      	mov	r9, r1
 80204e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80204e4:	2600      	movs	r6, #0
 80204e6:	b914      	cbnz	r4, 80204ee <_fwalk_reent+0x16>
 80204e8:	4630      	mov	r0, r6
 80204ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80204ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80204f2:	3f01      	subs	r7, #1
 80204f4:	d501      	bpl.n	80204fa <_fwalk_reent+0x22>
 80204f6:	6824      	ldr	r4, [r4, #0]
 80204f8:	e7f5      	b.n	80204e6 <_fwalk_reent+0xe>
 80204fa:	89ab      	ldrh	r3, [r5, #12]
 80204fc:	2b01      	cmp	r3, #1
 80204fe:	d907      	bls.n	8020510 <_fwalk_reent+0x38>
 8020500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020504:	3301      	adds	r3, #1
 8020506:	d003      	beq.n	8020510 <_fwalk_reent+0x38>
 8020508:	4629      	mov	r1, r5
 802050a:	4640      	mov	r0, r8
 802050c:	47c8      	blx	r9
 802050e:	4306      	orrs	r6, r0
 8020510:	3568      	adds	r5, #104	; 0x68
 8020512:	e7ee      	b.n	80204f2 <_fwalk_reent+0x1a>

08020514 <__swhatbuf_r>:
 8020514:	b570      	push	{r4, r5, r6, lr}
 8020516:	460e      	mov	r6, r1
 8020518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802051c:	2900      	cmp	r1, #0
 802051e:	b096      	sub	sp, #88	; 0x58
 8020520:	4614      	mov	r4, r2
 8020522:	461d      	mov	r5, r3
 8020524:	da07      	bge.n	8020536 <__swhatbuf_r+0x22>
 8020526:	2300      	movs	r3, #0
 8020528:	602b      	str	r3, [r5, #0]
 802052a:	89b3      	ldrh	r3, [r6, #12]
 802052c:	061a      	lsls	r2, r3, #24
 802052e:	d410      	bmi.n	8020552 <__swhatbuf_r+0x3e>
 8020530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020534:	e00e      	b.n	8020554 <__swhatbuf_r+0x40>
 8020536:	466a      	mov	r2, sp
 8020538:	f000 f8b8 	bl	80206ac <_fstat_r>
 802053c:	2800      	cmp	r0, #0
 802053e:	dbf2      	blt.n	8020526 <__swhatbuf_r+0x12>
 8020540:	9a01      	ldr	r2, [sp, #4]
 8020542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802054a:	425a      	negs	r2, r3
 802054c:	415a      	adcs	r2, r3
 802054e:	602a      	str	r2, [r5, #0]
 8020550:	e7ee      	b.n	8020530 <__swhatbuf_r+0x1c>
 8020552:	2340      	movs	r3, #64	; 0x40
 8020554:	2000      	movs	r0, #0
 8020556:	6023      	str	r3, [r4, #0]
 8020558:	b016      	add	sp, #88	; 0x58
 802055a:	bd70      	pop	{r4, r5, r6, pc}

0802055c <__smakebuf_r>:
 802055c:	898b      	ldrh	r3, [r1, #12]
 802055e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020560:	079d      	lsls	r5, r3, #30
 8020562:	4606      	mov	r6, r0
 8020564:	460c      	mov	r4, r1
 8020566:	d507      	bpl.n	8020578 <__smakebuf_r+0x1c>
 8020568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802056c:	6023      	str	r3, [r4, #0]
 802056e:	6123      	str	r3, [r4, #16]
 8020570:	2301      	movs	r3, #1
 8020572:	6163      	str	r3, [r4, #20]
 8020574:	b002      	add	sp, #8
 8020576:	bd70      	pop	{r4, r5, r6, pc}
 8020578:	ab01      	add	r3, sp, #4
 802057a:	466a      	mov	r2, sp
 802057c:	f7ff ffca 	bl	8020514 <__swhatbuf_r>
 8020580:	9900      	ldr	r1, [sp, #0]
 8020582:	4605      	mov	r5, r0
 8020584:	4630      	mov	r0, r6
 8020586:	f7ff f9b1 	bl	801f8ec <_malloc_r>
 802058a:	b948      	cbnz	r0, 80205a0 <__smakebuf_r+0x44>
 802058c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020590:	059a      	lsls	r2, r3, #22
 8020592:	d4ef      	bmi.n	8020574 <__smakebuf_r+0x18>
 8020594:	f023 0303 	bic.w	r3, r3, #3
 8020598:	f043 0302 	orr.w	r3, r3, #2
 802059c:	81a3      	strh	r3, [r4, #12]
 802059e:	e7e3      	b.n	8020568 <__smakebuf_r+0xc>
 80205a0:	4b0d      	ldr	r3, [pc, #52]	; (80205d8 <__smakebuf_r+0x7c>)
 80205a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80205a4:	89a3      	ldrh	r3, [r4, #12]
 80205a6:	6020      	str	r0, [r4, #0]
 80205a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205ac:	81a3      	strh	r3, [r4, #12]
 80205ae:	9b00      	ldr	r3, [sp, #0]
 80205b0:	6163      	str	r3, [r4, #20]
 80205b2:	9b01      	ldr	r3, [sp, #4]
 80205b4:	6120      	str	r0, [r4, #16]
 80205b6:	b15b      	cbz	r3, 80205d0 <__smakebuf_r+0x74>
 80205b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80205bc:	4630      	mov	r0, r6
 80205be:	f000 f887 	bl	80206d0 <_isatty_r>
 80205c2:	b128      	cbz	r0, 80205d0 <__smakebuf_r+0x74>
 80205c4:	89a3      	ldrh	r3, [r4, #12]
 80205c6:	f023 0303 	bic.w	r3, r3, #3
 80205ca:	f043 0301 	orr.w	r3, r3, #1
 80205ce:	81a3      	strh	r3, [r4, #12]
 80205d0:	89a3      	ldrh	r3, [r4, #12]
 80205d2:	431d      	orrs	r5, r3
 80205d4:	81a5      	strh	r5, [r4, #12]
 80205d6:	e7cd      	b.n	8020574 <__smakebuf_r+0x18>
 80205d8:	080203c9 	.word	0x080203c9

080205dc <__malloc_lock>:
 80205dc:	4770      	bx	lr

080205de <__malloc_unlock>:
 80205de:	4770      	bx	lr

080205e0 <__sread>:
 80205e0:	b510      	push	{r4, lr}
 80205e2:	460c      	mov	r4, r1
 80205e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205e8:	f000 f894 	bl	8020714 <_read_r>
 80205ec:	2800      	cmp	r0, #0
 80205ee:	bfab      	itete	ge
 80205f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80205f2:	89a3      	ldrhlt	r3, [r4, #12]
 80205f4:	181b      	addge	r3, r3, r0
 80205f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80205fa:	bfac      	ite	ge
 80205fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80205fe:	81a3      	strhlt	r3, [r4, #12]
 8020600:	bd10      	pop	{r4, pc}

08020602 <__swrite>:
 8020602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020606:	461f      	mov	r7, r3
 8020608:	898b      	ldrh	r3, [r1, #12]
 802060a:	05db      	lsls	r3, r3, #23
 802060c:	4605      	mov	r5, r0
 802060e:	460c      	mov	r4, r1
 8020610:	4616      	mov	r6, r2
 8020612:	d505      	bpl.n	8020620 <__swrite+0x1e>
 8020614:	2302      	movs	r3, #2
 8020616:	2200      	movs	r2, #0
 8020618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802061c:	f000 f868 	bl	80206f0 <_lseek_r>
 8020620:	89a3      	ldrh	r3, [r4, #12]
 8020622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802062a:	81a3      	strh	r3, [r4, #12]
 802062c:	4632      	mov	r2, r6
 802062e:	463b      	mov	r3, r7
 8020630:	4628      	mov	r0, r5
 8020632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020636:	f000 b817 	b.w	8020668 <_write_r>

0802063a <__sseek>:
 802063a:	b510      	push	{r4, lr}
 802063c:	460c      	mov	r4, r1
 802063e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020642:	f000 f855 	bl	80206f0 <_lseek_r>
 8020646:	1c43      	adds	r3, r0, #1
 8020648:	89a3      	ldrh	r3, [r4, #12]
 802064a:	bf15      	itete	ne
 802064c:	6560      	strne	r0, [r4, #84]	; 0x54
 802064e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020656:	81a3      	strheq	r3, [r4, #12]
 8020658:	bf18      	it	ne
 802065a:	81a3      	strhne	r3, [r4, #12]
 802065c:	bd10      	pop	{r4, pc}

0802065e <__sclose>:
 802065e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020662:	f000 b813 	b.w	802068c <_close_r>
	...

08020668 <_write_r>:
 8020668:	b538      	push	{r3, r4, r5, lr}
 802066a:	4c07      	ldr	r4, [pc, #28]	; (8020688 <_write_r+0x20>)
 802066c:	4605      	mov	r5, r0
 802066e:	4608      	mov	r0, r1
 8020670:	4611      	mov	r1, r2
 8020672:	2200      	movs	r2, #0
 8020674:	6022      	str	r2, [r4, #0]
 8020676:	461a      	mov	r2, r3
 8020678:	f7e0 fdef 	bl	800125a <_write>
 802067c:	1c43      	adds	r3, r0, #1
 802067e:	d102      	bne.n	8020686 <_write_r+0x1e>
 8020680:	6823      	ldr	r3, [r4, #0]
 8020682:	b103      	cbz	r3, 8020686 <_write_r+0x1e>
 8020684:	602b      	str	r3, [r5, #0]
 8020686:	bd38      	pop	{r3, r4, r5, pc}
 8020688:	2000a32c 	.word	0x2000a32c

0802068c <_close_r>:
 802068c:	b538      	push	{r3, r4, r5, lr}
 802068e:	4c06      	ldr	r4, [pc, #24]	; (80206a8 <_close_r+0x1c>)
 8020690:	2300      	movs	r3, #0
 8020692:	4605      	mov	r5, r0
 8020694:	4608      	mov	r0, r1
 8020696:	6023      	str	r3, [r4, #0]
 8020698:	f7e0 fdfb 	bl	8001292 <_close>
 802069c:	1c43      	adds	r3, r0, #1
 802069e:	d102      	bne.n	80206a6 <_close_r+0x1a>
 80206a0:	6823      	ldr	r3, [r4, #0]
 80206a2:	b103      	cbz	r3, 80206a6 <_close_r+0x1a>
 80206a4:	602b      	str	r3, [r5, #0]
 80206a6:	bd38      	pop	{r3, r4, r5, pc}
 80206a8:	2000a32c 	.word	0x2000a32c

080206ac <_fstat_r>:
 80206ac:	b538      	push	{r3, r4, r5, lr}
 80206ae:	4c07      	ldr	r4, [pc, #28]	; (80206cc <_fstat_r+0x20>)
 80206b0:	2300      	movs	r3, #0
 80206b2:	4605      	mov	r5, r0
 80206b4:	4608      	mov	r0, r1
 80206b6:	4611      	mov	r1, r2
 80206b8:	6023      	str	r3, [r4, #0]
 80206ba:	f7e0 fdf6 	bl	80012aa <_fstat>
 80206be:	1c43      	adds	r3, r0, #1
 80206c0:	d102      	bne.n	80206c8 <_fstat_r+0x1c>
 80206c2:	6823      	ldr	r3, [r4, #0]
 80206c4:	b103      	cbz	r3, 80206c8 <_fstat_r+0x1c>
 80206c6:	602b      	str	r3, [r5, #0]
 80206c8:	bd38      	pop	{r3, r4, r5, pc}
 80206ca:	bf00      	nop
 80206cc:	2000a32c 	.word	0x2000a32c

080206d0 <_isatty_r>:
 80206d0:	b538      	push	{r3, r4, r5, lr}
 80206d2:	4c06      	ldr	r4, [pc, #24]	; (80206ec <_isatty_r+0x1c>)
 80206d4:	2300      	movs	r3, #0
 80206d6:	4605      	mov	r5, r0
 80206d8:	4608      	mov	r0, r1
 80206da:	6023      	str	r3, [r4, #0]
 80206dc:	f7e0 fdf5 	bl	80012ca <_isatty>
 80206e0:	1c43      	adds	r3, r0, #1
 80206e2:	d102      	bne.n	80206ea <_isatty_r+0x1a>
 80206e4:	6823      	ldr	r3, [r4, #0]
 80206e6:	b103      	cbz	r3, 80206ea <_isatty_r+0x1a>
 80206e8:	602b      	str	r3, [r5, #0]
 80206ea:	bd38      	pop	{r3, r4, r5, pc}
 80206ec:	2000a32c 	.word	0x2000a32c

080206f0 <_lseek_r>:
 80206f0:	b538      	push	{r3, r4, r5, lr}
 80206f2:	4c07      	ldr	r4, [pc, #28]	; (8020710 <_lseek_r+0x20>)
 80206f4:	4605      	mov	r5, r0
 80206f6:	4608      	mov	r0, r1
 80206f8:	4611      	mov	r1, r2
 80206fa:	2200      	movs	r2, #0
 80206fc:	6022      	str	r2, [r4, #0]
 80206fe:	461a      	mov	r2, r3
 8020700:	f7e0 fdee 	bl	80012e0 <_lseek>
 8020704:	1c43      	adds	r3, r0, #1
 8020706:	d102      	bne.n	802070e <_lseek_r+0x1e>
 8020708:	6823      	ldr	r3, [r4, #0]
 802070a:	b103      	cbz	r3, 802070e <_lseek_r+0x1e>
 802070c:	602b      	str	r3, [r5, #0]
 802070e:	bd38      	pop	{r3, r4, r5, pc}
 8020710:	2000a32c 	.word	0x2000a32c

08020714 <_read_r>:
 8020714:	b538      	push	{r3, r4, r5, lr}
 8020716:	4c07      	ldr	r4, [pc, #28]	; (8020734 <_read_r+0x20>)
 8020718:	4605      	mov	r5, r0
 802071a:	4608      	mov	r0, r1
 802071c:	4611      	mov	r1, r2
 802071e:	2200      	movs	r2, #0
 8020720:	6022      	str	r2, [r4, #0]
 8020722:	461a      	mov	r2, r3
 8020724:	f7e0 fd7c 	bl	8001220 <_read>
 8020728:	1c43      	adds	r3, r0, #1
 802072a:	d102      	bne.n	8020732 <_read_r+0x1e>
 802072c:	6823      	ldr	r3, [r4, #0]
 802072e:	b103      	cbz	r3, 8020732 <_read_r+0x1e>
 8020730:	602b      	str	r3, [r5, #0]
 8020732:	bd38      	pop	{r3, r4, r5, pc}
 8020734:	2000a32c 	.word	0x2000a32c

08020738 <_init>:
 8020738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802073a:	bf00      	nop
 802073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802073e:	bc08      	pop	{r3}
 8020740:	469e      	mov	lr, r3
 8020742:	4770      	bx	lr

08020744 <_fini>:
 8020744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020746:	bf00      	nop
 8020748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802074a:	bc08      	pop	{r3}
 802074c:	469e      	mov	lr, r3
 802074e:	4770      	bx	lr
